; ModuleID = '/home/bai/MyProject/EHTestDir/Kern3.17.2/ehci_hcd/ehci-hcd_main.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32, %struct.task_struct*)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, %struct.task_struct*, i64, i64, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, %struct.hlist_head, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, i32, [4 x %struct.vm_area_struct*], %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, i64, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, %struct.sysv_shm, i64, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i32, [32 x %struct.latency_record], i64, i64, i32, %struct.ftrace_ret_stack*, i64, %struct.atomic_t, %struct.atomic_t, i64, i64 }
%struct.atomic_t = type { i32 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.load_weight = type { i64, i32 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i32, i32, i64, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity*, %struct.sched_rt_entity*, %struct.rt_rq*, %struct.rt_rq* }
%struct.rt_rq = type opaque
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%union.ktime = type { i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %union.ktime, i64 ()*, %union.ktime, %union.ktime }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, i32, %union.ktime, i32, i32, i64, i64, i64, %union.ktime, [4 x %struct.hrtimer_clock_base] }
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { %union.anon.11 }
%union.anon.11 = type { i32 }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.cpumask = type { [4 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %union.anon, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, void (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, i32 (%struct.vm_area_struct*, %struct.nodemask_t*, %struct.nodemask_t*, i64)*, i32 (%struct.vm_area_struct*, i64, i64, i64)* }
%struct.vm_fault = type { i32, i64, i8*, %struct.page*, i64, %struct.pte_t* }
%struct.page = type { i64, %union.anon.0, %struct.anon.1, %union.anon.7, %union.anon.9, [8 x i8] }
%union.anon.0 = type { %struct.address_space* }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.list_head, %struct.mutex, i64, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, i8* }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.39, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.40, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.42, i32, i32, %struct.hlist_head, i8* }
%struct.kuid_t = type { i32 }
%struct.kgid_t = type { i32 }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [48 x i8] }
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.48, %struct.list_head, %struct.hlist_node }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.44, i8* }
%union.anon.44 = type { i64 }
%struct.lockref = type { %union.anon.46 }
%union.anon.46 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [40 x i8] }
%struct.vfsmount = type opaque
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, [32 x i8], %struct.list_lru, [48 x i8], %struct.list_lru, %struct.callback_head, [32 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, i32, i64*, %struct.list_head, %struct.list_head, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.10 }
%union.anon.10 = type { %struct.raw_spinlock }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon.12, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%union.anon.12 = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, i8* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, %struct.optimistic_spin_queue }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, i8*, %struct.mutex, i32, %struct.list_head, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.43, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.43 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)*, i32 (%struct.seq_file*, %struct.file*)* }
%struct.kiocb = type opaque
%struct.iovec = type opaque
%struct.iov_iter = type opaque
%struct.dir_context = type { i32 (i8*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type opaque
%struct.file_lock = type { %struct.file_lock*, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.49 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.49 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.pipe_inode_info = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.arch_spinlock }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.14, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.15, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i64, %union.anon.16, %union.anon.18, %union.anon.19 }
%union.anon.14 = type { %struct.rb_node }
%struct.rw_semaphore = type { i64, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.key_user = type opaque
%union.anon.15 = type { i64 }
%union.anon.16 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.18 = type { %struct.list_head }
%union.anon.19 = type { %union.anon.20 }
%union.anon.20 = type { [2 x i8*] }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x %struct.kgid_t], [0 x %struct.kgid_t*] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_symbol = type { i64, i8* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon.51 }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%union.anon.51 = type { i8* }
%struct.exception_table_entry = type { i32, i32 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type opaque
%struct.ftrace_event_call = type opaque
%struct.module_ref = type { i64, i64 }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, i32)*, i64 (%struct.super_block*, i64, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.kqid = type { %union.anon.41, i32 }
%union.anon.41 = type { %struct.kuid_t }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, %struct.fs_quota_statv*)*, i32 (%struct.super_block*, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.fs_quota_statv = type { i8, i8, i16, i32, %struct.fs_qfilestatv, %struct.fs_qfilestatv, %struct.fs_qfilestatv, i32, i32, i32, i16, i16, [8 x i64] }
%struct.fs_qfilestatv = type { i64, i64, i32, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { [3 x %struct.percpu_counter], %struct.__wait_queue_head, i32, %struct.__wait_queue_head }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.shrink_control = type { i32, i64, %struct.nodemask_t, i32 }
%struct.nodemask_t = type { [1 x i64] }
%struct.workqueue_struct = type opaque
%struct.list_lru = type { %struct.list_lru_node*, %struct.nodemask_t }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_head, i64, [32 x i8] }
%union.anon.48 = type { %struct.list_head }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.timespec = type { i64, i64 }
%struct.kstat = type { i64, i32, i16, i32, %struct.kuid_t, %struct.kgid_t, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.39 = type { i32 }
%union.anon.40 = type { %struct.callback_head }
%union.anon.42 = type { %struct.pipe_inode_info* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i32, i32, %union.anon.37, %struct.list_head, [64 x i8*], [3 x [1 x i64]] }
%union.anon.37 = type { %struct.anon.38 }
%struct.anon.38 = type { %struct.radix_tree_node*, i8* }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iov_iter*, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.swap_info_struct = type opaque
%struct.anon.1 = type { %union.anon.2, %union.anon.3 }
%union.anon.2 = type { i64 }
%union.anon.3 = type { i64 }
%union.anon.7 = type { %struct.list_head }
%union.anon.9 = type { i64 }
%struct.pte_t = type { i64 }
%struct.mempolicy = type opaque
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type {}
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.cputime = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32, i8 }
%struct.desc_struct = type <{ %union.anon.21 }>
%union.anon.21 = type { %struct.anon.22 }
%struct.anon.22 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i32, %union.thread_xstate* }
%union.thread_xstate = type { %struct.i387_fxsave_struct, [576 x i8] }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.24, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.27 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i64, i64 }
%union.anon.27 = type { [12 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.list_head, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, %struct.autogroup*, i64, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i16, i16, %struct.mutex }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.raw_spinlock }
%struct.tty_struct = type opaque
%struct.autogroup = type opaque
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type opaque
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.29 }
%union.anon.29 = type { %struct.anon.33, [80 x i8] }
%struct.anon.33 = type { i32, i32, i32, i64, i64 }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type { %struct.spinlock, i32, i64, i64, i64, i32, i32, i64, i64, i32 }
%struct.latency_record = type { [12 x i64], i32, i64, i64 }
%struct.ftrace_ret_stack = type opaque
%struct.usb_hcd = type { %struct.usb_bus, %struct.kref, i8*, i32, [24 x i8], %struct.timer_list, %struct.urb*, %struct.work_struct, %struct.hc_driver*, %struct.usb_phy*, i64, i8, i8, i32, i8*, i64, i64, i32, %struct.giveback_urb_bh, %struct.giveback_urb_bh, %struct.mutex*, %struct.usb_hcd*, %struct.usb_hcd*, [4 x %struct.dma_pool*], i32, [0 x i64] }
%struct.usb_bus = type { %struct.device*, i32, i8*, i8, i8, i8, i8, i32, i32, %struct.usb_devmap, %struct.usb_device*, %struct.usb_bus*, %struct.list_head, %struct.mutex, i32, i32, i32, i32, %struct.mon_bus*, i32 }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, i32, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.acpi_dev_node, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64 }
%struct.driver_private = type opaque
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.atomic_t, %struct.atomic_t, i8, i8, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%struct.pm_subsys_data = type { %struct.spinlock, i32 }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, %struct.dma_attrs*)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.dma_attrs = type { [1 x i64] }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_node = type opaque
%struct.acpi_dev_node = type { %struct.acpi_device* }
%struct.acpi_device = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.iommu_group = type opaque
%struct.usb_devmap = type { [2 x i64] }
%struct.usb_device = type { i32, [16 x i8], i32, i32, i32, %struct.usb_tt*, i32, [2 x i32], %struct.usb_device*, %struct.usb_bus*, %struct.usb_host_endpoint, %struct.device, %struct.usb_device_descriptor, %struct.usb_host_bos*, %struct.usb_host_config*, %struct.usb_host_config*, [16 x %struct.usb_host_endpoint*], [16 x %struct.usb_host_endpoint*], i8**, i16, i8, i8, i8, i8, i32, i8*, i8*, i8*, %struct.list_head, i32, i32, %struct.atomic_t, i64, i64, i8, %struct.wusb_dev*, i32, i32, %struct.usb2_lpm_parameters, %struct.usb3_lpm_parameters, %struct.usb3_lpm_parameters, i32 }
%struct.usb_tt = type { %struct.usb_device*, i32, i32, i8*, %struct.spinlock, %struct.list_head, %struct.work_struct }
%struct.usb_host_endpoint = type { %struct.usb_endpoint_descriptor, %struct.usb_ss_ep_comp_descriptor, %struct.list_head, i8*, %struct.ep_device*, i8*, i32, i32, i32 }
%struct.usb_endpoint_descriptor = type <{ i8, i8, i8, i8, i16, i8, i8, i8 }>
%struct.usb_ss_ep_comp_descriptor = type <{ i8, i8, i8, i8, i16 }>
%struct.ep_device = type opaque
%struct.usb_device_descriptor = type <{ i8, i8, i16, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8 }>
%struct.usb_host_bos = type { %struct.usb_bos_descriptor*, %struct.usb_ext_cap_descriptor*, %struct.usb_ss_cap_descriptor*, %struct.usb_ss_container_id_descriptor* }
%struct.usb_bos_descriptor = type <{ i8, i8, i16, i8 }>
%struct.usb_ext_cap_descriptor = type <{ i8, i8, i8, i32 }>
%struct.usb_ss_cap_descriptor = type <{ i8, i8, i8, i8, i16, i8, i8, i16 }>
%struct.usb_ss_container_id_descriptor = type <{ i8, i8, i8, i8, [16 x i8] }>
%struct.usb_host_config = type { %struct.usb_config_descriptor, i8*, [16 x %struct.usb_interface_assoc_descriptor*], [32 x %struct.usb_interface*], [32 x %struct.usb_interface_cache*], i8*, i32 }
%struct.usb_config_descriptor = type <{ i8, i8, i16, i8, i8, i8, i8, i8 }>
%struct.usb_interface_assoc_descriptor = type <{ i8, i8, i8, i8, i8, i8, i8, i8 }>
%struct.usb_interface = type { %struct.usb_host_interface*, %struct.usb_host_interface*, i32, %struct.usb_interface_assoc_descriptor*, i32, i32, i8, %struct.device, %struct.device*, %struct.atomic_t, %struct.work_struct }
%struct.usb_host_interface = type { %struct.usb_interface_descriptor, i32, i8*, %struct.usb_host_endpoint*, i8* }
%struct.usb_interface_descriptor = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i8 }>
%struct.usb_interface_cache = type { i32, %struct.kref, [0 x %struct.usb_host_interface] }
%struct.wusb_dev = type opaque
%struct.usb2_lpm_parameters = type { i32, i32 }
%struct.usb3_lpm_parameters = type { i32, i32, i32, i32 }
%struct.mon_bus = type opaque
%struct.urb = type { %struct.kref, i8*, %struct.atomic_t, %struct.atomic_t, i32, %struct.list_head, %struct.list_head, %struct.usb_anchor*, %struct.usb_device*, %struct.usb_host_endpoint*, i32, i32, i32, i32, i8*, i64, %struct.scatterlist*, i32, i32, i32, i32, i8*, i64, i32, i32, i32, i32, i8*, void (%struct.urb*)*, [0 x %struct.usb_iso_packet_descriptor] }
%struct.usb_anchor = type { %struct.list_head, %struct.__wait_queue_head, %struct.spinlock, %struct.atomic_t, i8 }
%struct.usb_iso_packet_descriptor = type { i32, i32, i32, i32 }
%struct.hc_driver = type { i8*, i8*, i64, i32 (%struct.usb_hcd*)*, i32, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*, i1)*, i32 (%struct.usb_hcd*, i1)*, void (%struct.usb_hcd*)*, void (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*, %struct.urb*, i32)*, i32 (%struct.usb_hcd*, %struct.urb*, i32)*, i32 (%struct.usb_hcd*, %struct.urb*, i32)*, void (%struct.usb_hcd*, %struct.urb*)*, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)*, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, i8*)*, {}*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*, i32)*, void (%struct.usb_hcd*, i32)*, i32 (%struct.usb_hcd*, i32)*, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, void (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint**, i32, i32, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint**, i32, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, void (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_tt*, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)*, i32 (%struct.usb_hcd*, i32)* }
%struct.usb_phy = type { %struct.device*, i8*, i32, i32, i32, i32, %struct.usb_otg*, %struct.device*, %struct.usb_phy_io_ops*, i8*, %struct.atomic_notifier_head, i16, i16, %struct.list_head, i32 (%struct.usb_phy*)*, void (%struct.usb_phy*)*, i32 (%struct.usb_phy*, i32)*, i32 (%struct.usb_phy*, i32)*, i32 (%struct.usb_phy*, i32)*, i32 (%struct.usb_phy*, i1)*, i32 (%struct.usb_phy*, i32)*, i32 (%struct.usb_phy*, i32)* }
%struct.usb_otg = type { i8, %struct.usb_phy*, %struct.usb_bus*, %struct.usb_gadget*, i32 (%struct.usb_otg*, %struct.usb_bus*)*, i32 (%struct.usb_otg*, %struct.usb_gadget*)*, i32 (%struct.usb_otg*, i1)*, i32 (%struct.usb_otg*)*, i32 (%struct.usb_otg*)* }
%struct.usb_gadget = type opaque
%struct.usb_phy_io_ops = type { i32 (%struct.usb_phy*, i32)*, i32 (%struct.usb_phy*, i32, i32)* }
%struct.atomic_notifier_head = type { %struct.spinlock, %struct.notifier_block* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.giveback_urb_bh = type { i8, %struct.spinlock, %struct.list_head, %struct.tasklet_struct, %struct.usb_host_endpoint* }
%struct.tasklet_struct = type { %struct.tasklet_struct*, i64, %struct.atomic_t, void (i64)*, i64 }
%struct.dma_pool = type opaque
%struct.ehci_hcd = type { i32, i32, [11 x %union.ktime], %struct.hrtimer, i32, i32, i32, %struct.ehci_caps*, %struct.ehci_regs*, %struct.ehci_dbg_port*, i32, %struct.spinlock, i32, i8, %struct.ehci_qh*, %struct.ehci_qh*, %struct.ehci_qh*, %struct.list_head, %struct.list_head, i32, i32, i32, i32*, i64, %struct.list_head, i32, %union.ehci_shadow*, %struct.list_head, %struct.list_head, i32, i32, i32, i32, i32, i32, i32, i32, %struct.list_head, %struct.ehci_itd*, %struct.list_head, %struct.ehci_sitd*, [15 x i64], i64, i64, i64, i64, i64, i64, %struct.dma_pool*, %struct.dma_pool*, %struct.dma_pool*, %struct.dma_pool*, i32, i64, %union.ktime, i32, i8, i8, i32*, i8, i8, [64 x i8], [64 x i8], %struct.list_head, [0 x i64] }
%struct.ehci_caps = type { i32, i32, i32, [8 x i8] }
%struct.ehci_regs = type { i32, i32, i32, i32, i32, i32, i32, [2 x i32], i32, [6 x i32], i32, [0 x i32], [9 x i32], i32, [6 x i32], [1 x i32], [16 x i32], i32 }
%struct.ehci_dbg_port = type { i32, i32, i32, i32, i32 }
%struct.ehci_qh = type { %struct.ehci_qh_hw*, i64, %union.ehci_shadow, %struct.list_head, %struct.list_head, %struct.ehci_qtd*, %struct.list_head, %struct.ehci_per_sched, i32, i8, i8, i8, i8 }
%struct.ehci_qh_hw = type { i32, i32, i32, i32, i32, i32, i32, [5 x i32], [5 x i32], [28 x i8] }
%union.ehci_shadow = type { %struct.ehci_qh* }
%struct.ehci_qtd = type { i32, i32, i32, [5 x i32], [5 x i32], i64, %struct.list_head, %struct.urb*, i64 }
%struct.ehci_per_sched = type { %struct.usb_device*, %struct.usb_host_endpoint*, %struct.list_head, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8 }
%struct.ehci_itd = type { i32, [8 x i32], [7 x i32], [7 x i32], i64, %union.ehci_shadow, %struct.urb*, %struct.ehci_iso_stream*, %struct.list_head, i32, i32, [8 x i32], [8 x i8] }
%struct.ehci_iso_stream = type { %struct.ehci_qh_hw*, i8, i8, %struct.list_head, %struct.list_head, %struct.ehci_per_sched, i32, i32, i16, i16, i32, i32, i32, i32, i32 }
%struct.ehci_sitd = type { i32, i32, i32, i32, [2 x i32], i32, [2 x i32], i64, %union.ehci_shadow, %struct.urb*, %struct.ehci_iso_stream*, %struct.list_head, i32, i32 }
%struct.usb_hub_descriptor = type <{ i8, i8, i8, i16, i8, i8, %union.anon.52 }>
%union.anon.52 = type { %struct.anon.53 }
%struct.anon.53 = type <{ [4 x i8], [4 x i8] }>
%struct.ehci_driver_overrides = type { i64, i32 (%struct.usb_hcd*)* }
%struct.ehci_tt = type { [8 x i16], %struct.list_head, %struct.list_head, %struct.usb_tt*, i32 }
%struct.ehci_fstn = type { i32, i32, i64, %union.ehci_shadow, [8 x i8] }
%struct.ehci_iso_sched = type { %struct.list_head, i32, i32, [0 x %struct.ehci_iso_packet] }
%struct.ehci_iso_packet = type { i64, i32, i8, i32 }
%struct.__raw_tickets = type { i16, i16 }

@smp_ops = external global %struct.smp_ops
@__param_str_log2_irq_thresh = internal constant [16 x i8] c"log2_irq_thresh\00", align 16
@param_ops_int = external global %struct.kernel_param_ops
@log2_irq_thresh = internal global i32 0, align 4
@__param_log2_irq_thresh = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8]* @__param_str_log2_irq_thresh, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 292, i16 -1, %union.anon.51 { i8* bitcast (i32* @log2_irq_thresh to i8*) } }, section "__param", align 8
@__UNIQUE_ID_log2_irq_threshtype92 = internal constant [29 x i8] c"parmtype=log2_irq_thresh:int\00", section ".modinfo", align 1
@__UNIQUE_ID_log2_irq_thresh93 = internal constant [56 x i8] c"parm=log2_irq_thresh:log2 IRQ latency, 1-64 microframes\00", section ".modinfo", align 1
@__param_str_park = internal constant [5 x i8] c"park\00", align 1
@param_ops_uint = external global %struct.kernel_param_ops
@park = internal global i32 0, align 4
@__param_park = internal constant %struct.kernel_param { i8* getelementptr inbounds ([5 x i8]* @__param_str_park, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_uint, i16 292, i16 -1, %union.anon.51 { i8* bitcast (i32* @park to i8*) } }, section "__param", align 8
@__UNIQUE_ID_parktype97 = internal constant [19 x i8] c"parmtype=park:uint\00", section ".modinfo", align 1
@__UNIQUE_ID_park98 = internal constant [55 x i8] c"parm=park:park setting; 1-3 back-to-back async packets\00", section ".modinfo", align 1
@__param_str_ignore_oc = internal constant [10 x i8] c"ignore_oc\00", align 1
@param_ops_bool = external global %struct.kernel_param_ops
@ignore_oc = internal global i8 0, align 1
@__param_ignore_oc = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8]* @__param_str_ignore_oc, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_bool, i16 292, i16 -1, %union.anon.51 { i8* @ignore_oc } }, section "__param", align 8
@__UNIQUE_ID_ignore_octype102 = internal constant [24 x i8] c"parmtype=ignore_oc:bool\00", section ".modinfo", align 1
@__UNIQUE_ID_ignore_oc103 = internal constant [61 x i8] c"parm=ignore_oc:ignore bogus hardware overcurrent indications\00", section ".modinfo", align 1
@__crc_ehci_handshake = extern_weak global i8*
@__kcrctab_ehci_handshake = internal constant i64 ptrtoint (i8** @__crc_ehci_handshake to i64), section "___kcrctab_gpl+ehci_handshake", align 8
@__kstrtab_ehci_handshake = internal constant [15 x i8] c"ehci_handshake\00", section "__ksymtab_strings", align 1
@__ksymtab_ehci_handshake = constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.ehci_hcd*, i8*, i32, i32, i32)* @ehci_handshake to i64), i8* getelementptr inbounds ([15 x i8]* @__kstrtab_ehci_handshake, i32 0, i32 0) }, section "___ksymtab_gpl+ehci_handshake", align 8
@jiffies = external global i64
@.str = private unnamed_addr constant [25 x i8] c"port %d resume error %d\0A\00", align 1
@.str1 = private unnamed_addr constant [24 x i8] c"port %d reset error %d\0A\00", align 1
@.str2 = private unnamed_addr constant [10 x i8] c"GetStatus\00", align 1
@__crc_ehci_hub_control = extern_weak global i8*
@__kcrctab_ehci_hub_control = internal constant i64 ptrtoint (i8** @__crc_ehci_hub_control to i64), section "___kcrctab_gpl+ehci_hub_control", align 8
@__kstrtab_ehci_hub_control = internal constant [17 x i8] c"ehci_hub_control\00", section "__ksymtab_strings", align 1
@__ksymtab_ehci_hub_control = constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.usb_hcd*, i16, i16, i16, i8*, i16)* @ehci_hub_control to i64), i8* getelementptr inbounds ([17 x i8]* @__kstrtab_ehci_hub_control, i32 0, i32 0) }, section "___ksymtab_gpl+ehci_hub_control", align 8
@.str3 = private unnamed_addr constant [6 x i8] c"reset\00", align 1
@__crc_ehci_setup = extern_weak global i8*
@__kcrctab_ehci_setup = internal constant i64 ptrtoint (i8** @__crc_ehci_setup to i64), section "___kcrctab_gpl+ehci_setup", align 8
@__kstrtab_ehci_setup = internal constant [11 x i8] c"ehci_setup\00", section "__ksymtab_strings", align 1
@__ksymtab_ehci_setup = constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.usb_hcd*)* @ehci_setup to i64), i8* getelementptr inbounds ([11 x i8]* @__kstrtab_ehci_setup, i32 0, i32 0) }, section "___ksymtab_gpl+ehci_setup", align 8
@__crc_ehci_suspend = extern_weak global i8*
@__kcrctab_ehci_suspend = internal constant i64 ptrtoint (i8** @__crc_ehci_suspend to i64), section "___kcrctab_gpl+ehci_suspend", align 8
@__kstrtab_ehci_suspend = internal constant [13 x i8] c"ehci_suspend\00", section "__ksymtab_strings", align 1
@__ksymtab_ehci_suspend = constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.usb_hcd*, i1)* @ehci_suspend to i64), i8* getelementptr inbounds ([13 x i8]* @__kstrtab_ehci_suspend, i32 0, i32 0) }, section "___ksymtab_gpl+ehci_suspend", align 8
@__crc_ehci_resume = extern_weak global i8*
@__kcrctab_ehci_resume = internal constant i64 ptrtoint (i8** @__crc_ehci_resume to i64), section "___kcrctab_gpl+ehci_resume", align 8
@__kstrtab_ehci_resume = internal constant [12 x i8] c"ehci_resume\00", section "__ksymtab_strings", align 1
@__ksymtab_ehci_resume = constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.usb_hcd*, i1)* @ehci_resume to i64), i8* getelementptr inbounds ([12 x i8]* @__kstrtab_ehci_resume, i32 0, i32 0) }, section "___ksymtab_gpl+ehci_resume", align 8
@__crc_ehci_init_driver = extern_weak global i8*
@__kcrctab_ehci_init_driver = internal constant i64 ptrtoint (i8** @__crc_ehci_init_driver to i64), section "___kcrctab_gpl+ehci_init_driver", align 8
@__kstrtab_ehci_init_driver = internal constant [17 x i8] c"ehci_init_driver\00", section "__ksymtab_strings", align 1
@__ksymtab_ehci_init_driver = constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.hc_driver*, %struct.ehci_driver_overrides*)* @ehci_init_driver to i64), i8* getelementptr inbounds ([17 x i8]* @__kstrtab_ehci_init_driver, i32 0, i32 0) }, section "___ksymtab_gpl+ehci_init_driver", align 8
@__UNIQUE_ID_description1245 = internal constant [61 x i8] c"description=USB 2.0 'Enhanced' Host Controller (EHCI) Driver\00", section ".modinfo", align 1
@__UNIQUE_ID_author1246 = internal constant [22 x i8] c"author=David Brownell\00", section ".modinfo", align 1
@__UNIQUE_ID_license1247 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@hcd_name = internal constant [9 x i8] c"ehci_hcd\00", align 1
@.str4 = private unnamed_addr constant [21 x i8] c"EHCI Host Controller\00", align 1
@ehci_hc_driver = internal constant { i8*, i8*, i64, i32 (%struct.usb_hcd*)*, i32, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*, i1)*, i32 (%struct.usb_hcd*, i1)*, void (%struct.usb_hcd*)*, void (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*, %struct.urb*, i32)*, i32 (%struct.usb_hcd*, %struct.urb*, i32)*, i32 (%struct.usb_hcd*, %struct.urb*, i32)*, void (%struct.usb_hcd*, %struct.urb*)*, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)*, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, i8*)*, i32 (%struct.usb_hcd*, i16, i16, i16, i8*, i16)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*, i32)*, void (%struct.usb_hcd*, i32)*, i32 (%struct.usb_hcd*, i32)*, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, void (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint**, i32, i32, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint**, i32, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, void (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_tt*, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)*, i32 (%struct.usb_hcd*, i32)* } { i8* getelementptr inbounds ([9 x i8]* @hcd_name, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8]* @.str4, i32 0, i32 0), i64 872, i32 (%struct.usb_hcd*)* @ehci_irq, i32 289, i32 (%struct.usb_hcd*)* @ehci_setup, i32 (%struct.usb_hcd*)* @ehci_run, i32 (%struct.usb_hcd*, i1)* null, i32 (%struct.usb_hcd*, i1)* null, void (%struct.usb_hcd*)* @ehci_stop, void (%struct.usb_hcd*)* @ehci_shutdown, i32 (%struct.usb_hcd*)* @ehci_get_frame, i32 (%struct.usb_hcd*, %struct.urb*, i32)* @ehci_urb_enqueue, i32 (%struct.usb_hcd*, %struct.urb*, i32)* @ehci_urb_dequeue, i32 (%struct.usb_hcd*, %struct.urb*, i32)* null, void (%struct.usb_hcd*, %struct.urb*)* null, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)* @ehci_endpoint_disable, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)* @ehci_endpoint_reset, i32 (%struct.usb_hcd*, i8*)* @ehci_hub_status_data, i32 (%struct.usb_hcd*, i16, i16, i16, i8*, i16)* @ehci_hub_control, i32 (%struct.usb_hcd*)* @ehci_bus_suspend, i32 (%struct.usb_hcd*)* @ehci_bus_resume, i32 (%struct.usb_hcd*, i32)* null, void (%struct.usb_hcd*, i32)* @ehci_relinquish_port, i32 (%struct.usb_hcd*, i32)* @ehci_port_handed_over, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)* @ehci_clear_tt_buffer_complete, i32 (%struct.usb_hcd*, %struct.usb_device*)* null, void (%struct.usb_hcd*, %struct.usb_device*)* @ehci_remove_device, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint**, i32, i32, i32)* null, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint**, i32, i32)* null, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint*)* null, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint*)* null, i32 (%struct.usb_hcd*, %struct.usb_device*)* null, void (%struct.usb_hcd*, %struct.usb_device*)* null, i32 (%struct.usb_hcd*, %struct.usb_device*)* null, i32 (%struct.usb_hcd*, %struct.usb_device*)* null, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_tt*, i32)* null, i32 (%struct.usb_hcd*, %struct.usb_device*)* null, i32 (%struct.usb_hcd*, %struct.usb_device*)* null, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)* null, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)* null, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)* null, i32 (%struct.usb_hcd*, i32)* null }, align 8
@.str5 = private unnamed_addr constant [59 x i8] c"/home/bai/MyProject/EHTestDir/Kern3.17.2/ehci_hcd/ehci-q.c\00", align 1
@event_delays_ns = internal global [11 x i32] [i32 1000000, i32 1000000, i32 1000000, i32 1125000, i32 2000000, i32 5000000, i32 6000000, i32 10000000, i32 10000000, i32 15000000, i32 100000000], align 16
@.str6 = private unnamed_addr constant [32 x i8] c"can't reschedule qh %p, err %d\0A\00", align 1
@.str7 = private unnamed_addr constant [5 x i8] c"intr\00", align 1
@max_tt_usecs = internal constant [8 x i8] c"}}}}}}\1E\00", align 1
@.str8 = private unnamed_addr constant [55 x i8] c"Waited too long for the controller to stop, giving up\0A\00", align 1
@ehci_endpoint_reset.__warned = internal global i8 0, section ".data.unlikely", align 1
@.str9 = private unnamed_addr constant [66 x i8] c"/home/bai/MyProject/EHTestDir/Kern3.17.2/ehci_hcd/ehci-hcd_main.c\00", align 1
@.str10 = private unnamed_addr constant [32 x i8] c"clear_halt for a busy endpoint\0A\00", align 1
@.str11 = private unnamed_addr constant [26 x i8] c"qh %p (#%02x) state %d%s\0A\00", align 1
@.str12 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str13 = private unnamed_addr constant [10 x i8] c"(has tds)\00", align 1
@.str14 = private unnamed_addr constant [61 x i8] c"/home/bai/MyProject/EHTestDir/Kern3.17.2/ehci_hcd/ehci-mem.c\00", align 1
@.str15 = private unnamed_addr constant [4 x i8] c"iso\00", align 1
@.str16 = private unnamed_addr constant [63 x i8] c"/home/bai/MyProject/EHTestDir/Kern3.17.2/ehci_hcd/ehci-sched.c\00", align 1
@iso_stream_init.smask_out = internal constant [6 x i8] c"\01\03\07\0F\1F?", align 1
@.str17 = private unnamed_addr constant [20 x i8] c"include/linux/usb.h\00", align 1
@.str18 = private unnamed_addr constant [20 x i8] c"ehci_stop completed\00", align 1
@.str19 = private unnamed_addr constant [20 x i8] c"uframe_periodic_max\00", align 1
@dev_attr_uframe_periodic_max = internal global { { i8*, i16, [6 x i8] }, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* } { { i8*, i16, [6 x i8] } { i8* getelementptr inbounds ([20 x i8]* @.str19, i32 0, i32 0), i16 420, [6 x i8] undef }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_uframe_periodic_max, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_uframe_periodic_max }, align 8
@.str20 = private unnamed_addr constant [54 x i8] c"rejecting invalid request for uframe_periodic_max=%u\0A\00", align 1
@.str21 = private unnamed_addr constant [94 x i8] c"cannot decrease uframe_periodic_max becase periodic bandwidth is already allocated (%u > %u)\0A\00", align 1
@.str22 = private unnamed_addr constant [60 x i8] c"setting max periodic bandwidth to %u%% (== %u usec/uframe)\0A\00", align 1
@.str23 = private unnamed_addr constant [44 x i8] c"max periodic bandwidth set is non-standard\0A\00", align 1
@.str24 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str25 = private unnamed_addr constant [10 x i8] c"companion\00", align 1
@dev_attr_companion = internal global { { i8*, i16, [6 x i8] }, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* } { { i8*, i16, [6 x i8] } { i8* getelementptr inbounds ([10 x i8]* @.str25, i32 0, i32 0), i16 420, [6 x i8] undef }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_companion, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_companion }, align 8
@.str26 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str27 = private unnamed_addr constant [5 x i8] c"init\00", align 1
@ehci_cf_port_reset_rwsem = external global %struct.rw_semaphore
@.str28 = private unnamed_addr constant [35 x i8] c"USB %x.%x started, EHCI %x.%02x%s\0A\00", align 1
@.str29 = private unnamed_addr constant [22 x i8] c", overcurrent ignored\00", align 1
@.str30 = private unnamed_addr constant [13 x i8] c"fatal error\0A\00", align 1
@.str31 = private unnamed_addr constant [6 x i8] c"fatal\00", align 1
@.str32 = private unnamed_addr constant [37 x i8] c"./arch/x86/include/asm/dma-mapping.h\00", align 1
@dma_ops = external global %struct.dma_map_ops*
@event_handlers = internal global [11 x void (%struct.ehci_hcd*)*] [void (%struct.ehci_hcd*)* @ehci_poll_ASS, void (%struct.ehci_hcd*)* @ehci_poll_PSS, void (%struct.ehci_hcd*)* @ehci_handle_controller_death, void (%struct.ehci_hcd*)* @ehci_handle_intr_unlinks, void (%struct.ehci_hcd*)* @end_free_itds, void (%struct.ehci_hcd*)* @ehci_handle_start_intr_unlinks, void (%struct.ehci_hcd*)* @unlink_empty_async, void (%struct.ehci_hcd*)* @ehci_iaa_watchdog, void (%struct.ehci_hcd*)* @ehci_disable_PSE, void (%struct.ehci_hcd*)* @ehci_disable_ASE, void (%struct.ehci_hcd*)* @ehci_work], align 16
@.str33 = private unnamed_addr constant [9 x i8] c"ehci_qtd\00", align 1
@.str34 = private unnamed_addr constant [8 x i8] c"ehci_qh\00", align 1
@.str35 = private unnamed_addr constant [9 x i8] c"ehci_itd\00", align 1
@.str36 = private unnamed_addr constant [10 x i8] c"ehci_sitd\00", align 1
@x86_dma_fallback_dev = external global %struct.device
@llvm.used = appending global [24 x i8*] [i8* bitcast (%struct.kernel_param* @__param_log2_irq_thresh to i8*), i8* getelementptr inbounds ([29 x i8]* @__UNIQUE_ID_log2_irq_threshtype92, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8]* @__UNIQUE_ID_log2_irq_thresh93, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_park to i8*), i8* getelementptr inbounds ([19 x i8]* @__UNIQUE_ID_parktype97, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8]* @__UNIQUE_ID_park98, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_ignore_oc to i8*), i8* getelementptr inbounds ([24 x i8]* @__UNIQUE_ID_ignore_octype102, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8]* @__UNIQUE_ID_ignore_oc103, i32 0, i32 0), i8* bitcast (i64* @__kcrctab_ehci_handshake to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_ehci_handshake to i8*), i8* bitcast (i64* @__kcrctab_ehci_hub_control to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_ehci_hub_control to i8*), i8* bitcast (i64* @__kcrctab_ehci_setup to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_ehci_setup to i8*), i8* bitcast (i64* @__kcrctab_ehci_suspend to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_ehci_suspend to i8*), i8* bitcast (i64* @__kcrctab_ehci_resume to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_ehci_resume to i8*), i8* bitcast (i64* @__kcrctab_ehci_init_driver to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_ehci_init_driver to i8*), i8* getelementptr inbounds ([61 x i8]* @__UNIQUE_ID_description1245, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @__UNIQUE_ID_author1246, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @__UNIQUE_ID_license1247, i32 0, i32 0)], section "llvm.metadata"

define internal void @smp_send_stop() nounwind inlinehint noredzone {
entry:
  %0 = load void (i32)** getelementptr inbounds (%struct.smp_ops* @smp_ops, i32 0, i32 3), align 8
  call void %0(i32 0) noredzone
  ret void
}


define internal void @smp_send_reschedule(i32 %cpu) nounwind inlinehint noredzone {
entry:
  %cpu.addr = alloca i32, align 4
  store i32 %cpu, i32* %cpu.addr, align 4
  %0 = load void (i32)** getelementptr inbounds (%struct.smp_ops* @smp_ops, i32 0, i32 4), align 8
  %1 = load i32* %cpu.addr, align 4
  call void %0(i32 %1) noredzone
  ret void
}

define internal void @smp_prepare_cpus(i32 %max_cpus) nounwind inlinehint noredzone {
entry:
  %max_cpus.addr = alloca i32, align 4
  store i32 %max_cpus, i32* %max_cpus.addr, align 4
  %0 = load void (i32)** getelementptr inbounds (%struct.smp_ops* @smp_ops, i32 0, i32 1), align 8
  %1 = load i32* %max_cpus.addr, align 4
  call void %0(i32 %1) noredzone
  ret void
}

define internal i32 @__cpu_up(i32 %cpu, %struct.task_struct* %tidle) nounwind inlinehint noredzone {
entry:
  %cpu.addr = alloca i32, align 4
  %tidle.addr = alloca %struct.task_struct*, align 8
  store i32 %cpu, i32* %cpu.addr, align 4
  store %struct.task_struct* %tidle, %struct.task_struct** %tidle.addr, align 8
  %0 = load i32 (i32, %struct.task_struct*)** getelementptr inbounds (%struct.smp_ops* @smp_ops, i32 0, i32 5), align 8
  %1 = load i32* %cpu.addr, align 4
  %2 = load %struct.task_struct** %tidle.addr, align 8
  %call = call i32 %0(i32 %1, %struct.task_struct* %2) noredzone
  ret i32 %call
}

define internal void @smp_cpus_done(i32 %max_cpus) nounwind inlinehint noredzone {
entry:
  %max_cpus.addr = alloca i32, align 4
  store i32 %max_cpus, i32* %max_cpus.addr, align 4
  %0 = load void (i32)** getelementptr inbounds (%struct.smp_ops* @smp_ops, i32 0, i32 2), align 8
  %1 = load i32* %max_cpus.addr, align 4
  call void %0(i32 %1) noredzone
  ret void
}

define internal void @smp_prepare_boot_cpu() nounwind inlinehint noredzone {
entry:
  %0 = load void ()** getelementptr inbounds (%struct.smp_ops* @smp_ops, i32 0, i32 0), align 8
  call void %0() noredzone
  ret void
}

define i32 @ehci_handshake(%struct.ehci_hcd* %ehci, i8* %ptr, i32 %mask, i32 %done, i32 %usec) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %ptr.addr = alloca i8*, align 8
  %mask.addr = alloca i32, align 4
  %done.addr = alloca i32, align 4
  %usec.addr = alloca i32, align 4
  %result = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 %mask, i32* %mask.addr, align 4
  store i32 %done, i32* %done.addr, align 4
  store i32 %usec, i32* %usec.addr, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load i8** %ptr.addr, align 8
  %2 = bitcast i8* %1 to i32*
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %0, i32* %2) noredzone
  store i32 %call, i32* %result, align 4
  %3 = load i32* %result, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  store i32 -19, i32* %retval
  br label %return

if.end:                                           ; preds = %do.body
  %4 = load i32* %mask.addr, align 4
  %5 = load i32* %result, align 4
  %and = and i32 %5, %4
  store i32 %and, i32* %result, align 4
  %6 = load i32* %result, align 4
  %7 = load i32* %done.addr, align 4
  %cmp1 = icmp eq i32 %6, %7
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  call void @__const_udelay(i64 4295) noredzone
  %8 = load i32* %usec.addr, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* %usec.addr, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end3
  %9 = load i32* %usec.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 -110, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then2, %if.then
  %10 = load i32* %retval
  ret i32 %10
}

define internal i32 @ehci_readl(%struct.ehci_hcd* %ehci, i32* %regs) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %regs.addr = alloca i32*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32* %regs, i32** %regs.addr, align 8
  %0 = load i32** %regs.addr, align 8
  %1 = bitcast i32* %0 to i8*
  %call = call i32 @readl(i8* %1) noredzone
  ret i32 %call
}

declare void @__const_udelay(i64) noredzone

define i32 @ehci_hub_control(%struct.usb_hcd* %hcd, i16 zeroext %typeReq, i16 zeroext %wValue, i16 zeroext %wIndex, i8* %buf, i16 zeroext %wLength) nounwind noredzone {
entry:
  %nr.addr.i551 = alloca i64, align 8
  %addr.addr.i552 = alloca i64*, align 8
  %nr.addr.i542 = alloca i64, align 8
  %addr.addr.i543 = alloca i64*, align 8
  %nr.addr.i540 = alloca i64, align 8
  %addr.addr.i541 = alloca i64*, align 8
  %nr.addr.i538 = alloca i64, align 8
  %addr.addr.i539 = alloca i64*, align 8
  %nr.addr.i536 = alloca i64, align 8
  %addr.addr.i537 = alloca i64*, align 8
  %nr.addr.i527 = alloca i64, align 8
  %addr.addr.i528 = alloca i64*, align 8
  %nr.addr.i518 = alloca i64, align 8
  %addr.addr.i519 = alloca i64*, align 8
  %nr.addr.i516 = alloca i64, align 8
  %addr.addr.i517 = alloca i64*, align 8
  %nr.addr.i514 = alloca i64, align 8
  %addr.addr.i515 = alloca i64*, align 8
  %nr.addr.i512 = alloca i64, align 8
  %addr.addr.i513 = alloca i64*, align 8
  %nr.addr.i510 = alloca i64, align 8
  %addr.addr.i511 = alloca i64*, align 8
  %nr.addr.i508 = alloca i64, align 8
  %addr.addr.i509 = alloca i64*, align 8
  %nr.addr.i506 = alloca i64, align 8
  %addr.addr.i507 = alloca i64*, align 8
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %typeReq.addr = alloca i16, align 2
  %wValue.addr = alloca i16, align 2
  %wIndex.addr = alloca i16, align 2
  %buf.addr = alloca i8*, align 8
  %wLength.addr = alloca i16, align 2
  %ehci = alloca %struct.ehci_hcd*, align 8
  %ports = alloca i32, align 4
  %status_reg = alloca i32*, align 8
  %hostpc_reg = alloca i32*, align 8
  %temp = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %status = alloca i32, align 4
  %flags = alloca i64, align 8
  %retval8 = alloca i32, align 4
  %selector = alloca i32, align 4
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy53 = alloca i64, align 8
  %__dummy254 = alloca i64, align 8
  %__dummy153 = alloca i64, align 8
  %__dummy2154 = alloca i64, align 8
  %__dummy158 = alloca i64, align 8
  %__dummy2159 = alloca i64, align 8
  %_buf = alloca [80 x i8], align 16
  %__dummy401 = alloca i64, align 8
  %__dummy2402 = alloca i64, align 8
  %__dummy461 = alloca i64, align 8
  %__dummy2462 = alloca i64, align 8
  %sreg = alloca i32*, align 8
  %__dummy487 = alloca i64, align 8
  %__dummy2488 = alloca i64, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store i16 %typeReq, i16* %typeReq.addr, align 2
  store i16 %wValue, i16* %wValue.addr, align 2
  store i16 %wIndex, i16* %wIndex.addr, align 2
  store i8* %buf, i8** %buf.addr, align 8
  store i16 %wLength, i16* %wLength.addr, align 2
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 10
  %2 = load i32* %hcs_params, align 4
  %shr = lshr i32 %2, 0
  %and = and i32 %shr, 15
  store i32 %and, i32* %ports, align 4
  %3 = load i16* %wIndex.addr, align 2
  %conv = zext i16 %3 to i32
  %and1 = and i32 %conv, 255
  %sub = sub i32 %and1, 1
  %idxprom = sext i32 %sub to i64
  %4 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 8
  %5 = load %struct.ehci_regs** %regs, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %5, i32 0, i32 11
  %arrayidx = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom
  store i32* %arrayidx, i32** %status_reg, align 8
  %6 = load i16* %wIndex.addr, align 2
  %conv2 = zext i16 %6 to i32
  %and3 = and i32 %conv2, 255
  %sub4 = sub i32 %and3, 1
  %idxprom5 = sext i32 %sub4 to i64
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %regs6 = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 8
  %8 = load %struct.ehci_regs** %regs6, align 8
  %hostpc = getelementptr inbounds %struct.ehci_regs* %8, i32 0, i32 15
  %arrayidx7 = getelementptr [1 x i32]* %hostpc, i32 0, i64 %idxprom5
  store i32* %arrayidx7, i32** %hostpc_reg, align 8
  store i32 0, i32* %retval8, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body9

do.body9:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv10 = zext i1 %cmp to i32
  %9 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 11
  %call11 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call12 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call11) noredzone
  store i64 %call12, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body9
  br label %do.end13

do.end13:                                         ; preds = %do.end
  %10 = load i16* %typeReq.addr, align 2
  %conv14 = zext i16 %10 to i32
  switch i32 %conv14, label %sw.default503 [
    i32 8193, label %sw.bb
    i32 8961, label %sw.bb17
    i32 40966, label %sw.bb88
    i32 40960, label %sw.bb89
    i32 41728, label %sw.bb90
    i32 8195, label %sw.bb331
    i32 8963, label %sw.bb336
  ]

sw.bb:                                            ; preds = %do.end13
  %11 = load i16* %wValue.addr, align 2
  %conv15 = zext i16 %11 to i32
  switch i32 %conv15, label %sw.default [
    i32 0, label %sw.bb16
    i32 1, label %sw.bb16
  ]

sw.bb16:                                          ; preds = %sw.bb, %sw.bb
  br label %sw.epilog

sw.default:                                       ; preds = %sw.bb
  br label %error

sw.epilog:                                        ; preds = %sw.bb16
  br label %sw.epilog504

sw.bb17:                                          ; preds = %do.end13
  %12 = load i16* %wIndex.addr, align 2
  %tobool = icmp ne i16 %12, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %sw.bb17
  %13 = load i16* %wIndex.addr, align 2
  %conv18 = zext i16 %13 to i32
  %14 = load i32* %ports, align 4
  %cmp19 = icmp sgt i32 %conv18, %14
  br i1 %cmp19, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %sw.bb17
  br label %error

if.end:                                           ; preds = %lor.lhs.false
  %15 = load i16* %wIndex.addr, align 2
  %dec = add i16 %15, -1
  store i16 %dec, i16* %wIndex.addr, align 2
  %16 = load %struct.ehci_hcd** %ehci, align 8
  %17 = load i32** %status_reg, align 8
  %call21 = call i32 @ehci_readl(%struct.ehci_hcd* %16, i32* %17) noredzone
  store i32 %call21, i32* %temp, align 4
  %18 = load i32* %temp, align 4
  %and22 = and i32 %18, -43
  store i32 %and22, i32* %temp, align 4
  %19 = load i16* %wValue.addr, align 2
  %conv23 = zext i16 %19 to i32
  switch i32 %conv23, label %sw.default84 [
    i32 1, label %sw.bb24
    i32 17, label %sw.bb26
    i32 2, label %sw.bb27
    i32 18, label %sw.bb70
    i32 8, label %sw.bb72
    i32 16, label %sw.bb79
    i32 19, label %sw.bb81
    i32 20, label %sw.bb83
  ]

sw.bb24:                                          ; preds = %if.end
  %20 = load %struct.ehci_hcd** %ehci, align 8
  %21 = load i32* %temp, align 4
  %and25 = and i32 %21, -5
  %22 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %20, i32 %and25, i32* %22) noredzone
  br label %sw.epilog85

sw.bb26:                                          ; preds = %if.end
  %23 = load %struct.ehci_hcd** %ehci, align 8
  %24 = load i32* %temp, align 4
  %or = or i32 %24, 8
  %25 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %23, i32 %or, i32* %25) noredzone
  br label %sw.epilog85

sw.bb27:                                          ; preds = %if.end
  %26 = load i32* %temp, align 4
  %and28 = and i32 %26, 256
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %sw.bb27
  br label %error

if.end31:                                         ; preds = %sw.bb27
  %27 = load %struct.ehci_hcd** %ehci, align 8
  %28 = bitcast %struct.ehci_hcd* %27 to i8*
  %bf.field.offs = getelementptr i8* %28, i32 708
  %29 = bitcast i8* %bf.field.offs to i32*
  %30 = load i32* %29, align 4
  %bf.clear = and i32 %30, 1
  %tobool32 = icmp ne i32 %bf.clear, 0
  br i1 %tobool32, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end31
  br label %sw.epilog85

if.end34:                                         ; preds = %if.end31
  %31 = load i32* %temp, align 4
  %and35 = and i32 %31, 128
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.end38, label %if.then37

if.then37:                                        ; preds = %if.end34
  br label %sw.epilog85

if.end38:                                         ; preds = %if.end34
  %32 = load i32* %temp, align 4
  %and39 = and i32 %32, 4
  %cmp40 = icmp eq i32 %and39, 0
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.end38
  br label %error

if.end43:                                         ; preds = %if.end38
  %33 = load %struct.ehci_hcd** %ehci, align 8
  %34 = bitcast %struct.ehci_hcd* %33 to i8*
  %bf.field.offs44 = getelementptr i8* %34, i32 720
  %35 = bitcast i8* %bf.field.offs44 to i32*
  %36 = load i32* %35, align 8
  %37 = lshr i32 %36, 1
  %bf.clear45 = and i32 %37, 1
  %tobool46 = icmp ne i32 %bf.clear45, 0
  br i1 %tobool46, label %if.then47, label %if.end62

if.then47:                                        ; preds = %if.end43
  %38 = load %struct.ehci_hcd** %ehci, align 8
  %39 = load i32** %hostpc_reg, align 8
  %call48 = call i32 @ehci_readl(%struct.ehci_hcd* %38, i32* %39) noredzone
  store i32 %call48, i32* %temp1, align 4
  %40 = load %struct.ehci_hcd** %ehci, align 8
  %41 = load i32* %temp1, align 4
  %and49 = and i32 %41, -4194305
  %42 = load i32** %hostpc_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %40, i32 %and49, i32* %42) noredzone
  %43 = load %struct.ehci_hcd** %ehci, align 8
  %lock50 = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 11
  %44 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock50, i64 %44) noredzone
  call void @msleep(i32 5) noredzone
  br label %do.body51

do.body51:                                        ; preds = %if.then47
  br label %do.body52

do.body52:                                        ; preds = %do.body51
  %cmp55 = icmp eq i64* %__dummy53, %__dummy254
  %conv56 = zext i1 %cmp55 to i32
  %45 = load %struct.ehci_hcd** %ehci, align 8
  %lock57 = getelementptr inbounds %struct.ehci_hcd* %45, i32 0, i32 11
  %call58 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock57) noredzone
  %call59 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call58) noredzone
  store i64 %call59, i64* %flags, align 8
  br label %do.end60

do.end60:                                         ; preds = %do.body52
  br label %do.end61

do.end61:                                         ; preds = %do.end60
  br label %if.end62

if.end62:                                         ; preds = %do.end61, %if.end43
  %46 = load i32* %temp, align 4
  %and63 = and i32 %46, -7340033
  store i32 %and63, i32* %temp, align 4
  %47 = load %struct.ehci_hcd** %ehci, align 8
  %48 = load i32* %temp, align 4
  %or64 = or i32 %48, 64
  %49 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %47, i32 %or64, i32* %49) noredzone
  %50 = load volatile i64* @jiffies, align 8
  %call65 = call i64 @msecs_to_jiffies(i32 20) noredzone
  %add = add i64 %50, %call65
  %51 = load i16* %wIndex.addr, align 2
  %idxprom66 = zext i16 %51 to i64
  %52 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done = getelementptr inbounds %struct.ehci_hcd* %52, i32 0, i32 41
  %arrayidx67 = getelementptr [15 x i64]* %reset_done, i32 0, i64 %idxprom66
  store i64 %add, i64* %arrayidx67, align 8
  %53 = load i16* %wIndex.addr, align 2
  %conv68 = zext i16 %53 to i64
  %54 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports = getelementptr inbounds %struct.ehci_hcd* %54, i32 0, i32 47
  store i64 %conv68, i64* %nr.addr.i, align 8
  store i64* %resuming_ports, i64** %addr.addr.i, align 8
  %55 = load i64** %addr.addr.i, align 8
  %56 = load i64* %nr.addr.i, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %55, i64 %56, i64* %55) nounwind, !srcloc !0
  %57 = load %struct.usb_hcd** %hcd.addr, align 8
  %self = getelementptr inbounds %struct.usb_hcd* %57, i32 0, i32 0
  %58 = load i16* %wIndex.addr, align 2
  %conv69 = zext i16 %58 to i32
  call void @usb_hcd_start_port_resume(%struct.usb_bus* %self, i32 %conv69) noredzone
  br label %sw.epilog85

sw.bb70:                                          ; preds = %if.end
  %59 = load i16* %wIndex.addr, align 2
  %conv71 = zext i16 %59 to i64
  %60 = load %struct.ehci_hcd** %ehci, align 8
  %port_c_suspend = getelementptr inbounds %struct.ehci_hcd* %60, i32 0, i32 45
  store i64 %conv71, i64* %nr.addr.i506, align 8
  store i64* %port_c_suspend, i64** %addr.addr.i507, align 8
  %61 = load i64** %addr.addr.i507, align 8
  %62 = load i64* %nr.addr.i506, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %61, i64 %62, i64* %61) nounwind, !srcloc !1
  br label %sw.epilog85

sw.bb72:                                          ; preds = %if.end
  %63 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params73 = getelementptr inbounds %struct.ehci_hcd* %63, i32 0, i32 10
  %64 = load i32* %hcs_params73, align 4
  %and74 = and i32 %64, 16
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %if.then76, label %if.end78

if.then76:                                        ; preds = %sw.bb72
  %65 = load %struct.ehci_hcd** %ehci, align 8
  %66 = load i32* %temp, align 4
  %and77 = and i32 %66, -4097
  %67 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %65, i32 %and77, i32* %67) noredzone
  br label %if.end78

if.end78:                                         ; preds = %if.then76, %sw.bb72
  br label %sw.epilog85

sw.bb79:                                          ; preds = %if.end
  %68 = load %struct.ehci_hcd** %ehci, align 8
  %69 = load i32* %temp, align 4
  %or80 = or i32 %69, 2
  %70 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %68, i32 %or80, i32* %70) noredzone
  br label %sw.epilog85

sw.bb81:                                          ; preds = %if.end
  %71 = load %struct.ehci_hcd** %ehci, align 8
  %72 = load i32* %temp, align 4
  %or82 = or i32 %72, 32
  %73 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %71, i32 %or82, i32* %73) noredzone
  br label %sw.epilog85

sw.bb83:                                          ; preds = %if.end
  br label %sw.epilog85

sw.default84:                                     ; preds = %if.end
  br label %error

sw.epilog85:                                      ; preds = %sw.bb83, %sw.bb81, %sw.bb79, %if.end78, %sw.bb70, %if.end62, %if.then37, %if.then33, %sw.bb26, %sw.bb24
  %74 = load %struct.ehci_hcd** %ehci, align 8
  %75 = load %struct.ehci_hcd** %ehci, align 8
  %regs86 = getelementptr inbounds %struct.ehci_hcd* %75, i32 0, i32 8
  %76 = load %struct.ehci_regs** %regs86, align 8
  %command = getelementptr inbounds %struct.ehci_regs* %76, i32 0, i32 0
  %call87 = call i32 @ehci_readl(%struct.ehci_hcd* %74, i32* %command) noredzone
  br label %sw.epilog504

sw.bb88:                                          ; preds = %do.end13
  %77 = load %struct.ehci_hcd** %ehci, align 8
  %78 = load i8** %buf.addr, align 8
  %79 = bitcast i8* %78 to %struct.usb_hub_descriptor*
  call void @ehci_hub_descriptor(%struct.ehci_hcd* %77, %struct.usb_hub_descriptor* %79) noredzone
  br label %sw.epilog504

sw.bb89:                                          ; preds = %do.end13
  %80 = load i8** %buf.addr, align 8
  call void @llvm.memset.p0i8.i64(i8* %80, i8 0, i64 4, i32 1, i1 false)
  br label %sw.epilog504

sw.bb90:                                          ; preds = %do.end13
  %81 = load i16* %wIndex.addr, align 2
  %tobool91 = icmp ne i16 %81, 0
  br i1 %tobool91, label %lor.lhs.false92, label %if.then96

lor.lhs.false92:                                  ; preds = %sw.bb90
  %82 = load i16* %wIndex.addr, align 2
  %conv93 = zext i16 %82 to i32
  %83 = load i32* %ports, align 4
  %cmp94 = icmp sgt i32 %conv93, %83
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %lor.lhs.false92, %sw.bb90
  br label %error

if.end97:                                         ; preds = %lor.lhs.false92
  %84 = load i16* %wIndex.addr, align 2
  %dec98 = add i16 %84, -1
  store i16 %dec98, i16* %wIndex.addr, align 2
  store i32 0, i32* %status, align 4
  %85 = load %struct.ehci_hcd** %ehci, align 8
  %86 = load i32** %status_reg, align 8
  %call99 = call i32 @ehci_readl(%struct.ehci_hcd* %85, i32* %86) noredzone
  store i32 %call99, i32* %temp, align 4
  %87 = load i32* %temp, align 4
  %and100 = and i32 %87, 2
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %if.then102, label %if.end104

if.then102:                                       ; preds = %if.end97
  %88 = load i32* %status, align 4
  %or103 = or i32 %88, 65536
  store i32 %or103, i32* %status, align 4
  br label %if.end104

if.end104:                                        ; preds = %if.then102, %if.end97
  %89 = load i32* %temp, align 4
  %and105 = and i32 %89, 8
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %if.then107, label %if.end109

if.then107:                                       ; preds = %if.end104
  %90 = load i32* %status, align 4
  %or108 = or i32 %90, 131072
  store i32 %or108, i32* %status, align 4
  br label %if.end109

if.end109:                                        ; preds = %if.then107, %if.end104
  %91 = load i32* %temp, align 4
  %and110 = and i32 %91, 32
  %tobool111 = icmp ne i32 %and110, 0
  br i1 %tobool111, label %land.lhs.true, label %if.end129

land.lhs.true:                                    ; preds = %if.end109
  %92 = load i8* @ignore_oc, align 1
  %tobool112 = trunc i8 %92 to i1
  br i1 %tobool112, label %if.end129, label %if.then113

if.then113:                                       ; preds = %land.lhs.true
  %93 = load i32* %status, align 4
  %or114 = or i32 %93, 524288
  store i32 %or114, i32* %status, align 4
  %94 = load i32* %temp, align 4
  %and115 = and i32 %94, 16
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %land.lhs.true121, label %lor.lhs.false117

lor.lhs.false117:                                 ; preds = %if.then113
  %95 = load %struct.ehci_hcd** %ehci, align 8
  %96 = bitcast %struct.ehci_hcd* %95 to i8*
  %bf.field.offs118 = getelementptr i8* %96, i32 708
  %97 = bitcast i8* %bf.field.offs118 to i32*
  %98 = load i32* %97, align 4
  %99 = lshr i32 %98, 11
  %bf.clear119 = and i32 %99, 1
  %tobool120 = icmp ne i32 %bf.clear119, 0
  br i1 %tobool120, label %land.lhs.true121, label %if.end128

land.lhs.true121:                                 ; preds = %lor.lhs.false117, %if.then113
  %100 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params122 = getelementptr inbounds %struct.ehci_hcd* %100, i32 0, i32 10
  %101 = load i32* %hcs_params122, align 4
  %and123 = and i32 %101, 16
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %if.then125, label %if.end128

if.then125:                                       ; preds = %land.lhs.true121
  %102 = load %struct.ehci_hcd** %ehci, align 8
  %103 = load i32* %temp, align 4
  %and126 = and i32 %103, -4139
  %104 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %102, i32 %and126, i32* %104) noredzone
  %105 = load %struct.ehci_hcd** %ehci, align 8
  %106 = load i32** %status_reg, align 8
  %call127 = call i32 @ehci_readl(%struct.ehci_hcd* %105, i32* %106) noredzone
  store i32 %call127, i32* %temp, align 4
  br label %if.end128

if.end128:                                        ; preds = %if.then125, %land.lhs.true121, %lor.lhs.false117
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %land.lhs.true, %if.end109
  %107 = load i16* %wIndex.addr, align 2
  %idxprom130 = zext i16 %107 to i64
  %108 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done131 = getelementptr inbounds %struct.ehci_hcd* %108, i32 0, i32 41
  %arrayidx132 = getelementptr [15 x i64]* %reset_done131, i32 0, i64 %idxprom130
  %109 = load i64* %arrayidx132, align 8
  %tobool133 = icmp ne i64 %109, 0
  br i1 %tobool133, label %if.else, label %if.then134

if.then134:                                       ; preds = %if.end129
  %110 = load i32* %temp, align 4
  %and135 = and i32 %110, 64
  %tobool136 = icmp ne i32 %and135, 0
  br i1 %tobool136, label %if.then137, label %if.end152

if.then137:                                       ; preds = %if.then134
  %111 = load volatile i64* @jiffies, align 8
  %call138 = call i64 @msecs_to_jiffies(i32 20) noredzone
  %add139 = add i64 %111, %call138
  %112 = load i16* %wIndex.addr, align 2
  %idxprom140 = zext i16 %112 to i64
  %113 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done141 = getelementptr inbounds %struct.ehci_hcd* %113, i32 0, i32 41
  %arrayidx142 = getelementptr [15 x i64]* %reset_done141, i32 0, i64 %idxprom140
  store i64 %add139, i64* %arrayidx142, align 8
  %114 = load %struct.usb_hcd** %hcd.addr, align 8
  %self143 = getelementptr inbounds %struct.usb_hcd* %114, i32 0, i32 0
  %115 = load i16* %wIndex.addr, align 2
  %conv144 = zext i16 %115 to i32
  call void @usb_hcd_start_port_resume(%struct.usb_bus* %self143, i32 %conv144) noredzone
  %116 = load i16* %wIndex.addr, align 2
  %conv145 = zext i16 %116 to i64
  %117 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports146 = getelementptr inbounds %struct.ehci_hcd* %117, i32 0, i32 47
  store i64 %conv145, i64* %nr.addr.i508, align 8
  store i64* %resuming_ports146, i64** %addr.addr.i509, align 8
  %118 = load i64** %addr.addr.i509, align 8
  %119 = load i64* %nr.addr.i508, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %118, i64 %119, i64* %118) nounwind, !srcloc !0
  %120 = load %struct.ehci_hcd** %ehci, align 8
  %call147 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %120) noredzone
  %rh_timer = getelementptr inbounds %struct.usb_hcd* %call147, i32 0, i32 5
  %121 = load i16* %wIndex.addr, align 2
  %idxprom148 = zext i16 %121 to i64
  %122 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done149 = getelementptr inbounds %struct.ehci_hcd* %122, i32 0, i32 41
  %arrayidx150 = getelementptr [15 x i64]* %reset_done149, i32 0, i64 %idxprom148
  %123 = load i64* %arrayidx150, align 8
  %call151 = call i32 @mod_timer(%struct.timer_list* %rh_timer, i64 %123) noredzone
  br label %if.end152

if.end152:                                        ; preds = %if.then137, %if.then134
  br label %if.end224

if.else:                                          ; preds = %if.end129
  %cmp155 = icmp eq i64* %__dummy153, %__dummy2154
  %conv156 = zext i1 %cmp155 to i32
  br i1 true, label %land.lhs.true157, label %if.then169

land.lhs.true157:                                 ; preds = %if.else
  %cmp160 = icmp eq i64* %__dummy158, %__dummy2159
  %conv161 = zext i1 %cmp160 to i32
  br i1 true, label %land.lhs.true162, label %if.then169

land.lhs.true162:                                 ; preds = %land.lhs.true157
  %124 = load volatile i64* @jiffies, align 8
  %125 = load i16* %wIndex.addr, align 2
  %idxprom163 = zext i16 %125 to i64
  %126 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done164 = getelementptr inbounds %struct.ehci_hcd* %126, i32 0, i32 41
  %arrayidx165 = getelementptr [15 x i64]* %reset_done164, i32 0, i64 %idxprom163
  %127 = load i64* %arrayidx165, align 8
  %sub166 = sub i64 %124, %127
  %cmp167 = icmp sge i64 %sub166, 0
  br i1 %cmp167, label %if.else170, label %if.then169

if.then169:                                       ; preds = %land.lhs.true162, %land.lhs.true157, %if.else
  br label %if.end223

if.else170:                                       ; preds = %land.lhs.true162
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else170
  %128 = load i16* %wIndex.addr, align 2
  %conv171 = zext i16 %128 to i64
  %129 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports172 = getelementptr inbounds %struct.ehci_hcd* %129, i32 0, i32 47
  store i64 %conv171, i64* %nr.addr.i510, align 8
  store i64* %resuming_ports172, i64** %addr.addr.i511, align 8
  %130 = load i64* %nr.addr.i510, align 8
  %and.i = and i64 %130, 63
  %shl.i = shl i64 1, %and.i
  %131 = load i64* %nr.addr.i510, align 8
  %shr.i = ashr i64 %131, 6
  %132 = load i64** %addr.addr.i511, align 8
  %arrayidx.i = getelementptr i64* %132, i64 %shr.i
  %133 = load volatile i64* %arrayidx.i, align 8
  %and1.i = and i64 %shl.i, %133
  %cmp.i = icmp ne i64 %and1.i, 0
  %conv.i = zext i1 %cmp.i to i32
  %tobool174 = icmp ne i32 %conv.i, 0
  br i1 %tobool174, label %if.then179, label %if.else202

cond.false:                                       ; preds = %if.else170
  %134 = load i16* %wIndex.addr, align 2
  %conv175 = zext i16 %134 to i64
  %135 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports176 = getelementptr inbounds %struct.ehci_hcd* %135, i32 0, i32 47
  %call177 = call i32 @variable_test_bit(i64 %conv175, i64* %resuming_ports176) noredzone
  %tobool178 = icmp ne i32 %call177, 0
  br i1 %tobool178, label %if.then179, label %if.else202

if.then179:                                       ; preds = %cond.false, %cond.true
  %136 = load i16* %wIndex.addr, align 2
  %conv180 = zext i16 %136 to i64
  %137 = load %struct.ehci_hcd** %ehci, align 8
  %suspended_ports = getelementptr inbounds %struct.ehci_hcd* %137, i32 0, i32 46
  store i64 %conv180, i64* %nr.addr.i512, align 8
  store i64* %suspended_ports, i64** %addr.addr.i513, align 8
  %138 = load i64** %addr.addr.i513, align 8
  %139 = load i64* %nr.addr.i512, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %138, i64 %139, i64* %138) nounwind, !srcloc !1
  %140 = load i16* %wIndex.addr, align 2
  %conv181 = zext i16 %140 to i64
  %141 = load %struct.ehci_hcd** %ehci, align 8
  %port_c_suspend182 = getelementptr inbounds %struct.ehci_hcd* %141, i32 0, i32 45
  store i64 %conv181, i64* %nr.addr.i514, align 8
  store i64* %port_c_suspend182, i64** %addr.addr.i515, align 8
  %142 = load i64** %addr.addr.i515, align 8
  %143 = load i64* %nr.addr.i514, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %142, i64 %143, i64* %142) nounwind, !srcloc !0
  %144 = load i16* %wIndex.addr, align 2
  %idxprom183 = zext i16 %144 to i64
  %145 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done184 = getelementptr inbounds %struct.ehci_hcd* %145, i32 0, i32 41
  %arrayidx185 = getelementptr [15 x i64]* %reset_done184, i32 0, i64 %idxprom183
  store i64 0, i64* %arrayidx185, align 8
  %146 = load %struct.usb_hcd** %hcd.addr, align 8
  %self186 = getelementptr inbounds %struct.usb_hcd* %146, i32 0, i32 0
  %147 = load i16* %wIndex.addr, align 2
  %conv187 = zext i16 %147 to i32
  call void @usb_hcd_end_port_resume(%struct.usb_bus* %self186, i32 %conv187) noredzone
  %148 = load i32* %temp, align 4
  %and188 = and i32 %148, -235
  store i32 %and188, i32* %temp, align 4
  %149 = load %struct.ehci_hcd** %ehci, align 8
  %150 = load i32* %temp, align 4
  %151 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %149, i32 %150, i32* %151) noredzone
  %152 = load i16* %wIndex.addr, align 2
  %conv189 = zext i16 %152 to i64
  %153 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports190 = getelementptr inbounds %struct.ehci_hcd* %153, i32 0, i32 47
  store i64 %conv189, i64* %nr.addr.i516, align 8
  store i64* %resuming_ports190, i64** %addr.addr.i517, align 8
  %154 = load i64** %addr.addr.i517, align 8
  %155 = load i64* %nr.addr.i516, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %154, i64 %155, i64* %154) nounwind, !srcloc !1
  %156 = load %struct.ehci_hcd** %ehci, align 8
  %157 = load i32** %status_reg, align 8
  %158 = bitcast i32* %157 to i8*
  %call191 = call i32 @ehci_handshake(%struct.ehci_hcd* %156, i8* %158, i32 64, i32 0, i32 2000) noredzone
  store i32 %call191, i32* %retval8, align 4
  %159 = load i32* %retval8, align 4
  %cmp192 = icmp ne i32 %159, 0
  br i1 %cmp192, label %if.then194, label %if.end200

if.then194:                                       ; preds = %if.then179
  %160 = load %struct.ehci_hcd** %ehci, align 8
  %call195 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %160) noredzone
  %self196 = getelementptr inbounds %struct.usb_hcd* %call195, i32 0, i32 0
  %controller = getelementptr inbounds %struct.usb_bus* %self196, i32 0, i32 0
  %161 = load %struct.device** %controller, align 8
  %162 = load i16* %wIndex.addr, align 2
  %conv197 = zext i16 %162 to i32
  %add198 = add i32 %conv197, 1
  %163 = load i32* %retval8, align 4
  %call199 = call i32 (%struct.device*, i8*, ...)* @dev_err(%struct.device* %161, i8* getelementptr inbounds ([25 x i8]* @.str, i32 0, i32 0), i32 %add198, i32 %163) noredzone
  br label %error

if.end200:                                        ; preds = %if.then179
  %164 = load %struct.ehci_hcd** %ehci, align 8
  %165 = load i32** %status_reg, align 8
  %call201 = call i32 @ehci_readl(%struct.ehci_hcd* %164, i32* %165) noredzone
  store i32 %call201, i32* %temp, align 4
  br label %if.end222

if.else202:                                       ; preds = %cond.false, %cond.true
  %166 = load i32* %status, align 4
  %or203 = or i32 %166, 1048576
  store i32 %or203, i32* %status, align 4
  %167 = load i16* %wIndex.addr, align 2
  %idxprom204 = zext i16 %167 to i64
  %168 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done205 = getelementptr inbounds %struct.ehci_hcd* %168, i32 0, i32 41
  %arrayidx206 = getelementptr [15 x i64]* %reset_done205, i32 0, i64 %idxprom204
  store i64 0, i64* %arrayidx206, align 8
  %169 = load %struct.ehci_hcd** %ehci, align 8
  %170 = load i32* %temp, align 4
  %and207 = and i32 %170, -299
  %171 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %169, i32 %and207, i32* %171) noredzone
  %172 = load %struct.ehci_hcd** %ehci, align 8
  %173 = load i32** %status_reg, align 8
  %174 = bitcast i32* %173 to i8*
  %call208 = call i32 @ehci_handshake(%struct.ehci_hcd* %172, i8* %174, i32 256, i32 0, i32 1000) noredzone
  store i32 %call208, i32* %retval8, align 4
  %175 = load i32* %retval8, align 4
  %cmp209 = icmp ne i32 %175, 0
  br i1 %cmp209, label %if.then211, label %if.end218

if.then211:                                       ; preds = %if.else202
  %176 = load %struct.ehci_hcd** %ehci, align 8
  %call212 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %176) noredzone
  %self213 = getelementptr inbounds %struct.usb_hcd* %call212, i32 0, i32 0
  %controller214 = getelementptr inbounds %struct.usb_bus* %self213, i32 0, i32 0
  %177 = load %struct.device** %controller214, align 8
  %178 = load i16* %wIndex.addr, align 2
  %conv215 = zext i16 %178 to i32
  %add216 = add i32 %conv215, 1
  %179 = load i32* %retval8, align 4
  %call217 = call i32 (%struct.device*, i8*, ...)* @dev_err(%struct.device* %177, i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 %add216, i32 %179) noredzone
  br label %error

if.end218:                                        ; preds = %if.else202
  %180 = load %struct.ehci_hcd** %ehci, align 8
  %181 = load i16* %wIndex.addr, align 2
  %conv219 = zext i16 %181 to i32
  %182 = load i32** %status_reg, align 8
  %183 = load %struct.ehci_hcd** %ehci, align 8
  %184 = load i32** %status_reg, align 8
  %call220 = call i32 @ehci_readl(%struct.ehci_hcd* %183, i32* %184) noredzone
  %call221 = call i32 @check_reset_complete(%struct.ehci_hcd* %180, i32 %conv219, i32* %182, i32 %call220) noredzone
  store i32 %call221, i32* %temp, align 4
  br label %if.end222

if.end222:                                        ; preds = %if.end218, %if.end200
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %if.then169
  br label %if.end224

if.end224:                                        ; preds = %if.end223, %if.end152
  %185 = load i32* %temp, align 4
  %and225 = and i32 %185, 1
  %tobool226 = icmp ne i32 %and225, 0
  br i1 %tobool226, label %land.lhs.true227, label %if.end241

land.lhs.true227:                                 ; preds = %if.end224
  br i1 false, label %cond.true228, label %cond.false232

cond.true228:                                     ; preds = %land.lhs.true227
  %186 = load i16* %wIndex.addr, align 2
  %conv229 = zext i16 %186 to i64
  %187 = load %struct.ehci_hcd** %ehci, align 8
  %companion_ports = getelementptr inbounds %struct.ehci_hcd* %187, i32 0, i32 43
  store i64 %conv229, i64* %nr.addr.i518, align 8
  store i64* %companion_ports, i64** %addr.addr.i519, align 8
  %188 = load i64* %nr.addr.i518, align 8
  %and.i520 = and i64 %188, 63
  %shl.i521 = shl i64 1, %and.i520
  %189 = load i64* %nr.addr.i518, align 8
  %shr.i522 = ashr i64 %189, 6
  %190 = load i64** %addr.addr.i519, align 8
  %arrayidx.i523 = getelementptr i64* %190, i64 %shr.i522
  %191 = load volatile i64* %arrayidx.i523, align 8
  %and1.i524 = and i64 %shl.i521, %191
  %cmp.i525 = icmp ne i64 %and1.i524, 0
  %conv.i526 = zext i1 %cmp.i525 to i32
  %tobool231 = icmp ne i32 %conv.i526, 0
  br i1 %tobool231, label %if.then237, label %if.end241

cond.false232:                                    ; preds = %land.lhs.true227
  %192 = load i16* %wIndex.addr, align 2
  %conv233 = zext i16 %192 to i64
  %193 = load %struct.ehci_hcd** %ehci, align 8
  %companion_ports234 = getelementptr inbounds %struct.ehci_hcd* %193, i32 0, i32 43
  %call235 = call i32 @variable_test_bit(i64 %conv233, i64* %companion_ports234) noredzone
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.then237, label %if.end241

if.then237:                                       ; preds = %cond.false232, %cond.true228
  %194 = load i32* %temp, align 4
  %and238 = and i32 %194, -43
  store i32 %and238, i32* %temp, align 4
  %195 = load i32* %temp, align 4
  %or239 = or i32 %195, 8192
  store i32 %or239, i32* %temp, align 4
  %196 = load %struct.ehci_hcd** %ehci, align 8
  %197 = load i32* %temp, align 4
  %198 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %196, i32 %197, i32* %198) noredzone
  %199 = load %struct.ehci_hcd** %ehci, align 8
  %200 = load i32** %status_reg, align 8
  %call240 = call i32 @ehci_readl(%struct.ehci_hcd* %199, i32* %200) noredzone
  store i32 %call240, i32* %temp, align 4
  br label %if.end241

if.end241:                                        ; preds = %if.then237, %cond.false232, %cond.true228, %if.end224
  %201 = load i32* %temp, align 4
  %and242 = and i32 %201, 1
  %tobool243 = icmp ne i32 %and242, 0
  br i1 %tobool243, label %if.then244, label %if.end257

if.then244:                                       ; preds = %if.end241
  %202 = load i32* %status, align 4
  %or245 = or i32 %202, 1
  store i32 %or245, i32* %status, align 4
  %203 = load %struct.ehci_hcd** %ehci, align 8
  %204 = bitcast %struct.ehci_hcd* %203 to i8*
  %bf.field.offs246 = getelementptr i8* %204, i32 720
  %205 = bitcast i8* %bf.field.offs246 to i32*
  %206 = load i32* %205, align 8
  %bf.clear247 = and i32 %206, 1
  %tobool248 = icmp ne i32 %bf.clear247, 0
  br i1 %tobool248, label %if.then249, label %if.else253

if.then249:                                       ; preds = %if.then244
  %207 = load %struct.ehci_hcd** %ehci, align 8
  %208 = load i32** %hostpc_reg, align 8
  %call250 = call i32 @ehci_readl(%struct.ehci_hcd* %207, i32* %208) noredzone
  store i32 %call250, i32* %temp1, align 4
  %209 = load %struct.ehci_hcd** %ehci, align 8
  %210 = load i32* %temp1, align 4
  %call251 = call i32 @ehci_port_speed(%struct.ehci_hcd* %209, i32 %210) noredzone
  %211 = load i32* %status, align 4
  %or252 = or i32 %211, %call251
  store i32 %or252, i32* %status, align 4
  br label %if.end256

if.else253:                                       ; preds = %if.then244
  %212 = load %struct.ehci_hcd** %ehci, align 8
  %213 = load i32* %temp, align 4
  %call254 = call i32 @ehci_port_speed(%struct.ehci_hcd* %212, i32 %213) noredzone
  %214 = load i32* %status, align 4
  %or255 = or i32 %214, %call254
  store i32 %or255, i32* %status, align 4
  br label %if.end256

if.end256:                                        ; preds = %if.else253, %if.then249
  br label %if.end257

if.end257:                                        ; preds = %if.end256, %if.end241
  %215 = load i32* %temp, align 4
  %and258 = and i32 %215, 4
  %tobool259 = icmp ne i32 %and258, 0
  br i1 %tobool259, label %if.then260, label %if.end262

if.then260:                                       ; preds = %if.end257
  %216 = load i32* %status, align 4
  %or261 = or i32 %216, 2
  store i32 %or261, i32* %status, align 4
  br label %if.end262

if.end262:                                        ; preds = %if.then260, %if.end257
  %217 = load i32* %temp, align 4
  %and263 = and i32 %217, 192
  %tobool264 = icmp ne i32 %and263, 0
  br i1 %tobool264, label %if.then265, label %if.else267

if.then265:                                       ; preds = %if.end262
  %218 = load i32* %status, align 4
  %or266 = or i32 %218, 4
  store i32 %or266, i32* %status, align 4
  br label %if.end295

if.else267:                                       ; preds = %if.end262
  br i1 false, label %cond.true268, label %cond.false273

cond.true268:                                     ; preds = %if.else267
  %219 = load i16* %wIndex.addr, align 2
  %conv269 = zext i16 %219 to i64
  %220 = load %struct.ehci_hcd** %ehci, align 8
  %suspended_ports270 = getelementptr inbounds %struct.ehci_hcd* %220, i32 0, i32 46
  store i64 %conv269, i64* %nr.addr.i527, align 8
  store i64* %suspended_ports270, i64** %addr.addr.i528, align 8
  %221 = load i64* %nr.addr.i527, align 8
  %and.i529 = and i64 %221, 63
  %shl.i530 = shl i64 1, %and.i529
  %222 = load i64* %nr.addr.i527, align 8
  %shr.i531 = ashr i64 %222, 6
  %223 = load i64** %addr.addr.i528, align 8
  %arrayidx.i532 = getelementptr i64* %223, i64 %shr.i531
  %224 = load volatile i64* %arrayidx.i532, align 8
  %and1.i533 = and i64 %shl.i530, %224
  %cmp.i534 = icmp ne i64 %and1.i533, 0
  %conv.i535 = zext i1 %cmp.i534 to i32
  %tobool272 = icmp ne i32 %conv.i535, 0
  br i1 %tobool272, label %if.then278, label %if.end294

cond.false273:                                    ; preds = %if.else267
  %225 = load i16* %wIndex.addr, align 2
  %conv274 = zext i16 %225 to i64
  %226 = load %struct.ehci_hcd** %ehci, align 8
  %suspended_ports275 = getelementptr inbounds %struct.ehci_hcd* %226, i32 0, i32 46
  %call276 = call i32 @variable_test_bit(i64 %conv274, i64* %suspended_ports275) noredzone
  %tobool277 = icmp ne i32 %call276, 0
  br i1 %tobool277, label %if.then278, label %if.end294

if.then278:                                       ; preds = %cond.false273, %cond.true268
  %227 = load i16* %wIndex.addr, align 2
  %conv279 = zext i16 %227 to i64
  %228 = load %struct.ehci_hcd** %ehci, align 8
  %suspended_ports280 = getelementptr inbounds %struct.ehci_hcd* %228, i32 0, i32 46
  store i64 %conv279, i64* %nr.addr.i536, align 8
  store i64* %suspended_ports280, i64** %addr.addr.i537, align 8
  %229 = load i64** %addr.addr.i537, align 8
  %230 = load i64* %nr.addr.i536, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %229, i64 %230, i64* %229) nounwind, !srcloc !1
  %231 = load i16* %wIndex.addr, align 2
  %conv281 = zext i16 %231 to i64
  %232 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports282 = getelementptr inbounds %struct.ehci_hcd* %232, i32 0, i32 47
  store i64 %conv281, i64* %nr.addr.i538, align 8
  store i64* %resuming_ports282, i64** %addr.addr.i539, align 8
  %233 = load i64** %addr.addr.i539, align 8
  %234 = load i64* %nr.addr.i538, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %233, i64 %234, i64* %233) nounwind, !srcloc !1
  %235 = load i16* %wIndex.addr, align 2
  %idxprom283 = zext i16 %235 to i64
  %236 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done284 = getelementptr inbounds %struct.ehci_hcd* %236, i32 0, i32 41
  %arrayidx285 = getelementptr [15 x i64]* %reset_done284, i32 0, i64 %idxprom283
  store i64 0, i64* %arrayidx285, align 8
  %237 = load i32* %temp, align 4
  %and286 = and i32 %237, 4
  %tobool287 = icmp ne i32 %and286, 0
  br i1 %tobool287, label %if.then288, label %if.end291

if.then288:                                       ; preds = %if.then278
  %238 = load i16* %wIndex.addr, align 2
  %conv289 = zext i16 %238 to i64
  %239 = load %struct.ehci_hcd** %ehci, align 8
  %port_c_suspend290 = getelementptr inbounds %struct.ehci_hcd* %239, i32 0, i32 45
  store i64 %conv289, i64* %nr.addr.i540, align 8
  store i64* %port_c_suspend290, i64** %addr.addr.i541, align 8
  %240 = load i64** %addr.addr.i541, align 8
  %241 = load i64* %nr.addr.i540, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %240, i64 %241, i64* %240) nounwind, !srcloc !0
  br label %if.end291

if.end291:                                        ; preds = %if.then288, %if.then278
  %242 = load %struct.usb_hcd** %hcd.addr, align 8
  %self292 = getelementptr inbounds %struct.usb_hcd* %242, i32 0, i32 0
  %243 = load i16* %wIndex.addr, align 2
  %conv293 = zext i16 %243 to i32
  call void @usb_hcd_end_port_resume(%struct.usb_bus* %self292, i32 %conv293) noredzone
  br label %if.end294

if.end294:                                        ; preds = %if.end291, %cond.false273, %cond.true268
  br label %if.end295

if.end295:                                        ; preds = %if.end294, %if.then265
  %244 = load i32* %temp, align 4
  %and296 = and i32 %244, 16
  %tobool297 = icmp ne i32 %and296, 0
  br i1 %tobool297, label %if.then298, label %if.end300

if.then298:                                       ; preds = %if.end295
  %245 = load i32* %status, align 4
  %or299 = or i32 %245, 8
  store i32 %or299, i32* %status, align 4
  br label %if.end300

if.end300:                                        ; preds = %if.then298, %if.end295
  %246 = load i32* %temp, align 4
  %and301 = and i32 %246, 256
  %tobool302 = icmp ne i32 %and301, 0
  br i1 %tobool302, label %if.then303, label %if.end305

if.then303:                                       ; preds = %if.end300
  %247 = load i32* %status, align 4
  %or304 = or i32 %247, 16
  store i32 %or304, i32* %status, align 4
  br label %if.end305

if.end305:                                        ; preds = %if.then303, %if.end300
  %248 = load i32* %temp, align 4
  %and306 = and i32 %248, 4096
  %tobool307 = icmp ne i32 %and306, 0
  br i1 %tobool307, label %if.then308, label %if.end310

if.then308:                                       ; preds = %if.end305
  %249 = load i32* %status, align 4
  %or309 = or i32 %249, 256
  store i32 %or309, i32* %status, align 4
  br label %if.end310

if.end310:                                        ; preds = %if.then308, %if.end305
  br i1 false, label %cond.true311, label %cond.false316

cond.true311:                                     ; preds = %if.end310
  %250 = load i16* %wIndex.addr, align 2
  %conv312 = zext i16 %250 to i64
  %251 = load %struct.ehci_hcd** %ehci, align 8
  %port_c_suspend313 = getelementptr inbounds %struct.ehci_hcd* %251, i32 0, i32 45
  store i64 %conv312, i64* %nr.addr.i542, align 8
  store i64* %port_c_suspend313, i64** %addr.addr.i543, align 8
  %252 = load i64* %nr.addr.i542, align 8
  %and.i544 = and i64 %252, 63
  %shl.i545 = shl i64 1, %and.i544
  %253 = load i64* %nr.addr.i542, align 8
  %shr.i546 = ashr i64 %253, 6
  %254 = load i64** %addr.addr.i543, align 8
  %arrayidx.i547 = getelementptr i64* %254, i64 %shr.i546
  %255 = load volatile i64* %arrayidx.i547, align 8
  %and1.i548 = and i64 %shl.i545, %255
  %cmp.i549 = icmp ne i64 %and1.i548, 0
  %conv.i550 = zext i1 %cmp.i549 to i32
  %tobool315 = icmp ne i32 %conv.i550, 0
  br i1 %tobool315, label %if.then321, label %if.end323

cond.false316:                                    ; preds = %if.end310
  %256 = load i16* %wIndex.addr, align 2
  %conv317 = zext i16 %256 to i64
  %257 = load %struct.ehci_hcd** %ehci, align 8
  %port_c_suspend318 = getelementptr inbounds %struct.ehci_hcd* %257, i32 0, i32 45
  %call319 = call i32 @variable_test_bit(i64 %conv317, i64* %port_c_suspend318) noredzone
  %tobool320 = icmp ne i32 %call319, 0
  br i1 %tobool320, label %if.then321, label %if.end323

if.then321:                                       ; preds = %cond.false316, %cond.true311
  %258 = load i32* %status, align 4
  %or322 = or i32 %258, 262144
  store i32 %or322, i32* %status, align 4
  br label %if.end323

if.end323:                                        ; preds = %if.then321, %cond.false316, %cond.true311
  %259 = load i32* %status, align 4
  %and324 = and i32 %259, -65536
  %tobool325 = icmp ne i32 %and324, 0
  br i1 %tobool325, label %if.then326, label %if.end330

if.then326:                                       ; preds = %if.end323
  %arraydecay = getelementptr inbounds [80 x i8]* %_buf, i32 0, i32 0
  %260 = load i16* %wIndex.addr, align 2
  %conv327 = zext i16 %260 to i32
  %add328 = add i32 %conv327, 1
  %261 = load i32* %temp, align 4
  %call329 = call i32 @dbg_port_buf(i8* %arraydecay, i32 80, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 %add328, i32 %261) noredzone
  br label %if.end330

if.end330:                                        ; preds = %if.then326, %if.end323
  %262 = load i32* %status, align 4
  %263 = load i8** %buf.addr, align 8
  call void @put_unaligned_le32(i32 %262, i8* %263) noredzone
  br label %sw.epilog504

sw.bb331:                                         ; preds = %do.end13
  %264 = load i16* %wValue.addr, align 2
  %conv332 = zext i16 %264 to i32
  switch i32 %conv332, label %sw.default334 [
    i32 0, label %sw.bb333
    i32 1, label %sw.bb333
  ]

sw.bb333:                                         ; preds = %sw.bb331, %sw.bb331
  br label %sw.epilog335

sw.default334:                                    ; preds = %sw.bb331
  br label %error

sw.epilog335:                                     ; preds = %sw.bb333
  br label %sw.epilog504

sw.bb336:                                         ; preds = %do.end13
  %265 = load i16* %wIndex.addr, align 2
  %conv337 = zext i16 %265 to i32
  %shr338 = ashr i32 %conv337, 8
  store i32 %shr338, i32* %selector, align 4
  %266 = load i16* %wIndex.addr, align 2
  %conv339 = zext i16 %266 to i32
  %and340 = and i32 %conv339, 255
  %conv341 = trunc i32 %and340 to i16
  store i16 %conv341, i16* %wIndex.addr, align 2
  %267 = load %struct.ehci_hcd** %ehci, align 8
  %debug = getelementptr inbounds %struct.ehci_hcd* %267, i32 0, i32 9
  %268 = load %struct.ehci_dbg_port** %debug, align 8
  %tobool342 = icmp ne %struct.ehci_dbg_port* %268, null
  %lnot = xor i1 %tobool342, true
  %lnot343 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot343 to i32
  %conv344 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv344, i64 0)
  %tobool345 = icmp ne i64 %expval, 0
  br i1 %tobool345, label %if.then346, label %if.end360

if.then346:                                       ; preds = %sw.bb336
  %269 = load i16* %wIndex.addr, align 2
  %conv347 = zext i16 %269 to i32
  %270 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params348 = getelementptr inbounds %struct.ehci_hcd* %270, i32 0, i32 10
  %271 = load i32* %hcs_params348, align 4
  %shr349 = lshr i32 %271, 20
  %and350 = and i32 %shr349, 15
  %cmp351 = icmp eq i32 %conv347, %and350
  br i1 %cmp351, label %land.lhs.true353, label %if.end359

land.lhs.true353:                                 ; preds = %if.then346
  %272 = load %struct.ehci_hcd** %ehci, align 8
  %debug354 = getelementptr inbounds %struct.ehci_hcd* %272, i32 0, i32 9
  %273 = load %struct.ehci_dbg_port** %debug354, align 8
  %control = getelementptr inbounds %struct.ehci_dbg_port* %273, i32 0, i32 0
  %274 = bitcast i32* %control to i8*
  %call355 = call i32 @readl(i8* %274) noredzone
  %and356 = and i32 %call355, 268435456
  %tobool357 = icmp ne i32 %and356, 0
  br i1 %tobool357, label %if.then358, label %if.end359

if.then358:                                       ; preds = %land.lhs.true353
  store i32 -19, i32* %retval8, align 4
  br label %error_exit

if.end359:                                        ; preds = %land.lhs.true353, %if.then346
  br label %if.end360

if.end360:                                        ; preds = %if.end359, %sw.bb336
  %275 = load i16* %wIndex.addr, align 2
  %tobool361 = icmp ne i16 %275, 0
  br i1 %tobool361, label %lor.lhs.false362, label %if.then366

lor.lhs.false362:                                 ; preds = %if.end360
  %276 = load i16* %wIndex.addr, align 2
  %conv363 = zext i16 %276 to i32
  %277 = load i32* %ports, align 4
  %cmp364 = icmp sgt i32 %conv363, %277
  br i1 %cmp364, label %if.then366, label %if.end367

if.then366:                                       ; preds = %lor.lhs.false362, %if.end360
  br label %error

if.end367:                                        ; preds = %lor.lhs.false362
  %278 = load i16* %wIndex.addr, align 2
  %dec368 = add i16 %278, -1
  store i16 %dec368, i16* %wIndex.addr, align 2
  %279 = load %struct.ehci_hcd** %ehci, align 8
  %280 = load i32** %status_reg, align 8
  %call369 = call i32 @ehci_readl(%struct.ehci_hcd* %279, i32* %280) noredzone
  store i32 %call369, i32* %temp, align 4
  %281 = load i32* %temp, align 4
  %and370 = and i32 %281, 8192
  %tobool371 = icmp ne i32 %and370, 0
  br i1 %tobool371, label %if.then372, label %if.end373

if.then372:                                       ; preds = %if.end367
  br label %sw.epilog504

if.end373:                                        ; preds = %if.end367
  %282 = load i32* %temp, align 4
  %and374 = and i32 %282, -43
  store i32 %and374, i32* %temp, align 4
  %283 = load i16* %wValue.addr, align 2
  %conv375 = zext i16 %283 to i32
  switch i32 %conv375, label %sw.default498 [
    i32 2, label %sw.bb376
    i32 8, label %sw.bb416
    i32 4, label %sw.bb423
    i32 21, label %sw.bb451
  ]

sw.bb376:                                         ; preds = %if.end373
  %284 = load %struct.ehci_hcd** %ehci, align 8
  %285 = bitcast %struct.ehci_hcd* %284 to i8*
  %bf.field.offs377 = getelementptr i8* %285, i32 708
  %286 = bitcast i8* %bf.field.offs377 to i32*
  %287 = load i32* %286, align 4
  %bf.clear378 = and i32 %287, 1
  %tobool379 = icmp ne i32 %bf.clear378, 0
  br i1 %tobool379, label %if.then380, label %if.end381

if.then380:                                       ; preds = %sw.bb376
  br label %sw.epilog499

if.end381:                                        ; preds = %sw.bb376
  %288 = load i32* %temp, align 4
  %and382 = and i32 %288, 4
  %cmp383 = icmp eq i32 %and382, 0
  br i1 %cmp383, label %if.then389, label %lor.lhs.false385

lor.lhs.false385:                                 ; preds = %if.end381
  %289 = load i32* %temp, align 4
  %and386 = and i32 %289, 256
  %cmp387 = icmp ne i32 %and386, 0
  br i1 %cmp387, label %if.then389, label %if.end390

if.then389:                                       ; preds = %lor.lhs.false385, %if.end381
  br label %error

if.end390:                                        ; preds = %lor.lhs.false385
  %290 = load i32* %temp, align 4
  %and391 = and i32 %290, -1048577
  store i32 %and391, i32* %temp, align 4
  %291 = load i32* %temp, align 4
  %or392 = or i32 %291, 6291456
  store i32 %or392, i32* %temp, align 4
  %292 = load %struct.ehci_hcd** %ehci, align 8
  %293 = load i32* %temp, align 4
  %or393 = or i32 %293, 128
  %294 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %292, i32 %or393, i32* %294) noredzone
  %295 = load %struct.ehci_hcd** %ehci, align 8
  %296 = bitcast %struct.ehci_hcd* %295 to i8*
  %bf.field.offs394 = getelementptr i8* %296, i32 720
  %297 = bitcast i8* %bf.field.offs394 to i32*
  %298 = load i32* %297, align 8
  %299 = lshr i32 %298, 1
  %bf.clear395 = and i32 %299, 1
  %tobool396 = icmp ne i32 %bf.clear395, 0
  br i1 %tobool396, label %if.then397, label %if.end413

if.then397:                                       ; preds = %if.end390
  %300 = load %struct.ehci_hcd** %ehci, align 8
  %lock398 = getelementptr inbounds %struct.ehci_hcd* %300, i32 0, i32 11
  %301 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock398, i64 %301) noredzone
  call void @msleep(i32 5) noredzone
  br label %do.body399

do.body399:                                       ; preds = %if.then397
  br label %do.body400

do.body400:                                       ; preds = %do.body399
  %cmp403 = icmp eq i64* %__dummy401, %__dummy2402
  %conv404 = zext i1 %cmp403 to i32
  %302 = load %struct.ehci_hcd** %ehci, align 8
  %lock405 = getelementptr inbounds %struct.ehci_hcd* %302, i32 0, i32 11
  %call406 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock405) noredzone
  %call407 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call406) noredzone
  store i64 %call407, i64* %flags, align 8
  br label %do.end408

do.end408:                                        ; preds = %do.body400
  br label %do.end409

do.end409:                                        ; preds = %do.end408
  %303 = load %struct.ehci_hcd** %ehci, align 8
  %304 = load i32** %hostpc_reg, align 8
  %call410 = call i32 @ehci_readl(%struct.ehci_hcd* %303, i32* %304) noredzone
  store i32 %call410, i32* %temp1, align 4
  %305 = load %struct.ehci_hcd** %ehci, align 8
  %306 = load i32* %temp1, align 4
  %or411 = or i32 %306, 4194304
  %307 = load i32** %hostpc_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %305, i32 %or411, i32* %307) noredzone
  %308 = load %struct.ehci_hcd** %ehci, align 8
  %309 = load i32** %hostpc_reg, align 8
  %call412 = call i32 @ehci_readl(%struct.ehci_hcd* %308, i32* %309) noredzone
  store i32 %call412, i32* %temp1, align 4
  br label %if.end413

if.end413:                                        ; preds = %do.end409, %if.end390
  %310 = load i16* %wIndex.addr, align 2
  %conv414 = zext i16 %310 to i64
  %311 = load %struct.ehci_hcd** %ehci, align 8
  %suspended_ports415 = getelementptr inbounds %struct.ehci_hcd* %311, i32 0, i32 46
  store i64 %conv414, i64* %nr.addr.i551, align 8
  store i64* %suspended_ports415, i64** %addr.addr.i552, align 8
  %312 = load i64** %addr.addr.i552, align 8
  %313 = load i64* %nr.addr.i551, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %312, i64 %313, i64* %312) nounwind, !srcloc !0
  br label %sw.epilog499

sw.bb416:                                         ; preds = %if.end373
  %314 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params417 = getelementptr inbounds %struct.ehci_hcd* %314, i32 0, i32 10
  %315 = load i32* %hcs_params417, align 4
  %and418 = and i32 %315, 16
  %tobool419 = icmp ne i32 %and418, 0
  br i1 %tobool419, label %if.then420, label %if.end422

if.then420:                                       ; preds = %sw.bb416
  %316 = load %struct.ehci_hcd** %ehci, align 8
  %317 = load i32* %temp, align 4
  %or421 = or i32 %317, 4096
  %318 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %316, i32 %or421, i32* %318) noredzone
  br label %if.end422

if.end422:                                        ; preds = %if.then420, %sw.bb416
  br label %sw.epilog499

sw.bb423:                                         ; preds = %if.end373
  %319 = load i32* %temp, align 4
  %and424 = and i32 %319, 192
  %tobool425 = icmp ne i32 %and424, 0
  br i1 %tobool425, label %if.then426, label %if.end427

if.then426:                                       ; preds = %sw.bb423
  br label %error

if.end427:                                        ; preds = %sw.bb423
  %320 = load i32* %temp, align 4
  %and428 = and i32 %320, 5
  %cmp429 = icmp eq i32 %and428, 1
  br i1 %cmp429, label %land.lhs.true431, label %if.else442

land.lhs.true431:                                 ; preds = %if.end427
  %321 = load %struct.ehci_hcd** %ehci, align 8
  %call432 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %321) noredzone
  %322 = bitcast %struct.usb_hcd* %call432 to i8*
  %bf.field.offs433 = getelementptr i8* %322, i32 352
  %323 = bitcast i8* %bf.field.offs433 to i32*
  %324 = load i32* %323, align 8
  %325 = lshr i32 %324, 7
  %bf.clear434 = and i32 %325, 1
  %tobool435 = icmp ne i32 %bf.clear434, 0
  br i1 %tobool435, label %if.else442, label %land.lhs.true436

land.lhs.true436:                                 ; preds = %land.lhs.true431
  %326 = load i32* %temp, align 4
  %and437 = and i32 %326, 3072
  %cmp438 = icmp eq i32 %and437, 1024
  br i1 %cmp438, label %if.then440, label %if.else442

if.then440:                                       ; preds = %land.lhs.true436
  %327 = load i32* %temp, align 4
  %or441 = or i32 %327, 8192
  store i32 %or441, i32* %temp, align 4
  br label %if.end450

if.else442:                                       ; preds = %land.lhs.true436, %land.lhs.true431, %if.end427
  %328 = load i32* %temp, align 4
  %or443 = or i32 %328, 256
  store i32 %or443, i32* %temp, align 4
  %329 = load i32* %temp, align 4
  %and444 = and i32 %329, -5
  store i32 %and444, i32* %temp, align 4
  %330 = load volatile i64* @jiffies, align 8
  %call445 = call i64 @msecs_to_jiffies(i32 50) noredzone
  %add446 = add i64 %330, %call445
  %331 = load i16* %wIndex.addr, align 2
  %idxprom447 = zext i16 %331 to i64
  %332 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done448 = getelementptr inbounds %struct.ehci_hcd* %332, i32 0, i32 41
  %arrayidx449 = getelementptr [15 x i64]* %reset_done448, i32 0, i64 %idxprom447
  store i64 %add446, i64* %arrayidx449, align 8
  br label %if.end450

if.end450:                                        ; preds = %if.else442, %if.then440
  %333 = load %struct.ehci_hcd** %ehci, align 8
  %334 = load i32* %temp, align 4
  %335 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %333, i32 %334, i32* %335) noredzone
  br label %sw.epilog499

sw.bb451:                                         ; preds = %if.end373
  %336 = load i32* %selector, align 4
  %tobool452 = icmp ne i32 %336, 0
  br i1 %tobool452, label %lor.lhs.false453, label %if.then456

lor.lhs.false453:                                 ; preds = %sw.bb451
  %337 = load i32* %selector, align 4
  %cmp454 = icmp ugt i32 %337, 5
  br i1 %cmp454, label %if.then456, label %if.end457

if.then456:                                       ; preds = %lor.lhs.false453, %sw.bb451
  br label %error

if.end457:                                        ; preds = %lor.lhs.false453
  %338 = load %struct.ehci_hcd** %ehci, align 8
  %lock458 = getelementptr inbounds %struct.ehci_hcd* %338, i32 0, i32 11
  %339 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock458, i64 %339) noredzone
  %340 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_quiesce(%struct.ehci_hcd* %340) noredzone
  br label %do.body459

do.body459:                                       ; preds = %if.end457
  br label %do.body460

do.body460:                                       ; preds = %do.body459
  %cmp463 = icmp eq i64* %__dummy461, %__dummy2462
  %conv464 = zext i1 %cmp463 to i32
  %341 = load %struct.ehci_hcd** %ehci, align 8
  %lock465 = getelementptr inbounds %struct.ehci_hcd* %341, i32 0, i32 11
  %call466 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock465) noredzone
  %call467 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call466) noredzone
  store i64 %call467, i64* %flags, align 8
  br label %do.end468

do.end468:                                        ; preds = %do.body460
  br label %do.end469

do.end469:                                        ; preds = %do.end468
  br label %while.cond

while.cond:                                       ; preds = %if.end482, %do.end469
  %342 = load i32* %ports, align 4
  %dec470 = add i32 %342, -1
  store i32 %dec470, i32* %ports, align 4
  %tobool471 = icmp ne i32 %342, 0
  br i1 %tobool471, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %343 = load i32* %ports, align 4
  %idxprom472 = sext i32 %343 to i64
  %344 = load %struct.ehci_hcd** %ehci, align 8
  %regs473 = getelementptr inbounds %struct.ehci_hcd* %344, i32 0, i32 8
  %345 = load %struct.ehci_regs** %regs473, align 8
  %port_status474 = getelementptr inbounds %struct.ehci_regs* %345, i32 0, i32 11
  %arrayidx475 = getelementptr [0 x i32]* %port_status474, i32 0, i64 %idxprom472
  store i32* %arrayidx475, i32** %sreg, align 8
  %346 = load %struct.ehci_hcd** %ehci, align 8
  %347 = load i32** %sreg, align 8
  %call476 = call i32 @ehci_readl(%struct.ehci_hcd* %346, i32* %347) noredzone
  %and477 = and i32 %call476, -43
  store i32 %and477, i32* %temp, align 4
  %348 = load i32* %temp, align 4
  %and478 = and i32 %348, 4
  %tobool479 = icmp ne i32 %and478, 0
  br i1 %tobool479, label %if.then480, label %if.end482

if.then480:                                       ; preds = %while.body
  %349 = load %struct.ehci_hcd** %ehci, align 8
  %350 = load i32* %temp, align 4
  %or481 = or i32 %350, 128
  %351 = load i32** %sreg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %349, i32 %or481, i32* %351) noredzone
  br label %if.end482

if.end482:                                        ; preds = %if.then480, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %352 = load %struct.ehci_hcd** %ehci, align 8
  %lock483 = getelementptr inbounds %struct.ehci_hcd* %352, i32 0, i32 11
  %353 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock483, i64 %353) noredzone
  %354 = load %struct.ehci_hcd** %ehci, align 8
  %call484 = call i32 @ehci_halt(%struct.ehci_hcd* %354) noredzone
  br label %do.body485

do.body485:                                       ; preds = %while.end
  br label %do.body486

do.body486:                                       ; preds = %do.body485
  %cmp489 = icmp eq i64* %__dummy487, %__dummy2488
  %conv490 = zext i1 %cmp489 to i32
  %355 = load %struct.ehci_hcd** %ehci, align 8
  %lock491 = getelementptr inbounds %struct.ehci_hcd* %355, i32 0, i32 11
  %call492 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock491) noredzone
  %call493 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call492) noredzone
  store i64 %call493, i64* %flags, align 8
  br label %do.end494

do.end494:                                        ; preds = %do.body486
  br label %do.end495

do.end495:                                        ; preds = %do.end494
  %356 = load %struct.ehci_hcd** %ehci, align 8
  %357 = load i32** %status_reg, align 8
  %call496 = call i32 @ehci_readl(%struct.ehci_hcd* %356, i32* %357) noredzone
  store i32 %call496, i32* %temp, align 4
  %358 = load i32* %selector, align 4
  %shl = shl i32 %358, 16
  %359 = load i32* %temp, align 4
  %or497 = or i32 %359, %shl
  store i32 %or497, i32* %temp, align 4
  %360 = load %struct.ehci_hcd** %ehci, align 8
  %361 = load i32* %temp, align 4
  %362 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %360, i32 %361, i32* %362) noredzone
  br label %sw.epilog499

sw.default498:                                    ; preds = %if.end373
  br label %error

sw.epilog499:                                     ; preds = %do.end495, %if.end450, %if.end422, %if.end413, %if.then380
  %363 = load %struct.ehci_hcd** %ehci, align 8
  %364 = load %struct.ehci_hcd** %ehci, align 8
  %regs500 = getelementptr inbounds %struct.ehci_hcd* %364, i32 0, i32 8
  %365 = load %struct.ehci_regs** %regs500, align 8
  %command501 = getelementptr inbounds %struct.ehci_regs* %365, i32 0, i32 0
  %call502 = call i32 @ehci_readl(%struct.ehci_hcd* %363, i32* %command501) noredzone
  br label %sw.epilog504

sw.default503:                                    ; preds = %do.end13
  br label %error

error:                                            ; preds = %sw.default503, %sw.default498, %if.then456, %if.then426, %if.then389, %if.then366, %sw.default334, %if.then211, %if.then194, %if.then96, %sw.default84, %if.then42, %if.then30, %if.then, %sw.default
  store i32 -32, i32* %retval8, align 4
  br label %sw.epilog504

sw.epilog504:                                     ; preds = %error, %sw.epilog499, %if.then372, %sw.epilog335, %if.end330, %sw.bb89, %sw.bb88, %sw.epilog85, %sw.epilog
  br label %error_exit

error_exit:                                       ; preds = %sw.epilog504, %if.then358
  %366 = load %struct.ehci_hcd** %ehci, align 8
  %lock505 = getelementptr inbounds %struct.ehci_hcd* %366, i32 0, i32 11
  %367 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock505, i64 %367) noredzone
  %368 = load i32* %retval8, align 4
  ret i32 %368
}

define internal %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %hcd) nounwind inlinehint noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %hcd_priv = getelementptr inbounds %struct.usb_hcd* %0, i32 0, i32 25
  %arraydecay = getelementptr inbounds [0 x i64]* %hcd_priv, i32 0, i32 0
  %1 = bitcast i64* %arraydecay to %struct.ehci_hcd*
  ret %struct.ehci_hcd* %1
}

declare i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock*) noredzone section ".spinlock.text"

define internal %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) nounwind inlinehint noredzone {
entry:
  %lock.addr = alloca %struct.spinlock*, align 8
  store %struct.spinlock* %lock, %struct.spinlock** %lock.addr, align 8
  %0 = load %struct.spinlock** %lock.addr, align 8
  %1 = getelementptr inbounds %struct.spinlock* %0, i32 0, i32 0
  %rlock = bitcast %union.anon.10* %1 to %struct.raw_spinlock*
  ret %struct.raw_spinlock* %rlock
}

define internal void @ehci_writel(%struct.ehci_hcd* %ehci, i32 %val, i32* %regs) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %val.addr = alloca i32, align 4
  %regs.addr = alloca i32*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %val, i32* %val.addr, align 4
  store i32* %regs, i32** %regs.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = bitcast %struct.ehci_hcd* %0 to i8*
  %bf.field.offs = getelementptr i8* %1, i32 708
  %2 = bitcast i8* %bf.field.offs to i32*
  %3 = load i32* %2, align 4
  %4 = lshr i32 %3, 12
  %bf.clear = and i32 %4, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32* %val.addr, align 4
  %6 = load i32** %regs.addr, align 8
  call void @imx28_ehci_writel(i32 %5, i32* %6) noredzone
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32* %val.addr, align 4
  %8 = load i32** %regs.addr, align 8
  %9 = bitcast i32* %8 to i8*
  call void @writel(i32 %7, i8* %9) noredzone
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

define internal void @spin_unlock_irqrestore(%struct.spinlock* %lock, i64 %flags) nounwind inlinehint noredzone {
entry:
  %lock.addr = alloca %struct.spinlock*, align 8
  %flags.addr = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  store %struct.spinlock* %lock, %struct.spinlock** %lock.addr, align 8
  store i64 %flags, i64* %flags.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %0 = load %struct.spinlock** %lock.addr, align 8
  %1 = getelementptr inbounds %struct.spinlock* %0, i32 0, i32 0
  %rlock = bitcast %union.anon.10* %1 to %struct.raw_spinlock*
  %2 = load i64* %flags.addr, align 8
  call void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock* %rlock, i64 %2) noredzone
  br label %do.end

do.end:                                           ; preds = %do.body
  ret void
}

declare void @msleep(i32) noredzone

declare i64 @msecs_to_jiffies(i32) noredzone

declare void @usb_hcd_start_port_resume(%struct.usb_bus*, i32) noredzone

define internal void @ehci_hub_descriptor(%struct.ehci_hcd* %ehci, %struct.usb_hub_descriptor* %desc) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %desc.addr = alloca %struct.usb_hub_descriptor*, align 8
  %ports = alloca i32, align 4
  %temp = alloca i16, align 2
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.usb_hub_descriptor* %desc, %struct.usb_hub_descriptor** %desc.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 10
  %1 = load i32* %hcs_params, align 4
  %shr = lshr i32 %1, 0
  %and = and i32 %shr, 15
  store i32 %and, i32* %ports, align 4
  %2 = load %struct.usb_hub_descriptor** %desc.addr, align 8
  %bDescriptorType = getelementptr inbounds %struct.usb_hub_descriptor* %2, i32 0, i32 1
  store i8 41, i8* %bDescriptorType, align 1
  %3 = load %struct.usb_hub_descriptor** %desc.addr, align 8
  %bPwrOn2PwrGood = getelementptr inbounds %struct.usb_hub_descriptor* %3, i32 0, i32 4
  store i8 10, i8* %bPwrOn2PwrGood, align 1
  %4 = load %struct.usb_hub_descriptor** %desc.addr, align 8
  %bHubContrCurrent = getelementptr inbounds %struct.usb_hub_descriptor* %4, i32 0, i32 5
  store i8 0, i8* %bHubContrCurrent, align 1
  %5 = load i32* %ports, align 4
  %conv = trunc i32 %5 to i8
  %6 = load %struct.usb_hub_descriptor** %desc.addr, align 8
  %bNbrPorts = getelementptr inbounds %struct.usb_hub_descriptor* %6, i32 0, i32 2
  store i8 %conv, i8* %bNbrPorts, align 1
  %7 = load i32* %ports, align 4
  %div = sdiv i32 %7, 8
  %add = add i32 1, %div
  %conv1 = trunc i32 %add to i16
  store i16 %conv1, i16* %temp, align 2
  %8 = load i16* %temp, align 2
  %conv2 = zext i16 %8 to i32
  %mul = mul i32 2, %conv2
  %add3 = add i32 7, %mul
  %conv4 = trunc i32 %add3 to i8
  %9 = load %struct.usb_hub_descriptor** %desc.addr, align 8
  %bDescLength = getelementptr inbounds %struct.usb_hub_descriptor* %9, i32 0, i32 0
  store i8 %conv4, i8* %bDescLength, align 1
  %10 = load %struct.usb_hub_descriptor** %desc.addr, align 8
  %u = getelementptr inbounds %struct.usb_hub_descriptor* %10, i32 0, i32 6
  %hs = bitcast %union.anon.52* %u to %struct.anon.53*
  %DeviceRemovable = getelementptr inbounds %struct.anon.53* %hs, i32 0, i32 0
  %arrayidx = getelementptr [4 x i8]* %DeviceRemovable, i32 0, i64 0
  %11 = load i16* %temp, align 2
  %conv5 = zext i16 %11 to i64
  call void @llvm.memset.p0i8.i64(i8* %arrayidx, i8 0, i64 %conv5, i32 1, i1 false)
  %12 = load i16* %temp, align 2
  %idxprom = zext i16 %12 to i64
  %13 = load %struct.usb_hub_descriptor** %desc.addr, align 8
  %u6 = getelementptr inbounds %struct.usb_hub_descriptor* %13, i32 0, i32 6
  %hs7 = bitcast %union.anon.52* %u6 to %struct.anon.53*
  %DeviceRemovable8 = getelementptr inbounds %struct.anon.53* %hs7, i32 0, i32 0
  %arrayidx9 = getelementptr [4 x i8]* %DeviceRemovable8, i32 0, i64 %idxprom
  %14 = load i16* %temp, align 2
  %conv10 = zext i16 %14 to i64
  call void @llvm.memset.p0i8.i64(i8* %arrayidx9, i8 -1, i64 %conv10, i32 1, i1 false)
  store i16 8, i16* %temp, align 2
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params11 = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 10
  %16 = load i32* %hcs_params11, align 4
  %and12 = and i32 %16, 16
  %tobool = icmp ne i32 %and12, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %17 = load i16* %temp, align 2
  %conv13 = zext i16 %17 to i32
  %or = or i32 %conv13, 1
  %conv14 = trunc i32 %or to i16
  store i16 %conv14, i16* %temp, align 2
  br label %if.end

if.else:                                          ; preds = %entry
  %18 = load i16* %temp, align 2
  %conv15 = zext i16 %18 to i32
  %or16 = or i32 %conv15, 2
  %conv17 = trunc i32 %or16 to i16
  store i16 %conv17, i16* %temp, align 2
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %19 = load i16* %temp, align 2
  %20 = load %struct.usb_hub_descriptor** %desc.addr, align 8
  %wHubCharacteristics = getelementptr inbounds %struct.usb_hub_descriptor* %20, i32 0, i32 3
  store i16 %19, i16* %wHubCharacteristics, align 1
  ret void
}

declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) nounwind

declare i32 @mod_timer(%struct.timer_list*, i64) noredzone

define internal %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %ehci) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %__mptr = alloca [0 x i64]*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = bitcast %struct.ehci_hcd* %0 to i8*
  %2 = bitcast i8* %1 to [0 x i64]*
  store [0 x i64]* %2, [0 x i64]** %__mptr, align 8
  %3 = load [0 x i64]** %__mptr, align 8
  %4 = bitcast [0 x i64]* %3 to i8*
  %add.ptr = getelementptr i8* %4, i64 -600
  %5 = bitcast i8* %add.ptr to %struct.usb_hcd*
  ret %struct.usb_hcd* %5
}

define internal i32 @variable_test_bit(i64 %nr, i64* %addr) nounwind inlinehint noredzone {
entry:
  %nr.addr = alloca i64, align 8
  %addr.addr = alloca i64*, align 8
  %oldbit = alloca i32, align 4
  store i64 %nr, i64* %nr.addr, align 8
  store i64* %addr, i64** %addr.addr, align 8
  %0 = load i64** %addr.addr, align 8
  %1 = load i64* %nr.addr, align 8
  %2 = call i32 asm sideeffect "bt $2,$1\0A\09sbb $0,$0", "=r,*m,Ir,~{dirflag},~{fpsr},~{flags}"(i64* %0, i64 %1) nounwind, !srcloc !2
  store i32 %2, i32* %oldbit, align 4
  %3 = load i32* %oldbit, align 4
  ret i32 %3
}

declare void @usb_hcd_end_port_resume(%struct.usb_bus*, i32) noredzone

declare i32 @dev_err(%struct.device*, i8*, ...) noredzone

define internal i32 @check_reset_complete(%struct.ehci_hcd* %ehci, i32 %index, i32* %status_reg, i32 %port_status) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %index.addr = alloca i32, align 4
  %status_reg.addr = alloca i32*, align 8
  %port_status.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %index, i32* %index.addr, align 4
  store i32* %status_reg, i32** %status_reg.addr, align 8
  store i32 %port_status, i32* %port_status.addr, align 4
  %0 = load i32* %port_status.addr, align 4
  %and = and i32 %0, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32* %port_status.addr, align 4
  store i32 %1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32* %port_status.addr, align 4
  %and1 = and i32 %2, 4
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.end
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %3) noredzone
  %4 = bitcast %struct.usb_hcd* %call to i8*
  %bf.field.offs = getelementptr i8* %4, i32 352
  %5 = bitcast i8* %bf.field.offs to i32*
  %6 = load i32* %5, align 8
  %7 = lshr i32 %6, 7
  %bf.clear = and i32 %7, 1
  %tobool4 = icmp ne i32 %bf.clear, 0
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %8 = load i32* %port_status.addr, align 4
  store i32 %8, i32* %retval
  br label %return

if.end6:                                          ; preds = %if.then3
  %9 = load i32* %port_status.addr, align 4
  %or = or i32 %9, 8192
  store i32 %or, i32* %port_status.addr, align 4
  %10 = load i32* %port_status.addr, align 4
  %and7 = and i32 %10, -43
  store i32 %and7, i32* %port_status.addr, align 4
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %12 = load i32* %port_status.addr, align 4
  %13 = load i32** %status_reg.addr, align 8
  call void @ehci_writel(%struct.ehci_hcd* %11, i32 %12, i32* %13) noredzone
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %15 = bitcast %struct.ehci_hcd* %14 to i8*
  %bf.field.offs8 = getelementptr i8* %15, i32 708
  %16 = bitcast i8* %bf.field.offs8 to i32*
  %17 = load i32* %16, align 4
  %18 = lshr i32 %17, 5
  %bf.clear9 = and i32 %18, 1
  %tobool10 = icmp ne i32 %bf.clear9, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end6
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @set_ohci_hcfs(%struct.ehci_hcd* %19, i32 1) noredzone
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end6
  br label %if.end18

if.else:                                          ; preds = %if.end
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %21 = bitcast %struct.ehci_hcd* %20 to i8*
  %bf.field.offs13 = getelementptr i8* %21, i32 708
  %22 = bitcast i8* %bf.field.offs13 to i32*
  %23 = load i32* %22, align 4
  %24 = lshr i32 %23, 5
  %bf.clear14 = and i32 %24, 1
  %tobool15 = icmp ne i32 %bf.clear14, 0
  br i1 %tobool15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.else
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @set_ohci_hcfs(%struct.ehci_hcd* %25, i32 0) noredzone
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end12
  %26 = load i32* %port_status.addr, align 4
  store i32 %26, i32* %retval
  br label %return

return:                                           ; preds = %if.end18, %if.then5, %if.then
  %27 = load i32* %retval
  ret i32 %27
}

define internal i32 @ehci_port_speed(%struct.ehci_hcd* %ehci, i32 %portsc) nounwind inlinehint noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %portsc.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %portsc, i32* %portsc.addr, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %0) noredzone
  %1 = bitcast %struct.usb_hcd* %call to i8*
  %bf.field.offs = getelementptr i8* %1, i32 352
  %2 = bitcast i8* %bf.field.offs to i32*
  %3 = load i32* %2, align 8
  %4 = lshr i32 %3, 7
  %bf.clear = and i32 %4, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32* %portsc.addr, align 4
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %7 = bitcast %struct.ehci_hcd* %6 to i8*
  %bf.field.offs1 = getelementptr i8* %7, i32 720
  %8 = bitcast i8* %bf.field.offs1 to i32*
  %9 = load i32* %8, align 8
  %bf.clear2 = and i32 %9, 1
  %tobool3 = icmp ne i32 %bf.clear2, 0
  %cond = select i1 %tobool3, i32 25, i32 26
  %shr = lshr i32 %5, %cond
  %and = and i32 %shr, 3
  switch i32 %and, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb4
    i32 2, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

sw.bb4:                                           ; preds = %if.then
  store i32 512, i32* %retval
  br label %return

sw.bb5:                                           ; preds = %if.then
  br label %sw.default

sw.default:                                       ; preds = %if.then, %sw.bb5
  store i32 1024, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 1024, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %sw.default, %sw.bb4, %sw.bb
  %10 = load i32* %retval
  ret i32 %10
}

define internal i32 @dbg_port_buf(i8* %buf, i32 %len, i8* %label, i32 %port, i32 %status) nounwind inlinehint noredzone {
entry:
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %port.addr = alloca i32, align 4
  %status.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  store i32 %port, i32* %port.addr, align 4
  store i32 %status, i32* %status.addr, align 4
  ret i32 0
}

define internal void @put_unaligned_le32(i32 %val, i8* %p) nounwind inlinehint noredzone {
entry:
  %val.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  store i32 %val, i32* %val.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = load i32* %val.addr, align 4
  %1 = load i8** %p.addr, align 8
  %2 = bitcast i8* %1 to i32*
  store i32 %0, i32* %2, align 4
  ret void
}

declare i64 @llvm.expect.i64(i64, i64) nounwind readnone

define internal i32 @readl(i8* %addr) nounwind inlinehint noredzone {
entry:
  %addr.addr = alloca i8*, align 8
  %ret = alloca i32, align 4
  store i8* %addr, i8** %addr.addr, align 8
  %0 = load i8** %addr.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) nounwind, !srcloc !3
  store i32 %2, i32* %ret, align 4
  %3 = load i32* %ret, align 4
  ret i32 %3
}

define internal void @ehci_quiesce(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %temp = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 12
  %1 = load i32* %rh_state, align 4
  %cmp = icmp ne i32 %1, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 55
  %3 = load i32* %command, align 4
  %shl = shl i32 %3, 10
  %and = and i32 %shl, 49152
  store i32 %and, i32* %temp, align 4
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 8
  %6 = load %struct.ehci_regs** %regs, align 8
  %status = getelementptr inbounds %struct.ehci_regs* %6, i32 0, i32 1
  %7 = bitcast i32* %status to i8*
  %8 = load i32* %temp, align 4
  %call = call i32 @ehci_handshake(%struct.ehci_hcd* %4, i8* %7, i32 49152, i32 %8, i32 2000) noredzone
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command1 = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 55
  %11 = load i32* %command1, align 4
  %and2 = and i32 %11, -49
  store i32 %and2, i32* %command1, align 4
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command3 = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 55
  %14 = load i32* %command3, align 4
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs4 = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 8
  %16 = load %struct.ehci_regs** %regs4, align 8
  %command5 = getelementptr inbounds %struct.ehci_regs* %16, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %12, i32 %14, i32* %command5) noredzone
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock6 = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock6) noredzone
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs7 = getelementptr inbounds %struct.ehci_hcd* %19, i32 0, i32 8
  %20 = load %struct.ehci_regs** %regs7, align 8
  %status8 = getelementptr inbounds %struct.ehci_regs* %20, i32 0, i32 1
  %21 = bitcast i32* %status8 to i8*
  %call9 = call i32 @ehci_handshake(%struct.ehci_hcd* %18, i8* %21, i32 49152, i32 0, i32 2000) noredzone
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

define internal i32 @ehci_halt(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %temp = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 8
  %3 = load %struct.ehci_regs** %regs, align 8
  %intr_enable = getelementptr inbounds %struct.ehci_regs* %3, i32 0, i32 2
  call void @ehci_writel(%struct.ehci_hcd* %1, i32 0, i32* %intr_enable) noredzone
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %4) noredzone
  %5 = bitcast %struct.usb_hcd* %call to i8*
  %bf.field.offs = getelementptr i8* %5, i32 352
  %6 = bitcast i8* %bf.field.offs to i32*
  %7 = load i32* %6, align 8
  %8 = lshr i32 %7, 7
  %bf.clear = and i32 %8, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call1 = call i32 @tdi_in_host_mode(%struct.ehci_hcd* %9) noredzone
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock3 = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock3) noredzone
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 55
  %12 = load i32* %command, align 4
  %and = and i32 %12, -2
  store i32 %and, i32* %command, align 4
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs4 = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 8
  %15 = load %struct.ehci_regs** %regs4, align 8
  %command5 = getelementptr inbounds %struct.ehci_regs* %15, i32 0, i32 0
  %call6 = call i32 @ehci_readl(%struct.ehci_hcd* %13, i32* %command5) noredzone
  store i32 %call6, i32* %temp, align 4
  %16 = load i32* %temp, align 4
  %and7 = and i32 %16, -66
  store i32 %and7, i32* %temp, align 4
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %18 = load i32* %temp, align 4
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs8 = getelementptr inbounds %struct.ehci_hcd* %19, i32 0, i32 8
  %20 = load %struct.ehci_regs** %regs8, align 8
  %command9 = getelementptr inbounds %struct.ehci_regs* %20, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %17, i32 %18, i32* %command9) noredzone
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock10 = getelementptr inbounds %struct.ehci_hcd* %21, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock10) noredzone
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call11 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %22) noredzone
  %irq = getelementptr inbounds %struct.usb_hcd* %call11, i32 0, i32 13
  %23 = load i32* %irq, align 4
  call void @synchronize_irq(i32 %23) noredzone
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs12 = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 8
  %26 = load %struct.ehci_regs** %regs12, align 8
  %status = getelementptr inbounds %struct.ehci_regs* %26, i32 0, i32 1
  %27 = bitcast i32* %status to i8*
  %call13 = call i32 @ehci_handshake(%struct.ehci_hcd* %24, i8* %27, i32 4096, i32 4096, i32 2000) noredzone
  store i32 %call13, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %28 = load i32* %retval
  ret i32 %28
}

define i32 @ehci_setup(%struct.usb_hcd* %hcd) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %retval1 = alloca i32, align 4
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %caps = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 7
  %2 = load %struct.ehci_caps** %caps, align 8
  %3 = bitcast %struct.ehci_caps* %2 to i8*
  %4 = load %struct.ehci_hcd** %ehci, align 8
  %5 = load %struct.ehci_hcd** %ehci, align 8
  %caps2 = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 7
  %6 = load %struct.ehci_caps** %caps2, align 8
  %hc_capbase = getelementptr inbounds %struct.ehci_caps* %6, i32 0, i32 0
  %call3 = call i32 @ehci_readl(%struct.ehci_hcd* %4, i32* %hc_capbase) noredzone
  %shr = lshr i32 %call3, 0
  %and = and i32 255, %shr
  %idx.ext = zext i32 %and to i64
  %add.ptr = getelementptr i8* %3, i64 %idx.ext
  %7 = bitcast i8* %add.ptr to %struct.ehci_regs*
  %8 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 8
  store %struct.ehci_regs* %7, %struct.ehci_regs** %regs, align 8
  %9 = load %struct.ehci_hcd** %ehci, align 8
  call void @dbg_hcs_params(%struct.ehci_hcd* %9, i8* getelementptr inbounds ([6 x i8]* @.str3, i32 0, i32 0)) noredzone
  %10 = load %struct.ehci_hcd** %ehci, align 8
  call void @dbg_hcc_params(%struct.ehci_hcd* %10, i8* getelementptr inbounds ([6 x i8]* @.str3, i32 0, i32 0)) noredzone
  %11 = load %struct.ehci_hcd** %ehci, align 8
  %12 = load %struct.ehci_hcd** %ehci, align 8
  %caps4 = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 7
  %13 = load %struct.ehci_caps** %caps4, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_caps* %13, i32 0, i32 1
  %call5 = call i32 @ehci_readl(%struct.ehci_hcd* %11, i32* %hcs_params) noredzone
  %14 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params6 = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 10
  store i32 %call5, i32* %hcs_params6, align 4
  %15 = load %struct.ehci_hcd** %ehci, align 8
  %sbrn = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 60
  store i8 32, i8* %sbrn, align 1
  %16 = load %struct.ehci_hcd** %ehci, align 8
  %call7 = call i32 @ehci_mem_init(%struct.ehci_hcd* %16, i32 208) noredzone
  store i32 %call7, i32* %retval1, align 4
  %17 = load i32* %retval1, align 4
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %err_mem

if.end:                                           ; preds = %entry
  %18 = load %struct.usb_hcd** %hcd.addr, align 8
  call void @ehci_init(%struct.usb_hcd* %18) noredzone
  %19 = load %struct.ehci_hcd** %ehci, align 8
  %call8 = call i32 @ehci_halt(%struct.ehci_hcd* %19) noredzone
  store i32 %call8, i32* %retval1, align 4
  %20 = load i32* %retval1, align 4
  %tobool9 = icmp ne i32 %20, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  br label %clean

if.end11:                                         ; preds = %if.end
  %21 = load %struct.ehci_hcd** %ehci, align 8
  %call12 = call i32 @ehci_reset(%struct.ehci_hcd* %21) noredzone
  store i32 0, i32* %retval
  br label %return

clean:                                            ; preds = %if.then10
  %22 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_mem_cleanup(%struct.ehci_hcd* %22) noredzone
  br label %err_mem

err_mem:                                          ; preds = %clean, %if.then
  %23 = load i32* %retval1, align 4
  store i32 %23, i32* %retval
  br label %return

return:                                           ; preds = %err_mem, %if.end11
  %24 = load i32* %retval
  ret i32 %24
}

define internal void @dbg_hcs_params(%struct.ehci_hcd* %ehci, i8* %label) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %label.addr = alloca i8*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i8* %label, i8** %label.addr, align 8
  ret void
}

define internal void @dbg_hcc_params(%struct.ehci_hcd* %ehci, i8* %label) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %label.addr = alloca i8*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i8* %label, i8** %label.addr, align 8
  ret void
}

define internal i32 @ehci_mem_init(%struct.ehci_hcd* %ehci, i32 %flags) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %hw = alloca %struct.ehci_qh_hw*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %0) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call, i32 0, i32 0
  %controller = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 0
  %1 = load %struct.device** %controller, align 8
  %call1 = call %struct.dma_pool* @dma_pool_create(i8* getelementptr inbounds ([9 x i8]* @.str33, i32 0, i32 0), %struct.device* %1, i64 96, i64 32, i64 4096) noredzone
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qtd_pool = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 49
  store %struct.dma_pool* %call1, %struct.dma_pool** %qtd_pool, align 8
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qtd_pool2 = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 49
  %4 = load %struct.dma_pool** %qtd_pool2, align 8
  %tobool = icmp ne %struct.dma_pool* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %fail

if.end:                                           ; preds = %entry
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call3 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %5) noredzone
  %self4 = getelementptr inbounds %struct.usb_hcd* %call3, i32 0, i32 0
  %controller5 = getelementptr inbounds %struct.usb_bus* %self4, i32 0, i32 0
  %6 = load %struct.device** %controller5, align 8
  %call6 = call %struct.dma_pool* @dma_pool_create(i8* getelementptr inbounds ([8 x i8]* @.str34, i32 0, i32 0), %struct.device* %6, i64 96, i64 32, i64 4096) noredzone
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_pool = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 48
  store %struct.dma_pool* %call6, %struct.dma_pool** %qh_pool, align 8
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_pool7 = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 48
  %9 = load %struct.dma_pool** %qh_pool7, align 8
  %tobool8 = icmp ne %struct.dma_pool* %9, null
  br i1 %tobool8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %if.end
  br label %fail

if.end10:                                         ; preds = %if.end
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %11 = load i32* %flags.addr, align 4
  %call11 = call %struct.ehci_qh* @ehci_qh_alloc(%struct.ehci_hcd* %10, i32 %11) noredzone
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 15
  store %struct.ehci_qh* %call11, %struct.ehci_qh** %async, align 8
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async12 = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 15
  %14 = load %struct.ehci_qh** %async12, align 8
  %tobool13 = icmp ne %struct.ehci_qh* %14, null
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.end10
  br label %fail

if.end15:                                         ; preds = %if.end10
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call16 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %15) noredzone
  %self17 = getelementptr inbounds %struct.usb_hcd* %call16, i32 0, i32 0
  %controller18 = getelementptr inbounds %struct.usb_bus* %self17, i32 0, i32 0
  %16 = load %struct.device** %controller18, align 8
  %call19 = call %struct.dma_pool* @dma_pool_create(i8* getelementptr inbounds ([9 x i8]* @.str35, i32 0, i32 0), %struct.device* %16, i64 192, i64 32, i64 4096) noredzone
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %itd_pool = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 50
  store %struct.dma_pool* %call19, %struct.dma_pool** %itd_pool, align 8
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %itd_pool20 = getelementptr inbounds %struct.ehci_hcd* %18, i32 0, i32 50
  %19 = load %struct.dma_pool** %itd_pool20, align 8
  %tobool21 = icmp ne %struct.dma_pool* %19, null
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %if.end15
  br label %fail

if.end23:                                         ; preds = %if.end15
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call24 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %20) noredzone
  %self25 = getelementptr inbounds %struct.usb_hcd* %call24, i32 0, i32 0
  %controller26 = getelementptr inbounds %struct.usb_bus* %self25, i32 0, i32 0
  %21 = load %struct.device** %controller26, align 8
  %call27 = call %struct.dma_pool* @dma_pool_create(i8* getelementptr inbounds ([10 x i8]* @.str36, i32 0, i32 0), %struct.device* %21, i64 96, i64 32, i64 4096) noredzone
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %sitd_pool = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 51
  store %struct.dma_pool* %call27, %struct.dma_pool** %sitd_pool, align 8
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %sitd_pool28 = getelementptr inbounds %struct.ehci_hcd* %23, i32 0, i32 51
  %24 = load %struct.dma_pool** %sitd_pool28, align 8
  %tobool29 = icmp ne %struct.dma_pool* %24, null
  br i1 %tobool29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.end23
  br label %fail

if.end31:                                         ; preds = %if.end23
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call32 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %25) noredzone
  %self33 = getelementptr inbounds %struct.usb_hcd* %call32, i32 0, i32 0
  %controller34 = getelementptr inbounds %struct.usb_bus* %self33, i32 0, i32 0
  %26 = load %struct.device** %controller34, align 8
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %27, i32 0, i32 21
  %28 = load i32* %periodic_size, align 4
  %conv = zext i32 %28 to i64
  %mul = mul i64 %conv, 4
  %29 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_dma = getelementptr inbounds %struct.ehci_hcd* %29, i32 0, i32 23
  %30 = load i32* %flags.addr, align 4
  %call35 = call i8* @dma_alloc_attrs(%struct.device* %26, i64 %mul, i64* %periodic_dma, i32 %30, %struct.dma_attrs* null) noredzone
  %31 = bitcast i8* %call35 to i32*
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 22
  store i32* %31, i32** %periodic, align 8
  %33 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic36 = getelementptr inbounds %struct.ehci_hcd* %33, i32 0, i32 22
  %34 = load i32** %periodic36, align 8
  %cmp = icmp eq i32* %34, null
  br i1 %cmp, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end31
  br label %fail

if.end39:                                         ; preds = %if.end31
  %35 = load %struct.ehci_hcd** %ehci.addr, align 8
  %36 = bitcast %struct.ehci_hcd* %35 to i8*
  %bf.field.offs = getelementptr i8* %36, i32 708
  %37 = bitcast i8* %bf.field.offs to i32*
  %38 = load i32* %37, align 4
  %39 = lshr i32 %38, 8
  %bf.clear = and i32 %39, 1
  %tobool40 = icmp ne i32 %bf.clear, 0
  br i1 %tobool40, label %if.then41, label %if.else

if.then41:                                        ; preds = %if.end39
  %40 = load %struct.ehci_hcd** %ehci.addr, align 8
  %41 = load i32* %flags.addr, align 4
  %call42 = call %struct.ehci_qh* @ehci_qh_alloc(%struct.ehci_hcd* %40, i32 %41) noredzone
  %42 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy = getelementptr inbounds %struct.ehci_hcd* %42, i32 0, i32 16
  store %struct.ehci_qh* %call42, %struct.ehci_qh** %dummy, align 8
  %43 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy43 = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 16
  %44 = load %struct.ehci_qh** %dummy43, align 8
  %tobool44 = icmp ne %struct.ehci_qh* %44, null
  br i1 %tobool44, label %if.end46, label %if.then45

if.then45:                                        ; preds = %if.then41
  br label %fail

if.end46:                                         ; preds = %if.then41
  %45 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy47 = getelementptr inbounds %struct.ehci_hcd* %45, i32 0, i32 16
  %46 = load %struct.ehci_qh** %dummy47, align 8
  %hw48 = getelementptr inbounds %struct.ehci_qh* %46, i32 0, i32 0
  %47 = load %struct.ehci_qh_hw** %hw48, align 8
  store %struct.ehci_qh_hw* %47, %struct.ehci_qh_hw** %hw, align 8
  %48 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call49 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %48, i32 1) noredzone
  %49 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qh_hw* %49, i32 0, i32 0
  store i32 %call49, i32* %hw_next, align 4
  %50 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call50 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %50, i32 1) noredzone
  %51 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_qtd_next = getelementptr inbounds %struct.ehci_qh_hw* %51, i32 0, i32 4
  store i32 %call50, i32* %hw_qtd_next, align 4
  %52 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call51 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %52, i32 1) noredzone
  %53 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_alt_next = getelementptr inbounds %struct.ehci_qh_hw* %53, i32 0, i32 5
  store i32 %call51, i32* %hw_alt_next, align 4
  %54 = load %struct.ehci_qh_hw** %hw, align 8
  %55 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy52 = getelementptr inbounds %struct.ehci_hcd* %55, i32 0, i32 16
  %56 = load %struct.ehci_qh** %dummy52, align 8
  %hw53 = getelementptr inbounds %struct.ehci_qh* %56, i32 0, i32 0
  store %struct.ehci_qh_hw* %54, %struct.ehci_qh_hw** %hw53, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end46
  %57 = load i32* %i, align 4
  %58 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size54 = getelementptr inbounds %struct.ehci_hcd* %58, i32 0, i32 21
  %59 = load i32* %periodic_size54, align 4
  %cmp55 = icmp ult i32 %57, %59
  br i1 %cmp55, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %60 = load %struct.ehci_hcd** %ehci.addr, align 8
  %61 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy57 = getelementptr inbounds %struct.ehci_hcd* %61, i32 0, i32 16
  %62 = load %struct.ehci_qh** %dummy57, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %62, i32 0, i32 1
  %63 = load i64* %qh_dma, align 8
  %conv58 = trunc i64 %63 to i32
  %call59 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %60, i32 %conv58) noredzone
  %64 = load i32* %i, align 4
  %idxprom = sext i32 %64 to i64
  %65 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic60 = getelementptr inbounds %struct.ehci_hcd* %65, i32 0, i32 22
  %66 = load i32** %periodic60, align 8
  %arrayidx = getelementptr i32* %66, i64 %idxprom
  store i32 %call59, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %67 = load i32* %i, align 4
  %inc = add i32 %67, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end73

if.else:                                          ; preds = %if.end39
  store i32 0, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc70, %if.else
  %68 = load i32* %i, align 4
  %69 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size62 = getelementptr inbounds %struct.ehci_hcd* %69, i32 0, i32 21
  %70 = load i32* %periodic_size62, align 4
  %cmp63 = icmp ult i32 %68, %70
  br i1 %cmp63, label %for.body65, label %for.end72

for.body65:                                       ; preds = %for.cond61
  %71 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call66 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %71, i32 1) noredzone
  %72 = load i32* %i, align 4
  %idxprom67 = sext i32 %72 to i64
  %73 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic68 = getelementptr inbounds %struct.ehci_hcd* %73, i32 0, i32 22
  %74 = load i32** %periodic68, align 8
  %arrayidx69 = getelementptr i32* %74, i64 %idxprom67
  store i32 %call66, i32* %arrayidx69, align 4
  br label %for.inc70

for.inc70:                                        ; preds = %for.body65
  %75 = load i32* %i, align 4
  %inc71 = add i32 %75, 1
  store i32 %inc71, i32* %i, align 4
  br label %for.cond61

for.end72:                                        ; preds = %for.cond61
  br label %if.end73

if.end73:                                         ; preds = %for.end72, %for.end
  %76 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size74 = getelementptr inbounds %struct.ehci_hcd* %76, i32 0, i32 21
  %77 = load i32* %periodic_size74, align 4
  %conv75 = zext i32 %77 to i64
  %78 = load i32* %flags.addr, align 4
  %call76 = call i8* @kcalloc(i64 %conv75, i64 8, i32 %78) noredzone
  %79 = bitcast i8* %call76 to %union.ehci_shadow*
  %80 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow = getelementptr inbounds %struct.ehci_hcd* %80, i32 0, i32 26
  store %union.ehci_shadow* %79, %union.ehci_shadow** %pshadow, align 8
  %81 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow77 = getelementptr inbounds %struct.ehci_hcd* %81, i32 0, i32 26
  %82 = load %union.ehci_shadow** %pshadow77, align 8
  %cmp78 = icmp ne %union.ehci_shadow* %82, null
  br i1 %cmp78, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end73
  store i32 0, i32* %retval
  br label %return

if.end81:                                         ; preds = %if.end73
  br label %fail

fail:                                             ; preds = %if.end81, %if.then45, %if.then38, %if.then30, %if.then22, %if.then14, %if.then9, %if.then
  %83 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_mem_cleanup(%struct.ehci_hcd* %83) noredzone
  store i32 -12, i32* %retval
  br label %return

return:                                           ; preds = %fail, %if.then80
  %84 = load i32* %retval
  ret i32 %84
}

define internal void @ehci_init(%struct.usb_hcd* %hcd) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %temp = alloca i32, align 4
  %hcc_params = alloca i32, align 4
  %hw = alloca %struct.ehci_qh_hw*, align 8
  %.compoundliteral = alloca %struct.raw_spinlock, align 4
  %_min1 = alloca i32, align 4
  %_min2 = alloca i32, align 4
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 11
  %call1 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  br label %do.body2

do.body2:                                         ; preds = %do.body
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %lock3 = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 11
  %3 = getelementptr inbounds %struct.spinlock* %lock3, i32 0, i32 0
  %rlock = bitcast %union.anon.10* %3 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock* %.compoundliteral, i32 0, i32 0
  %4 = getelementptr inbounds %struct.arch_spinlock* %raw_lock, i32 0, i32 0
  %head_tail = bitcast %union.anon.11* %4 to i32*
  store i32 0, i32* %head_tail, align 4
  %5 = bitcast %struct.raw_spinlock* %rlock to i8*
  %6 = bitcast %struct.raw_spinlock* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 4, i32 4, i1 false)
  br label %do.end

do.end:                                           ; preds = %do.body2
  br label %do.end4

do.end4:                                          ; preds = %do.end
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %8 = bitcast %struct.ehci_hcd* %7 to i8*
  %bf.field.offs = getelementptr i8* %8, i32 708
  %9 = bitcast i8* %bf.field.offs to i32*
  %10 = load i32* %9, align 4
  %11 = and i32 %10, -65
  %12 = or i32 %11, 64
  store i32 %12, i32* %9, align 4
  %13 = load %struct.ehci_hcd** %ehci, align 8
  %hrtimer = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 3
  call void @hrtimer_init(%struct.hrtimer* %hrtimer, i32 1, i32 0) noredzone
  %14 = load %struct.ehci_hcd** %ehci, align 8
  %hrtimer5 = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 3
  %function = getelementptr inbounds %struct.hrtimer* %hrtimer5, i32 0, i32 2
  store i32 (%struct.hrtimer*)* @ehci_hrtimer_func, i32 (%struct.hrtimer*)** %function, align 8
  %15 = load %struct.ehci_hcd** %ehci, align 8
  %next_hrtimer_event = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 0
  store i32 99, i32* %next_hrtimer_event, align 4
  %16 = load %struct.ehci_hcd** %ehci, align 8
  %17 = load %struct.ehci_hcd** %ehci, align 8
  %caps = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 7
  %18 = load %struct.ehci_caps** %caps, align 8
  %hcc_params6 = getelementptr inbounds %struct.ehci_caps* %18, i32 0, i32 2
  %call7 = call i32 @ehci_readl(%struct.ehci_hcd* %16, i32* %hcc_params6) noredzone
  store i32 %call7, i32* %hcc_params, align 4
  %19 = load %struct.ehci_hcd** %ehci, align 8
  %uframe_periodic_max = getelementptr inbounds %struct.ehci_hcd* %19, i32 0, i32 36
  store i32 100, i32* %uframe_periodic_max, align 4
  %20 = load %struct.ehci_hcd** %ehci, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %20, i32 0, i32 21
  store i32 1024, i32* %periodic_size, align 4
  %21 = load %struct.ehci_hcd** %ehci, align 8
  %async_unlink = getelementptr inbounds %struct.ehci_hcd* %21, i32 0, i32 17
  call void @INIT_LIST_HEAD(%struct.list_head* %async_unlink) noredzone
  %22 = load %struct.ehci_hcd** %ehci, align 8
  %async_idle = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 18
  call void @INIT_LIST_HEAD(%struct.list_head* %async_idle) noredzone
  %23 = load %struct.ehci_hcd** %ehci, align 8
  %intr_unlink_wait = getelementptr inbounds %struct.ehci_hcd* %23, i32 0, i32 27
  call void @INIT_LIST_HEAD(%struct.list_head* %intr_unlink_wait) noredzone
  %24 = load %struct.ehci_hcd** %ehci, align 8
  %intr_unlink = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 28
  call void @INIT_LIST_HEAD(%struct.list_head* %intr_unlink) noredzone
  %25 = load %struct.ehci_hcd** %ehci, align 8
  %intr_qh_list = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 24
  call void @INIT_LIST_HEAD(%struct.list_head* %intr_qh_list) noredzone
  %26 = load %struct.ehci_hcd** %ehci, align 8
  %cached_itd_list = getelementptr inbounds %struct.ehci_hcd* %26, i32 0, i32 37
  call void @INIT_LIST_HEAD(%struct.list_head* %cached_itd_list) noredzone
  %27 = load %struct.ehci_hcd** %ehci, align 8
  %cached_sitd_list = getelementptr inbounds %struct.ehci_hcd* %27, i32 0, i32 39
  call void @INIT_LIST_HEAD(%struct.list_head* %cached_sitd_list) noredzone
  %28 = load %struct.ehci_hcd** %ehci, align 8
  %tt_list = getelementptr inbounds %struct.ehci_hcd* %28, i32 0, i32 63
  call void @INIT_LIST_HEAD(%struct.list_head* %tt_list) noredzone
  %29 = load i32* %hcc_params, align 4
  %and = and i32 %29, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end4
  %30 = load %struct.ehci_hcd** %ehci, align 8
  %periodic_size8 = getelementptr inbounds %struct.ehci_hcd* %30, i32 0, i32 21
  store i32 512, i32* %periodic_size8, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end4
  %31 = load i32* %hcc_params, align 4
  %and9 = and i32 %31, 128
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end
  %32 = load %struct.ehci_hcd** %ehci, align 8
  %i_thresh = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 25
  store i32 0, i32* %i_thresh, align 4
  br label %if.end14

if.else:                                          ; preds = %if.end
  %33 = load i32* %hcc_params, align 4
  %shr = lshr i32 %33, 4
  %and12 = and i32 %shr, 7
  %add = add i32 2, %and12
  %34 = load %struct.ehci_hcd** %ehci, align 8
  %i_thresh13 = getelementptr inbounds %struct.ehci_hcd* %34, i32 0, i32 25
  store i32 %add, i32* %i_thresh13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then11
  %35 = load %struct.ehci_hcd** %ehci, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %35, i32 0, i32 15
  %36 = load %struct.ehci_qh** %async, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %36, i32 0, i32 2
  %qh = bitcast %union.ehci_shadow* %qh_next to %struct.ehci_qh**
  store %struct.ehci_qh* null, %struct.ehci_qh** %qh, align 8
  %37 = load %struct.ehci_hcd** %ehci, align 8
  %async15 = getelementptr inbounds %struct.ehci_hcd* %37, i32 0, i32 15
  %38 = load %struct.ehci_qh** %async15, align 8
  %hw16 = getelementptr inbounds %struct.ehci_qh* %38, i32 0, i32 0
  %39 = load %struct.ehci_qh_hw** %hw16, align 8
  store %struct.ehci_qh_hw* %39, %struct.ehci_qh_hw** %hw, align 8
  %40 = load %struct.ehci_hcd** %ehci, align 8
  %41 = load %struct.ehci_hcd** %ehci, align 8
  %async17 = getelementptr inbounds %struct.ehci_hcd* %41, i32 0, i32 15
  %42 = load %struct.ehci_qh** %async17, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %42, i32 0, i32 1
  %43 = load i64* %qh_dma, align 8
  %conv = trunc i64 %43 to i32
  %and18 = and i32 %conv, -32
  %or = or i32 %and18, 2
  %call19 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %40, i32 %or) noredzone
  %44 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qh_hw* %44, i32 0, i32 0
  store i32 %call19, i32* %hw_next, align 4
  %45 = load %struct.ehci_hcd** %ehci, align 8
  %call20 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %45, i32 32768) noredzone
  %46 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_info1 = getelementptr inbounds %struct.ehci_qh_hw* %46, i32 0, i32 1
  store i32 %call20, i32* %hw_info1, align 4
  %47 = load %struct.ehci_hcd** %ehci, align 8
  %call21 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %47, i32 64) noredzone
  %48 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_token = getelementptr inbounds %struct.ehci_qh_hw* %48, i32 0, i32 6
  store i32 %call21, i32* %hw_token, align 4
  %49 = load %struct.ehci_hcd** %ehci, align 8
  %call22 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %49, i32 1) noredzone
  %50 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_qtd_next = getelementptr inbounds %struct.ehci_qh_hw* %50, i32 0, i32 4
  store i32 %call22, i32* %hw_qtd_next, align 4
  %51 = load %struct.ehci_hcd** %ehci, align 8
  %async23 = getelementptr inbounds %struct.ehci_hcd* %51, i32 0, i32 15
  %52 = load %struct.ehci_qh** %async23, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %52, i32 0, i32 9
  store i8 1, i8* %qh_state, align 1
  %53 = load %struct.ehci_hcd** %ehci, align 8
  %54 = load %struct.ehci_hcd** %ehci, align 8
  %async24 = getelementptr inbounds %struct.ehci_hcd* %54, i32 0, i32 15
  %55 = load %struct.ehci_qh** %async24, align 8
  %dummy = getelementptr inbounds %struct.ehci_qh* %55, i32 0, i32 5
  %56 = load %struct.ehci_qtd** %dummy, align 8
  %qtd_dma = getelementptr inbounds %struct.ehci_qtd* %56, i32 0, i32 5
  %57 = load i64* %qtd_dma, align 8
  %conv25 = trunc i64 %57 to i32
  %call26 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %53, i32 %conv25) noredzone
  %58 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_alt_next = getelementptr inbounds %struct.ehci_qh_hw* %58, i32 0, i32 5
  store i32 %call26, i32* %hw_alt_next, align 4
  %59 = load i32* @log2_irq_thresh, align 4
  %cmp = icmp slt i32 %59, 0
  br i1 %cmp, label %if.then30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end14
  %60 = load i32* @log2_irq_thresh, align 4
  %cmp28 = icmp sgt i32 %60, 6
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %lor.lhs.false, %if.end14
  store i32 0, i32* @log2_irq_thresh, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %lor.lhs.false
  %61 = load i32* @log2_irq_thresh, align 4
  %add32 = add i32 16, %61
  %shl = shl i32 1, %add32
  store i32 %shl, i32* %temp, align 4
  %62 = load i32* %hcc_params, align 4
  %and33 = and i32 %62, 262144
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.then35, label %if.end38

if.then35:                                        ; preds = %if.end31
  %63 = load %struct.ehci_hcd** %ehci, align 8
  %64 = bitcast %struct.ehci_hcd* %63 to i8*
  %bf.field.offs36 = getelementptr i8* %64, i32 720
  %65 = bitcast i8* %bf.field.offs36 to i32*
  %66 = load i32* %65, align 8
  %67 = and i32 %66, -5
  %68 = or i32 %67, 4
  store i32 %68, i32* %65, align 8
  %69 = load i32* %temp, align 4
  %or37 = or i32 %69, 32768
  store i32 %or37, i32* %temp, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.then35, %if.end31
  %70 = load i32* %hcc_params, align 4
  %and39 = and i32 %70, 4
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %if.then41, label %if.end52

if.then41:                                        ; preds = %if.end38
  %71 = load i32* @park, align 4
  %tobool42 = icmp ne i32 %71, 0
  br i1 %tobool42, label %if.then43, label %if.end51

if.then43:                                        ; preds = %if.then41
  %72 = load i32* @park, align 4
  store i32 %72, i32* %_min1, align 4
  store i32 3, i32* %_min2, align 4
  %cmp44 = icmp eq i32* %_min1, %_min2
  %conv45 = zext i1 %cmp44 to i32
  %73 = load i32* %_min1, align 4
  %74 = load i32* %_min2, align 4
  %cmp46 = icmp ult i32 %73, %74
  br i1 %cmp46, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then43
  %75 = load i32* %_min1, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then43
  %76 = load i32* %_min2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %75, %cond.true ], [ %76, %cond.false ]
  store i32 %cond, i32* @park, align 4
  %77 = load i32* %temp, align 4
  %or48 = or i32 %77, 2048
  store i32 %or48, i32* %temp, align 4
  %78 = load i32* @park, align 4
  %shl49 = shl i32 %78, 8
  %79 = load i32* %temp, align 4
  %or50 = or i32 %79, %shl49
  store i32 %or50, i32* %temp, align 4
  br label %if.end51

if.end51:                                         ; preds = %cond.end, %if.then41
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end38
  %80 = load i32* %hcc_params, align 4
  %and53 = and i32 %80, 2
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %if.then55, label %if.end58

if.then55:                                        ; preds = %if.end52
  %81 = load i32* %temp, align 4
  %and56 = and i32 %81, -13
  store i32 %and56, i32* %temp, align 4
  %82 = load i32* %temp, align 4
  %or57 = or i32 %82, 4
  store i32 %or57, i32* %temp, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %if.end52
  %83 = load i32* %temp, align 4
  %84 = load %struct.ehci_hcd** %ehci, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %84, i32 0, i32 55
  store i32 %83, i32* %command, align 4
  %85 = load %struct.usb_hcd** %hcd.addr, align 8
  %driver = getelementptr inbounds %struct.usb_hcd* %85, i32 0, i32 8
  %86 = load %struct.hc_driver** %driver, align 8
  %flags = getelementptr inbounds %struct.hc_driver* %86, i32 0, i32 4
  %87 = load i32* %flags, align 4
  %and59 = and i32 %87, 2
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %if.end62, label %if.then61

if.then61:                                        ; preds = %if.end58
  %88 = load %struct.usb_hcd** %hcd.addr, align 8
  %self = getelementptr inbounds %struct.usb_hcd* %88, i32 0, i32 0
  %sg_tablesize = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 7
  store i32 -1, i32* %sg_tablesize, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then61, %if.end58
  ret void
}

define internal i32 @ehci_reset(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %retval1 = alloca i32, align 4
  %command = alloca i32, align 4
  %_buf = alloca [80 x i8], align 16
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 8
  %2 = load %struct.ehci_regs** %regs, align 8
  %command2 = getelementptr inbounds %struct.ehci_regs* %2, i32 0, i32 0
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %0, i32* %command2) noredzone
  store i32 %call, i32* %command, align 4
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %debug = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 9
  %4 = load %struct.ehci_dbg_port** %debug, align 8
  %tobool = icmp ne %struct.ehci_dbg_port* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call3 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %5) noredzone
  %call4 = call i32 @dbgp_reset_prep(%struct.usb_hcd* %call3) noredzone
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %debug6 = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 9
  store %struct.ehci_dbg_port* null, %struct.ehci_dbg_port** %debug6, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load i32* %command, align 4
  %or = or i32 %7, 2
  store i32 %or, i32* %command, align 4
  %arraydecay = getelementptr inbounds [80 x i8]* %_buf, i32 0, i32 0
  %8 = load i32* %command, align 4
  %call7 = call i32 @dbg_command_buf(i8* %arraydecay, i32 80, i8* getelementptr inbounds ([6 x i8]* @.str3, i32 0, i32 0), i32 %8) noredzone
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %10 = load i32* %command, align 4
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs8 = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 8
  %12 = load %struct.ehci_regs** %regs8, align 8
  %command9 = getelementptr inbounds %struct.ehci_regs* %12, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %9, i32 %10, i32* %command9) noredzone
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 12
  store i32 0, i32* %rh_state, align 4
  %14 = load volatile i64* @jiffies, align 8
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %next_statechange = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 53
  store i64 %14, i64* %next_statechange, align 8
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs10 = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 8
  %18 = load %struct.ehci_regs** %regs10, align 8
  %command11 = getelementptr inbounds %struct.ehci_regs* %18, i32 0, i32 0
  %19 = bitcast i32* %command11 to i8*
  %call12 = call i32 @ehci_handshake(%struct.ehci_hcd* %16, i8* %19, i32 2, i32 0, i32 250000) noredzone
  store i32 %call12, i32* %retval1, align 4
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %21 = bitcast %struct.ehci_hcd* %20 to i8*
  %bf.field.offs = getelementptr i8* %21, i32 720
  %22 = bitcast i8* %bf.field.offs to i32*
  %23 = load i32* %22, align 8
  %bf.clear = and i32 %23, 1
  %tobool13 = icmp ne i32 %bf.clear, 0
  br i1 %tobool13, label %if.then14, label %if.end17

if.then14:                                        ; preds = %if.end
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs15 = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 8
  %26 = load %struct.ehci_regs** %regs15, align 8
  %usbmode_ex = getelementptr inbounds %struct.ehci_regs* %26, i32 0, i32 17
  call void @ehci_writel(%struct.ehci_hcd* %24, i32 35, i32* %usbmode_ex) noredzone
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %28 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs16 = getelementptr inbounds %struct.ehci_hcd* %28, i32 0, i32 8
  %29 = load %struct.ehci_regs** %regs16, align 8
  %txfill_tuning = getelementptr inbounds %struct.ehci_regs* %29, i32 0, i32 8
  call void @ehci_writel(%struct.ehci_hcd* %27, i32 524288, i32* %txfill_tuning) noredzone
  br label %if.end17

if.end17:                                         ; preds = %if.then14, %if.end
  %30 = load i32* %retval1, align 4
  %tobool18 = icmp ne i32 %30, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  %31 = load i32* %retval1, align 4
  store i32 %31, i32* %retval
  br label %return

if.end20:                                         ; preds = %if.end17
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call21 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %32) noredzone
  %33 = bitcast %struct.usb_hcd* %call21 to i8*
  %bf.field.offs22 = getelementptr i8* %33, i32 352
  %34 = bitcast i8* %bf.field.offs22 to i32*
  %35 = load i32* %34, align 8
  %36 = lshr i32 %35, 7
  %bf.clear23 = and i32 %36, 1
  %tobool24 = icmp ne i32 %bf.clear23, 0
  br i1 %tobool24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end20
  %37 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @tdi_reset(%struct.ehci_hcd* %37) noredzone
  br label %if.end26

if.end26:                                         ; preds = %if.then25, %if.end20
  %38 = load %struct.ehci_hcd** %ehci.addr, align 8
  %debug27 = getelementptr inbounds %struct.ehci_hcd* %38, i32 0, i32 9
  %39 = load %struct.ehci_dbg_port** %debug27, align 8
  %tobool28 = icmp ne %struct.ehci_dbg_port* %39, null
  br i1 %tobool28, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end26
  %40 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call30 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %40) noredzone
  %call31 = call i32 @dbgp_external_startup(%struct.usb_hcd* %call30) noredzone
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %if.end26
  %41 = load %struct.ehci_hcd** %ehci.addr, align 8
  %resuming_ports = getelementptr inbounds %struct.ehci_hcd* %41, i32 0, i32 47
  store i64 0, i64* %resuming_ports, align 8
  %42 = load %struct.ehci_hcd** %ehci.addr, align 8
  %suspended_ports = getelementptr inbounds %struct.ehci_hcd* %42, i32 0, i32 46
  store i64 0, i64* %suspended_ports, align 8
  %43 = load %struct.ehci_hcd** %ehci.addr, align 8
  %port_c_suspend = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 45
  store i64 0, i64* %port_c_suspend, align 8
  %44 = load i32* %retval1, align 4
  store i32 %44, i32* %retval
  br label %return

return:                                           ; preds = %if.end32, %if.then19
  %45 = load i32* %retval
  ret i32 %45
}

define internal void @ehci_mem_cleanup(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 15
  %1 = load %struct.ehci_qh** %async, align 8
  %tobool = icmp ne %struct.ehci_qh* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async1 = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 15
  %4 = load %struct.ehci_qh** %async1, align 8
  call void @qh_destroy(%struct.ehci_hcd* %2, %struct.ehci_qh* %4) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async2 = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 15
  store %struct.ehci_qh* null, %struct.ehci_qh** %async2, align 8
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 16
  %7 = load %struct.ehci_qh** %dummy, align 8
  %tobool3 = icmp ne %struct.ehci_qh* %7, null
  br i1 %tobool3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy5 = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 16
  %10 = load %struct.ehci_qh** %dummy5, align 8
  call void @qh_destroy(%struct.ehci_hcd* %8, %struct.ehci_qh* %10) noredzone
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy7 = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 16
  store %struct.ehci_qh* null, %struct.ehci_qh** %dummy7, align 8
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qtd_pool = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 49
  %13 = load %struct.dma_pool** %qtd_pool, align 8
  %tobool8 = icmp ne %struct.dma_pool* %13, null
  br i1 %tobool8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end6
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qtd_pool10 = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 49
  %15 = load %struct.dma_pool** %qtd_pool10, align 8
  call void @dma_pool_destroy(%struct.dma_pool* %15) noredzone
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end6
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qtd_pool12 = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 49
  store %struct.dma_pool* null, %struct.dma_pool** %qtd_pool12, align 8
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_pool = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 48
  %18 = load %struct.dma_pool** %qh_pool, align 8
  %tobool13 = icmp ne %struct.dma_pool* %18, null
  br i1 %tobool13, label %if.then14, label %if.end17

if.then14:                                        ; preds = %if.end11
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_pool15 = getelementptr inbounds %struct.ehci_hcd* %19, i32 0, i32 48
  %20 = load %struct.dma_pool** %qh_pool15, align 8
  call void @dma_pool_destroy(%struct.dma_pool* %20) noredzone
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_pool16 = getelementptr inbounds %struct.ehci_hcd* %21, i32 0, i32 48
  store %struct.dma_pool* null, %struct.dma_pool** %qh_pool16, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.then14, %if.end11
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %itd_pool = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 50
  %23 = load %struct.dma_pool** %itd_pool, align 8
  %tobool18 = icmp ne %struct.dma_pool* %23, null
  br i1 %tobool18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end17
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %itd_pool20 = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 50
  %25 = load %struct.dma_pool** %itd_pool20, align 8
  call void @dma_pool_destroy(%struct.dma_pool* %25) noredzone
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end17
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %itd_pool22 = getelementptr inbounds %struct.ehci_hcd* %26, i32 0, i32 50
  store %struct.dma_pool* null, %struct.dma_pool** %itd_pool22, align 8
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %sitd_pool = getelementptr inbounds %struct.ehci_hcd* %27, i32 0, i32 51
  %28 = load %struct.dma_pool** %sitd_pool, align 8
  %tobool23 = icmp ne %struct.dma_pool* %28, null
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end21
  %29 = load %struct.ehci_hcd** %ehci.addr, align 8
  %sitd_pool25 = getelementptr inbounds %struct.ehci_hcd* %29, i32 0, i32 51
  %30 = load %struct.dma_pool** %sitd_pool25, align 8
  call void @dma_pool_destroy(%struct.dma_pool* %30) noredzone
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.end21
  %31 = load %struct.ehci_hcd** %ehci.addr, align 8
  %sitd_pool27 = getelementptr inbounds %struct.ehci_hcd* %31, i32 0, i32 51
  store %struct.dma_pool* null, %struct.dma_pool** %sitd_pool27, align 8
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 22
  %33 = load i32** %periodic, align 8
  %tobool28 = icmp ne i32* %33, null
  br i1 %tobool28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end26
  %34 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %34) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call, i32 0, i32 0
  %controller = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 0
  %35 = load %struct.device** %controller, align 8
  %36 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %36, i32 0, i32 21
  %37 = load i32* %periodic_size, align 4
  %conv = zext i32 %37 to i64
  %mul = mul i64 %conv, 4
  %38 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic30 = getelementptr inbounds %struct.ehci_hcd* %38, i32 0, i32 22
  %39 = load i32** %periodic30, align 8
  %40 = bitcast i32* %39 to i8*
  %41 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_dma = getelementptr inbounds %struct.ehci_hcd* %41, i32 0, i32 23
  %42 = load i64* %periodic_dma, align 8
  call void @dma_free_attrs(%struct.device* %35, i64 %mul, i8* %40, i64 %42, %struct.dma_attrs* null) noredzone
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %if.end26
  %43 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic32 = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 22
  store i32* null, i32** %periodic32, align 8
  %44 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow = getelementptr inbounds %struct.ehci_hcd* %44, i32 0, i32 26
  %45 = load %union.ehci_shadow** %pshadow, align 8
  %46 = bitcast %union.ehci_shadow* %45 to i8*
  call void @kfree(i8* %46) noredzone
  %47 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow33 = getelementptr inbounds %struct.ehci_hcd* %47, i32 0, i32 26
  store %union.ehci_shadow* null, %union.ehci_shadow** %pshadow33, align 8
  ret void
}

define i32 @ehci_suspend(%struct.usb_hcd* %hcd, i1 zeroext %do_wakeup) nounwind noredzone {
entry:
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %retval = alloca i32, align 4
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %do_wakeup.addr = alloca i8, align 1
  %ehci = alloca %struct.ehci_hcd*, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy1 = alloca i64, align 8
  %__dummy22 = alloca i64, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %frombool = zext i1 %do_wakeup to i8
  store i8 %frombool, i8* %do_wakeup.addr, align 1
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  br i1 true, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %cmp3 = icmp eq i64* %__dummy1, %__dummy22
  %conv4 = zext i1 %cmp3 to i32
  br i1 true, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %1 = load volatile i64* @jiffies, align 8
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %next_statechange = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 53
  %3 = load i64* %next_statechange, align 8
  %sub = sub i64 %1, %3
  %cmp6 = icmp slt i64 %sub, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5
  call void @msleep(i32 10) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true, %entry
  %4 = load %struct.ehci_hcd** %ehci, align 8
  %5 = load i8* %do_wakeup.addr, align 1
  %tobool = trunc i8 %5 to i1
  call void @ehci_adjust_port_wakeup_flags(%struct.ehci_hcd* %4, i1 zeroext true, i1 zeroext %tobool) noredzone
  %6 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %8 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 8
  %9 = load %struct.ehci_regs** %regs, align 8
  %intr_enable = getelementptr inbounds %struct.ehci_regs* %9, i32 0, i32 2
  call void @ehci_writel(%struct.ehci_hcd* %7, i32 0, i32* %intr_enable) noredzone
  %10 = load %struct.ehci_hcd** %ehci, align 8
  %11 = load %struct.ehci_hcd** %ehci, align 8
  %regs8 = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 8
  %12 = load %struct.ehci_regs** %regs8, align 8
  %intr_enable9 = getelementptr inbounds %struct.ehci_regs* %12, i32 0, i32 2
  %call10 = call i32 @ehci_readl(%struct.ehci_hcd* %10, i32* %intr_enable9) noredzone
  %13 = load %struct.usb_hcd** %hcd.addr, align 8
  %flags = getelementptr inbounds %struct.usb_hcd* %13, i32 0, i32 10
  store i64 0, i64* %nr.addr.i, align 8
  store i64* %flags, i64** %addr.addr.i, align 8
  %14 = load i64** %addr.addr.i, align 8
  %15 = load i64* %nr.addr.i, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %14, i64 %15, i64* %14) nounwind, !srcloc !1
  %16 = load %struct.ehci_hcd** %ehci, align 8
  %lock11 = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock11) noredzone
  %17 = load %struct.usb_hcd** %hcd.addr, align 8
  %irq = getelementptr inbounds %struct.usb_hcd* %17, i32 0, i32 13
  %18 = load i32* %irq, align 4
  call void @synchronize_irq(i32 %18) noredzone
  %19 = load i8* %do_wakeup.addr, align 1
  %tobool12 = trunc i8 %19 to i1
  br i1 %tobool12, label %land.lhs.true14, label %if.end19

land.lhs.true14:                                  ; preds = %if.end
  %20 = load %struct.usb_hcd** %hcd.addr, align 8
  %flags15 = getelementptr inbounds %struct.usb_hcd* %20, i32 0, i32 10
  %21 = load i64* %flags15, align 8
  %and = and i64 %21, 16
  %tobool16 = icmp ne i64 %and, 0
  br i1 %tobool16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %land.lhs.true14
  %22 = load %struct.usb_hcd** %hcd.addr, align 8
  %call18 = call i32 @ehci_resume(%struct.usb_hcd* %22, i1 zeroext false) noredzone
  store i32 -16, i32* %retval
  br label %return

if.end19:                                         ; preds = %land.lhs.true14, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end19, %if.then17
  %23 = load i32* %retval
  ret i32 %23
}

define internal void @ehci_adjust_port_wakeup_flags(%struct.ehci_hcd* %ehci, i1 zeroext %suspending, i1 zeroext %do_wakeup) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %suspending.addr = alloca i8, align 1
  %do_wakeup.addr = alloca i8, align 1
  %port = alloca i32, align 4
  %temp = alloca i32, align 4
  %hostpc_reg = alloca i32*, align 8
  %reg = alloca i32*, align 8
  %t1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  %hostpc_reg46 = alloca i32*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %frombool = zext i1 %suspending to i8
  store i8 %frombool, i8* %suspending.addr, align 1
  %frombool1 = zext i1 %do_wakeup to i8
  store i8 %frombool1, i8* %do_wakeup.addr, align 1
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %0) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call, i32 0, i32 0
  %root_hub = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 10
  %1 = load %struct.usb_device** %root_hub, align 8
  %2 = bitcast %struct.usb_device* %1 to i8*
  %bf.field.offs = getelementptr i8* %2, i32 1232
  %3 = bitcast i8* %bf.field.offs to i32*
  %4 = load i32* %3, align 8
  %bf.clear = and i32 %4, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %5 = load i8* %do_wakeup.addr, align 1
  %tobool2 = trunc i8 %5 to i1
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %8 = bitcast %struct.ehci_hcd* %7 to i8*
  %bf.field.offs3 = getelementptr i8* %8, i32 720
  %9 = bitcast i8* %bf.field.offs3 to i32*
  %10 = load i32* %9, align 8
  %11 = lshr i32 %10, 1
  %bf.clear4 = and i32 %11, 1
  %tobool5 = icmp ne i32 %bf.clear4, 0
  br i1 %tobool5, label %if.then6, label %if.end12

if.then6:                                         ; preds = %if.end
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 10
  %13 = load i32* %hcs_params, align 4
  %shr = lshr i32 %13, 0
  %and = and i32 %shr, 15
  store i32 %and, i32* %port, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then6
  %14 = load i32* %port, align 4
  %dec = add i32 %14, -1
  store i32 %dec, i32* %port, align 4
  %tobool7 = icmp ne i32 %14, 0
  br i1 %tobool7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i32* %port, align 4
  %idxprom = sext i32 %15 to i64
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 8
  %17 = load %struct.ehci_regs** %regs, align 8
  %hostpc = getelementptr inbounds %struct.ehci_regs* %17, i32 0, i32 15
  %arrayidx = getelementptr [1 x i32]* %hostpc, i32 0, i64 %idxprom
  store i32* %arrayidx, i32** %hostpc_reg, align 8
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %19 = load i32** %hostpc_reg, align 8
  %call8 = call i32 @ehci_readl(%struct.ehci_hcd* %18, i32* %19) noredzone
  store i32 %call8, i32* %temp, align 4
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %21 = load i32* %temp, align 4
  %and9 = and i32 %21, -4194305
  %22 = load i32** %hostpc_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %20, i32 %and9, i32* %22) noredzone
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock10 = getelementptr inbounds %struct.ehci_hcd* %23, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock10) noredzone
  call void @msleep(i32 5) noredzone
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock11 = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock11) noredzone
  br label %if.end12

if.end12:                                         ; preds = %while.end, %if.end
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params13 = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 10
  %26 = load i32* %hcs_params13, align 4
  %shr14 = lshr i32 %26, 0
  %and15 = and i32 %shr14, 15
  store i32 %and15, i32* %port, align 4
  br label %while.cond16

while.cond16:                                     ; preds = %if.end33, %if.end12
  %27 = load i32* %port, align 4
  %dec17 = add i32 %27, -1
  store i32 %dec17, i32* %port, align 4
  %tobool18 = icmp ne i32 %27, 0
  br i1 %tobool18, label %while.body19, label %while.end34

while.body19:                                     ; preds = %while.cond16
  %28 = load i32* %port, align 4
  %idxprom20 = sext i32 %28 to i64
  %29 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs21 = getelementptr inbounds %struct.ehci_hcd* %29, i32 0, i32 8
  %30 = load %struct.ehci_regs** %regs21, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %30, i32 0, i32 11
  %arrayidx22 = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom20
  store i32* %arrayidx22, i32** %reg, align 8
  %31 = load %struct.ehci_hcd** %ehci.addr, align 8
  %32 = load i32** %reg, align 8
  %call23 = call i32 @ehci_readl(%struct.ehci_hcd* %31, i32* %32) noredzone
  %and24 = and i32 %call23, -43
  store i32 %and24, i32* %t1, align 4
  %33 = load i32* %t1, align 4
  %and25 = and i32 %33, -7340033
  store i32 %and25, i32* %t2, align 4
  %34 = load i8* %suspending.addr, align 1
  %tobool26 = trunc i8 %34 to i1
  br i1 %tobool26, label %if.end33, label %if.then27

if.then27:                                        ; preds = %while.body19
  %35 = load i32* %t1, align 4
  %and28 = and i32 %35, 1
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.then30, label %if.else

if.then30:                                        ; preds = %if.then27
  %36 = load i32* %t2, align 4
  %or = or i32 %36, 6291456
  store i32 %or, i32* %t2, align 4
  br label %if.end32

if.else:                                          ; preds = %if.then27
  %37 = load i32* %t2, align 4
  %or31 = or i32 %37, 5242880
  store i32 %or31, i32* %t2, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then30
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %while.body19
  %38 = load %struct.ehci_hcd** %ehci.addr, align 8
  %39 = load i32* %t2, align 4
  %40 = load i32** %reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %38, i32 %39, i32* %40) noredzone
  br label %while.cond16

while.end34:                                      ; preds = %while.cond16
  %41 = load %struct.ehci_hcd** %ehci.addr, align 8
  %42 = bitcast %struct.ehci_hcd* %41 to i8*
  %bf.field.offs35 = getelementptr i8* %42, i32 720
  %43 = bitcast i8* %bf.field.offs35 to i32*
  %44 = load i32* %43, align 8
  %45 = lshr i32 %44, 1
  %bf.clear36 = and i32 %45, 1
  %tobool37 = icmp ne i32 %bf.clear36, 0
  br i1 %tobool37, label %if.then38, label %if.end54

if.then38:                                        ; preds = %while.end34
  %46 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params39 = getelementptr inbounds %struct.ehci_hcd* %46, i32 0, i32 10
  %47 = load i32* %hcs_params39, align 4
  %shr40 = lshr i32 %47, 0
  %and41 = and i32 %shr40, 15
  store i32 %and41, i32* %port, align 4
  br label %while.cond42

while.cond42:                                     ; preds = %while.body45, %if.then38
  %48 = load i32* %port, align 4
  %dec43 = add i32 %48, -1
  store i32 %dec43, i32* %port, align 4
  %tobool44 = icmp ne i32 %48, 0
  br i1 %tobool44, label %while.body45, label %while.end53

while.body45:                                     ; preds = %while.cond42
  %49 = load i32* %port, align 4
  %idxprom47 = sext i32 %49 to i64
  %50 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs48 = getelementptr inbounds %struct.ehci_hcd* %50, i32 0, i32 8
  %51 = load %struct.ehci_regs** %regs48, align 8
  %hostpc49 = getelementptr inbounds %struct.ehci_regs* %51, i32 0, i32 15
  %arrayidx50 = getelementptr [1 x i32]* %hostpc49, i32 0, i64 %idxprom47
  store i32* %arrayidx50, i32** %hostpc_reg46, align 8
  %52 = load %struct.ehci_hcd** %ehci.addr, align 8
  %53 = load i32** %hostpc_reg46, align 8
  %call51 = call i32 @ehci_readl(%struct.ehci_hcd* %52, i32* %53) noredzone
  store i32 %call51, i32* %temp, align 4
  %54 = load %struct.ehci_hcd** %ehci.addr, align 8
  %55 = load i32* %temp, align 4
  %or52 = or i32 %55, 4194304
  %56 = load i32** %hostpc_reg46, align 8
  call void @ehci_writel(%struct.ehci_hcd* %54, i32 %or52, i32* %56) noredzone
  br label %while.cond42

while.end53:                                      ; preds = %while.cond42
  br label %if.end54

if.end54:                                         ; preds = %while.end53, %while.end34
  %57 = load i8* %suspending.addr, align 1
  %tobool55 = trunc i8 %57 to i1
  br i1 %tobool55, label %if.end60, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end54
  %58 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call56 = call i32 @ehci_port_change(%struct.ehci_hcd* %58) noredzone
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.then58, label %if.end60

if.then58:                                        ; preds = %land.lhs.true
  %59 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call59 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %59) noredzone
  call void @usb_hcd_resume_root_hub(%struct.usb_hcd* %call59) noredzone
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %land.lhs.true, %if.end54
  %60 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock61 = getelementptr inbounds %struct.ehci_hcd* %60, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock61) noredzone
  br label %return

return:                                           ; preds = %if.end60, %if.then
  ret void
}

define internal void @spin_lock_irq(%struct.spinlock* %lock) nounwind inlinehint noredzone {
entry:
  %lock.addr = alloca %struct.spinlock*, align 8
  store %struct.spinlock* %lock, %struct.spinlock** %lock.addr, align 8
  %0 = load %struct.spinlock** %lock.addr, align 8
  %1 = getelementptr inbounds %struct.spinlock* %0, i32 0, i32 0
  %rlock = bitcast %union.anon.10* %1 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock) noredzone
  ret void
}

define internal void @spin_unlock_irq(%struct.spinlock* %lock) nounwind inlinehint noredzone {
entry:
  %lock.addr = alloca %struct.spinlock*, align 8
  store %struct.spinlock* %lock, %struct.spinlock** %lock.addr, align 8
  %0 = load %struct.spinlock** %lock.addr, align 8
  %1 = getelementptr inbounds %struct.spinlock* %0, i32 0, i32 0
  %rlock = bitcast %union.anon.10* %1 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock) noredzone
  ret void
}

declare void @synchronize_irq(i32) noredzone

define i32 @ehci_resume(%struct.usb_hcd* %hcd, i1 zeroext %hibernated) nounwind noredzone {
entry:
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %retval = alloca i32, align 4
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %hibernated.addr = alloca i8, align 1
  %ehci = alloca %struct.ehci_hcd*, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy1 = alloca i64, align 8
  %__dummy22 = alloca i64, align 8
  %mask = alloca i32, align 4
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %frombool = zext i1 %hibernated to i8
  store i8 %frombool, i8* %hibernated.addr, align 1
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  br i1 true, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %cmp3 = icmp eq i64* %__dummy1, %__dummy22
  %conv4 = zext i1 %cmp3 to i32
  br i1 true, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %1 = load volatile i64* @jiffies, align 8
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %next_statechange = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 53
  %3 = load i64* %next_statechange, align 8
  %sub = sub i64 %1, %3
  %cmp6 = icmp slt i64 %sub, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5
  call void @msleep(i32 100) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true, %entry
  %4 = load %struct.usb_hcd** %hcd.addr, align 8
  %flags = getelementptr inbounds %struct.usb_hcd* %4, i32 0, i32 10
  store i64 0, i64* %nr.addr.i, align 8
  store i64* %flags, i64** %addr.addr.i, align 8
  %5 = load i64** %addr.addr.i, align 8
  %6 = load i64* %nr.addr.i, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %5, i64 %6, i64* %5) nounwind, !srcloc !0
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %8 = bitcast %struct.ehci_hcd* %7 to i8*
  %bf.field.offs = getelementptr i8* %8, i32 244
  %9 = load i8* %bf.field.offs, align 4
  %10 = lshr i8 %9, 5
  %bf.clear = and i8 %10, 1
  %11 = trunc i8 %bf.clear to i1
  br i1 %11, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end9:                                          ; preds = %if.end
  %12 = load %struct.ehci_hcd** %ehci, align 8
  %13 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 8
  %14 = load %struct.ehci_regs** %regs, align 8
  %configured_flag = getelementptr inbounds %struct.ehci_regs* %14, i32 0, i32 10
  %call10 = call i32 @ehci_readl(%struct.ehci_hcd* %12, i32* %configured_flag) noredzone
  %cmp11 = icmp eq i32 %call10, 1
  br i1 %cmp11, label %land.lhs.true13, label %if.end29

land.lhs.true13:                                  ; preds = %if.end9
  %15 = load i8* %hibernated.addr, align 1
  %tobool = trunc i8 %15 to i1
  br i1 %tobool, label %if.end29, label %if.then14

if.then14:                                        ; preds = %land.lhs.true13
  store i32 55, i32* %mask, align 4
  %16 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_adjust_port_wakeup_flags(%struct.ehci_hcd* %16, i1 zeroext false, i1 zeroext false) noredzone
  %17 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %18 = load %struct.ehci_hcd** %ehci, align 8
  %19 = bitcast %struct.ehci_hcd* %18 to i8*
  %bf.field.offs15 = getelementptr i8* %19, i32 244
  %20 = load i8* %bf.field.offs15, align 4
  %21 = lshr i8 %20, 5
  %bf.clear16 = and i8 %21, 1
  %22 = trunc i8 %bf.clear16 to i1
  br i1 %22, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.then14
  br label %skip

if.end18:                                         ; preds = %if.then14
  %23 = load %struct.usb_hcd** %hcd.addr, align 8
  %self = getelementptr inbounds %struct.usb_hcd* %23, i32 0, i32 0
  %root_hub = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 10
  %24 = load %struct.usb_device** %root_hub, align 8
  %25 = bitcast %struct.usb_device* %24 to i8*
  %bf.field.offs19 = getelementptr i8* %25, i32 1232
  %26 = bitcast i8* %bf.field.offs19 to i32*
  %27 = load i32* %26, align 8
  %bf.clear20 = and i32 %27, 1
  %tobool21 = icmp ne i32 %bf.clear20, 0
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %if.end18
  %28 = load i32* %mask, align 4
  %and = and i32 %28, -5
  store i32 %and, i32* %mask, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %if.end18
  %29 = load %struct.ehci_hcd** %ehci, align 8
  %30 = load i32* %mask, align 4
  %31 = load %struct.ehci_hcd** %ehci, align 8
  %regs24 = getelementptr inbounds %struct.ehci_hcd* %31, i32 0, i32 8
  %32 = load %struct.ehci_regs** %regs24, align 8
  %intr_enable = getelementptr inbounds %struct.ehci_regs* %32, i32 0, i32 2
  call void @ehci_writel(%struct.ehci_hcd* %29, i32 %30, i32* %intr_enable) noredzone
  %33 = load %struct.ehci_hcd** %ehci, align 8
  %34 = load %struct.ehci_hcd** %ehci, align 8
  %regs25 = getelementptr inbounds %struct.ehci_hcd* %34, i32 0, i32 8
  %35 = load %struct.ehci_regs** %regs25, align 8
  %intr_enable26 = getelementptr inbounds %struct.ehci_regs* %35, i32 0, i32 2
  %call27 = call i32 @ehci_readl(%struct.ehci_hcd* %33, i32* %intr_enable26) noredzone
  br label %skip

skip:                                             ; preds = %if.then37, %if.end23, %if.then17
  %36 = load %struct.ehci_hcd** %ehci, align 8
  %lock28 = getelementptr inbounds %struct.ehci_hcd* %36, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock28) noredzone
  store i32 0, i32* %retval
  br label %return

if.end29:                                         ; preds = %land.lhs.true13, %if.end9
  %37 = load %struct.usb_hcd** %hcd.addr, align 8
  %self30 = getelementptr inbounds %struct.usb_hcd* %37, i32 0, i32 0
  %root_hub31 = getelementptr inbounds %struct.usb_bus* %self30, i32 0, i32 10
  %38 = load %struct.usb_device** %root_hub31, align 8
  call void @usb_root_hub_lost_power(%struct.usb_device* %38) noredzone
  %39 = load %struct.ehci_hcd** %ehci, align 8
  %call32 = call i32 @ehci_halt(%struct.ehci_hcd* %39) noredzone
  %40 = load %struct.ehci_hcd** %ehci, align 8
  %call33 = call i32 @ehci_reset(%struct.ehci_hcd* %40) noredzone
  %41 = load %struct.ehci_hcd** %ehci, align 8
  %lock34 = getelementptr inbounds %struct.ehci_hcd* %41, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock34) noredzone
  %42 = load %struct.ehci_hcd** %ehci, align 8
  %43 = bitcast %struct.ehci_hcd* %42 to i8*
  %bf.field.offs35 = getelementptr i8* %43, i32 244
  %44 = load i8* %bf.field.offs35, align 4
  %45 = lshr i8 %44, 5
  %bf.clear36 = and i8 %45, 1
  %46 = trunc i8 %bf.clear36 to i1
  br i1 %46, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end29
  br label %skip

if.end38:                                         ; preds = %if.end29
  %47 = load %struct.ehci_hcd** %ehci, align 8
  %48 = load %struct.ehci_hcd** %ehci, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %48, i32 0, i32 55
  %49 = load i32* %command, align 4
  %50 = load %struct.ehci_hcd** %ehci, align 8
  %regs39 = getelementptr inbounds %struct.ehci_hcd* %50, i32 0, i32 8
  %51 = load %struct.ehci_regs** %regs39, align 8
  %command40 = getelementptr inbounds %struct.ehci_regs* %51, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %47, i32 %49, i32* %command40) noredzone
  %52 = load %struct.ehci_hcd** %ehci, align 8
  %53 = load %struct.ehci_hcd** %ehci, align 8
  %regs41 = getelementptr inbounds %struct.ehci_hcd* %53, i32 0, i32 8
  %54 = load %struct.ehci_regs** %regs41, align 8
  %configured_flag42 = getelementptr inbounds %struct.ehci_regs* %54, i32 0, i32 10
  call void @ehci_writel(%struct.ehci_hcd* %52, i32 1, i32* %configured_flag42) noredzone
  %55 = load %struct.ehci_hcd** %ehci, align 8
  %56 = load %struct.ehci_hcd** %ehci, align 8
  %regs43 = getelementptr inbounds %struct.ehci_hcd* %56, i32 0, i32 8
  %57 = load %struct.ehci_regs** %regs43, align 8
  %command44 = getelementptr inbounds %struct.ehci_regs* %57, i32 0, i32 0
  %call45 = call i32 @ehci_readl(%struct.ehci_hcd* %55, i32* %command44) noredzone
  %58 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %58, i32 0, i32 12
  store i32 1, i32* %rh_state, align 4
  %59 = load %struct.ehci_hcd** %ehci, align 8
  %lock46 = getelementptr inbounds %struct.ehci_hcd* %59, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock46) noredzone
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end38, %skip, %if.then8
  %60 = load i32* %retval
  ret i32 %60
}

declare void @usb_root_hub_lost_power(%struct.usb_device*) noredzone

define void @ehci_init_driver(%struct.hc_driver* %drv, %struct.ehci_driver_overrides* %over) nounwind noredzone {
entry:
  %drv.addr = alloca %struct.hc_driver*, align 8
  %over.addr = alloca %struct.ehci_driver_overrides*, align 8
  store %struct.hc_driver* %drv, %struct.hc_driver** %drv.addr, align 8
  store %struct.ehci_driver_overrides* %over, %struct.ehci_driver_overrides** %over.addr, align 8
  %0 = load %struct.hc_driver** %drv.addr, align 8
  %1 = bitcast %struct.hc_driver* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ({ i8*, i8*, i64, i32 (%struct.usb_hcd*)*, i32, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*, i1)*, i32 (%struct.usb_hcd*, i1)*, void (%struct.usb_hcd*)*, void (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*, %struct.urb*, i32)*, i32 (%struct.usb_hcd*, %struct.urb*, i32)*, i32 (%struct.usb_hcd*, %struct.urb*, i32)*, void (%struct.usb_hcd*, %struct.urb*)*, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)*, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, i8*)*, i32 (%struct.usb_hcd*, i16, i16, i16, i8*, i16)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*)*, i32 (%struct.usb_hcd*, i32)*, void (%struct.usb_hcd*, i32)*, i32 (%struct.usb_hcd*, i32)*, void (%struct.usb_hcd*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, void (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint**, i32, i32, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint**, i32, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_host_endpoint*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, void (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, %struct.usb_tt*, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*)*, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)*, i32 (%struct.usb_hcd*, %struct.usb_device*, i32)*, i32 (%struct.usb_hcd*, i32)* }* @ehci_hc_driver to i8*), i64 344, i32 8, i1 false)
  %2 = load %struct.ehci_driver_overrides** %over.addr, align 8
  %tobool = icmp ne %struct.ehci_driver_overrides* %2, null
  br i1 %tobool, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %3 = load %struct.ehci_driver_overrides** %over.addr, align 8
  %extra_priv_size = getelementptr inbounds %struct.ehci_driver_overrides* %3, i32 0, i32 0
  %4 = load i64* %extra_priv_size, align 8
  %5 = load %struct.hc_driver** %drv.addr, align 8
  %hcd_priv_size = getelementptr inbounds %struct.hc_driver* %5, i32 0, i32 2
  %6 = load i64* %hcd_priv_size, align 8
  %add = add i64 %6, %4
  store i64 %add, i64* %hcd_priv_size, align 8
  %7 = load %struct.ehci_driver_overrides** %over.addr, align 8
  %reset = getelementptr inbounds %struct.ehci_driver_overrides* %7, i32 0, i32 1
  %8 = load i32 (%struct.usb_hcd*)** %reset, align 8
  %tobool1 = icmp ne i32 (%struct.usb_hcd*)* %8, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %9 = load %struct.ehci_driver_overrides** %over.addr, align 8
  %reset3 = getelementptr inbounds %struct.ehci_driver_overrides* %9, i32 0, i32 1
  %10 = load i32 (%struct.usb_hcd*)** %reset3, align 8
  %11 = load %struct.hc_driver** %drv.addr, align 8
  %reset4 = getelementptr inbounds %struct.hc_driver* %11, i32 0, i32 5
  store i32 (%struct.usb_hcd*)* %10, i32 (%struct.usb_hcd*)** %reset4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  ret void
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

define internal i32 @ehci_irq(%struct.usb_hcd* %hcd) nounwind noredzone {
entry:
  %nr.addr.i161 = alloca i64, align 8
  %addr.addr.i162 = alloca i64*, align 8
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %retval = alloca i32, align 4
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %status = alloca i32, align 4
  %masked_status = alloca i32, align 4
  %pcd_status = alloca i32, align 4
  %cmd = alloca i32, align 4
  %bh = alloca i32, align 4
  %flags = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %i = alloca i32, align 4
  %ppcd = alloca i32, align 4
  %pstatus = alloca i32, align 4
  %_buf = alloca [80 x i8], align 16
  %_buf142 = alloca [80 x i8], align 16
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  store i32 0, i32* %pcd_status, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 11
  %call2 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call3 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call2) noredzone
  store i64 %call3, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.end4

do.end4:                                          ; preds = %do.end
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %3 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 8
  %4 = load %struct.ehci_regs** %regs, align 8
  %status5 = getelementptr inbounds %struct.ehci_regs* %4, i32 0, i32 1
  %call6 = call i32 @ehci_readl(%struct.ehci_hcd* %2, i32* %status5) noredzone
  store i32 %call6, i32* %status, align 4
  %5 = load i32* %status, align 4
  %cmp7 = icmp eq i32 %5, -1
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %do.end4
  br label %dead

if.end:                                           ; preds = %do.end4
  %6 = load i32* %status, align 4
  %and = and i32 %6, 63
  store i32 %and, i32* %masked_status, align 4
  %7 = load i32* %masked_status, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then14

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 12
  %9 = load i32* %rh_state, align 4
  %cmp9 = icmp eq i32 %9, 0
  %lnot = xor i1 %cmp9, true
  %lnot11 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot11 to i32
  %conv12 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv12, i64 0)
  %tobool13 = icmp ne i64 %expval, 0
  br i1 %tobool13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %lor.lhs.false, %if.end
  %10 = load %struct.ehci_hcd** %ehci, align 8
  %lock15 = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 11
  %11 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock15, i64 %11) noredzone
  store i32 0, i32* %retval
  br label %return

if.end16:                                         ; preds = %lor.lhs.false
  %12 = load %struct.ehci_hcd** %ehci, align 8
  %13 = load i32* %masked_status, align 4
  %14 = load %struct.ehci_hcd** %ehci, align 8
  %regs17 = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 8
  %15 = load %struct.ehci_regs** %regs17, align 8
  %status18 = getelementptr inbounds %struct.ehci_regs* %15, i32 0, i32 1
  call void @ehci_writel(%struct.ehci_hcd* %12, i32 %13, i32* %status18) noredzone
  %16 = load %struct.ehci_hcd** %ehci, align 8
  %17 = load %struct.ehci_hcd** %ehci, align 8
  %regs19 = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 8
  %18 = load %struct.ehci_regs** %regs19, align 8
  %command = getelementptr inbounds %struct.ehci_regs* %18, i32 0, i32 0
  %call20 = call i32 @ehci_readl(%struct.ehci_hcd* %16, i32* %command) noredzone
  store i32 %call20, i32* %cmd, align 4
  store i32 0, i32* %bh, align 4
  %19 = load i32* %status, align 4
  %and21 = and i32 %19, 3
  %cmp22 = icmp ne i32 %and21, 0
  %lnot24 = xor i1 %cmp22, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %conv28 = sext i32 %lnot.ext27 to i64
  %expval29 = call i64 @llvm.expect.i64(i64 %conv28, i64 1)
  %tobool30 = icmp ne i64 %expval29, 0
  br i1 %tobool30, label %if.then31, label %if.end48

if.then31:                                        ; preds = %if.end16
  %20 = load i32* %status, align 4
  %and32 = and i32 %20, 2
  %cmp33 = icmp eq i32 %and32, 0
  %lnot35 = xor i1 %cmp33, true
  %lnot37 = xor i1 %lnot35, true
  %lnot.ext38 = zext i1 %lnot37 to i32
  %conv39 = sext i32 %lnot.ext38 to i64
  %expval40 = call i64 @llvm.expect.i64(i64 %conv39, i64 1)
  %tobool41 = icmp ne i64 %expval40, 0
  br i1 %tobool41, label %if.then42, label %if.else

if.then42:                                        ; preds = %if.then31
  br label %do.body43

do.body43:                                        ; preds = %if.then42
  br label %do.end44

do.end44:                                         ; preds = %do.body43
  br label %if.end47

if.else:                                          ; preds = %if.then31
  br label %do.body45

do.body45:                                        ; preds = %if.else
  br label %do.end46

do.end46:                                         ; preds = %do.body45
  br label %if.end47

if.end47:                                         ; preds = %do.end46, %do.end44
  store i32 1, i32* %bh, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.end16
  %21 = load i32* %status, align 4
  %and49 = and i32 %21, 32
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.then51, label %if.end68

if.then51:                                        ; preds = %if.end48
  %22 = load %struct.ehci_hcd** %ehci, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 1
  %23 = load i32* %enabled_hrtimer_events, align 4
  %conv52 = zext i32 %23 to i64
  %and53 = and i64 %conv52, -129
  %conv54 = trunc i64 %and53 to i32
  store i32 %conv54, i32* %enabled_hrtimer_events, align 4
  %24 = load %struct.ehci_hcd** %ehci, align 8
  %next_hrtimer_event = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 0
  %25 = load i32* %next_hrtimer_event, align 4
  %cmp55 = icmp eq i32 %25, 7
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.then51
  %26 = load %struct.ehci_hcd** %ehci, align 8
  %next_hrtimer_event58 = getelementptr inbounds %struct.ehci_hcd* %26, i32 0, i32 0
  %27 = load i32* %next_hrtimer_event58, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %next_hrtimer_event58, align 4
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.then51
  %28 = load i32* %cmd, align 4
  %and60 = and i32 %28, 64
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.end59
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %if.end59
  %29 = load %struct.ehci_hcd** %ehci, align 8
  %30 = bitcast %struct.ehci_hcd* %29 to i8*
  %bf.field.offs = getelementptr i8* %30, i32 244
  %31 = load i8* %bf.field.offs, align 4
  %32 = lshr i8 %31, 3
  %bf.clear = and i8 %32, 1
  %33 = trunc i8 %bf.clear to i1
  br i1 %33, label %if.then64, label %if.end67

if.then64:                                        ; preds = %if.end63
  br label %do.body65

do.body65:                                        ; preds = %if.then64
  br label %do.end66

do.end66:                                         ; preds = %do.body65
  br label %if.end67

if.end67:                                         ; preds = %do.end66, %if.end63
  %34 = load %struct.ehci_hcd** %ehci, align 8
  call void @end_unlink_async(%struct.ehci_hcd* %34) noredzone
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.end48
  %35 = load i32* %status, align 4
  %and69 = and i32 %35, 4
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %if.then71, label %if.end126

if.then71:                                        ; preds = %if.end68
  %36 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %36, i32 0, i32 10
  %37 = load i32* %hcs_params, align 4
  %shr = lshr i32 %37, 0
  %and72 = and i32 %shr, 15
  store i32 %and72, i32* %i, align 4
  store i32 -1, i32* %ppcd, align 4
  %38 = load i32* %status, align 4
  store i32 %38, i32* %pcd_status, align 4
  %39 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state73 = getelementptr inbounds %struct.ehci_hcd* %39, i32 0, i32 12
  %40 = load i32* %rh_state73, align 4
  %cmp74 = icmp eq i32 %40, 1
  br i1 %cmp74, label %if.then76, label %if.end77

if.then76:                                        ; preds = %if.then71
  %41 = load %struct.usb_hcd** %hcd.addr, align 8
  call void @usb_hcd_resume_root_hub(%struct.usb_hcd* %41) noredzone
  br label %if.end77

if.end77:                                         ; preds = %if.then76, %if.then71
  %42 = load %struct.ehci_hcd** %ehci, align 8
  %43 = bitcast %struct.ehci_hcd* %42 to i8*
  %bf.field.offs78 = getelementptr i8* %43, i32 720
  %44 = bitcast i8* %bf.field.offs78 to i32*
  %45 = load i32* %44, align 8
  %46 = lshr i32 %45, 2
  %bf.clear79 = and i32 %46, 1
  %tobool80 = icmp ne i32 %bf.clear79, 0
  br i1 %tobool80, label %if.then81, label %if.end83

if.then81:                                        ; preds = %if.end77
  %47 = load i32* %status, align 4
  %shr82 = lshr i32 %47, 16
  store i32 %shr82, i32* %ppcd, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.then81, %if.end77
  br label %while.cond

while.cond:                                       ; preds = %if.end116, %if.then115, %if.then93, %if.then87, %if.end83
  %48 = load i32* %i, align 4
  %dec = add i32 %48, -1
  store i32 %dec, i32* %i, align 4
  %tobool84 = icmp ne i32 %48, 0
  br i1 %tobool84, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %49 = load i32* %ppcd, align 4
  %50 = load i32* %i, align 4
  %shl = shl i32 1, %50
  %and85 = and i32 %49, %shl
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %if.end88, label %if.then87

if.then87:                                        ; preds = %while.body
  br label %while.cond

if.end88:                                         ; preds = %while.body
  %51 = load %struct.ehci_hcd** %ehci, align 8
  %52 = load i32* %i, align 4
  %idxprom = zext i32 %52 to i64
  %53 = load %struct.ehci_hcd** %ehci, align 8
  %regs89 = getelementptr inbounds %struct.ehci_hcd* %53, i32 0, i32 8
  %54 = load %struct.ehci_regs** %regs89, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %54, i32 0, i32 11
  %arrayidx = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom
  %call90 = call i32 @ehci_readl(%struct.ehci_hcd* %51, i32* %arrayidx) noredzone
  store i32 %call90, i32* %pstatus, align 4
  %55 = load i32* %pstatus, align 4
  %and91 = and i32 %55, 8192
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %if.then93, label %if.end94

if.then93:                                        ; preds = %if.end88
  br label %while.cond

if.end94:                                         ; preds = %if.end88
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end94
  %56 = load i32* %i, align 4
  %conv95 = zext i32 %56 to i64
  %57 = load %struct.ehci_hcd** %ehci, align 8
  %suspended_ports = getelementptr inbounds %struct.ehci_hcd* %57, i32 0, i32 46
  store i64 %conv95, i64* %nr.addr.i, align 8
  store i64* %suspended_ports, i64** %addr.addr.i, align 8
  %58 = load i64* %nr.addr.i, align 8
  %and.i = and i64 %58, 63
  %shl.i = shl i64 1, %and.i
  %59 = load i64* %nr.addr.i, align 8
  %shr.i = ashr i64 %59, 6
  %60 = load i64** %addr.addr.i, align 8
  %arrayidx.i = getelementptr i64* %60, i64 %shr.i
  %61 = load volatile i64* %arrayidx.i, align 8
  %and1.i = and i64 %shl.i, %61
  %cmp.i = icmp ne i64 %and1.i, 0
  %conv.i = zext i1 %cmp.i to i32
  %tobool97 = icmp ne i32 %conv.i, 0
  br i1 %tobool97, label %land.lhs.true, label %if.then115

cond.false:                                       ; preds = %if.end94
  %62 = load i32* %i, align 4
  %conv98 = zext i32 %62 to i64
  %63 = load %struct.ehci_hcd** %ehci, align 8
  %suspended_ports99 = getelementptr inbounds %struct.ehci_hcd* %63, i32 0, i32 46
  %call100 = call i32 @variable_test_bit(i64 %conv98, i64* %suspended_ports99) noredzone
  %tobool101 = icmp ne i32 %call100, 0
  br i1 %tobool101, label %land.lhs.true, label %if.then115

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %64 = load i32* %pstatus, align 4
  %and102 = and i32 %64, 64
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %land.lhs.true107, label %lor.lhs.false104

lor.lhs.false104:                                 ; preds = %land.lhs.true
  %65 = load i32* %pstatus, align 4
  %and105 = and i32 %65, 128
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %if.then115, label %land.lhs.true107

land.lhs.true107:                                 ; preds = %lor.lhs.false104, %land.lhs.true
  %66 = load i32* %pstatus, align 4
  %and108 = and i32 %66, 4
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %land.lhs.true110, label %if.then115

land.lhs.true110:                                 ; preds = %land.lhs.true107
  %67 = load i32* %i, align 4
  %idxprom111 = zext i32 %67 to i64
  %68 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done = getelementptr inbounds %struct.ehci_hcd* %68, i32 0, i32 41
  %arrayidx112 = getelementptr [15 x i64]* %reset_done, i32 0, i64 %idxprom111
  %69 = load i64* %arrayidx112, align 8
  %cmp113 = icmp eq i64 %69, 0
  br i1 %cmp113, label %if.end116, label %if.then115

if.then115:                                       ; preds = %land.lhs.true110, %land.lhs.true107, %lor.lhs.false104, %cond.false, %cond.true
  br label %while.cond

if.end116:                                        ; preds = %land.lhs.true110
  %70 = load volatile i64* @jiffies, align 8
  %call117 = call i64 @msecs_to_jiffies(i32 25) noredzone
  %add = add i64 %70, %call117
  %71 = load i32* %i, align 4
  %idxprom118 = zext i32 %71 to i64
  %72 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done119 = getelementptr inbounds %struct.ehci_hcd* %72, i32 0, i32 41
  %arrayidx120 = getelementptr [15 x i64]* %reset_done119, i32 0, i64 %idxprom118
  store i64 %add, i64* %arrayidx120, align 8
  %73 = load i32* %i, align 4
  %conv121 = zext i32 %73 to i64
  %74 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports = getelementptr inbounds %struct.ehci_hcd* %74, i32 0, i32 47
  store i64 %conv121, i64* %nr.addr.i161, align 8
  store i64* %resuming_ports, i64** %addr.addr.i162, align 8
  %75 = load i64** %addr.addr.i162, align 8
  %76 = load i64* %nr.addr.i161, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %75, i64 %76, i64* %75) nounwind, !srcloc !0
  %77 = load %struct.usb_hcd** %hcd.addr, align 8
  %self = getelementptr inbounds %struct.usb_hcd* %77, i32 0, i32 0
  %78 = load i32* %i, align 4
  call void @usb_hcd_start_port_resume(%struct.usb_bus* %self, i32 %78) noredzone
  %79 = load %struct.usb_hcd** %hcd.addr, align 8
  %rh_timer = getelementptr inbounds %struct.usb_hcd* %79, i32 0, i32 5
  %80 = load i32* %i, align 4
  %idxprom122 = zext i32 %80 to i64
  %81 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done123 = getelementptr inbounds %struct.ehci_hcd* %81, i32 0, i32 41
  %arrayidx124 = getelementptr [15 x i64]* %reset_done123, i32 0, i64 %idxprom122
  %82 = load i64* %arrayidx124, align 8
  %call125 = call i32 @mod_timer(%struct.timer_list* %rh_timer, i64 %82) noredzone
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end126

if.end126:                                        ; preds = %while.end, %if.end68
  %83 = load i32* %status, align 4
  %and127 = and i32 %83, 16
  %cmp128 = icmp ne i32 %and127, 0
  %lnot130 = xor i1 %cmp128, true
  %lnot132 = xor i1 %lnot130, true
  %lnot.ext133 = zext i1 %lnot132 to i32
  %conv134 = sext i32 %lnot.ext133 to i64
  %expval135 = call i64 @llvm.expect.i64(i64 %conv134, i64 0)
  %tobool136 = icmp ne i64 %expval135, 0
  br i1 %tobool136, label %if.then137, label %if.end153

if.then137:                                       ; preds = %if.end126
  %84 = load %struct.ehci_hcd** %ehci, align 8
  %call138 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %84) noredzone
  %self139 = getelementptr inbounds %struct.usb_hcd* %call138, i32 0, i32 0
  %controller = getelementptr inbounds %struct.usb_bus* %self139, i32 0, i32 0
  %85 = load %struct.device** %controller, align 8
  %call140 = call i32 (%struct.device*, i8*, ...)* @dev_err(%struct.device* %85, i8* getelementptr inbounds ([13 x i8]* @.str30, i32 0, i32 0)) noredzone
  %arraydecay = getelementptr inbounds [80 x i8]* %_buf, i32 0, i32 0
  %86 = load i32* %cmd, align 4
  %call141 = call i32 @dbg_command_buf(i8* %arraydecay, i32 80, i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0), i32 %86) noredzone
  %arraydecay143 = getelementptr inbounds [80 x i8]* %_buf142, i32 0, i32 0
  %87 = load i32* %status, align 4
  %call144 = call i32 @dbg_status_buf(i8* %arraydecay143, i32 80, i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0), i32 %87) noredzone
  br label %dead

dead:                                             ; preds = %if.then137, %if.then
  %88 = load %struct.usb_hcd** %hcd.addr, align 8
  call void @usb_hc_died(%struct.usb_hcd* %88) noredzone
  %89 = load %struct.ehci_hcd** %ehci, align 8
  %90 = bitcast %struct.ehci_hcd* %89 to i8*
  %bf.field.offs145 = getelementptr i8* %90, i32 244
  %91 = load i8* %bf.field.offs145, align 4
  %92 = and i8 %91, -33
  %93 = or i8 %92, 32
  store i8 %93, i8* %bf.field.offs145, align 4
  %94 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state146 = getelementptr inbounds %struct.ehci_hcd* %94, i32 0, i32 12
  store i32 3, i32* %rh_state146, align 4
  %95 = load %struct.ehci_hcd** %ehci, align 8
  %command147 = getelementptr inbounds %struct.ehci_hcd* %95, i32 0, i32 55
  %96 = load i32* %command147, align 4
  %and148 = and i32 %96, -50
  store i32 %and148, i32* %command147, align 4
  %97 = load %struct.ehci_hcd** %ehci, align 8
  %98 = load %struct.ehci_hcd** %ehci, align 8
  %command149 = getelementptr inbounds %struct.ehci_hcd* %98, i32 0, i32 55
  %99 = load i32* %command149, align 4
  %100 = load %struct.ehci_hcd** %ehci, align 8
  %regs150 = getelementptr inbounds %struct.ehci_hcd* %100, i32 0, i32 8
  %101 = load %struct.ehci_regs** %regs150, align 8
  %command151 = getelementptr inbounds %struct.ehci_regs* %101, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %97, i32 %99, i32* %command151) noredzone
  %102 = load %struct.ehci_hcd** %ehci, align 8
  %103 = load %struct.ehci_hcd** %ehci, align 8
  %regs152 = getelementptr inbounds %struct.ehci_hcd* %103, i32 0, i32 8
  %104 = load %struct.ehci_regs** %regs152, align 8
  %intr_enable = getelementptr inbounds %struct.ehci_regs* %104, i32 0, i32 2
  call void @ehci_writel(%struct.ehci_hcd* %102, i32 0, i32* %intr_enable) noredzone
  %105 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_handle_controller_death(%struct.ehci_hcd* %105) noredzone
  store i32 0, i32* %bh, align 4
  br label %if.end153

if.end153:                                        ; preds = %dead, %if.end126
  %106 = load i32* %bh, align 4
  %tobool154 = icmp ne i32 %106, 0
  br i1 %tobool154, label %if.then155, label %if.end156

if.then155:                                       ; preds = %if.end153
  %107 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_work(%struct.ehci_hcd* %107) noredzone
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %if.end153
  %108 = load %struct.ehci_hcd** %ehci, align 8
  %lock157 = getelementptr inbounds %struct.ehci_hcd* %108, i32 0, i32 11
  %109 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock157, i64 %109) noredzone
  %110 = load i32* %pcd_status, align 4
  %tobool158 = icmp ne i32 %110, 0
  br i1 %tobool158, label %if.then159, label %if.end160

if.then159:                                       ; preds = %if.end156
  %111 = load %struct.usb_hcd** %hcd.addr, align 8
  call void @usb_hcd_poll_rh_status(%struct.usb_hcd* %111) noredzone
  br label %if.end160

if.end160:                                        ; preds = %if.then159, %if.end156
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end160, %if.then14
  %112 = load i32* %retval
  ret i32 %112
}

define internal i32 @ehci_run(%struct.usb_hcd* %hcd) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %temp = alloca i32, align 4
  %hcc_params = alloca i32, align 4
  %_buf = alloca [80 x i8], align 16
  %coerce = alloca %union.ktime, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.usb_hcd** %hcd.addr, align 8
  %2 = bitcast %struct.usb_hcd* %1 to i8*
  %bf.field.offs = getelementptr i8* %2, i32 352
  %3 = bitcast i8* %bf.field.offs to i32*
  %4 = load i32* %3, align 8
  %5 = and i32 %4, -17
  %6 = or i32 %5, 16
  store i32 %6, i32* %3, align 8
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %8 = load %struct.ehci_hcd** %ehci, align 8
  %periodic_dma = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 23
  %9 = load i64* %periodic_dma, align 8
  %conv = trunc i64 %9 to i32
  %10 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 8
  %11 = load %struct.ehci_regs** %regs, align 8
  %frame_list = getelementptr inbounds %struct.ehci_regs* %11, i32 0, i32 5
  call void @ehci_writel(%struct.ehci_hcd* %7, i32 %conv, i32* %frame_list) noredzone
  %12 = load %struct.ehci_hcd** %ehci, align 8
  %13 = load %struct.ehci_hcd** %ehci, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 15
  %14 = load %struct.ehci_qh** %async, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %14, i32 0, i32 1
  %15 = load i64* %qh_dma, align 8
  %conv1 = trunc i64 %15 to i32
  %16 = load %struct.ehci_hcd** %ehci, align 8
  %regs2 = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 8
  %17 = load %struct.ehci_regs** %regs2, align 8
  %async_next = getelementptr inbounds %struct.ehci_regs* %17, i32 0, i32 6
  call void @ehci_writel(%struct.ehci_hcd* %12, i32 %conv1, i32* %async_next) noredzone
  %18 = load %struct.ehci_hcd** %ehci, align 8
  %19 = load %struct.ehci_hcd** %ehci, align 8
  %caps = getelementptr inbounds %struct.ehci_hcd* %19, i32 0, i32 7
  %20 = load %struct.ehci_caps** %caps, align 8
  %hcc_params3 = getelementptr inbounds %struct.ehci_caps* %20, i32 0, i32 2
  %call4 = call i32 @ehci_readl(%struct.ehci_hcd* %18, i32* %hcc_params3) noredzone
  store i32 %call4, i32* %hcc_params, align 4
  %21 = load i32* %hcc_params, align 4
  %and = and i32 %21, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %22 = load %struct.ehci_hcd** %ehci, align 8
  %23 = load %struct.ehci_hcd** %ehci, align 8
  %regs5 = getelementptr inbounds %struct.ehci_hcd* %23, i32 0, i32 8
  %24 = load %struct.ehci_regs** %regs5, align 8
  %segment = getelementptr inbounds %struct.ehci_regs* %24, i32 0, i32 4
  call void @ehci_writel(%struct.ehci_hcd* %22, i32 0, i32* %segment) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %25 = load %struct.ehci_hcd** %ehci, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 55
  %26 = load i32* %command, align 4
  %and6 = and i32 %26, -243
  store i32 %and6, i32* %command, align 4
  %27 = load %struct.ehci_hcd** %ehci, align 8
  %command7 = getelementptr inbounds %struct.ehci_hcd* %27, i32 0, i32 55
  %28 = load i32* %command7, align 4
  %or = or i32 %28, 1
  store i32 %or, i32* %command7, align 4
  %29 = load %struct.ehci_hcd** %ehci, align 8
  %30 = load %struct.ehci_hcd** %ehci, align 8
  %command8 = getelementptr inbounds %struct.ehci_hcd* %30, i32 0, i32 55
  %31 = load i32* %command8, align 4
  %32 = load %struct.ehci_hcd** %ehci, align 8
  %regs9 = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 8
  %33 = load %struct.ehci_regs** %regs9, align 8
  %command10 = getelementptr inbounds %struct.ehci_regs* %33, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %29, i32 %31, i32* %command10) noredzone
  %arraydecay = getelementptr inbounds [80 x i8]* %_buf, i32 0, i32 0
  %34 = load %struct.ehci_hcd** %ehci, align 8
  %command11 = getelementptr inbounds %struct.ehci_hcd* %34, i32 0, i32 55
  %35 = load i32* %command11, align 4
  %call12 = call i32 @dbg_command_buf(i8* %arraydecay, i32 80, i8* getelementptr inbounds ([5 x i8]* @.str27, i32 0, i32 0), i32 %35) noredzone
  call void @down_write(%struct.rw_semaphore* @ehci_cf_port_reset_rwsem) noredzone
  %36 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %36, i32 0, i32 12
  store i32 2, i32* %rh_state, align 4
  %37 = load %struct.ehci_hcd** %ehci, align 8
  %38 = load %struct.ehci_hcd** %ehci, align 8
  %regs13 = getelementptr inbounds %struct.ehci_hcd* %38, i32 0, i32 8
  %39 = load %struct.ehci_regs** %regs13, align 8
  %configured_flag = getelementptr inbounds %struct.ehci_regs* %39, i32 0, i32 10
  call void @ehci_writel(%struct.ehci_hcd* %37, i32 1, i32* %configured_flag) noredzone
  %40 = load %struct.ehci_hcd** %ehci, align 8
  %41 = load %struct.ehci_hcd** %ehci, align 8
  %regs14 = getelementptr inbounds %struct.ehci_hcd* %41, i32 0, i32 8
  %42 = load %struct.ehci_regs** %regs14, align 8
  %command15 = getelementptr inbounds %struct.ehci_regs* %42, i32 0, i32 0
  %call16 = call i32 @ehci_readl(%struct.ehci_hcd* %40, i32* %command15) noredzone
  call void @msleep(i32 5) noredzone
  call void @up_write(%struct.rw_semaphore* @ehci_cf_port_reset_rwsem) noredzone
  %43 = load %struct.ehci_hcd** %ehci, align 8
  %last_periodic_enable = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 54
  %call17 = call i64 @ktime_get_real() noredzone
  %coerce.dive = getelementptr %union.ktime* %coerce, i32 0, i32 0
  store i64 %call17, i64* %coerce.dive
  %44 = bitcast %union.ktime* %last_periodic_enable to i8*
  %45 = bitcast %union.ktime* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %45, i64 8, i32 8, i1 false)
  %46 = load %struct.ehci_hcd** %ehci, align 8
  %47 = load %struct.ehci_hcd** %ehci, align 8
  %caps18 = getelementptr inbounds %struct.ehci_hcd* %47, i32 0, i32 7
  %48 = load %struct.ehci_caps** %caps18, align 8
  %hc_capbase = getelementptr inbounds %struct.ehci_caps* %48, i32 0, i32 0
  %call19 = call i32 @ehci_readl(%struct.ehci_hcd* %46, i32* %hc_capbase) noredzone
  %shr = lshr i32 %call19, 16
  %and20 = and i32 65535, %shr
  store i32 %and20, i32* %temp, align 4
  %49 = load %struct.ehci_hcd** %ehci, align 8
  %call21 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %49) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call21, i32 0, i32 0
  %controller = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 0
  %50 = load %struct.device** %controller, align 8
  %51 = load %struct.ehci_hcd** %ehci, align 8
  %sbrn = getelementptr inbounds %struct.ehci_hcd* %51, i32 0, i32 60
  %52 = load i8* %sbrn, align 1
  %conv22 = zext i8 %52 to i32
  %and23 = and i32 %conv22, 240
  %shr24 = ashr i32 %and23, 4
  %53 = load %struct.ehci_hcd** %ehci, align 8
  %sbrn25 = getelementptr inbounds %struct.ehci_hcd* %53, i32 0, i32 60
  %54 = load i8* %sbrn25, align 1
  %conv26 = zext i8 %54 to i32
  %and27 = and i32 %conv26, 15
  %55 = load i32* %temp, align 4
  %shr28 = lshr i32 %55, 8
  %56 = load i32* %temp, align 4
  %and29 = and i32 %56, 255
  %57 = load i8* @ignore_oc, align 1
  %tobool30 = trunc i8 %57 to i1
  %cond = select i1 %tobool30, i8* getelementptr inbounds ([22 x i8]* @.str29, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str12, i32 0, i32 0)
  %call32 = call i32 (%struct.device*, i8*, ...)* @_dev_info(%struct.device* %50, i8* getelementptr inbounds ([35 x i8]* @.str28, i32 0, i32 0), i32 %shr24, i32 %and27, i32 %shr28, i32 %and29, i8* %cond) noredzone
  %58 = load %struct.ehci_hcd** %ehci, align 8
  %59 = load %struct.ehci_hcd** %ehci, align 8
  %regs33 = getelementptr inbounds %struct.ehci_hcd* %59, i32 0, i32 8
  %60 = load %struct.ehci_regs** %regs33, align 8
  %intr_enable = getelementptr inbounds %struct.ehci_regs* %60, i32 0, i32 2
  call void @ehci_writel(%struct.ehci_hcd* %58, i32 55, i32* %intr_enable) noredzone
  %61 = load %struct.ehci_hcd** %ehci, align 8
  call void @create_debug_files(%struct.ehci_hcd* %61) noredzone
  %62 = load %struct.ehci_hcd** %ehci, align 8
  %call34 = call i32 @create_sysfs_files(%struct.ehci_hcd* %62) noredzone
  ret i32 0
}

define internal void @ehci_stop(%struct.usb_hcd* %hcd) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %_buf = alloca [80 x i8], align 16
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 1
  store i32 0, i32* %enabled_hrtimer_events, align 4
  %3 = load %struct.ehci_hcd** %ehci, align 8
  %lock1 = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock1) noredzone
  %4 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_quiesce(%struct.ehci_hcd* %4) noredzone
  %5 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_silence_controller(%struct.ehci_hcd* %5) noredzone
  %6 = load %struct.ehci_hcd** %ehci, align 8
  %call2 = call i32 @ehci_reset(%struct.ehci_hcd* %6) noredzone
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %hrtimer = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 3
  %call3 = call i32 @hrtimer_cancel(%struct.hrtimer* %hrtimer) noredzone
  %8 = load %struct.ehci_hcd** %ehci, align 8
  call void @remove_sysfs_files(%struct.ehci_hcd* %8) noredzone
  %9 = load %struct.ehci_hcd** %ehci, align 8
  call void @remove_debug_files(%struct.ehci_hcd* %9) noredzone
  %10 = load %struct.ehci_hcd** %ehci, align 8
  %lock4 = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock4) noredzone
  %11 = load %struct.ehci_hcd** %ehci, align 8
  call void @end_free_itds(%struct.ehci_hcd* %11) noredzone
  %12 = load %struct.ehci_hcd** %ehci, align 8
  %lock5 = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock5) noredzone
  %13 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_mem_cleanup(%struct.ehci_hcd* %13) noredzone
  %14 = load %struct.ehci_hcd** %ehci, align 8
  %15 = bitcast %struct.ehci_hcd* %14 to i8*
  %bf.field.offs = getelementptr i8* %15, i32 708
  %16 = bitcast i8* %bf.field.offs to i32*
  %17 = load i32* %16, align 4
  %18 = lshr i32 %17, 7
  %bf.clear = and i32 %18, 1
  %cmp = icmp eq i32 %bf.clear, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @usb_amd_dev_put() noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arraydecay = getelementptr inbounds [80 x i8]* %_buf, i32 0, i32 0
  %19 = load %struct.ehci_hcd** %ehci, align 8
  %20 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %20, i32 0, i32 8
  %21 = load %struct.ehci_regs** %regs, align 8
  %status = getelementptr inbounds %struct.ehci_regs* %21, i32 0, i32 1
  %call6 = call i32 @ehci_readl(%struct.ehci_hcd* %19, i32* %status) noredzone
  %call7 = call i32 @dbg_status_buf(i8* %arraydecay, i32 80, i8* getelementptr inbounds ([20 x i8]* @.str18, i32 0, i32 0), i32 %call6) noredzone
  ret void
}

define internal void @ehci_shutdown(%struct.usb_hcd* %hcd) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %3 = bitcast %struct.ehci_hcd* %2 to i8*
  %bf.field.offs = getelementptr i8* %3, i32 244
  %4 = load i8* %bf.field.offs, align 4
  %5 = and i8 %4, -33
  %6 = or i8 %5, 32
  store i8 %6, i8* %bf.field.offs, align 4
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 12
  store i32 3, i32* %rh_state, align 4
  %8 = load %struct.ehci_hcd** %ehci, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 1
  store i32 0, i32* %enabled_hrtimer_events, align 4
  %9 = load %struct.ehci_hcd** %ehci, align 8
  %lock1 = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock1) noredzone
  %10 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_silence_controller(%struct.ehci_hcd* %10) noredzone
  %11 = load %struct.ehci_hcd** %ehci, align 8
  %hrtimer = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 3
  %call2 = call i32 @hrtimer_cancel(%struct.hrtimer* %hrtimer) noredzone
  ret void
}

define internal i32 @ehci_get_frame(%struct.usb_hcd* %hcd) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %call1 = call i32 @ehci_read_frame_index(%struct.ehci_hcd* %1) noredzone
  %shr = lshr i32 %call1, 3
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 21
  %3 = load i32* %periodic_size, align 4
  %rem = urem i32 %shr, %3
  ret i32 %rem
}

define internal i32 @ehci_urb_enqueue(%struct.usb_hcd* %hcd, %struct.urb* %urb, i32 %mem_flags) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %mem_flags.addr = alloca i32, align 4
  %ehci = alloca %struct.ehci_hcd*, align 8
  %qtd_list = alloca %struct.list_head, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %mem_flags, i32* %mem_flags.addr, align 4
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  call void @INIT_LIST_HEAD(%struct.list_head* %qtd_list) noredzone
  %1 = load %struct.urb** %urb.addr, align 8
  %pipe = getelementptr inbounds %struct.urb* %1, i32 0, i32 10
  %2 = load i32* %pipe, align 4
  %shr = lshr i32 %2, 30
  %and = and i32 %shr, 3
  switch i32 %and, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb5
    i32 0, label %sw.bb11
  ]

sw.bb:                                            ; preds = %entry
  %3 = load %struct.urb** %urb.addr, align 8
  %transfer_buffer_length = getelementptr inbounds %struct.urb* %3, i32 0, i32 19
  %4 = load i32* %transfer_buffer_length, align 4
  %cmp = icmp ugt i32 %4, 16384
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 -90, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end
  %5 = load %struct.ehci_hcd** %ehci, align 8
  %6 = load %struct.urb** %urb.addr, align 8
  %7 = load i32* %mem_flags.addr, align 4
  %call1 = call %struct.list_head* @qh_urb_transaction(%struct.ehci_hcd* %5, %struct.urb* %6, %struct.list_head* %qtd_list, i32 %7) noredzone
  %tobool = icmp ne %struct.list_head* %call1, null
  br i1 %tobool, label %if.end3, label %if.then2

if.then2:                                         ; preds = %sw.default
  store i32 -12, i32* %retval
  br label %return

if.end3:                                          ; preds = %sw.default
  %8 = load %struct.ehci_hcd** %ehci, align 8
  %9 = load %struct.urb** %urb.addr, align 8
  %10 = load i32* %mem_flags.addr, align 4
  %call4 = call i32 @submit_async(%struct.ehci_hcd* %8, %struct.urb* %9, %struct.list_head* %qtd_list, i32 %10) noredzone
  store i32 %call4, i32* %retval
  br label %return

sw.bb5:                                           ; preds = %entry
  %11 = load %struct.ehci_hcd** %ehci, align 8
  %12 = load %struct.urb** %urb.addr, align 8
  %13 = load i32* %mem_flags.addr, align 4
  %call6 = call %struct.list_head* @qh_urb_transaction(%struct.ehci_hcd* %11, %struct.urb* %12, %struct.list_head* %qtd_list, i32 %13) noredzone
  %tobool7 = icmp ne %struct.list_head* %call6, null
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %sw.bb5
  store i32 -12, i32* %retval
  br label %return

if.end9:                                          ; preds = %sw.bb5
  %14 = load %struct.ehci_hcd** %ehci, align 8
  %15 = load %struct.urb** %urb.addr, align 8
  %16 = load i32* %mem_flags.addr, align 4
  %call10 = call i32 @intr_submit(%struct.ehci_hcd* %14, %struct.urb* %15, %struct.list_head* %qtd_list, i32 %16) noredzone
  store i32 %call10, i32* %retval
  br label %return

sw.bb11:                                          ; preds = %entry
  %17 = load %struct.urb** %urb.addr, align 8
  %dev = getelementptr inbounds %struct.urb* %17, i32 0, i32 8
  %18 = load %struct.usb_device** %dev, align 8
  %speed = getelementptr inbounds %struct.usb_device* %18, i32 0, i32 4
  %19 = load i32* %speed, align 4
  %cmp12 = icmp eq i32 %19, 3
  br i1 %cmp12, label %if.then13, label %if.else

if.then13:                                        ; preds = %sw.bb11
  %20 = load %struct.ehci_hcd** %ehci, align 8
  %21 = load %struct.urb** %urb.addr, align 8
  %22 = load i32* %mem_flags.addr, align 4
  %call14 = call i32 @itd_submit(%struct.ehci_hcd* %20, %struct.urb* %21, i32 %22) noredzone
  store i32 %call14, i32* %retval
  br label %return

if.else:                                          ; preds = %sw.bb11
  %23 = load %struct.ehci_hcd** %ehci, align 8
  %24 = load %struct.urb** %urb.addr, align 8
  %25 = load i32* %mem_flags.addr, align 4
  %call15 = call i32 @sitd_submit(%struct.ehci_hcd* %23, %struct.urb* %24, i32 %25) noredzone
  store i32 %call15, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then13, %if.end9, %if.then8, %if.end3, %if.then2, %if.then
  %26 = load i32* %retval
  ret i32 %26
}

define internal i32 @ehci_urb_dequeue(%struct.usb_hcd* %hcd, %struct.urb* %urb, i32 %status) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %status.addr = alloca i32, align 4
  %ehci = alloca %struct.ehci_hcd*, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %flags = alloca i64, align 8
  %rc = alloca i32, align 4
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %status, i32* %status.addr, align 4
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 11
  %call2 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call3 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call2) noredzone
  store i64 %call3, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.end4

do.end4:                                          ; preds = %do.end
  %2 = load %struct.usb_hcd** %hcd.addr, align 8
  %3 = load %struct.urb** %urb.addr, align 8
  %4 = load i32* %status.addr, align 4
  %call5 = call i32 @usb_hcd_check_unlink_urb(%struct.usb_hcd* %2, %struct.urb* %3, i32 %4) noredzone
  store i32 %call5, i32* %rc, align 4
  %5 = load i32* %rc, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end4
  br label %done

if.end:                                           ; preds = %do.end4
  %6 = load %struct.urb** %urb.addr, align 8
  %pipe = getelementptr inbounds %struct.urb* %6, i32 0, i32 10
  %7 = load i32* %pipe, align 4
  %shr = lshr i32 %7, 30
  %and = and i32 %shr, 3
  %cmp6 = icmp eq i32 %and, 0
  br i1 %cmp6, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.end
  br label %if.end23

if.else:                                          ; preds = %if.end
  %8 = load %struct.urb** %urb.addr, align 8
  %hcpriv = getelementptr inbounds %struct.urb* %8, i32 0, i32 1
  %9 = load i8** %hcpriv, align 8
  %10 = bitcast i8* %9 to %struct.ehci_qh*
  store %struct.ehci_qh* %10, %struct.ehci_qh** %qh, align 8
  %11 = load %struct.ehci_qh** %qh, align 8
  %12 = bitcast %struct.ehci_qh* %11 to i8*
  %bf.field.offs = getelementptr i8* %12, i32 132
  %13 = bitcast i8* %bf.field.offs to i32*
  %14 = load i32* %13, align 4
  %15 = and i32 %14, -134217729
  %16 = or i32 %15, 134217728
  store i32 %16, i32* %13, align 4
  %17 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %17, i32 0, i32 9
  %18 = load i8* %qh_state, align 1
  %conv9 = zext i8 %18 to i32
  switch i32 %conv9, label %sw.epilog [
    i32 1, label %sw.bb
    i32 5, label %sw.bb18
    i32 2, label %sw.bb20
    i32 4, label %sw.bb20
    i32 3, label %sw.bb21
  ]

sw.bb:                                            ; preds = %if.else
  %19 = load %struct.urb** %urb.addr, align 8
  %pipe10 = getelementptr inbounds %struct.urb* %19, i32 0, i32 10
  %20 = load i32* %pipe10, align 4
  %shr11 = lshr i32 %20, 30
  %and12 = and i32 %shr11, 3
  %cmp13 = icmp eq i32 %and12, 1
  br i1 %cmp13, label %if.then15, label %if.else16

if.then15:                                        ; preds = %sw.bb
  %21 = load %struct.ehci_hcd** %ehci, align 8
  %22 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_intr(%struct.ehci_hcd* %21, %struct.ehci_qh* %22) noredzone
  br label %if.end17

if.else16:                                        ; preds = %sw.bb
  %23 = load %struct.ehci_hcd** %ehci, align 8
  %24 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_async(%struct.ehci_hcd* %23, %struct.ehci_qh* %24) noredzone
  br label %if.end17

if.end17:                                         ; preds = %if.else16, %if.then15
  br label %sw.epilog

sw.bb18:                                          ; preds = %if.else
  %25 = load %struct.ehci_qh** %qh, align 8
  %26 = bitcast %struct.ehci_qh* %25 to i8*
  %bf.field.offs19 = getelementptr i8* %26, i32 132
  %27 = bitcast i8* %bf.field.offs19 to i32*
  %28 = load i32* %27, align 4
  %29 = and i32 %28, -67108865
  %30 = or i32 %29, 67108864
  store i32 %30, i32* %27, align 4
  br label %sw.epilog

sw.bb20:                                          ; preds = %if.else, %if.else
  br label %sw.epilog

sw.bb21:                                          ; preds = %if.else
  %31 = load %struct.ehci_hcd** %ehci, align 8
  %32 = load %struct.ehci_qh** %qh, align 8
  %call22 = call i32 @qh_completions(%struct.ehci_hcd* %31, %struct.ehci_qh* %32) noredzone
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else, %sw.bb21, %sw.bb20, %sw.bb18, %if.end17
  br label %if.end23

if.end23:                                         ; preds = %sw.epilog, %if.then8
  br label %done

done:                                             ; preds = %if.end23, %if.then
  %33 = load %struct.ehci_hcd** %ehci, align 8
  %lock24 = getelementptr inbounds %struct.ehci_hcd* %33, i32 0, i32 11
  %34 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock24, i64 %34) noredzone
  %35 = load i32* %rc, align 4
  ret i32 %35
}

define internal void @ehci_endpoint_disable(%struct.usb_hcd* %hcd, %struct.usb_host_endpoint* %ep) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ep.addr = alloca %struct.usb_host_endpoint*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %flags = alloca i64, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %stream = alloca %struct.ehci_iso_stream*, align 8
  %__ret_warn_on = alloca i32, align 4
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store %struct.usb_host_endpoint* %ep, %struct.usb_host_endpoint** %ep.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  br label %rescan

rescan:                                           ; preds = %idle_timeout, %entry
  br label %do.body

do.body:                                          ; preds = %rescan
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 11
  %call2 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call3 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call2) noredzone
  store i64 %call3, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.end4

do.end4:                                          ; preds = %do.end
  %2 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %hcpriv = getelementptr inbounds %struct.usb_host_endpoint* %2, i32 0, i32 3
  %3 = load i8** %hcpriv, align 8
  %4 = bitcast i8* %3 to %struct.ehci_qh*
  store %struct.ehci_qh* %4, %struct.ehci_qh** %qh, align 8
  %5 = load %struct.ehci_qh** %qh, align 8
  %tobool = icmp ne %struct.ehci_qh* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %do.end4
  br label %done

if.end:                                           ; preds = %do.end4
  %6 = load %struct.ehci_qh** %qh, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %6, i32 0, i32 0
  %7 = load %struct.ehci_qh_hw** %hw, align 8
  %cmp5 = icmp eq %struct.ehci_qh_hw* %7, null
  br i1 %cmp5, label %if.then7, label %if.end13

if.then7:                                         ; preds = %if.end
  %8 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %hcpriv8 = getelementptr inbounds %struct.usb_host_endpoint* %8, i32 0, i32 3
  %9 = load i8** %hcpriv8, align 8
  %10 = bitcast i8* %9 to %struct.ehci_iso_stream*
  store %struct.ehci_iso_stream* %10, %struct.ehci_iso_stream** %stream, align 8
  %11 = load %struct.ehci_iso_stream** %stream, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_stream* %11, i32 0, i32 3
  %call9 = call i32 @list_empty(%struct.list_head* %td_list) noredzone
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.then7
  br label %idle_timeout

if.end12:                                         ; preds = %if.then7
  %12 = load %struct.ehci_hcd** %ehci, align 8
  %13 = load %struct.ehci_iso_stream** %stream, align 8
  call void @reserve_release_iso_bandwidth(%struct.ehci_hcd* %12, %struct.ehci_iso_stream* %13, i32 -1) noredzone
  %14 = load %struct.ehci_iso_stream** %stream, align 8
  %15 = bitcast %struct.ehci_iso_stream* %14 to i8*
  call void @kfree(i8* %15) noredzone
  br label %done

if.end13:                                         ; preds = %if.end
  %16 = load %struct.ehci_qh** %qh, align 8
  %17 = bitcast %struct.ehci_qh* %16 to i8*
  %bf.field.offs = getelementptr i8* %17, i32 132
  %18 = bitcast i8* %bf.field.offs to i32*
  %19 = load i32* %18, align 4
  %20 = and i32 %19, -134217729
  %21 = or i32 %20, 134217728
  store i32 %21, i32* %18, align 4
  %22 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %22, i32 0, i32 9
  %23 = load i8* %qh_state, align 1
  %conv14 = zext i8 %23 to i32
  switch i32 %conv14, label %sw.default [
    i32 1, label %sw.bb
    i32 5, label %sw.bb40
    i32 2, label %sw.bb40
    i32 4, label %sw.bb40
    i32 3, label %sw.bb43
  ]

sw.bb:                                            ; preds = %if.end13
  %24 = load %struct.ehci_qh** %qh, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %24, i32 0, i32 3
  %call15 = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool16 = icmp ne i32 %call15, 0
  %lnot = xor i1 %tobool16, true
  %lnot17 = xor i1 %lnot, true
  %lnot18 = xor i1 %lnot17, true
  %lnot.ext = zext i1 %lnot18 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %25 = load i32* %__ret_warn_on, align 4
  %tobool19 = icmp ne i32 %25, 0
  %lnot20 = xor i1 %tobool19, true
  %lnot22 = xor i1 %lnot20, true
  %lnot.ext23 = zext i1 %lnot22 to i32
  %conv24 = sext i32 %lnot.ext23 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv24, i64 0)
  %tobool25 = icmp ne i64 %expval, 0
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %sw.bb
  call void @warn_slowpath_null(i8* getelementptr inbounds ([66 x i8]* @.str9, i32 0, i32 0), i32 973) noredzone
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %sw.bb
  %26 = load i32* %__ret_warn_on, align 4
  %tobool28 = icmp ne i32 %26, 0
  %lnot29 = xor i1 %tobool28, true
  %lnot31 = xor i1 %lnot29, true
  %lnot.ext32 = zext i1 %lnot31 to i32
  %conv33 = sext i32 %lnot.ext32 to i64
  %expval34 = call i64 @llvm.expect.i64(i64 %conv33, i64 0)
  %27 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %desc = getelementptr inbounds %struct.usb_host_endpoint* %27, i32 0, i32 0
  %call35 = call i32 @usb_endpoint_type(%struct.usb_endpoint_descriptor* %desc) noredzone
  %cmp36 = icmp ne i32 %call35, 3
  br i1 %cmp36, label %if.then38, label %if.else

if.then38:                                        ; preds = %if.end27
  %28 = load %struct.ehci_hcd** %ehci, align 8
  %29 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_async(%struct.ehci_hcd* %28, %struct.ehci_qh* %29) noredzone
  br label %if.end39

if.else:                                          ; preds = %if.end27
  %30 = load %struct.ehci_hcd** %ehci, align 8
  %31 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_intr(%struct.ehci_hcd* %30, %struct.ehci_qh* %31) noredzone
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then38
  br label %sw.bb40

sw.bb40:                                          ; preds = %if.end13, %if.end13, %if.end13, %if.end39
  br label %idle_timeout

idle_timeout:                                     ; preds = %if.then46, %sw.bb40, %if.then11
  %32 = load %struct.ehci_hcd** %ehci, align 8
  %lock41 = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 11
  %33 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock41, i64 %33) noredzone
  %call42 = call i64 @schedule_timeout_uninterruptible(i64 1) noredzone
  br label %rescan

sw.bb43:                                          ; preds = %if.end13
  %34 = load %struct.ehci_qh** %qh, align 8
  %35 = bitcast %struct.ehci_qh* %34 to i8*
  %bf.field.offs44 = getelementptr i8* %35, i32 132
  %36 = bitcast i8* %bf.field.offs44 to i32*
  %37 = load i32* %36, align 4
  %38 = lshr i32 %37, 25
  %bf.clear = and i32 %38, 1
  %tobool45 = icmp ne i32 %bf.clear, 0
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %sw.bb43
  br label %idle_timeout

if.end47:                                         ; preds = %sw.bb43
  %39 = load %struct.ehci_qh** %qh, align 8
  %qtd_list48 = getelementptr inbounds %struct.ehci_qh* %39, i32 0, i32 3
  %call49 = call i32 @list_empty(%struct.list_head* %qtd_list48) noredzone
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.then51, label %if.end55

if.then51:                                        ; preds = %if.end47
  %40 = load %struct.ehci_qh** %qh, align 8
  %ps = getelementptr inbounds %struct.ehci_qh* %40, i32 0, i32 7
  %bw_uperiod = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 11
  %41 = load i8* %bw_uperiod, align 1
  %tobool52 = icmp ne i8 %41, 0
  br i1 %tobool52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.then51
  %42 = load %struct.ehci_hcd** %ehci, align 8
  %43 = load %struct.ehci_qh** %qh, align 8
  call void @reserve_release_intr_bandwidth(%struct.ehci_hcd* %42, %struct.ehci_qh* %43, i32 -1) noredzone
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %if.then51
  %44 = load %struct.ehci_hcd** %ehci, align 8
  %45 = load %struct.ehci_qh** %qh, align 8
  call void @qh_destroy(%struct.ehci_hcd* %44, %struct.ehci_qh* %45) noredzone
  br label %sw.epilog

if.end55:                                         ; preds = %if.end47
  br label %sw.default

sw.default:                                       ; preds = %if.end13, %if.end55
  %46 = load %struct.ehci_hcd** %ehci, align 8
  %call56 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %46) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call56, i32 0, i32 0
  %controller = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 0
  %47 = load %struct.device** %controller, align 8
  %48 = load %struct.ehci_qh** %qh, align 8
  %49 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %desc57 = getelementptr inbounds %struct.usb_host_endpoint* %49, i32 0, i32 0
  %bEndpointAddress = getelementptr inbounds %struct.usb_endpoint_descriptor* %desc57, i32 0, i32 2
  %50 = load i8* %bEndpointAddress, align 1
  %conv58 = zext i8 %50 to i32
  %51 = load %struct.ehci_qh** %qh, align 8
  %qh_state59 = getelementptr inbounds %struct.ehci_qh* %51, i32 0, i32 9
  %52 = load i8* %qh_state59, align 1
  %conv60 = zext i8 %52 to i32
  %53 = load %struct.ehci_qh** %qh, align 8
  %qtd_list61 = getelementptr inbounds %struct.ehci_qh* %53, i32 0, i32 3
  %call62 = call i32 @list_empty(%struct.list_head* %qtd_list61) noredzone
  %tobool63 = icmp ne i32 %call62, 0
  %cond = select i1 %tobool63, i8* getelementptr inbounds ([1 x i8]* @.str12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str13, i32 0, i32 0)
  %call64 = call i32 (%struct.device*, i8*, ...)* @dev_err(%struct.device* %47, i8* getelementptr inbounds ([26 x i8]* @.str11, i32 0, i32 0), %struct.ehci_qh* %48, i32 %conv58, i32 %conv60, i8* %cond) noredzone
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end54
  br label %done

done:                                             ; preds = %sw.epilog, %if.end12, %if.then
  %54 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %hcpriv65 = getelementptr inbounds %struct.usb_host_endpoint* %54, i32 0, i32 3
  store i8* null, i8** %hcpriv65, align 8
  %55 = load %struct.ehci_hcd** %ehci, align 8
  %lock66 = getelementptr inbounds %struct.ehci_hcd* %55, i32 0, i32 11
  %56 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock66, i64 %56) noredzone
  ret void
}

define internal void @ehci_endpoint_reset(%struct.usb_hcd* %hcd, %struct.usb_host_endpoint* %ep) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ep.addr = alloca %struct.usb_host_endpoint*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %eptype = alloca i32, align 4
  %epnum = alloca i32, align 4
  %is_out = alloca i32, align 4
  %flags = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__ret_warn_once = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store %struct.usb_host_endpoint* %ep, %struct.usb_host_endpoint** %ep.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %desc = getelementptr inbounds %struct.usb_host_endpoint* %1, i32 0, i32 0
  %call1 = call i32 @usb_endpoint_type(%struct.usb_endpoint_descriptor* %desc) noredzone
  store i32 %call1, i32* %eptype, align 4
  %2 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %desc2 = getelementptr inbounds %struct.usb_host_endpoint* %2, i32 0, i32 0
  %call3 = call i32 @usb_endpoint_num(%struct.usb_endpoint_descriptor* %desc2) noredzone
  store i32 %call3, i32* %epnum, align 4
  %3 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %desc4 = getelementptr inbounds %struct.usb_host_endpoint* %3, i32 0, i32 0
  %call5 = call i32 @usb_endpoint_dir_out(%struct.usb_endpoint_descriptor* %desc4) noredzone
  store i32 %call5, i32* %is_out, align 4
  %4 = load i32* %eptype, align 4
  %cmp = icmp ne i32 %4, 2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32* %eptype, align 4
  %cmp6 = icmp ne i32 %5, 3
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body7

do.body7:                                         ; preds = %do.body
  %cmp8 = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp8 to i32
  %6 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 11
  %call9 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call10 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call9) noredzone
  store i64 %call10, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body7
  br label %do.end11

do.end11:                                         ; preds = %do.end
  %7 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %hcpriv = getelementptr inbounds %struct.usb_host_endpoint* %7, i32 0, i32 3
  %8 = load i8** %hcpriv, align 8
  %9 = bitcast i8* %8 to %struct.ehci_qh*
  store %struct.ehci_qh* %9, %struct.ehci_qh** %qh, align 8
  %10 = load %struct.ehci_qh** %qh, align 8
  %tobool = icmp ne %struct.ehci_qh* %10, null
  br i1 %tobool, label %if.then12, label %if.end68

if.then12:                                        ; preds = %do.end11
  %11 = load %struct.ehci_qh** %qh, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %11, i32 0, i32 3
  %call13 = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.else, label %if.then15

if.then15:                                        ; preds = %if.then12
  store i32 1, i32* %__ret_warn_once, align 4
  %12 = load i32* %__ret_warn_once, align 4
  %tobool16 = icmp ne i32 %12, 0
  %lnot = xor i1 %tobool16, true
  %lnot17 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot17 to i32
  %conv18 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv18, i64 0)
  %tobool19 = icmp ne i64 %expval, 0
  br i1 %tobool19, label %if.then20, label %if.end48

if.then20:                                        ; preds = %if.then15
  %13 = load i8* @ehci_endpoint_reset.__warned, align 1
  %tobool21 = trunc i8 %13 to i1
  %lnot22 = xor i1 %tobool21, true
  %lnot24 = xor i1 %lnot22, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  store i32 %lnot.ext27, i32* %__ret_warn_on, align 4
  %14 = load i32* %__ret_warn_on, align 4
  %tobool28 = icmp ne i32 %14, 0
  %lnot29 = xor i1 %tobool28, true
  %lnot31 = xor i1 %lnot29, true
  %lnot.ext32 = zext i1 %lnot31 to i32
  %conv33 = sext i32 %lnot.ext32 to i64
  %expval34 = call i64 @llvm.expect.i64(i64 %conv33, i64 0)
  %tobool35 = icmp ne i64 %expval34, 0
  br i1 %tobool35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.then20
  call void (i8*, i32, i8*, ...)* @warn_slowpath_fmt(i8* getelementptr inbounds ([66 x i8]* @.str9, i32 0, i32 0), i32 1033, i8* getelementptr inbounds ([32 x i8]* @.str10, i32 0, i32 0)) noredzone
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %if.then20
  %15 = load i32* %__ret_warn_on, align 4
  %tobool38 = icmp ne i32 %15, 0
  %lnot39 = xor i1 %tobool38, true
  %lnot41 = xor i1 %lnot39, true
  %lnot.ext42 = zext i1 %lnot41 to i32
  %conv43 = sext i32 %lnot.ext42 to i64
  %expval44 = call i64 @llvm.expect.i64(i64 %conv43, i64 0)
  %tobool45 = icmp ne i64 %expval44, 0
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end37
  store i8 1, i8* @ehci_endpoint_reset.__warned, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %if.end37
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then15
  %16 = load i32* %__ret_warn_once, align 4
  %tobool49 = icmp ne i32 %16, 0
  %lnot50 = xor i1 %tobool49, true
  %lnot52 = xor i1 %lnot50, true
  %lnot.ext53 = zext i1 %lnot52 to i32
  %conv54 = sext i32 %lnot.ext53 to i64
  %expval55 = call i64 @llvm.expect.i64(i64 %conv54, i64 0)
  br label %if.end67

if.else:                                          ; preds = %if.then12
  %17 = load i32* %is_out, align 4
  %idxprom = sext i32 %17 to i64
  %18 = load %struct.ehci_qh** %qh, align 8
  %ps = getelementptr inbounds %struct.ehci_qh* %18, i32 0, i32 7
  %udev = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 0
  %19 = load %struct.usb_device** %udev, align 8
  %toggle = getelementptr inbounds %struct.usb_device* %19, i32 0, i32 7
  %arrayidx = getelementptr [2 x i32]* %toggle, i32 0, i64 %idxprom
  %20 = load i32* %arrayidx, align 4
  %21 = load i32* %epnum, align 4
  %shl = shl i32 1, %21
  %neg = xor i32 %shl, -1
  %and = and i32 %20, %neg
  %22 = load i32* %epnum, align 4
  %shl56 = shl i32 0, %22
  %or = or i32 %and, %shl56
  %23 = load i32* %is_out, align 4
  %idxprom57 = sext i32 %23 to i64
  %24 = load %struct.ehci_qh** %qh, align 8
  %ps58 = getelementptr inbounds %struct.ehci_qh* %24, i32 0, i32 7
  %udev59 = getelementptr inbounds %struct.ehci_per_sched* %ps58, i32 0, i32 0
  %25 = load %struct.usb_device** %udev59, align 8
  %toggle60 = getelementptr inbounds %struct.usb_device* %25, i32 0, i32 7
  %arrayidx61 = getelementptr [2 x i32]* %toggle60, i32 0, i64 %idxprom57
  store i32 %or, i32* %arrayidx61, align 4
  %26 = load %struct.ehci_qh** %qh, align 8
  %27 = bitcast %struct.ehci_qh* %26 to i8*
  %bf.field.offs = getelementptr i8* %27, i32 132
  %28 = bitcast i8* %bf.field.offs to i32*
  %29 = load i32* %28, align 4
  %30 = and i32 %29, -134217729
  %31 = or i32 %30, 134217728
  store i32 %31, i32* %28, align 4
  %32 = load i32* %eptype, align 4
  %cmp62 = icmp eq i32 %32, 2
  br i1 %cmp62, label %if.then64, label %if.else65

if.then64:                                        ; preds = %if.else
  %33 = load %struct.ehci_hcd** %ehci, align 8
  %34 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_async(%struct.ehci_hcd* %33, %struct.ehci_qh* %34) noredzone
  br label %if.end66

if.else65:                                        ; preds = %if.else
  %35 = load %struct.ehci_hcd** %ehci, align 8
  %36 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_intr(%struct.ehci_hcd* %35, %struct.ehci_qh* %36) noredzone
  br label %if.end66

if.end66:                                         ; preds = %if.else65, %if.then64
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end48
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %do.end11
  %37 = load %struct.ehci_hcd** %ehci, align 8
  %lock69 = getelementptr inbounds %struct.ehci_hcd* %37, i32 0, i32 11
  %38 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock69, i64 %38) noredzone
  br label %return

return:                                           ; preds = %if.end68, %if.then
  ret void
}

define internal i32 @ehci_hub_status_data(%struct.usb_hcd* %hcd, i8* %buf) nounwind noredzone {
entry:
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %buf.addr = alloca i8*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %temp = alloca i32, align 4
  %status = alloca i32, align 4
  %mask = alloca i32, align 4
  %ports = alloca i32, align 4
  %i = alloca i32, align 4
  %retval1 = alloca i32, align 4
  %flags = alloca i64, align 8
  %ppcd = alloca i32, align 4
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy41 = alloca i64, align 8
  %__dummy242 = alloca i64, align 8
  %__dummy46 = alloca i64, align 8
  %__dummy247 = alloca i64, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  store i32 1, i32* %retval1, align 4
  store i32 -1, i32* %ppcd, align 4
  %1 = load i8** %buf.addr, align 8
  %arrayidx = getelementptr i8* %1, i64 0
  store i8 0, i8* %arrayidx, align 1
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 10
  %3 = load i32* %hcs_params, align 4
  %shr = lshr i32 %3, 0
  %and = and i32 %shr, 15
  store i32 %and, i32* %ports, align 4
  %4 = load i32* %ports, align 4
  %cmp = icmp sgt i32 %4, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i8** %buf.addr, align 8
  %arrayidx2 = getelementptr i8* %5, i64 1
  store i8 0, i8* %arrayidx2, align 1
  %6 = load i32* %retval1, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %retval1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 47
  %8 = load i64* %resuming_ports, align 8
  %conv = trunc i64 %8 to i32
  store i32 %conv, i32* %status, align 4
  %9 = load i8* @ignore_oc, align 1
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.end
  store i32 42, i32* %mask, align 4
  br label %if.end4

if.else:                                          ; preds = %if.end
  store i32 10, i32* %mask, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.else, %if.then3
  br label %do.body

do.body:                                          ; preds = %if.end4
  br label %do.body5

do.body5:                                         ; preds = %do.body
  %cmp6 = icmp eq i64* %__dummy, %__dummy2
  %conv7 = zext i1 %cmp6 to i32
  %10 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 11
  %call8 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call9 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call8) noredzone
  store i64 %call9, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body5
  br label %do.end10

do.end10:                                         ; preds = %do.end
  %11 = load %struct.ehci_hcd** %ehci, align 8
  %12 = bitcast %struct.ehci_hcd* %11 to i8*
  %bf.field.offs = getelementptr i8* %12, i32 720
  %13 = bitcast i8* %bf.field.offs to i32*
  %14 = load i32* %13, align 8
  %15 = lshr i32 %14, 2
  %bf.clear = and i32 %15, 1
  %tobool11 = icmp ne i32 %bf.clear, 0
  br i1 %tobool11, label %if.then12, label %if.end16

if.then12:                                        ; preds = %do.end10
  %16 = load %struct.ehci_hcd** %ehci, align 8
  %17 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 8
  %18 = load %struct.ehci_regs** %regs, align 8
  %status13 = getelementptr inbounds %struct.ehci_regs* %18, i32 0, i32 1
  %call14 = call i32 @ehci_readl(%struct.ehci_hcd* %16, i32* %status13) noredzone
  %shr15 = lshr i32 %call14, 16
  store i32 %shr15, i32* %ppcd, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %do.end10
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end16
  %19 = load i32* %i, align 4
  %20 = load i32* %ports, align 4
  %cmp17 = icmp slt i32 %19, %20
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32* %ppcd, align 4
  %22 = load i32* %i, align 4
  %shl = shl i32 1, %22
  %and19 = and i32 %21, %shl
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then21, label %if.else25

if.then21:                                        ; preds = %for.body
  %23 = load %struct.ehci_hcd** %ehci, align 8
  %24 = load i32* %i, align 4
  %idxprom = sext i32 %24 to i64
  %25 = load %struct.ehci_hcd** %ehci, align 8
  %regs22 = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 8
  %26 = load %struct.ehci_regs** %regs22, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %26, i32 0, i32 11
  %arrayidx23 = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom
  %call24 = call i32 @ehci_readl(%struct.ehci_hcd* %23, i32* %arrayidx23) noredzone
  store i32 %call24, i32* %temp, align 4
  br label %if.end26

if.else25:                                        ; preds = %for.body
  store i32 0, i32* %temp, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else25, %if.then21
  %27 = load i32* %temp, align 4
  %28 = load i32* %mask, align 4
  %and27 = and i32 %27, %28
  %cmp28 = icmp ne i32 %and27, 0
  br i1 %cmp28, label %if.then56, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end26
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false
  %29 = load i32* %i, align 4
  %conv30 = sext i32 %29 to i64
  %30 = load %struct.ehci_hcd** %ehci, align 8
  %port_c_suspend = getelementptr inbounds %struct.ehci_hcd* %30, i32 0, i32 45
  store i64 %conv30, i64* %nr.addr.i, align 8
  store i64* %port_c_suspend, i64** %addr.addr.i, align 8
  %31 = load i64* %nr.addr.i, align 8
  %and.i = and i64 %31, 63
  %shl.i = shl i64 1, %and.i
  %32 = load i64* %nr.addr.i, align 8
  %shr.i = ashr i64 %32, 6
  %33 = load i64** %addr.addr.i, align 8
  %arrayidx.i = getelementptr i64* %33, i64 %shr.i
  %34 = load volatile i64* %arrayidx.i, align 8
  %and1.i = and i64 %shl.i, %34
  %cmp.i = icmp ne i64 %and1.i, 0
  %conv.i = zext i1 %cmp.i to i32
  %tobool32 = icmp ne i32 %conv.i, 0
  br i1 %tobool32, label %if.then56, label %lor.lhs.false37

cond.false:                                       ; preds = %lor.lhs.false
  %35 = load i32* %i, align 4
  %conv33 = sext i32 %35 to i64
  %36 = load %struct.ehci_hcd** %ehci, align 8
  %port_c_suspend34 = getelementptr inbounds %struct.ehci_hcd* %36, i32 0, i32 45
  %call35 = call i32 @variable_test_bit(i64 %conv33, i64* %port_c_suspend34) noredzone
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then56, label %lor.lhs.false37

lor.lhs.false37:                                  ; preds = %cond.false, %cond.true
  %37 = load i32* %i, align 4
  %idxprom38 = sext i32 %37 to i64
  %38 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done = getelementptr inbounds %struct.ehci_hcd* %38, i32 0, i32 41
  %arrayidx39 = getelementptr [15 x i64]* %reset_done, i32 0, i64 %idxprom38
  %39 = load i64* %arrayidx39, align 8
  %tobool40 = icmp ne i64 %39, 0
  br i1 %tobool40, label %land.lhs.true, label %if.end72

land.lhs.true:                                    ; preds = %lor.lhs.false37
  %cmp43 = icmp eq i64* %__dummy41, %__dummy242
  %conv44 = zext i1 %cmp43 to i32
  br i1 true, label %land.lhs.true45, label %if.end72

land.lhs.true45:                                  ; preds = %land.lhs.true
  %cmp48 = icmp eq i64* %__dummy46, %__dummy247
  %conv49 = zext i1 %cmp48 to i32
  br i1 true, label %land.lhs.true50, label %if.end72

land.lhs.true50:                                  ; preds = %land.lhs.true45
  %40 = load volatile i64* @jiffies, align 8
  %41 = load i32* %i, align 4
  %idxprom51 = sext i32 %41 to i64
  %42 = load %struct.ehci_hcd** %ehci, align 8
  %reset_done52 = getelementptr inbounds %struct.ehci_hcd* %42, i32 0, i32 41
  %arrayidx53 = getelementptr [15 x i64]* %reset_done52, i32 0, i64 %idxprom51
  %43 = load i64* %arrayidx53, align 8
  %sub = sub i64 %40, %43
  %cmp54 = icmp sge i64 %sub, 0
  br i1 %cmp54, label %if.then56, label %if.end72

if.then56:                                        ; preds = %land.lhs.true50, %cond.false, %cond.true, %if.end26
  %44 = load i32* %i, align 4
  %cmp57 = icmp slt i32 %44, 7
  br i1 %cmp57, label %if.then59, label %if.else64

if.then59:                                        ; preds = %if.then56
  %45 = load i32* %i, align 4
  %add = add i32 %45, 1
  %shl60 = shl i32 1, %add
  %46 = load i8** %buf.addr, align 8
  %arrayidx61 = getelementptr i8* %46, i64 0
  %47 = load i8* %arrayidx61, align 1
  %conv62 = sext i8 %47 to i32
  %or = or i32 %conv62, %shl60
  %conv63 = trunc i32 %or to i8
  store i8 %conv63, i8* %arrayidx61, align 1
  br label %if.end71

if.else64:                                        ; preds = %if.then56
  %48 = load i32* %i, align 4
  %sub65 = sub i32 %48, 7
  %shl66 = shl i32 1, %sub65
  %49 = load i8** %buf.addr, align 8
  %arrayidx67 = getelementptr i8* %49, i64 1
  %50 = load i8* %arrayidx67, align 1
  %conv68 = sext i8 %50 to i32
  %or69 = or i32 %conv68, %shl66
  %conv70 = trunc i32 %or69 to i8
  store i8 %conv70, i8* %arrayidx67, align 1
  br label %if.end71

if.end71:                                         ; preds = %if.else64, %if.then59
  store i32 4, i32* %status, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %land.lhs.true50, %land.lhs.true45, %land.lhs.true, %lor.lhs.false37
  br label %for.inc

for.inc:                                          ; preds = %if.end72
  %51 = load i32* %i, align 4
  %inc73 = add i32 %51, 1
  store i32 %inc73, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %52 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports74 = getelementptr inbounds %struct.ehci_hcd* %52, i32 0, i32 47
  %53 = load i64* %resuming_ports74, align 8
  %tobool75 = icmp ne i64 %53, 0
  br i1 %tobool75, label %if.then76, label %if.end80

if.then76:                                        ; preds = %for.end
  %54 = load %struct.usb_hcd** %hcd.addr, align 8
  %rh_timer = getelementptr inbounds %struct.usb_hcd* %54, i32 0, i32 5
  %55 = load volatile i64* @jiffies, align 8
  %call77 = call i64 @msecs_to_jiffies(i32 25) noredzone
  %add78 = add i64 %55, %call77
  %call79 = call i32 @mod_timer(%struct.timer_list* %rh_timer, i64 %add78) noredzone
  br label %if.end80

if.end80:                                         ; preds = %if.then76, %for.end
  %56 = load %struct.ehci_hcd** %ehci, align 8
  %lock81 = getelementptr inbounds %struct.ehci_hcd* %56, i32 0, i32 11
  %57 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock81, i64 %57) noredzone
  %58 = load i32* %status, align 4
  %tobool82 = icmp ne i32 %58, 0
  br i1 %tobool82, label %cond.true83, label %cond.false84

cond.true83:                                      ; preds = %if.end80
  %59 = load i32* %retval1, align 4
  br label %cond.end

cond.false84:                                     ; preds = %if.end80
  br label %cond.end

cond.end:                                         ; preds = %cond.false84, %cond.true83
  %cond = phi i32 [ %59, %cond.true83 ], [ 0, %cond.false84 ]
  ret i32 %cond
}

define internal i32 @ehci_bus_suspend(%struct.usb_hcd* %hcd) nounwind noredzone {
entry:
  %nr.addr.i130 = alloca i64, align 8
  %addr.addr.i131 = alloca i64*, align 8
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %retval = alloca i32, align 4
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %port = alloca i32, align 4
  %mask = alloca i32, align 4
  %changed = alloca i32, align 4
  %fs_idle_delay = alloca i8, align 1
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy1 = alloca i64, align 8
  %__dummy22 = alloca i64, align 8
  %reg = alloca i32*, align 8
  %t1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  %hostpc_reg = alloca i32*, align 8
  %t3 = alloca i32, align 4
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  br i1 true, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %cmp3 = icmp eq i64* %__dummy1, %__dummy22
  %conv4 = zext i1 %cmp3 to i32
  br i1 true, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %1 = load volatile i64* @jiffies, align 8
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %next_statechange = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 53
  %3 = load i64* %next_statechange, align 8
  %sub = sub i64 %1, %3
  %cmp6 = icmp slt i64 %sub, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5
  call void @msleep(i32 5) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true, %entry
  %4 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_quiesce(%struct.ehci_hcd* %4) noredzone
  %5 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %6 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 12
  %7 = load i32* %rh_state, align 4
  %cmp8 = icmp ult i32 %7, 2
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  br label %done

if.end11:                                         ; preds = %if.end
  %8 = load %struct.usb_hcd** %hcd.addr, align 8
  %self = getelementptr inbounds %struct.usb_hcd* %8, i32 0, i32 0
  %root_hub = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 10
  %9 = load %struct.usb_device** %root_hub, align 8
  %10 = bitcast %struct.usb_device* %9 to i8*
  %bf.field.offs = getelementptr i8* %10, i32 1232
  %11 = bitcast i8* %bf.field.offs to i32*
  %12 = load i32* %11, align 8
  %bf.clear = and i32 %12, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then12, label %if.end17

if.then12:                                        ; preds = %if.end11
  %13 = load %struct.ehci_hcd** %ehci, align 8
  %resuming_ports = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 47
  %14 = load i64* %resuming_ports, align 8
  %tobool13 = icmp ne i64 %14, 0
  br i1 %tobool13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.then12
  %15 = load %struct.ehci_hcd** %ehci, align 8
  %lock15 = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock15) noredzone
  store i32 -16, i32* %retval
  br label %return

if.end16:                                         ; preds = %if.then12
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end11
  %16 = load %struct.ehci_hcd** %ehci, align 8
  %bus_suspended = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 42
  store i64 0, i64* %bus_suspended, align 8
  %17 = load %struct.ehci_hcd** %ehci, align 8
  %owned_ports = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 44
  store i64 0, i64* %owned_ports, align 8
  store i32 0, i32* %changed, align 4
  store i8 0, i8* %fs_idle_delay, align 1
  %18 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %18, i32 0, i32 10
  %19 = load i32* %hcs_params, align 4
  %shr = lshr i32 %19, 0
  %and = and i32 %shr, 15
  store i32 %and, i32* %port, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end62, %if.end17
  %20 = load i32* %port, align 4
  %dec = add i32 %20, -1
  store i32 %dec, i32* %port, align 4
  %tobool18 = icmp ne i32 %20, 0
  br i1 %tobool18, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %21 = load i32* %port, align 4
  %idxprom = sext i32 %21 to i64
  %22 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 8
  %23 = load %struct.ehci_regs** %regs, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %23, i32 0, i32 11
  %arrayidx = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom
  store i32* %arrayidx, i32** %reg, align 8
  %24 = load %struct.ehci_hcd** %ehci, align 8
  %25 = load i32** %reg, align 8
  %call19 = call i32 @ehci_readl(%struct.ehci_hcd* %24, i32* %25) noredzone
  %and20 = and i32 %call19, -43
  store i32 %and20, i32* %t1, align 4
  %26 = load i32* %t1, align 4
  %and21 = and i32 %26, -7340033
  store i32 %and21, i32* %t2, align 4
  %27 = load i32* %t1, align 4
  %and22 = and i32 %27, 8192
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.then24, label %if.else

if.then24:                                        ; preds = %while.body
  %28 = load i32* %port, align 4
  %conv25 = sext i32 %28 to i64
  %29 = load %struct.ehci_hcd** %ehci, align 8
  %owned_ports26 = getelementptr inbounds %struct.ehci_hcd* %29, i32 0, i32 44
  store i64 %conv25, i64* %nr.addr.i, align 8
  store i64* %owned_ports26, i64** %addr.addr.i, align 8
  %30 = load i64** %addr.addr.i, align 8
  %31 = load i64* %nr.addr.i, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %30, i64 %31, i64* %30) nounwind, !srcloc !0
  br label %if.end36

if.else:                                          ; preds = %while.body
  %32 = load i32* %t1, align 4
  %and27 = and i32 %32, 4
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %land.lhs.true29, label %if.end35

land.lhs.true29:                                  ; preds = %if.else
  %33 = load i32* %t1, align 4
  %and30 = and i32 %33, 128
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.end35, label %if.then32

if.then32:                                        ; preds = %land.lhs.true29
  %34 = load i32* %t2, align 4
  %or = or i32 %34, 128
  store i32 %or, i32* %t2, align 4
  %35 = load i32* %port, align 4
  %conv33 = sext i32 %35 to i64
  %36 = load %struct.ehci_hcd** %ehci, align 8
  %bus_suspended34 = getelementptr inbounds %struct.ehci_hcd* %36, i32 0, i32 42
  store i64 %conv33, i64* %nr.addr.i130, align 8
  store i64* %bus_suspended34, i64** %addr.addr.i131, align 8
  %37 = load i64** %addr.addr.i131, align 8
  %38 = load i64* %nr.addr.i130, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %37, i64 %38, i64* %37) nounwind, !srcloc !0
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %land.lhs.true29, %if.else
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then24
  %39 = load %struct.usb_hcd** %hcd.addr, align 8
  %self37 = getelementptr inbounds %struct.usb_hcd* %39, i32 0, i32 0
  %root_hub38 = getelementptr inbounds %struct.usb_bus* %self37, i32 0, i32 10
  %40 = load %struct.usb_device** %root_hub38, align 8
  %41 = bitcast %struct.usb_device* %40 to i8*
  %bf.field.offs39 = getelementptr i8* %41, i32 1232
  %42 = bitcast i8* %bf.field.offs39 to i32*
  %43 = load i32* %42, align 8
  %bf.clear40 = and i32 %43, 1
  %tobool41 = icmp ne i32 %bf.clear40, 0
  br i1 %tobool41, label %if.then42, label %if.end50

if.then42:                                        ; preds = %if.end36
  %44 = load i32* %t1, align 4
  %and43 = and i32 %44, 1
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %if.then45, label %if.else47

if.then45:                                        ; preds = %if.then42
  %45 = load i32* %t2, align 4
  %or46 = or i32 %45, 6291456
  store i32 %or46, i32* %t2, align 4
  br label %if.end49

if.else47:                                        ; preds = %if.then42
  %46 = load i32* %t2, align 4
  %or48 = or i32 %46, 5242880
  store i32 %or48, i32* %t2, align 4
  br label %if.end49

if.end49:                                         ; preds = %if.else47, %if.then45
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end36
  %47 = load i32* %t1, align 4
  %48 = load i32* %t2, align 4
  %cmp51 = icmp ne i32 %47, %48
  br i1 %cmp51, label %if.then53, label %if.end62

if.then53:                                        ; preds = %if.end50
  %49 = load i32* %t2, align 4
  %and54 = and i32 %49, 2097152
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %land.lhs.true56, label %if.end61

land.lhs.true56:                                  ; preds = %if.then53
  %50 = load %struct.ehci_hcd** %ehci, align 8
  %51 = load i32* %t2, align 4
  %call57 = call i32 @ehci_port_speed(%struct.ehci_hcd* %50, i32 %51) noredzone
  %cmp58 = icmp eq i32 %call57, 1024
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %land.lhs.true56
  store i8 1, i8* %fs_idle_delay, align 1
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %land.lhs.true56, %if.then53
  %52 = load %struct.ehci_hcd** %ehci, align 8
  %53 = load i32* %t2, align 4
  %54 = load i32** %reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %52, i32 %53, i32* %54) noredzone
  store i32 1, i32* %changed, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end50
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %55 = load %struct.ehci_hcd** %ehci, align 8
  %lock63 = getelementptr inbounds %struct.ehci_hcd* %55, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock63) noredzone
  %56 = load i32* %changed, align 4
  %tobool64 = icmp ne i32 %56, 0
  br i1 %tobool64, label %land.lhs.true65, label %lor.lhs.false

land.lhs.true65:                                  ; preds = %while.end
  %57 = load %struct.ehci_hcd** %ehci, align 8
  %58 = bitcast %struct.ehci_hcd* %57 to i8*
  %bf.field.offs66 = getelementptr i8* %58, i32 720
  %59 = bitcast i8* %bf.field.offs66 to i32*
  %60 = load i32* %59, align 8
  %61 = lshr i32 %60, 1
  %bf.clear67 = and i32 %61, 1
  %tobool68 = icmp ne i32 %bf.clear67, 0
  br i1 %tobool68, label %if.then71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true65, %while.end
  %62 = load i8* %fs_idle_delay, align 1
  %tobool69 = trunc i8 %62 to i1
  br i1 %tobool69, label %if.then71, label %if.end72

if.then71:                                        ; preds = %lor.lhs.false, %land.lhs.true65
  call void @usleep_range(i64 5000, i64 5500) noredzone
  br label %if.end72

if.end72:                                         ; preds = %if.then71, %lor.lhs.false
  %63 = load i32* %changed, align 4
  %tobool73 = icmp ne i32 %63, 0
  br i1 %tobool73, label %land.lhs.true74, label %if.end95

land.lhs.true74:                                  ; preds = %if.end72
  %64 = load %struct.ehci_hcd** %ehci, align 8
  %65 = bitcast %struct.ehci_hcd* %64 to i8*
  %bf.field.offs75 = getelementptr i8* %65, i32 720
  %66 = bitcast i8* %bf.field.offs75 to i32*
  %67 = load i32* %66, align 8
  %68 = lshr i32 %67, 1
  %bf.clear76 = and i32 %68, 1
  %tobool77 = icmp ne i32 %bf.clear76, 0
  br i1 %tobool77, label %if.then78, label %if.end95

if.then78:                                        ; preds = %land.lhs.true74
  %69 = load %struct.ehci_hcd** %ehci, align 8
  %lock79 = getelementptr inbounds %struct.ehci_hcd* %69, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock79) noredzone
  %70 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params80 = getelementptr inbounds %struct.ehci_hcd* %70, i32 0, i32 10
  %71 = load i32* %hcs_params80, align 4
  %shr81 = lshr i32 %71, 0
  %and82 = and i32 %shr81, 15
  store i32 %and82, i32* %port, align 4
  br label %while.cond83

while.cond83:                                     ; preds = %while.body86, %if.then78
  %72 = load i32* %port, align 4
  %dec84 = add i32 %72, -1
  store i32 %dec84, i32* %port, align 4
  %tobool85 = icmp ne i32 %72, 0
  br i1 %tobool85, label %while.body86, label %while.end93

while.body86:                                     ; preds = %while.cond83
  %73 = load i32* %port, align 4
  %idxprom87 = sext i32 %73 to i64
  %74 = load %struct.ehci_hcd** %ehci, align 8
  %regs88 = getelementptr inbounds %struct.ehci_hcd* %74, i32 0, i32 8
  %75 = load %struct.ehci_regs** %regs88, align 8
  %hostpc = getelementptr inbounds %struct.ehci_regs* %75, i32 0, i32 15
  %arrayidx89 = getelementptr [1 x i32]* %hostpc, i32 0, i64 %idxprom87
  store i32* %arrayidx89, i32** %hostpc_reg, align 8
  %76 = load %struct.ehci_hcd** %ehci, align 8
  %77 = load i32** %hostpc_reg, align 8
  %call90 = call i32 @ehci_readl(%struct.ehci_hcd* %76, i32* %77) noredzone
  store i32 %call90, i32* %t3, align 4
  %78 = load %struct.ehci_hcd** %ehci, align 8
  %79 = load i32* %t3, align 4
  %or91 = or i32 %79, 4194304
  %80 = load i32** %hostpc_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %78, i32 %or91, i32* %80) noredzone
  %81 = load %struct.ehci_hcd** %ehci, align 8
  %82 = load i32** %hostpc_reg, align 8
  %call92 = call i32 @ehci_readl(%struct.ehci_hcd* %81, i32* %82) noredzone
  store i32 %call92, i32* %t3, align 4
  br label %while.cond83

while.end93:                                      ; preds = %while.cond83
  %83 = load %struct.ehci_hcd** %ehci, align 8
  %lock94 = getelementptr inbounds %struct.ehci_hcd* %83, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock94) noredzone
  br label %if.end95

if.end95:                                         ; preds = %while.end93, %land.lhs.true74, %if.end72
  %84 = load %struct.ehci_hcd** %ehci, align 8
  %bus_suspended96 = getelementptr inbounds %struct.ehci_hcd* %84, i32 0, i32 42
  %85 = load i64* %bus_suspended96, align 8
  %tobool97 = icmp ne i64 %85, 0
  br i1 %tobool97, label %if.then98, label %if.end99

if.then98:                                        ; preds = %if.end95
  call void @__const_udelay(i64 644250) noredzone
  br label %if.end99

if.end99:                                         ; preds = %if.then98, %if.end95
  %86 = load %struct.ehci_hcd** %ehci, align 8
  %call100 = call i32 @ehci_halt(%struct.ehci_hcd* %86) noredzone
  %87 = load %struct.ehci_hcd** %ehci, align 8
  %lock101 = getelementptr inbounds %struct.ehci_hcd* %87, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock101) noredzone
  %88 = load %struct.ehci_hcd** %ehci, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %88, i32 0, i32 1
  %89 = load i32* %enabled_hrtimer_events, align 4
  %conv102 = zext i32 %89 to i64
  %and103 = and i64 %conv102, 4
  %tobool104 = icmp ne i64 %and103, 0
  br i1 %tobool104, label %if.then105, label %if.end106

if.then105:                                       ; preds = %if.end99
  %90 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_handle_controller_death(%struct.ehci_hcd* %90) noredzone
  br label %if.end106

if.end106:                                        ; preds = %if.then105, %if.end99
  %91 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state107 = getelementptr inbounds %struct.ehci_hcd* %91, i32 0, i32 12
  %92 = load i32* %rh_state107, align 4
  %cmp108 = icmp ne i32 %92, 2
  br i1 %cmp108, label %if.then110, label %if.end111

if.then110:                                       ; preds = %if.end106
  br label %done

if.end111:                                        ; preds = %if.end106
  %93 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state112 = getelementptr inbounds %struct.ehci_hcd* %93, i32 0, i32 12
  store i32 1, i32* %rh_state112, align 4
  %94 = load %struct.ehci_hcd** %ehci, align 8
  call void @end_unlink_async(%struct.ehci_hcd* %94) noredzone
  %95 = load %struct.ehci_hcd** %ehci, align 8
  call void @unlink_empty_async_suspended(%struct.ehci_hcd* %95) noredzone
  %96 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_handle_start_intr_unlinks(%struct.ehci_hcd* %96) noredzone
  %97 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_handle_intr_unlinks(%struct.ehci_hcd* %97) noredzone
  %98 = load %struct.ehci_hcd** %ehci, align 8
  call void @end_free_itds(%struct.ehci_hcd* %98) noredzone
  store i32 55, i32* %mask, align 4
  %99 = load %struct.usb_hcd** %hcd.addr, align 8
  %self113 = getelementptr inbounds %struct.usb_hcd* %99, i32 0, i32 0
  %root_hub114 = getelementptr inbounds %struct.usb_bus* %self113, i32 0, i32 10
  %100 = load %struct.usb_device** %root_hub114, align 8
  %101 = bitcast %struct.usb_device* %100 to i8*
  %bf.field.offs115 = getelementptr i8* %101, i32 1232
  %102 = bitcast i8* %bf.field.offs115 to i32*
  %103 = load i32* %102, align 8
  %bf.clear116 = and i32 %103, 1
  %tobool117 = icmp ne i32 %bf.clear116, 0
  br i1 %tobool117, label %if.end120, label %if.then118

if.then118:                                       ; preds = %if.end111
  %104 = load i32* %mask, align 4
  %and119 = and i32 %104, -5
  store i32 %and119, i32* %mask, align 4
  br label %if.end120

if.end120:                                        ; preds = %if.then118, %if.end111
  %105 = load %struct.ehci_hcd** %ehci, align 8
  %106 = load i32* %mask, align 4
  %107 = load %struct.ehci_hcd** %ehci, align 8
  %regs121 = getelementptr inbounds %struct.ehci_hcd* %107, i32 0, i32 8
  %108 = load %struct.ehci_regs** %regs121, align 8
  %intr_enable = getelementptr inbounds %struct.ehci_regs* %108, i32 0, i32 2
  call void @ehci_writel(%struct.ehci_hcd* %105, i32 %106, i32* %intr_enable) noredzone
  %109 = load %struct.ehci_hcd** %ehci, align 8
  %110 = load %struct.ehci_hcd** %ehci, align 8
  %regs122 = getelementptr inbounds %struct.ehci_hcd* %110, i32 0, i32 8
  %111 = load %struct.ehci_regs** %regs122, align 8
  %intr_enable123 = getelementptr inbounds %struct.ehci_regs* %111, i32 0, i32 2
  %call124 = call i32 @ehci_readl(%struct.ehci_hcd* %109, i32* %intr_enable123) noredzone
  br label %done

done:                                             ; preds = %if.end120, %if.then110, %if.then10
  %112 = load volatile i64* @jiffies, align 8
  %call125 = call i64 @msecs_to_jiffies(i32 10) noredzone
  %add = add i64 %112, %call125
  %113 = load %struct.ehci_hcd** %ehci, align 8
  %next_statechange126 = getelementptr inbounds %struct.ehci_hcd* %113, i32 0, i32 53
  store i64 %add, i64* %next_statechange126, align 8
  %114 = load %struct.ehci_hcd** %ehci, align 8
  %enabled_hrtimer_events127 = getelementptr inbounds %struct.ehci_hcd* %114, i32 0, i32 1
  store i32 0, i32* %enabled_hrtimer_events127, align 4
  %115 = load %struct.ehci_hcd** %ehci, align 8
  %next_hrtimer_event = getelementptr inbounds %struct.ehci_hcd* %115, i32 0, i32 0
  store i32 99, i32* %next_hrtimer_event, align 4
  %116 = load %struct.ehci_hcd** %ehci, align 8
  %lock128 = getelementptr inbounds %struct.ehci_hcd* %116, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock128) noredzone
  %117 = load %struct.ehci_hcd** %ehci, align 8
  %hrtimer = getelementptr inbounds %struct.ehci_hcd* %117, i32 0, i32 3
  %call129 = call i32 @hrtimer_cancel(%struct.hrtimer* %hrtimer) noredzone
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %done, %if.then14
  %118 = load i32* %retval
  ret i32 %118
}

define internal i32 @ehci_bus_resume(%struct.usb_hcd* %hcd) nounwind noredzone {
entry:
  %nr.addr.i185 = alloca i64, align 8
  %addr.addr.i186 = alloca i64*, align 8
  %nr.addr.i183 = alloca i64, align 8
  %addr.addr.i184 = alloca i64*, align 8
  %nr.addr.i174 = alloca i64, align 8
  %addr.addr.i175 = alloca i64*, align 8
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %retval = alloca i32, align 4
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %temp = alloca i32, align 4
  %power_okay = alloca i32, align 4
  %i = alloca i32, align 4
  %resume_needed = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy1 = alloca i64, align 8
  %__dummy22 = alloca i64, align 8
  %hostpc_reg = alloca i32*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  store i64 0, i64* %resume_needed, align 8
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  br i1 true, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %cmp3 = icmp eq i64* %__dummy1, %__dummy22
  %conv4 = zext i1 %cmp3 to i32
  br i1 true, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %1 = load volatile i64* @jiffies, align 8
  %2 = load %struct.ehci_hcd** %ehci, align 8
  %next_statechange = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 53
  %3 = load i64* %next_statechange, align 8
  %sub = sub i64 %1, %3
  %cmp6 = icmp slt i64 %sub, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5
  call void @msleep(i32 5) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true, %entry
  %4 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %5 = load %struct.usb_hcd** %hcd.addr, align 8
  %flags = getelementptr inbounds %struct.usb_hcd* %5, i32 0, i32 10
  %6 = load i64* %flags, align 8
  %and = and i64 %6, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then9

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %8 = bitcast %struct.ehci_hcd* %7 to i8*
  %bf.field.offs = getelementptr i8* %8, i32 244
  %9 = load i8* %bf.field.offs, align 4
  %10 = lshr i8 %9, 5
  %bf.clear = and i8 %10, 1
  %11 = trunc i8 %bf.clear to i1
  br i1 %11, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false, %if.end
  br label %shutdown

if.end10:                                         ; preds = %lor.lhs.false
  %12 = load %struct.ehci_hcd** %ehci, align 8
  %debug = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 9
  %13 = load %struct.ehci_dbg_port** %debug, align 8
  %tobool11 = icmp ne %struct.ehci_dbg_port* %13, null
  %lnot = xor i1 %tobool11, true
  %lnot12 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot12 to i32
  %conv13 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv13, i64 0)
  %tobool14 = icmp ne i64 %expval, 0
  br i1 %tobool14, label %if.then15, label %if.end22

if.then15:                                        ; preds = %if.end10
  %14 = load %struct.usb_hcd** %hcd.addr, align 8
  %call16 = call i32 @dbgp_reset_prep(%struct.usb_hcd* %14) noredzone
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.else, label %if.then18

if.then18:                                        ; preds = %if.then15
  %15 = load %struct.ehci_hcd** %ehci, align 8
  %debug19 = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 9
  store %struct.ehci_dbg_port* null, %struct.ehci_dbg_port** %debug19, align 8
  br label %if.end21

if.else:                                          ; preds = %if.then15
  %16 = load %struct.usb_hcd** %hcd.addr, align 8
  %call20 = call i32 @dbgp_external_startup(%struct.usb_hcd* %16) noredzone
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then18
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end10
  %17 = load %struct.ehci_hcd** %ehci, align 8
  %18 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %18, i32 0, i32 8
  %19 = load %struct.ehci_regs** %regs, align 8
  %intr_enable = getelementptr inbounds %struct.ehci_regs* %19, i32 0, i32 2
  %call23 = call i32 @ehci_readl(%struct.ehci_hcd* %17, i32* %intr_enable) noredzone
  store i32 %call23, i32* %power_okay, align 4
  %20 = load %struct.ehci_hcd** %ehci, align 8
  %21 = load %struct.ehci_hcd** %ehci, align 8
  %regs24 = getelementptr inbounds %struct.ehci_hcd* %21, i32 0, i32 8
  %22 = load %struct.ehci_regs** %regs24, align 8
  %intr_enable25 = getelementptr inbounds %struct.ehci_regs* %22, i32 0, i32 2
  call void @ehci_writel(%struct.ehci_hcd* %20, i32 0, i32* %intr_enable25) noredzone
  %23 = load %struct.ehci_hcd** %ehci, align 8
  %24 = load %struct.ehci_hcd** %ehci, align 8
  %regs26 = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 8
  %25 = load %struct.ehci_regs** %regs26, align 8
  %segment = getelementptr inbounds %struct.ehci_regs* %25, i32 0, i32 4
  call void @ehci_writel(%struct.ehci_hcd* %23, i32 0, i32* %segment) noredzone
  %26 = load %struct.ehci_hcd** %ehci, align 8
  %27 = load %struct.ehci_hcd** %ehci, align 8
  %periodic_dma = getelementptr inbounds %struct.ehci_hcd* %27, i32 0, i32 23
  %28 = load i64* %periodic_dma, align 8
  %conv27 = trunc i64 %28 to i32
  %29 = load %struct.ehci_hcd** %ehci, align 8
  %regs28 = getelementptr inbounds %struct.ehci_hcd* %29, i32 0, i32 8
  %30 = load %struct.ehci_regs** %regs28, align 8
  %frame_list = getelementptr inbounds %struct.ehci_regs* %30, i32 0, i32 5
  call void @ehci_writel(%struct.ehci_hcd* %26, i32 %conv27, i32* %frame_list) noredzone
  %31 = load %struct.ehci_hcd** %ehci, align 8
  %32 = load %struct.ehci_hcd** %ehci, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 15
  %33 = load %struct.ehci_qh** %async, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %33, i32 0, i32 1
  %34 = load i64* %qh_dma, align 8
  %conv29 = trunc i64 %34 to i32
  %35 = load %struct.ehci_hcd** %ehci, align 8
  %regs30 = getelementptr inbounds %struct.ehci_hcd* %35, i32 0, i32 8
  %36 = load %struct.ehci_regs** %regs30, align 8
  %async_next = getelementptr inbounds %struct.ehci_regs* %36, i32 0, i32 6
  call void @ehci_writel(%struct.ehci_hcd* %31, i32 %conv29, i32* %async_next) noredzone
  %37 = load %struct.ehci_hcd** %ehci, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %37, i32 0, i32 55
  %38 = load i32* %command, align 4
  %or = or i32 %38, 1
  store i32 %or, i32* %command, align 4
  %39 = load %struct.ehci_hcd** %ehci, align 8
  %40 = load %struct.ehci_hcd** %ehci, align 8
  %command31 = getelementptr inbounds %struct.ehci_hcd* %40, i32 0, i32 55
  %41 = load i32* %command31, align 4
  %42 = load %struct.ehci_hcd** %ehci, align 8
  %regs32 = getelementptr inbounds %struct.ehci_hcd* %42, i32 0, i32 8
  %43 = load %struct.ehci_regs** %regs32, align 8
  %command33 = getelementptr inbounds %struct.ehci_regs* %43, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %39, i32 %41, i32* %command33) noredzone
  %44 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %44, i32 0, i32 12
  store i32 2, i32* %rh_state, align 4
  %45 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %45, i32 0, i32 10
  %46 = load i32* %hcs_params, align 4
  %shr = lshr i32 %46, 0
  %and34 = and i32 %shr, 15
  store i32 %and34, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end46, %if.end22
  %47 = load i32* %i, align 4
  %dec = add i32 %47, -1
  store i32 %dec, i32* %i, align 4
  %tobool35 = icmp ne i32 %47, 0
  br i1 %tobool35, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %48 = load %struct.ehci_hcd** %ehci, align 8
  %49 = load i32* %i, align 4
  %idxprom = sext i32 %49 to i64
  %50 = load %struct.ehci_hcd** %ehci, align 8
  %regs36 = getelementptr inbounds %struct.ehci_hcd* %50, i32 0, i32 8
  %51 = load %struct.ehci_regs** %regs36, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %51, i32 0, i32 11
  %arrayidx = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom
  %call37 = call i32 @ehci_readl(%struct.ehci_hcd* %48, i32* %arrayidx) noredzone
  store i32 %call37, i32* %temp, align 4
  %52 = load i32* %temp, align 4
  %and38 = and i32 %52, 4
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %land.lhs.true40, label %if.end46

land.lhs.true40:                                  ; preds = %while.body
  %53 = load i32* %temp, align 4
  %and41 = and i32 %53, 192
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %if.end46, label %if.then43

if.then43:                                        ; preds = %land.lhs.true40
  %54 = load %struct.ehci_hcd** %ehci, align 8
  %lock44 = getelementptr inbounds %struct.ehci_hcd* %54, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock44) noredzone
  call void @msleep(i32 8) noredzone
  %55 = load %struct.ehci_hcd** %ehci, align 8
  %lock45 = getelementptr inbounds %struct.ehci_hcd* %55, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock45) noredzone
  br label %while.end

if.end46:                                         ; preds = %land.lhs.true40, %while.body
  br label %while.cond

while.end:                                        ; preds = %if.then43, %while.cond
  %56 = load %struct.ehci_hcd** %ehci, align 8
  %57 = bitcast %struct.ehci_hcd* %56 to i8*
  %bf.field.offs47 = getelementptr i8* %57, i32 244
  %58 = load i8* %bf.field.offs47, align 4
  %59 = lshr i8 %58, 5
  %bf.clear48 = and i8 %59, 1
  %60 = trunc i8 %bf.clear48 to i1
  br i1 %60, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.end
  br label %shutdown

if.end50:                                         ; preds = %while.end
  %61 = load %struct.ehci_hcd** %ehci, align 8
  %bus_suspended = getelementptr inbounds %struct.ehci_hcd* %61, i32 0, i32 42
  %62 = load i64* %bus_suspended, align 8
  %tobool51 = icmp ne i64 %62, 0
  br i1 %tobool51, label %land.lhs.true52, label %if.end86

land.lhs.true52:                                  ; preds = %if.end50
  %63 = load %struct.ehci_hcd** %ehci, align 8
  %64 = bitcast %struct.ehci_hcd* %63 to i8*
  %bf.field.offs53 = getelementptr i8* %64, i32 720
  %65 = bitcast i8* %bf.field.offs53 to i32*
  %66 = load i32* %65, align 8
  %67 = lshr i32 %66, 1
  %bf.clear54 = and i32 %67, 1
  %tobool55 = icmp ne i32 %bf.clear54, 0
  br i1 %tobool55, label %if.then56, label %if.end86

if.then56:                                        ; preds = %land.lhs.true52
  %68 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params57 = getelementptr inbounds %struct.ehci_hcd* %68, i32 0, i32 10
  %69 = load i32* %hcs_params57, align 4
  %shr58 = lshr i32 %69, 0
  %and59 = and i32 %shr58, 15
  store i32 %and59, i32* %i, align 4
  br label %while.cond60

while.cond60:                                     ; preds = %if.end78, %if.then56
  %70 = load i32* %i, align 4
  %dec61 = add i32 %70, -1
  store i32 %dec61, i32* %i, align 4
  %tobool62 = icmp ne i32 %70, 0
  br i1 %tobool62, label %while.body63, label %while.end79

while.body63:                                     ; preds = %while.cond60
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body63
  %71 = load i32* %i, align 4
  %conv64 = sext i32 %71 to i64
  %72 = load %struct.ehci_hcd** %ehci, align 8
  %bus_suspended65 = getelementptr inbounds %struct.ehci_hcd* %72, i32 0, i32 42
  store i64 %conv64, i64* %nr.addr.i, align 8
  store i64* %bus_suspended65, i64** %addr.addr.i, align 8
  %73 = load i64* %nr.addr.i, align 8
  %and.i = and i64 %73, 63
  %shl.i = shl i64 1, %and.i
  %74 = load i64* %nr.addr.i, align 8
  %shr.i = ashr i64 %74, 6
  %75 = load i64** %addr.addr.i, align 8
  %arrayidx.i = getelementptr i64* %75, i64 %shr.i
  %76 = load volatile i64* %arrayidx.i, align 8
  %and1.i = and i64 %shl.i, %76
  %cmp.i = icmp ne i64 %and1.i, 0
  %conv.i = zext i1 %cmp.i to i32
  %tobool67 = icmp ne i32 %conv.i, 0
  br i1 %tobool67, label %if.then72, label %if.end78

cond.false:                                       ; preds = %while.body63
  %77 = load i32* %i, align 4
  %conv68 = sext i32 %77 to i64
  %78 = load %struct.ehci_hcd** %ehci, align 8
  %bus_suspended69 = getelementptr inbounds %struct.ehci_hcd* %78, i32 0, i32 42
  %call70 = call i32 @variable_test_bit(i64 %conv68, i64* %bus_suspended69) noredzone
  %tobool71 = icmp ne i32 %call70, 0
  br i1 %tobool71, label %if.then72, label %if.end78

if.then72:                                        ; preds = %cond.false, %cond.true
  %79 = load i32* %i, align 4
  %idxprom73 = sext i32 %79 to i64
  %80 = load %struct.ehci_hcd** %ehci, align 8
  %regs74 = getelementptr inbounds %struct.ehci_hcd* %80, i32 0, i32 8
  %81 = load %struct.ehci_regs** %regs74, align 8
  %hostpc = getelementptr inbounds %struct.ehci_regs* %81, i32 0, i32 15
  %arrayidx75 = getelementptr [1 x i32]* %hostpc, i32 0, i64 %idxprom73
  store i32* %arrayidx75, i32** %hostpc_reg, align 8
  %82 = load %struct.ehci_hcd** %ehci, align 8
  %83 = load i32** %hostpc_reg, align 8
  %call76 = call i32 @ehci_readl(%struct.ehci_hcd* %82, i32* %83) noredzone
  store i32 %call76, i32* %temp, align 4
  %84 = load %struct.ehci_hcd** %ehci, align 8
  %85 = load i32* %temp, align 4
  %and77 = and i32 %85, -4194305
  %86 = load i32** %hostpc_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %84, i32 %and77, i32* %86) noredzone
  br label %if.end78

if.end78:                                         ; preds = %if.then72, %cond.false, %cond.true
  br label %while.cond60

while.end79:                                      ; preds = %while.cond60
  %87 = load %struct.ehci_hcd** %ehci, align 8
  %lock80 = getelementptr inbounds %struct.ehci_hcd* %87, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock80) noredzone
  call void @msleep(i32 5) noredzone
  %88 = load %struct.ehci_hcd** %ehci, align 8
  %lock81 = getelementptr inbounds %struct.ehci_hcd* %88, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock81) noredzone
  %89 = load %struct.ehci_hcd** %ehci, align 8
  %90 = bitcast %struct.ehci_hcd* %89 to i8*
  %bf.field.offs82 = getelementptr i8* %90, i32 244
  %91 = load i8* %bf.field.offs82, align 4
  %92 = lshr i8 %91, 5
  %bf.clear83 = and i8 %92, 1
  %93 = trunc i8 %bf.clear83 to i1
  br i1 %93, label %if.then84, label %if.end85

if.then84:                                        ; preds = %while.end79
  br label %shutdown

if.end85:                                         ; preds = %while.end79
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %land.lhs.true52, %if.end50
  %94 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params87 = getelementptr inbounds %struct.ehci_hcd* %94, i32 0, i32 10
  %95 = load i32* %hcs_params87, align 4
  %shr88 = lshr i32 %95, 0
  %and89 = and i32 %shr88, 15
  store i32 %and89, i32* %i, align 4
  br label %while.cond90

while.cond90:                                     ; preds = %if.end116, %if.end86
  %96 = load i32* %i, align 4
  %dec91 = add i32 %96, -1
  store i32 %dec91, i32* %i, align 4
  %tobool92 = icmp ne i32 %96, 0
  br i1 %tobool92, label %while.body93, label %while.end121

while.body93:                                     ; preds = %while.cond90
  %97 = load %struct.ehci_hcd** %ehci, align 8
  %98 = load i32* %i, align 4
  %idxprom94 = sext i32 %98 to i64
  %99 = load %struct.ehci_hcd** %ehci, align 8
  %regs95 = getelementptr inbounds %struct.ehci_hcd* %99, i32 0, i32 8
  %100 = load %struct.ehci_regs** %regs95, align 8
  %port_status96 = getelementptr inbounds %struct.ehci_regs* %100, i32 0, i32 11
  %arrayidx97 = getelementptr [0 x i32]* %port_status96, i32 0, i64 %idxprom94
  %call98 = call i32 @ehci_readl(%struct.ehci_hcd* %97, i32* %arrayidx97) noredzone
  store i32 %call98, i32* %temp, align 4
  %101 = load i32* %temp, align 4
  %and99 = and i32 %101, -7340075
  store i32 %and99, i32* %temp, align 4
  br i1 false, label %cond.true100, label %cond.false105

cond.true100:                                     ; preds = %while.body93
  %102 = load i32* %i, align 4
  %conv101 = sext i32 %102 to i64
  %103 = load %struct.ehci_hcd** %ehci, align 8
  %bus_suspended102 = getelementptr inbounds %struct.ehci_hcd* %103, i32 0, i32 42
  store i64 %conv101, i64* %nr.addr.i174, align 8
  store i64* %bus_suspended102, i64** %addr.addr.i175, align 8
  %104 = load i64* %nr.addr.i174, align 8
  %and.i176 = and i64 %104, 63
  %shl.i177 = shl i64 1, %and.i176
  %105 = load i64* %nr.addr.i174, align 8
  %shr.i178 = ashr i64 %105, 6
  %106 = load i64** %addr.addr.i175, align 8
  %arrayidx.i179 = getelementptr i64* %106, i64 %shr.i178
  %107 = load volatile i64* %arrayidx.i179, align 8
  %and1.i180 = and i64 %shl.i177, %107
  %cmp.i181 = icmp ne i64 %and1.i180, 0
  %conv.i182 = zext i1 %cmp.i181 to i32
  %tobool104 = icmp ne i32 %conv.i182, 0
  br i1 %tobool104, label %land.lhs.true110, label %if.end116

cond.false105:                                    ; preds = %while.body93
  %108 = load i32* %i, align 4
  %conv106 = sext i32 %108 to i64
  %109 = load %struct.ehci_hcd** %ehci, align 8
  %bus_suspended107 = getelementptr inbounds %struct.ehci_hcd* %109, i32 0, i32 42
  %call108 = call i32 @variable_test_bit(i64 %conv106, i64* %bus_suspended107) noredzone
  %tobool109 = icmp ne i32 %call108, 0
  br i1 %tobool109, label %land.lhs.true110, label %if.end116

land.lhs.true110:                                 ; preds = %cond.false105, %cond.true100
  %110 = load i32* %temp, align 4
  %and111 = and i32 %110, 128
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %if.then113, label %if.end116

if.then113:                                       ; preds = %land.lhs.true110
  %111 = load i32* %temp, align 4
  %or114 = or i32 %111, 64
  store i32 %or114, i32* %temp, align 4
  %112 = load i32* %i, align 4
  %conv115 = sext i32 %112 to i64
  store i64 %conv115, i64* %nr.addr.i183, align 8
  store i64* %resume_needed, i64** %addr.addr.i184, align 8
  %113 = load i64** %addr.addr.i184, align 8
  %114 = load i64* %nr.addr.i183, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %113, i64 %114, i64* %113) nounwind, !srcloc !0
  br label %if.end116

if.end116:                                        ; preds = %if.then113, %land.lhs.true110, %cond.false105, %cond.true100
  %115 = load %struct.ehci_hcd** %ehci, align 8
  %116 = load i32* %temp, align 4
  %117 = load i32* %i, align 4
  %idxprom117 = sext i32 %117 to i64
  %118 = load %struct.ehci_hcd** %ehci, align 8
  %regs118 = getelementptr inbounds %struct.ehci_hcd* %118, i32 0, i32 8
  %119 = load %struct.ehci_regs** %regs118, align 8
  %port_status119 = getelementptr inbounds %struct.ehci_regs* %119, i32 0, i32 11
  %arrayidx120 = getelementptr [0 x i32]* %port_status119, i32 0, i64 %idxprom117
  call void @ehci_writel(%struct.ehci_hcd* %115, i32 %116, i32* %arrayidx120) noredzone
  br label %while.cond90

while.end121:                                     ; preds = %while.cond90
  %120 = load i64* %resume_needed, align 8
  %tobool122 = icmp ne i64 %120, 0
  br i1 %tobool122, label %if.then123, label %if.end130

if.then123:                                       ; preds = %while.end121
  %121 = load %struct.ehci_hcd** %ehci, align 8
  %lock124 = getelementptr inbounds %struct.ehci_hcd* %121, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock124) noredzone
  call void @msleep(i32 20) noredzone
  %122 = load %struct.ehci_hcd** %ehci, align 8
  %lock125 = getelementptr inbounds %struct.ehci_hcd* %122, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock125) noredzone
  %123 = load %struct.ehci_hcd** %ehci, align 8
  %124 = bitcast %struct.ehci_hcd* %123 to i8*
  %bf.field.offs126 = getelementptr i8* %124, i32 244
  %125 = load i8* %bf.field.offs126, align 4
  %126 = lshr i8 %125, 5
  %bf.clear127 = and i8 %126, 1
  %127 = trunc i8 %bf.clear127 to i1
  br i1 %127, label %if.then128, label %if.end129

if.then128:                                       ; preds = %if.then123
  br label %shutdown

if.end129:                                        ; preds = %if.then123
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %while.end121
  %128 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params131 = getelementptr inbounds %struct.ehci_hcd* %128, i32 0, i32 10
  %129 = load i32* %hcs_params131, align 4
  %shr132 = lshr i32 %129, 0
  %and133 = and i32 %shr132, 15
  store i32 %and133, i32* %i, align 4
  br label %while.cond134

while.cond134:                                    ; preds = %if.end157, %if.end130
  %130 = load i32* %i, align 4
  %dec135 = add i32 %130, -1
  store i32 %dec135, i32* %i, align 4
  %tobool136 = icmp ne i32 %130, 0
  br i1 %tobool136, label %while.body137, label %while.end158

while.body137:                                    ; preds = %while.cond134
  %131 = load %struct.ehci_hcd** %ehci, align 8
  %132 = load i32* %i, align 4
  %idxprom138 = sext i32 %132 to i64
  %133 = load %struct.ehci_hcd** %ehci, align 8
  %regs139 = getelementptr inbounds %struct.ehci_hcd* %133, i32 0, i32 8
  %134 = load %struct.ehci_regs** %regs139, align 8
  %port_status140 = getelementptr inbounds %struct.ehci_regs* %134, i32 0, i32 11
  %arrayidx141 = getelementptr [0 x i32]* %port_status140, i32 0, i64 %idxprom138
  %call142 = call i32 @ehci_readl(%struct.ehci_hcd* %131, i32* %arrayidx141) noredzone
  store i32 %call142, i32* %temp, align 4
  br i1 false, label %cond.true143, label %cond.false147

cond.true143:                                     ; preds = %while.body137
  %135 = load i32* %i, align 4
  %conv144 = sext i32 %135 to i64
  store i64 %conv144, i64* %nr.addr.i185, align 8
  store i64* %resume_needed, i64** %addr.addr.i186, align 8
  %136 = load i64* %nr.addr.i185, align 8
  %and.i187 = and i64 %136, 63
  %shl.i188 = shl i64 1, %and.i187
  %137 = load i64* %nr.addr.i185, align 8
  %shr.i189 = ashr i64 %137, 6
  %138 = load i64** %addr.addr.i186, align 8
  %arrayidx.i190 = getelementptr i64* %138, i64 %shr.i189
  %139 = load volatile i64* %arrayidx.i190, align 8
  %and1.i191 = and i64 %shl.i188, %139
  %cmp.i192 = icmp ne i64 %and1.i191, 0
  %conv.i193 = zext i1 %cmp.i192 to i32
  %tobool146 = icmp ne i32 %conv.i193, 0
  br i1 %tobool146, label %if.then151, label %if.end157

cond.false147:                                    ; preds = %while.body137
  %140 = load i32* %i, align 4
  %conv148 = sext i32 %140 to i64
  %call149 = call i32 @variable_test_bit(i64 %conv148, i64* %resume_needed) noredzone
  %tobool150 = icmp ne i32 %call149, 0
  br i1 %tobool150, label %if.then151, label %if.end157

if.then151:                                       ; preds = %cond.false147, %cond.true143
  %141 = load i32* %temp, align 4
  %and152 = and i32 %141, -235
  store i32 %and152, i32* %temp, align 4
  %142 = load %struct.ehci_hcd** %ehci, align 8
  %143 = load i32* %temp, align 4
  %144 = load i32* %i, align 4
  %idxprom153 = sext i32 %144 to i64
  %145 = load %struct.ehci_hcd** %ehci, align 8
  %regs154 = getelementptr inbounds %struct.ehci_hcd* %145, i32 0, i32 8
  %146 = load %struct.ehci_regs** %regs154, align 8
  %port_status155 = getelementptr inbounds %struct.ehci_regs* %146, i32 0, i32 11
  %arrayidx156 = getelementptr [0 x i32]* %port_status155, i32 0, i64 %idxprom153
  call void @ehci_writel(%struct.ehci_hcd* %142, i32 %143, i32* %arrayidx156) noredzone
  br label %if.end157

if.end157:                                        ; preds = %if.then151, %cond.false147, %cond.true143
  br label %while.cond134

while.end158:                                     ; preds = %while.cond134
  %147 = load volatile i64* @jiffies, align 8
  %call159 = call i64 @msecs_to_jiffies(i32 5) noredzone
  %add = add i64 %147, %call159
  %148 = load %struct.ehci_hcd** %ehci, align 8
  %next_statechange160 = getelementptr inbounds %struct.ehci_hcd* %148, i32 0, i32 53
  store i64 %add, i64* %next_statechange160, align 8
  %149 = load %struct.ehci_hcd** %ehci, align 8
  %lock161 = getelementptr inbounds %struct.ehci_hcd* %149, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock161) noredzone
  %150 = load %struct.ehci_hcd** %ehci, align 8
  call void @ehci_handover_companion_ports(%struct.ehci_hcd* %150) noredzone
  %151 = load %struct.ehci_hcd** %ehci, align 8
  %lock162 = getelementptr inbounds %struct.ehci_hcd* %151, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock162) noredzone
  %152 = load %struct.ehci_hcd** %ehci, align 8
  %153 = bitcast %struct.ehci_hcd* %152 to i8*
  %bf.field.offs163 = getelementptr i8* %153, i32 244
  %154 = load i8* %bf.field.offs163, align 4
  %155 = lshr i8 %154, 5
  %bf.clear164 = and i8 %155, 1
  %156 = trunc i8 %bf.clear164 to i1
  br i1 %156, label %if.then165, label %if.end166

if.then165:                                       ; preds = %while.end158
  br label %shutdown

if.end166:                                        ; preds = %while.end158
  %157 = load %struct.ehci_hcd** %ehci, align 8
  %158 = load %struct.ehci_hcd** %ehci, align 8
  %regs167 = getelementptr inbounds %struct.ehci_hcd* %158, i32 0, i32 8
  %159 = load %struct.ehci_regs** %regs167, align 8
  %intr_enable168 = getelementptr inbounds %struct.ehci_regs* %159, i32 0, i32 2
  call void @ehci_writel(%struct.ehci_hcd* %157, i32 55, i32* %intr_enable168) noredzone
  %160 = load %struct.ehci_hcd** %ehci, align 8
  %161 = load %struct.ehci_hcd** %ehci, align 8
  %regs169 = getelementptr inbounds %struct.ehci_hcd* %161, i32 0, i32 8
  %162 = load %struct.ehci_regs** %regs169, align 8
  %intr_enable170 = getelementptr inbounds %struct.ehci_regs* %162, i32 0, i32 2
  %call171 = call i32 @ehci_readl(%struct.ehci_hcd* %160, i32* %intr_enable170) noredzone
  %163 = load %struct.ehci_hcd** %ehci, align 8
  %lock172 = getelementptr inbounds %struct.ehci_hcd* %163, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock172) noredzone
  store i32 0, i32* %retval
  br label %return

shutdown:                                         ; preds = %if.then165, %if.then128, %if.then84, %if.then49, %if.then9
  %164 = load %struct.ehci_hcd** %ehci, align 8
  %lock173 = getelementptr inbounds %struct.ehci_hcd* %164, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock173) noredzone
  store i32 -108, i32* %retval
  br label %return

return:                                           ; preds = %shutdown, %if.end166
  %165 = load i32* %retval
  ret i32 %165
}

define internal void @ehci_relinquish_port(%struct.usb_hcd* %hcd, i32 %portnum) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %portnum.addr = alloca i32, align 4
  %ehci = alloca %struct.ehci_hcd*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store i32 %portnum, i32* %portnum.addr, align 4
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %call1 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %1) noredzone
  %2 = bitcast %struct.usb_hcd* %call1 to i8*
  %bf.field.offs = getelementptr i8* %2, i32 352
  %3 = bitcast i8* %bf.field.offs to i32*
  %4 = load i32* %3, align 8
  %5 = lshr i32 %4, 7
  %bf.clear = and i32 %5, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.ehci_hcd** %ehci, align 8
  %7 = load i32* %portnum.addr, align 4
  %dec = add i32 %7, -1
  store i32 %dec, i32* %portnum.addr, align 4
  call void @set_owner(%struct.ehci_hcd* %6, i32 %dec, i32 8192) noredzone
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

define internal i32 @ehci_port_handed_over(%struct.usb_hcd* %hcd, i32 %portnum) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %portnum.addr = alloca i32, align 4
  %ehci = alloca %struct.ehci_hcd*, align 8
  %reg = alloca i32*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store i32 %portnum, i32* %portnum.addr, align 4
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %call1 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %1) noredzone
  %2 = bitcast %struct.usb_hcd* %call1 to i8*
  %bf.field.offs = getelementptr i8* %2, i32 352
  %3 = bitcast i8* %bf.field.offs to i32*
  %4 = load i32* %3, align 8
  %5 = lshr i32 %4, 7
  %bf.clear = and i32 %5, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i32* %portnum.addr, align 4
  %sub = sub i32 %6, 1
  %idxprom = sext i32 %sub to i64
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 8
  %8 = load %struct.ehci_regs** %regs, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %8, i32 0, i32 11
  %arrayidx = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom
  store i32* %arrayidx, i32** %reg, align 8
  %9 = load %struct.ehci_hcd** %ehci, align 8
  %10 = load i32** %reg, align 8
  %call2 = call i32 @ehci_readl(%struct.ehci_hcd* %9, i32* %10) noredzone
  %and = and i32 %call2, 8192
  store i32 %and, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32* %retval
  ret i32 %11
}

define internal void @ehci_clear_tt_buffer_complete(%struct.usb_hcd* %hcd, %struct.usb_host_endpoint* %ep) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ep.addr = alloca %struct.usb_host_endpoint*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %flags = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store %struct.usb_host_endpoint* %ep, %struct.usb_host_endpoint** %ep.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %hcpriv = getelementptr inbounds %struct.usb_host_endpoint* %1, i32 0, i32 3
  %2 = load i8** %hcpriv, align 8
  %3 = bitcast i8* %2 to %struct.ehci_qh*
  store %struct.ehci_qh* %3, %struct.ehci_qh** %qh, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %4 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 11
  %call2 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call3 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call2) noredzone
  store i64 %call3, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.end4

do.end4:                                          ; preds = %do.end
  %5 = load %struct.ehci_qh** %qh, align 8
  %6 = bitcast %struct.ehci_qh* %5 to i8*
  %bf.field.offs = getelementptr i8* %6, i32 132
  %7 = bitcast i8* %bf.field.offs to i32*
  %8 = load i32* %7, align 4
  %9 = and i32 %8, -33554433
  store i32 %9, i32* %7, align 4
  %10 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %10, i32 0, i32 9
  %11 = load i8* %qh_state, align 1
  %conv5 = zext i8 %11 to i32
  %cmp6 = icmp eq i32 %conv5, 3
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.end4
  %12 = load %struct.ehci_qh** %qh, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %12, i32 0, i32 3
  %call8 = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.end, label %land.lhs.true9

land.lhs.true9:                                   ; preds = %land.lhs.true
  %13 = load %struct.ehci_hcd** %ehci, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 12
  %14 = load i32* %rh_state, align 4
  %cmp10 = icmp eq i32 %14, 2
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true9
  %15 = load %struct.ehci_hcd** %ehci, align 8
  %16 = load %struct.ehci_qh** %qh, align 8
  call void @qh_link_async(%struct.ehci_hcd* %15, %struct.ehci_qh* %16) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true9, %land.lhs.true, %do.end4
  %17 = load %struct.ehci_hcd** %ehci, align 8
  %lock12 = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 11
  %18 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock12, i64 %18) noredzone
  ret void
}

define internal void @ehci_remove_device(%struct.usb_hcd* %hcd, %struct.usb_device* %udev) nounwind noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %udev.addr = alloca %struct.usb_device*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store %struct.usb_device* %udev, %struct.usb_device** %udev.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %0) noredzone
  store %struct.ehci_hcd* %call, %struct.ehci_hcd** %ehci, align 8
  %1 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %2 = load %struct.usb_device** %udev.addr, align 8
  call void @drop_tt(%struct.usb_device* %2) noredzone
  %3 = load %struct.ehci_hcd** %ehci, align 8
  %lock1 = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock1) noredzone
  ret void
}

define internal void @drop_tt(%struct.usb_device* %udev) nounwind noredzone {
entry:
  %udev.addr = alloca %struct.usb_device*, align 8
  %utt = alloca %struct.usb_tt*, align 8
  %tt1 = alloca %struct.ehci_tt*, align 8
  %tt_index = alloca %struct.ehci_tt**, align 8
  %ptt = alloca %struct.ehci_tt**, align 8
  %cnt = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.usb_device* %udev, %struct.usb_device** %udev.addr, align 8
  %0 = load %struct.usb_device** %udev.addr, align 8
  %tt = getelementptr inbounds %struct.usb_device* %0, i32 0, i32 5
  %1 = load %struct.usb_tt** %tt, align 8
  store %struct.usb_tt* %1, %struct.usb_tt** %utt, align 8
  %2 = load %struct.usb_tt** %utt, align 8
  %tobool = icmp ne %struct.usb_tt* %2, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.usb_tt** %utt, align 8
  %hcpriv = getelementptr inbounds %struct.usb_tt* %3, i32 0, i32 3
  %4 = load i8** %hcpriv, align 8
  %tobool2 = icmp ne i8* %4, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end20

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %cnt, align 4
  %5 = load %struct.usb_tt** %utt, align 8
  %multi = getelementptr inbounds %struct.usb_tt* %5, i32 0, i32 1
  %6 = load i32* %multi, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  %7 = load %struct.usb_tt** %utt, align 8
  %hcpriv5 = getelementptr inbounds %struct.usb_tt* %7, i32 0, i32 3
  %8 = load i8** %hcpriv5, align 8
  %9 = bitcast i8* %8 to %struct.ehci_tt**
  store %struct.ehci_tt** %9, %struct.ehci_tt*** %tt_index, align 8
  %10 = load %struct.usb_device** %udev.addr, align 8
  %ttport = getelementptr inbounds %struct.usb_device* %10, i32 0, i32 6
  %11 = load i32* %ttport, align 4
  %sub = sub i32 %11, 1
  %idxprom = sext i32 %sub to i64
  %12 = load %struct.ehci_tt*** %tt_index, align 8
  %arrayidx = getelementptr %struct.ehci_tt** %12, i64 %idxprom
  store %struct.ehci_tt** %arrayidx, %struct.ehci_tt*** %ptt, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %13 = load i32* %i, align 4
  %14 = load %struct.usb_tt** %utt, align 8
  %hub = getelementptr inbounds %struct.usb_tt* %14, i32 0, i32 0
  %15 = load %struct.usb_device** %hub, align 8
  %maxchild = getelementptr inbounds %struct.usb_device* %15, i32 0, i32 29
  %16 = load i32* %maxchild, align 4
  %cmp = icmp slt i32 %13, %16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32* %i, align 4
  %idxprom6 = sext i32 %17 to i64
  %18 = load %struct.ehci_tt*** %tt_index, align 8
  %arrayidx7 = getelementptr %struct.ehci_tt** %18, i64 %idxprom6
  %19 = load %struct.ehci_tt** %arrayidx7, align 8
  %tobool8 = icmp ne %struct.ehci_tt* %19, null
  %lnot = xor i1 %tobool8, true
  %lnot9 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot9 to i32
  %20 = load i32* %cnt, align 4
  %add = add i32 %20, %lnot.ext
  store i32 %add, i32* %cnt, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32* %i, align 4
  %inc = add i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end11

if.else:                                          ; preds = %if.end
  store %struct.ehci_tt** null, %struct.ehci_tt*** %tt_index, align 8
  %22 = load %struct.usb_tt** %utt, align 8
  %hcpriv10 = getelementptr inbounds %struct.usb_tt* %22, i32 0, i32 3
  %23 = bitcast i8** %hcpriv10 to %struct.ehci_tt**
  store %struct.ehci_tt** %23, %struct.ehci_tt*** %ptt, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.else, %for.end
  %24 = load %struct.ehci_tt*** %ptt, align 8
  %25 = load %struct.ehci_tt** %24, align 8
  store %struct.ehci_tt* %25, %struct.ehci_tt** %tt1, align 8
  %26 = load %struct.ehci_tt** %tt1, align 8
  %tobool12 = icmp ne %struct.ehci_tt* %26, null
  br i1 %tobool12, label %lor.lhs.false13, label %if.then15

lor.lhs.false13:                                  ; preds = %if.end11
  %27 = load %struct.ehci_tt** %tt1, align 8
  %ps_list = getelementptr inbounds %struct.ehci_tt* %27, i32 0, i32 2
  %call = call i32 @list_empty(%struct.list_head* %ps_list) noredzone
  %tobool14 = icmp ne i32 %call, 0
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %lor.lhs.false13, %if.end11
  br label %if.end20

if.end16:                                         ; preds = %lor.lhs.false13
  %28 = load %struct.ehci_tt** %tt1, align 8
  %tt_list = getelementptr inbounds %struct.ehci_tt* %28, i32 0, i32 1
  call void @list_del(%struct.list_head* %tt_list) noredzone
  %29 = load %struct.ehci_tt*** %ptt, align 8
  store %struct.ehci_tt* null, %struct.ehci_tt** %29, align 8
  %30 = load %struct.ehci_tt** %tt1, align 8
  %31 = bitcast %struct.ehci_tt* %30 to i8*
  call void @kfree(i8* %31) noredzone
  %32 = load i32* %cnt, align 4
  %cmp17 = icmp eq i32 %32, 1
  br i1 %cmp17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end16
  %33 = load %struct.usb_tt** %utt, align 8
  %hcpriv19 = getelementptr inbounds %struct.usb_tt* %33, i32 0, i32 3
  store i8* null, i8** %hcpriv19, align 8
  %34 = load %struct.ehci_tt*** %tt_index, align 8
  %35 = bitcast %struct.ehci_tt** %34 to i8*
  call void @kfree(i8* %35) noredzone
  br label %if.end20

if.end20:                                         ; preds = %if.then, %if.then15, %if.then18, %if.end16
  ret void
}

define internal i32 @list_empty(%struct.list_head* %head) nounwind inlinehint noredzone {
entry:
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head** %head.addr, align 8
  %next = getelementptr inbounds %struct.list_head* %0, i32 0, i32 0
  %1 = load %struct.list_head** %next, align 8
  %2 = load %struct.list_head** %head.addr, align 8
  %cmp = icmp eq %struct.list_head* %1, %2
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define internal void @list_del(%struct.list_head* %entry1) nounwind inlinehint noredzone {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  %0 = load %struct.list_head** %entry.addr, align 8
  %prev = getelementptr inbounds %struct.list_head* %0, i32 0, i32 1
  %1 = load %struct.list_head** %prev, align 8
  %2 = load %struct.list_head** %entry.addr, align 8
  %next = getelementptr inbounds %struct.list_head* %2, i32 0, i32 0
  %3 = load %struct.list_head** %next, align 8
  call void @__list_del(%struct.list_head* %1, %struct.list_head* %3) noredzone
  %4 = load %struct.list_head** %entry.addr, align 8
  %next2 = getelementptr inbounds %struct.list_head* %4, i32 0, i32 0
  store %struct.list_head* bitcast (i8* getelementptr (i8* inttoptr (i64 1048832 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %next2, align 8
  %5 = load %struct.list_head** %entry.addr, align 8
  %prev3 = getelementptr inbounds %struct.list_head* %5, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8* inttoptr (i64 2097664 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev3, align 8
  ret void
}

declare void @kfree(i8*) noredzone

define internal void @__list_del(%struct.list_head* %prev, %struct.list_head* %next) nounwind inlinehint noredzone {
entry:
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  %0 = load %struct.list_head** %prev.addr, align 8
  %1 = load %struct.list_head** %next.addr, align 8
  %prev1 = getelementptr inbounds %struct.list_head* %1, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %prev1, align 8
  %2 = load %struct.list_head** %next.addr, align 8
  %3 = load %struct.list_head** %prev.addr, align 8
  %next2 = getelementptr inbounds %struct.list_head* %3, i32 0, i32 0
  store %struct.list_head* %2, %struct.list_head** %next2, align 8
  ret void
}

define internal void @qh_link_async(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %dma = alloca i32, align 4
  %head = alloca %struct.ehci_qh*, align 8
  %__ret_warn_on = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %1, i32 0, i32 1
  %2 = load i64* %qh_dma, align 8
  %conv = trunc i64 %2 to i32
  %and = and i32 %conv, -32
  %or = or i32 %and, 2
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %0, i32 %or) noredzone
  store i32 %call, i32* %dma, align 4
  %3 = load %struct.ehci_qh** %qh.addr, align 8
  %4 = bitcast %struct.ehci_qh* %3 to i8*
  %bf.field.offs = getelementptr i8* %4, i32 132
  %5 = bitcast i8* %bf.field.offs to i32*
  %6 = load i32* %5, align 4
  %7 = lshr i32 %6, 25
  %bf.clear = and i32 %7, 1
  %tobool = icmp ne i32 %bf.clear, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv2 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv2, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %8, i32 0, i32 9
  %9 = load i8* %qh_state, align 1
  %conv4 = zext i8 %9 to i32
  %cmp = icmp ne i32 %conv4, 3
  %lnot6 = xor i1 %cmp, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  store i32 %lnot.ext9, i32* %__ret_warn_on, align 4
  %10 = load i32* %__ret_warn_on, align 4
  %tobool10 = icmp ne i32 %10, 0
  %lnot11 = xor i1 %tobool10, true
  %lnot13 = xor i1 %lnot11, true
  %lnot.ext14 = zext i1 %lnot13 to i32
  %conv15 = sext i32 %lnot.ext14 to i64
  %expval16 = call i64 @llvm.expect.i64(i64 %conv15, i64 0)
  %tobool17 = icmp ne i64 %expval16, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([59 x i8]* @.str5, i32 0, i32 0), i32 985) noredzone
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.end
  %11 = load i32* %__ret_warn_on, align 4
  %tobool20 = icmp ne i32 %11, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  %expval26 = call i64 @llvm.expect.i64(i64 %conv25, i64 0)
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %13 = load %struct.ehci_qh** %qh.addr, align 8
  call void @qh_refresh(%struct.ehci_hcd* %12, %struct.ehci_qh* %13) noredzone
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 15
  %15 = load %struct.ehci_qh** %async, align 8
  store %struct.ehci_qh* %15, %struct.ehci_qh** %head, align 8
  %16 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %16, i32 0, i32 2
  %17 = load %struct.ehci_qh** %head, align 8
  %qh_next27 = getelementptr inbounds %struct.ehci_qh* %17, i32 0, i32 2
  %18 = bitcast %union.ehci_shadow* %qh_next to i8*
  %19 = bitcast %union.ehci_shadow* %qh_next27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 8, i32 8, i1 false)
  %20 = load %struct.ehci_qh** %head, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %20, i32 0, i32 0
  %21 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qh_hw* %21, i32 0, i32 0
  %22 = load i32* %hw_next, align 4
  %23 = load %struct.ehci_qh** %qh.addr, align 8
  %hw28 = getelementptr inbounds %struct.ehci_qh* %23, i32 0, i32 0
  %24 = load %struct.ehci_qh_hw** %hw28, align 8
  %hw_next29 = getelementptr inbounds %struct.ehci_qh_hw* %24, i32 0, i32 0
  store i32 %22, i32* %hw_next29, align 4
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !4
  %25 = load %struct.ehci_qh** %qh.addr, align 8
  %26 = load %struct.ehci_qh** %head, align 8
  %qh_next30 = getelementptr inbounds %struct.ehci_qh* %26, i32 0, i32 2
  %qh31 = bitcast %union.ehci_shadow* %qh_next30 to %struct.ehci_qh**
  store %struct.ehci_qh* %25, %struct.ehci_qh** %qh31, align 8
  %27 = load i32* %dma, align 4
  %28 = load %struct.ehci_qh** %head, align 8
  %hw32 = getelementptr inbounds %struct.ehci_qh* %28, i32 0, i32 0
  %29 = load %struct.ehci_qh_hw** %hw32, align 8
  %hw_next33 = getelementptr inbounds %struct.ehci_qh_hw* %29, i32 0, i32 0
  store i32 %27, i32* %hw_next33, align 4
  %30 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state34 = getelementptr inbounds %struct.ehci_qh* %30, i32 0, i32 9
  store i8 1, i8* %qh_state34, align 1
  %31 = load %struct.ehci_qh** %qh.addr, align 8
  %xacterrs = getelementptr inbounds %struct.ehci_qh* %31, i32 0, i32 10
  store i8 0, i8* %xacterrs, align 1
  %32 = load %struct.ehci_qh** %qh.addr, align 8
  %33 = bitcast %struct.ehci_qh* %32 to i8*
  %bf.field.offs35 = getelementptr i8* %33, i32 132
  %34 = bitcast i8* %bf.field.offs35 to i32*
  %35 = load i32* %34, align 4
  %36 = and i32 %35, -134217729
  store i32 %36, i32* %34, align 4
  %37 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @enable_async(%struct.ehci_hcd* %37) noredzone
  br label %return

return:                                           ; preds = %if.end19, %if.then
  ret void
}

define internal i32 @cpu_to_hc32(%struct.ehci_hcd* %ehci, i32 %x) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %x.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32* %x.addr, align 4
  ret i32 %0
}

declare void @warn_slowpath_null(i8*, i32) noredzone

define internal void @qh_refresh(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %qtd = alloca %struct.ehci_qtd*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 3
  %next = getelementptr inbounds %struct.list_head* %qtd_list, i32 0, i32 0
  %1 = load %struct.list_head** %next, align 8
  store %struct.list_head* %1, %struct.list_head** %__mptr, align 8
  %2 = load %struct.list_head** %__mptr, align 8
  %3 = bitcast %struct.list_head* %2 to i8*
  %add.ptr = getelementptr i8* %3, i64 -64
  %4 = bitcast i8* %add.ptr to %struct.ehci_qtd*
  store %struct.ehci_qtd* %4, %struct.ehci_qtd** %qtd, align 8
  %5 = load %struct.ehci_qh** %qh.addr, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %5, i32 0, i32 0
  %6 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_token = getelementptr inbounds %struct.ehci_qh_hw* %6, i32 0, i32 6
  %7 = load i32* %hw_token, align 4
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %8, i32 128) noredzone
  %and = and i32 %7, %call
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %9 = load %struct.ehci_qtd** %qtd, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qtd* %9, i32 0, i32 0
  %10 = load i32* %hw_next, align 4
  %11 = load %struct.ehci_qh** %qh.addr, align 8
  %hw1 = getelementptr inbounds %struct.ehci_qh* %11, i32 0, i32 0
  %12 = load %struct.ehci_qh_hw** %hw1, align 8
  %hw_qtd_next = getelementptr inbounds %struct.ehci_qh_hw* %12, i32 0, i32 4
  store i32 %10, i32* %hw_qtd_next, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %14 = load %struct.ehci_qh** %qh.addr, align 8
  %15 = load %struct.ehci_qtd** %qtd, align 8
  call void @qh_update(%struct.ehci_hcd* %13, %struct.ehci_qh* %14, %struct.ehci_qtd* %15) noredzone
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

define internal void @enable_async(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_count = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 20
  %1 = load i32* %async_count, align 4
  %inc = add i32 %1, 1
  store i32 %inc, i32* %async_count, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 1
  %3 = load i32* %enabled_hrtimer_events, align 4
  %conv = zext i32 %3 to i64
  %and = and i64 %conv, -513
  %conv1 = trunc i64 %and to i32
  store i32 %conv1, i32* %enabled_hrtimer_events, align 4
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_poll_ASS(%struct.ehci_hcd* %4) noredzone
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @turn_on_io_watchdog(%struct.ehci_hcd* %5) noredzone
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

define internal void @ehci_poll_ASS(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %actual = alloca i32, align 4
  %want = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 12
  %1 = load i32* %rh_state, align 4
  %cmp = icmp ne i32 %1, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end18

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 55
  %3 = load i32* %command, align 4
  %and = and i32 %3, 32
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 32768, i32 0
  store i32 %cond, i32* %want, align 4
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 8
  %6 = load %struct.ehci_regs** %regs, align 8
  %status = getelementptr inbounds %struct.ehci_regs* %6, i32 0, i32 1
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %4, i32* %status) noredzone
  %and1 = and i32 %call, 32768
  store i32 %and1, i32* %actual, align 4
  %7 = load i32* %want, align 4
  %8 = load i32* %actual, align 4
  %cmp2 = icmp ne i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end7

if.then3:                                         ; preds = %if.end
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %ASS_poll_count = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 5
  %10 = load i32* %ASS_poll_count, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %ASS_poll_count, align 4
  %cmp4 = icmp slt i32 %10, 2
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %11, i32 0, i1 zeroext true) noredzone
  br label %if.end18

if.end6:                                          ; preds = %if.then3
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.end
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %ASS_poll_count8 = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 5
  store i32 0, i32* %ASS_poll_count8, align 4
  %13 = load i32* %want, align 4
  %cmp9 = icmp eq i32 %13, 0
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.end7
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_count = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 20
  %15 = load i32* %async_count, align 4
  %cmp11 = icmp ugt i32 %15, 0
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then10
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_set_command_bit(%struct.ehci_hcd* %16, i32 32) noredzone
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.then10
  br label %if.end18

if.else:                                          ; preds = %if.end7
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_count14 = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 20
  %18 = load i32* %async_count14, align 4
  %cmp15 = icmp eq i32 %18, 0
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.else
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %19, i32 9, i1 zeroext true) noredzone
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.then, %if.then5, %if.end17, %if.end13
  ret void
}

define internal void @turn_on_io_watchdog(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 12
  %1 = load i32* %rh_state, align 4
  %cmp = icmp ne i32 %1, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 1
  %3 = load i32* %enabled_hrtimer_events, align 4
  %conv = zext i32 %3 to i64
  %and = and i64 %conv, 1024
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end8

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %isoc_count = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 34
  %5 = load i32* %isoc_count, align 4
  %cmp1 = icmp ugt i32 %5, 0
  br i1 %cmp1, label %if.then7, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %if.end
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %7 = bitcast %struct.ehci_hcd* %6 to i8*
  %bf.field.offs = getelementptr i8* %7, i32 708
  %8 = bitcast i8* %bf.field.offs to i32*
  %9 = load i32* %8, align 4
  %10 = lshr i32 %9, 6
  %bf.clear = and i32 %10, 1
  %tobool4 = icmp ne i32 %bf.clear, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %lor.lhs.false3
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_count = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 20
  %12 = load i32* %async_count, align 4
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_count = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 33
  %14 = load i32* %intr_count, align 4
  %add = add i32 %12, %14
  %cmp5 = icmp ugt i32 %add, 0
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %land.lhs.true, %if.end
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %15, i32 10, i1 zeroext true) noredzone
  br label %if.end8

if.end8:                                          ; preds = %if.then, %if.then7, %land.lhs.true, %lor.lhs.false3
  ret void
}

define internal void @ehci_enable_event(%struct.ehci_hcd* %ehci, i32 %event, i1 zeroext %resched) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %event.addr = alloca i32, align 4
  %resched.addr = alloca i8, align 1
  %timeout = alloca %union.ktime*, align 8
  %.compoundliteral = alloca %union.ktime, align 8
  %coerce = alloca %union.ktime, align 8
  %coerce5 = alloca %union.ktime, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %event, i32* %event.addr, align 4
  %frombool = zext i1 %resched to i8
  store i8 %frombool, i8* %resched.addr, align 1
  %0 = load i32* %event.addr, align 4
  %idxprom = zext i32 %0 to i64
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hr_timeouts = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 2
  %arrayidx = getelementptr [11 x %union.ktime]* %hr_timeouts, i32 0, i64 %idxprom
  store %union.ktime* %arrayidx, %union.ktime** %timeout, align 8
  %2 = load i8* %resched.addr, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %union.ktime** %timeout, align 8
  %tv64 = bitcast %union.ktime* %.compoundliteral to i64*
  %call = call i64 @ktime_get() noredzone
  %coerce.dive = getelementptr %union.ktime* %coerce, i32 0, i32 0
  store i64 %call, i64* %coerce.dive
  %tv641 = bitcast %union.ktime* %coerce to i64*
  %4 = load i64* %tv641, align 8
  %5 = load i32* %event.addr, align 4
  %idxprom2 = zext i32 %5 to i64
  %arrayidx3 = getelementptr [11 x i32]* @event_delays_ns, i32 0, i64 %idxprom2
  %6 = load i32* %arrayidx3, align 4
  %conv = zext i32 %6 to i64
  %call4 = call i64 @ktime_set(i64 0, i64 %conv) noredzone
  %coerce.dive6 = getelementptr %union.ktime* %coerce5, i32 0, i32 0
  store i64 %call4, i64* %coerce.dive6
  %tv647 = bitcast %union.ktime* %coerce5 to i64*
  %7 = load i64* %tv647, align 8
  %add = add i64 %4, %7
  store i64 %add, i64* %tv64, align 8
  %8 = bitcast %union.ktime* %3 to i8*
  %9 = bitcast %union.ktime* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 8, i32 8, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32* %event.addr, align 4
  %shl = shl i32 1, %10
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 1
  %12 = load i32* %enabled_hrtimer_events, align 4
  %or = or i32 %12, %shl
  store i32 %or, i32* %enabled_hrtimer_events, align 4
  %13 = load i32* %event.addr, align 4
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %next_hrtimer_event = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 0
  %15 = load i32* %next_hrtimer_event, align 4
  %cmp = icmp ult i32 %13, %15
  br i1 %cmp, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.end
  %16 = load i32* %event.addr, align 4
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %next_hrtimer_event10 = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 0
  store i32 %16, i32* %next_hrtimer_event10, align 4
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hrtimer = getelementptr inbounds %struct.ehci_hcd* %18, i32 0, i32 3
  %19 = load %union.ktime** %timeout, align 8
  %coerce.dive11 = getelementptr %union.ktime* %19, i32 0, i32 0
  %20 = load i64* %coerce.dive11
  %call12 = call i32 @hrtimer_start_range_ns(%struct.hrtimer* %hrtimer, i64 %20, i64 1000000, i32 0) noredzone
  br label %if.end13

if.end13:                                         ; preds = %if.then9, %if.end
  ret void
}

declare i64 @ktime_get() noredzone

define internal i64 @ktime_set(i64 %secs, i64 %nsecs) nounwind inlinehint noredzone {
entry:
  %retval = alloca %union.ktime, align 8
  %secs.addr = alloca i64, align 8
  %nsecs.addr = alloca i64, align 8
  %.compoundliteral = alloca %union.ktime, align 8
  %.compoundliteral2 = alloca %union.ktime, align 8
  store i64 %secs, i64* %secs.addr, align 8
  store i64 %nsecs, i64* %nsecs.addr, align 8
  %0 = load i64* %secs.addr, align 8
  %cmp = icmp sge i64 %0, 9223372036
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %tv64 = bitcast %union.ktime* %.compoundliteral to i64*
  store i64 9223372036854775807, i64* %tv64, align 8
  %1 = bitcast %union.ktime* %retval to i8*
  %2 = bitcast %union.ktime* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 8, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %tv643 = bitcast %union.ktime* %.compoundliteral2 to i64*
  %3 = load i64* %secs.addr, align 8
  %mul = mul i64 %3, 1000000000
  %4 = load i64* %nsecs.addr, align 8
  %add = add i64 %mul, %4
  store i64 %add, i64* %tv643, align 8
  %5 = bitcast %union.ktime* %retval to i8*
  %6 = bitcast %union.ktime* %.compoundliteral2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 8, i32 8, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %coerce.dive = getelementptr %union.ktime* %retval, i32 0, i32 0
  %7 = load i64* %coerce.dive
  ret i64 %7
}

declare i32 @hrtimer_start_range_ns(%struct.hrtimer*, i64, i64, i32) noredzone

define internal void @ehci_set_command_bit(%struct.ehci_hcd* %ehci, i32 %bit) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %bit.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %bit, i32* %bit.addr, align 4
  %0 = load i32* %bit.addr, align 4
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 55
  %2 = load i32* %command, align 4
  %or = or i32 %2, %0
  store i32 %or, i32* %command, align 4
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command1 = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 55
  %5 = load i32* %command1, align 4
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 8
  %7 = load %struct.ehci_regs** %regs, align 8
  %command2 = getelementptr inbounds %struct.ehci_regs* %7, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %3, i32 %5, i32* %command2) noredzone
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs3 = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 8
  %10 = load %struct.ehci_regs** %regs3, align 8
  %command4 = getelementptr inbounds %struct.ehci_regs* %10, i32 0, i32 0
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %8, i32* %command4) noredzone
  ret void
}

define internal void @qh_update(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh, %struct.ehci_qtd* %qtd) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %qtd.addr = alloca %struct.ehci_qtd*, align 8
  %hw = alloca %struct.ehci_qh_hw*, align 8
  %__ret_warn_on = alloca i32, align 4
  %is_out = alloca i32, align 4
  %epnum = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  store %struct.ehci_qtd* %qtd, %struct.ehci_qtd** %qtd.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %hw1 = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 0
  %1 = load %struct.ehci_qh_hw** %hw1, align 8
  store %struct.ehci_qh_hw* %1, %struct.ehci_qh_hw** %hw, align 8
  %2 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %2, i32 0, i32 9
  %3 = load i8* %qh_state, align 1
  %conv = zext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 3
  %lnot = xor i1 %cmp, true
  %lnot3 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot3 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %4 = load i32* %__ret_warn_on, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot4 = xor i1 %tobool, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv8 = sext i32 %lnot.ext7 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv8, i64 0)
  %tobool9 = icmp ne i64 %expval, 0
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @warn_slowpath_null(i8* getelementptr inbounds ([59 x i8]* @.str5, i32 0, i32 0), i32 93) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %__ret_warn_on, align 4
  %tobool10 = icmp ne i32 %5, 0
  %lnot11 = xor i1 %tobool10, true
  %lnot13 = xor i1 %lnot11, true
  %lnot.ext14 = zext i1 %lnot13 to i32
  %conv15 = sext i32 %lnot.ext14 to i64
  %expval16 = call i64 @llvm.expect.i64(i64 %conv15, i64 0)
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %7 = load %struct.ehci_qtd** %qtd.addr, align 8
  %qtd_dma = getelementptr inbounds %struct.ehci_qtd* %7, i32 0, i32 5
  %8 = load i64* %qtd_dma, align 8
  %conv17 = trunc i64 %8 to i32
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %6, i32 %conv17) noredzone
  %9 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_qtd_next = getelementptr inbounds %struct.ehci_qh_hw* %9, i32 0, i32 4
  store i32 %call, i32* %hw_qtd_next, align 4
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call18 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %10, i32 1) noredzone
  %11 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_alt_next = getelementptr inbounds %struct.ehci_qh_hw* %11, i32 0, i32 5
  store i32 %call18, i32* %hw_alt_next, align 4
  %12 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_info1 = getelementptr inbounds %struct.ehci_qh_hw* %12, i32 0, i32 1
  %13 = load i32* %hw_info1, align 4
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call19 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %14, i32 16384) noredzone
  %and = and i32 %13, %call19
  %tobool20 = icmp ne i32 %and, 0
  br i1 %tobool20, label %if.end54, label %if.then21

if.then21:                                        ; preds = %if.end
  %15 = load %struct.ehci_qh** %qh.addr, align 8
  %16 = bitcast %struct.ehci_qh* %15 to i8*
  %bf.field.offs = getelementptr i8* %16, i32 132
  %17 = bitcast i8* %bf.field.offs to i32*
  %18 = load i32* %17, align 4
  %19 = lshr i32 %18, 24
  %bf.clear = and i32 %19, 1
  store i32 %bf.clear, i32* %is_out, align 4
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %21 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_info122 = getelementptr inbounds %struct.ehci_qh_hw* %21, i32 0, i32 1
  %call23 = call i32 @hc32_to_cpup(%struct.ehci_hcd* %20, i32* %hw_info122) noredzone
  %shr = lshr i32 %call23, 8
  %and24 = and i32 %shr, 15
  store i32 %and24, i32* %epnum, align 4
  %22 = load i32* %is_out, align 4
  %idxprom = zext i32 %22 to i64
  %23 = load %struct.ehci_qh** %qh.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_qh* %23, i32 0, i32 7
  %udev = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 0
  %24 = load %struct.usb_device** %udev, align 8
  %toggle = getelementptr inbounds %struct.usb_device* %24, i32 0, i32 7
  %arrayidx = getelementptr [2 x i32]* %toggle, i32 0, i64 %idxprom
  %25 = load i32* %arrayidx, align 4
  %26 = load i32* %epnum, align 4
  %shr25 = lshr i32 %25, %26
  %and26 = and i32 %shr25, 1
  %tobool27 = icmp ne i32 %and26, 0
  %lnot28 = xor i1 %tobool27, true
  %lnot30 = xor i1 %lnot28, true
  %lnot32 = xor i1 %lnot30, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  %conv34 = sext i32 %lnot.ext33 to i64
  %expval35 = call i64 @llvm.expect.i64(i64 %conv34, i64 0)
  %tobool36 = icmp ne i64 %expval35, 0
  br i1 %tobool36, label %if.then37, label %if.end53

if.then37:                                        ; preds = %if.then21
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call38 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %27, i32 -2147483648) noredzone
  %neg = xor i32 %call38, -1
  %28 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_token = getelementptr inbounds %struct.ehci_qh_hw* %28, i32 0, i32 6
  %29 = load i32* %hw_token, align 4
  %and39 = and i32 %29, %neg
  store i32 %and39, i32* %hw_token, align 4
  %30 = load i32* %is_out, align 4
  %idxprom40 = zext i32 %30 to i64
  %31 = load %struct.ehci_qh** %qh.addr, align 8
  %ps41 = getelementptr inbounds %struct.ehci_qh* %31, i32 0, i32 7
  %udev42 = getelementptr inbounds %struct.ehci_per_sched* %ps41, i32 0, i32 0
  %32 = load %struct.usb_device** %udev42, align 8
  %toggle43 = getelementptr inbounds %struct.usb_device* %32, i32 0, i32 7
  %arrayidx44 = getelementptr [2 x i32]* %toggle43, i32 0, i64 %idxprom40
  %33 = load i32* %arrayidx44, align 4
  %34 = load i32* %epnum, align 4
  %shl = shl i32 1, %34
  %neg45 = xor i32 %shl, -1
  %and46 = and i32 %33, %neg45
  %35 = load i32* %epnum, align 4
  %shl47 = shl i32 1, %35
  %or = or i32 %and46, %shl47
  %36 = load i32* %is_out, align 4
  %idxprom48 = zext i32 %36 to i64
  %37 = load %struct.ehci_qh** %qh.addr, align 8
  %ps49 = getelementptr inbounds %struct.ehci_qh* %37, i32 0, i32 7
  %udev50 = getelementptr inbounds %struct.ehci_per_sched* %ps49, i32 0, i32 0
  %38 = load %struct.usb_device** %udev50, align 8
  %toggle51 = getelementptr inbounds %struct.usb_device* %38, i32 0, i32 7
  %arrayidx52 = getelementptr [2 x i32]* %toggle51, i32 0, i64 %idxprom48
  store i32 %or, i32* %arrayidx52, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then37, %if.then21
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.end
  %39 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call55 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %39, i32 -2147483647) noredzone
  %40 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_token56 = getelementptr inbounds %struct.ehci_qh_hw* %40, i32 0, i32 6
  %41 = load i32* %hw_token56, align 4
  %and57 = and i32 %41, %call55
  store i32 %and57, i32* %hw_token56, align 4
  ret void
}

define internal i32 @hc32_to_cpup(%struct.ehci_hcd* %ehci, i32* %x) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %x.addr = alloca i32*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  %0 = load i32** %x.addr, align 8
  %call = call i32 @__le32_to_cpup(i32* %0) noredzone
  ret i32 %call
}

define internal i32 @__le32_to_cpup(i32* %p) nounwind inlinehint noredzone {
entry:
  %p.addr = alloca i32*, align 8
  store i32* %p, i32** %p.addr, align 8
  %0 = load i32** %p.addr, align 8
  %1 = load i32* %0, align 4
  ret i32 %1
}

define internal void @set_owner(%struct.ehci_hcd* %ehci, i32 %portnum, i32 %new_owner) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %portnum.addr = alloca i32, align 4
  %new_owner.addr = alloca i32, align 4
  %status_reg = alloca i32*, align 8
  %port_status = alloca i32, align 4
  %try = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %portnum, i32* %portnum.addr, align 4
  store i32 %new_owner, i32* %new_owner.addr, align 4
  %0 = load i32* %portnum.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 8
  %2 = load %struct.ehci_regs** %regs, align 8
  %port_status1 = getelementptr inbounds %struct.ehci_regs* %2, i32 0, i32 11
  %arrayidx = getelementptr [0 x i32]* %port_status1, i32 0, i64 %idxprom
  store i32* %arrayidx, i32** %status_reg, align 8
  store i32 4, i32* %try, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32* %try, align 4
  %cmp = icmp sgt i32 %3, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %6 = load i32** %status_reg, align 8
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %5, i32* %6) noredzone
  store i32 %call, i32* %port_status, align 4
  %7 = load i32* %port_status, align 4
  %and = and i32 %7, 8192
  %8 = load i32* %new_owner.addr, align 4
  %cmp2 = icmp eq i32 %and, %8
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32* %port_status, align 4
  %and3 = and i32 %9, 8193
  %cmp4 = icmp eq i32 %and3, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %for.body
  store i32 0, i32* %try, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %10 = load i32* %port_status, align 4
  %xor = xor i32 %10, 8192
  store i32 %xor, i32* %port_status, align 4
  %11 = load i32* %port_status, align 4
  %and5 = and i32 %11, -47
  store i32 %and5, i32* %port_status, align 4
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %13 = load i32* %port_status, align 4
  %14 = load i32** %status_reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %12, i32 %13, i32* %14) noredzone
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock6 = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock6) noredzone
  %16 = load i32* %try, align 4
  %cmp7 = icmp sgt i32 %16, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  call void @msleep(i32 5) noredzone
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end9
  %17 = load i32* %try, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %try, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define internal i32 @dbgp_reset_prep(%struct.usb_hcd* %hcd) nounwind inlinehint noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call i32 @xen_dbgp_reset_prep(%struct.usb_hcd* %0) noredzone
  ret i32 %call
}

define internal i32 @dbgp_external_startup(%struct.usb_hcd* %hcd) nounwind inlinehint noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %call = call i32 @xen_dbgp_external_startup(%struct.usb_hcd* %0) noredzone
  ret i32 %call
}

define internal void @ehci_handover_companion_ports(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %nr.addr.i136 = alloca i64, align 8
  %addr.addr.i137 = alloca i64*, align 8
  %nr.addr.i127 = alloca i64, align 8
  %addr.addr.i128 = alloca i64*, align 8
  %nr.addr.i125 = alloca i64, align 8
  %addr.addr.i126 = alloca i64*, align 8
  %nr.addr.i116 = alloca i64, align 8
  %addr.addr.i117 = alloca i64*, align 8
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %reg = alloca i32*, align 8
  %status = alloca i32, align 4
  %port = alloca i32, align 4
  %buf = alloca i32, align 4
  %hcd = alloca %struct.usb_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %0) noredzone
  store %struct.usb_hcd* %call, %struct.usb_hcd** %hcd, align 8
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 44
  %2 = load i64* %owned_ports, align 8
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call i32 @usb_for_each_dev(i8* null, i32 (%struct.usb_device*, i8*)* @persist_enabled_on_companion) noredzone
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 10
  %4 = load i32* %hcs_params, align 4
  %shr = lshr i32 %4, 0
  %and = and i32 %shr, 15
  store i32 %and, i32* %port, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end20, %if.end4
  %5 = load i32* %port, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %port, align 4
  %tobool5 = icmp ne i32 %5, 0
  br i1 %tobool5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %6 = load i32* %port, align 4
  %conv = sext i32 %6 to i64
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports6 = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 44
  store i64 %conv, i64* %nr.addr.i, align 8
  store i64* %owned_ports6, i64** %addr.addr.i, align 8
  %8 = load i64* %nr.addr.i, align 8
  %and.i = and i64 %8, 63
  %shl.i = shl i64 1, %and.i
  %9 = load i64* %nr.addr.i, align 8
  %shr.i = ashr i64 %9, 6
  %10 = load i64** %addr.addr.i, align 8
  %arrayidx.i = getelementptr i64* %10, i64 %shr.i
  %11 = load volatile i64* %arrayidx.i, align 8
  %and1.i = and i64 %shl.i, %11
  %cmp.i = icmp ne i64 %and1.i, 0
  %conv.i = zext i1 %cmp.i to i32
  %tobool8 = icmp ne i32 %conv.i, 0
  br i1 %tobool8, label %if.then13, label %if.end20

cond.false:                                       ; preds = %while.body
  %12 = load i32* %port, align 4
  %conv9 = sext i32 %12 to i64
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports10 = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 44
  %call11 = call i32 @variable_test_bit(i64 %conv9, i64* %owned_ports10) noredzone
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then13, label %if.end20

if.then13:                                        ; preds = %cond.false, %cond.true
  %14 = load i32* %port, align 4
  %idxprom = sext i32 %14 to i64
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 8
  %16 = load %struct.ehci_regs** %regs, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %16, i32 0, i32 11
  %arrayidx = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom
  store i32* %arrayidx, i32** %reg, align 8
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %18 = load i32** %reg, align 8
  %call14 = call i32 @ehci_readl(%struct.ehci_hcd* %17, i32* %18) noredzone
  %and15 = and i32 %call14, -43
  store i32 %and15, i32* %status, align 4
  %19 = load i32* %status, align 4
  %and16 = and i32 %19, 4096
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %if.then13
  %20 = load i32* %status, align 4
  %or = or i32 %20, 4096
  store i32 %or, i32* %status, align 4
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %22 = load i32* %status, align 4
  %23 = load i32** %reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %21, i32 %22, i32* %23) noredzone
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.then13
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %cond.false, %cond.true
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @msleep(i32 20) noredzone
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params21 = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 10
  %26 = load i32* %hcs_params21, align 4
  %shr22 = lshr i32 %26, 0
  %and23 = and i32 %shr22, 15
  store i32 %and23, i32* %port, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end68, %while.end
  %27 = load i32* %port, align 4
  %dec25 = add i32 %27, -1
  store i32 %dec25, i32* %port, align 4
  %tobool26 = icmp ne i32 %27, 0
  br i1 %tobool26, label %while.body27, label %while.end69

while.body27:                                     ; preds = %while.cond24
  br i1 false, label %cond.true28, label %cond.false33

cond.true28:                                      ; preds = %while.body27
  %28 = load i32* %port, align 4
  %conv29 = sext i32 %28 to i64
  %29 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports30 = getelementptr inbounds %struct.ehci_hcd* %29, i32 0, i32 44
  store i64 %conv29, i64* %nr.addr.i116, align 8
  store i64* %owned_ports30, i64** %addr.addr.i117, align 8
  %30 = load i64* %nr.addr.i116, align 8
  %and.i118 = and i64 %30, 63
  %shl.i119 = shl i64 1, %and.i118
  %31 = load i64* %nr.addr.i116, align 8
  %shr.i120 = ashr i64 %31, 6
  %32 = load i64** %addr.addr.i117, align 8
  %arrayidx.i121 = getelementptr i64* %32, i64 %shr.i120
  %33 = load volatile i64* %arrayidx.i121, align 8
  %and1.i122 = and i64 %shl.i119, %33
  %cmp.i123 = icmp ne i64 %and1.i122, 0
  %conv.i124 = zext i1 %cmp.i123 to i32
  %tobool32 = icmp ne i32 %conv.i124, 0
  br i1 %tobool32, label %if.then38, label %if.end68

cond.false33:                                     ; preds = %while.body27
  %34 = load i32* %port, align 4
  %conv34 = sext i32 %34 to i64
  %35 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports35 = getelementptr inbounds %struct.ehci_hcd* %35, i32 0, i32 44
  %call36 = call i32 @variable_test_bit(i64 %conv34, i64* %owned_ports35) noredzone
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end68

if.then38:                                        ; preds = %cond.false33, %cond.true28
  %36 = load i32* %port, align 4
  %idxprom39 = sext i32 %36 to i64
  %37 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs40 = getelementptr inbounds %struct.ehci_hcd* %37, i32 0, i32 8
  %38 = load %struct.ehci_regs** %regs40, align 8
  %port_status41 = getelementptr inbounds %struct.ehci_regs* %38, i32 0, i32 11
  %arrayidx42 = getelementptr [0 x i32]* %port_status41, i32 0, i64 %idxprom39
  store i32* %arrayidx42, i32** %reg, align 8
  %39 = load %struct.ehci_hcd** %ehci.addr, align 8
  %40 = load i32** %reg, align 8
  %call43 = call i32 @ehci_readl(%struct.ehci_hcd* %39, i32* %40) noredzone
  %and44 = and i32 %call43, -43
  store i32 %and44, i32* %status, align 4
  %41 = load i32* %status, align 4
  %and45 = and i32 %41, 8192
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.then47, label %if.else

if.then47:                                        ; preds = %if.then38
  %42 = load i32* %port, align 4
  %conv48 = sext i32 %42 to i64
  %43 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports49 = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 44
  store i64 %conv48, i64* %nr.addr.i125, align 8
  store i64* %owned_ports49, i64** %addr.addr.i126, align 8
  %44 = load i64** %addr.addr.i126, align 8
  %45 = load i64* %nr.addr.i125, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %44, i64 %45, i64* %44) nounwind, !srcloc !1
  br label %if.end67

if.else:                                          ; preds = %if.then38
  br i1 false, label %cond.true50, label %cond.false54

cond.true50:                                      ; preds = %if.else
  %46 = load i32* %port, align 4
  %conv51 = sext i32 %46 to i64
  %47 = load %struct.ehci_hcd** %ehci.addr, align 8
  %companion_ports = getelementptr inbounds %struct.ehci_hcd* %47, i32 0, i32 43
  store i64 %conv51, i64* %nr.addr.i127, align 8
  store i64* %companion_ports, i64** %addr.addr.i128, align 8
  %48 = load i64* %nr.addr.i127, align 8
  %and.i129 = and i64 %48, 63
  %shl.i130 = shl i64 1, %and.i129
  %49 = load i64* %nr.addr.i127, align 8
  %shr.i131 = ashr i64 %49, 6
  %50 = load i64** %addr.addr.i128, align 8
  %arrayidx.i132 = getelementptr i64* %50, i64 %shr.i131
  %51 = load volatile i64* %arrayidx.i132, align 8
  %and1.i133 = and i64 %shl.i130, %51
  %cmp.i134 = icmp ne i64 %and1.i133, 0
  %conv.i135 = zext i1 %cmp.i134 to i32
  %tobool53 = icmp ne i32 %conv.i135, 0
  br i1 %tobool53, label %if.then59, label %if.else61

cond.false54:                                     ; preds = %if.else
  %52 = load i32* %port, align 4
  %conv55 = sext i32 %52 to i64
  %53 = load %struct.ehci_hcd** %ehci.addr, align 8
  %companion_ports56 = getelementptr inbounds %struct.ehci_hcd* %53, i32 0, i32 43
  %call57 = call i32 @variable_test_bit(i64 %conv55, i64* %companion_ports56) noredzone
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.then59, label %if.else61

if.then59:                                        ; preds = %cond.false54, %cond.true50
  %54 = load %struct.ehci_hcd** %ehci.addr, align 8
  %55 = load i32* %status, align 4
  %and60 = and i32 %55, -5
  %56 = load i32** %reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %54, i32 %and60, i32* %56) noredzone
  br label %if.end66

if.else61:                                        ; preds = %cond.false54, %cond.true50
  %57 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock62 = getelementptr inbounds %struct.ehci_hcd* %57, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock62) noredzone
  %58 = load %struct.usb_hcd** %hcd, align 8
  %59 = load i32* %port, align 4
  %add = add i32 %59, 1
  %conv63 = trunc i32 %add to i16
  %call64 = call i32 @ehci_hub_control(%struct.usb_hcd* %58, i16 zeroext 8963, i16 zeroext 4, i16 zeroext %conv63, i8* null, i16 zeroext 0) noredzone
  %60 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock65 = getelementptr inbounds %struct.ehci_hcd* %60, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock65) noredzone
  br label %if.end66

if.end66:                                         ; preds = %if.else61, %if.then59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then47
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %cond.false33, %cond.true28
  br label %while.cond24

while.end69:                                      ; preds = %while.cond24
  %61 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock70 = getelementptr inbounds %struct.ehci_hcd* %61, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock70) noredzone
  %62 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports71 = getelementptr inbounds %struct.ehci_hcd* %62, i32 0, i32 44
  %63 = load i64* %owned_ports71, align 8
  %tobool72 = icmp ne i64 %63, 0
  br i1 %tobool72, label %if.end74, label %if.then73

if.then73:                                        ; preds = %while.end69
  br label %return

if.end74:                                         ; preds = %while.end69
  call void @msleep(i32 90) noredzone
  %64 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock75 = getelementptr inbounds %struct.ehci_hcd* %64, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock75) noredzone
  %65 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params76 = getelementptr inbounds %struct.ehci_hcd* %65, i32 0, i32 10
  %66 = load i32* %hcs_params76, align 4
  %shr77 = lshr i32 %66, 0
  %and78 = and i32 %shr77, 15
  store i32 %and78, i32* %port, align 4
  br label %while.cond79

while.cond79:                                     ; preds = %if.end112, %if.end74
  %67 = load i32* %port, align 4
  %dec80 = add i32 %67, -1
  store i32 %dec80, i32* %port, align 4
  %tobool81 = icmp ne i32 %67, 0
  br i1 %tobool81, label %while.body82, label %while.end113

while.body82:                                     ; preds = %while.cond79
  br i1 false, label %cond.true83, label %cond.false88

cond.true83:                                      ; preds = %while.body82
  %68 = load i32* %port, align 4
  %conv84 = sext i32 %68 to i64
  %69 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports85 = getelementptr inbounds %struct.ehci_hcd* %69, i32 0, i32 44
  store i64 %conv84, i64* %nr.addr.i136, align 8
  store i64* %owned_ports85, i64** %addr.addr.i137, align 8
  %70 = load i64* %nr.addr.i136, align 8
  %and.i138 = and i64 %70, 63
  %shl.i139 = shl i64 1, %and.i138
  %71 = load i64* %nr.addr.i136, align 8
  %shr.i140 = ashr i64 %71, 6
  %72 = load i64** %addr.addr.i137, align 8
  %arrayidx.i141 = getelementptr i64* %72, i64 %shr.i140
  %73 = load volatile i64* %arrayidx.i141, align 8
  %and1.i142 = and i64 %shl.i139, %73
  %cmp.i143 = icmp ne i64 %and1.i142, 0
  %conv.i144 = zext i1 %cmp.i143 to i32
  %tobool87 = icmp ne i32 %conv.i144, 0
  br i1 %tobool87, label %if.then93, label %if.end112

cond.false88:                                     ; preds = %while.body82
  %74 = load i32* %port, align 4
  %conv89 = sext i32 %74 to i64
  %75 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports90 = getelementptr inbounds %struct.ehci_hcd* %75, i32 0, i32 44
  %call91 = call i32 @variable_test_bit(i64 %conv89, i64* %owned_ports90) noredzone
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.then93, label %if.end112

if.then93:                                        ; preds = %cond.false88, %cond.true83
  %76 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock94 = getelementptr inbounds %struct.ehci_hcd* %76, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock94) noredzone
  %77 = load %struct.usb_hcd** %hcd, align 8
  %78 = load i32* %port, align 4
  %add95 = add i32 %78, 1
  %conv96 = trunc i32 %add95 to i16
  %79 = bitcast i32* %buf to i8*
  %call97 = call i32 @ehci_hub_control(%struct.usb_hcd* %77, i16 zeroext -23808, i16 zeroext 0, i16 zeroext %conv96, i8* %79, i16 zeroext 4) noredzone
  %80 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock98 = getelementptr inbounds %struct.ehci_hcd* %80, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock98) noredzone
  %81 = load i32* %port, align 4
  %idxprom99 = sext i32 %81 to i64
  %82 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs100 = getelementptr inbounds %struct.ehci_hcd* %82, i32 0, i32 8
  %83 = load %struct.ehci_regs** %regs100, align 8
  %port_status101 = getelementptr inbounds %struct.ehci_regs* %83, i32 0, i32 11
  %arrayidx102 = getelementptr [0 x i32]* %port_status101, i32 0, i64 %idxprom99
  store i32* %arrayidx102, i32** %reg, align 8
  %84 = load %struct.ehci_hcd** %ehci.addr, align 8
  %85 = load i32** %reg, align 8
  %call103 = call i32 @ehci_readl(%struct.ehci_hcd* %84, i32* %85) noredzone
  %and104 = and i32 %call103, -43
  store i32 %and104, i32* %status, align 4
  %86 = load i32* %status, align 4
  %and105 = and i32 %86, 8192
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %if.then107, label %if.else109

if.then107:                                       ; preds = %if.then93
  %87 = load %struct.ehci_hcd** %ehci.addr, align 8
  %88 = load i32* %status, align 4
  %or108 = or i32 %88, 2
  %89 = load i32** %reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %87, i32 %or108, i32* %89) noredzone
  br label %if.end111

if.else109:                                       ; preds = %if.then93
  %90 = load %struct.ehci_hcd** %ehci.addr, align 8
  %91 = load i32* %status, align 4
  %and110 = and i32 %91, -5
  %92 = load i32** %reg, align 8
  call void @ehci_writel(%struct.ehci_hcd* %90, i32 %and110, i32* %92) noredzone
  br label %if.end111

if.end111:                                        ; preds = %if.else109, %if.then107
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %cond.false88, %cond.true83
  br label %while.cond79

while.end113:                                     ; preds = %while.cond79
  %93 = load %struct.ehci_hcd** %ehci.addr, align 8
  %owned_ports114 = getelementptr inbounds %struct.ehci_hcd* %93, i32 0, i32 44
  store i64 0, i64* %owned_ports114, align 8
  %94 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock115 = getelementptr inbounds %struct.ehci_hcd* %94, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock115) noredzone
  br label %return

return:                                           ; preds = %while.end113, %if.then73, %if.then3, %if.then
  ret void
}

declare i32 @usb_for_each_dev(i8*, i32 (%struct.usb_device*, i8*)*) noredzone

define internal i32 @persist_enabled_on_companion(%struct.usb_device* %udev, i8* %unused) nounwind noredzone {
entry:
  %udev.addr = alloca %struct.usb_device*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.usb_device* %udev, %struct.usb_device** %udev.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.usb_device** %udev.addr, align 8
  %maxchild = getelementptr inbounds %struct.usb_device* %0, i32 0, i32 29
  %1 = load i32* %maxchild, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.usb_device** %udev.addr, align 8
  %3 = bitcast %struct.usb_device* %2 to i8*
  %bf.field.offs = getelementptr i8* %3, i32 1148
  %4 = bitcast i8* %bf.field.offs to i32*
  %5 = load i32* %4, align 4
  %6 = lshr i32 %5, 1
  %bf.clear = and i32 %6, 1
  %tobool1 = icmp ne i32 %bf.clear, 0
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct.usb_device** %udev.addr, align 8
  %bus = getelementptr inbounds %struct.usb_device* %7, i32 0, i32 9
  %8 = load %struct.usb_bus** %bus, align 8
  %root_hub = getelementptr inbounds %struct.usb_bus* %8, i32 0, i32 10
  %9 = load %struct.usb_device** %root_hub, align 8
  %speed = getelementptr inbounds %struct.usb_device* %9, i32 0, i32 4
  %10 = load i32* %speed, align 4
  %cmp = icmp ult i32 %10, 3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  ret i32 %land.ext
}

define internal i32 @xen_dbgp_external_startup(%struct.usb_hcd* %hcd) nounwind inlinehint noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  ret i32 -1
}

define internal i32 @xen_dbgp_reset_prep(%struct.usb_hcd* %hcd) nounwind inlinehint noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  ret i32 1
}

declare void @usleep_range(i64, i64) noredzone

define internal void @ehci_handle_controller_death(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 8
  %2 = load %struct.ehci_regs** %regs, align 8
  %status = getelementptr inbounds %struct.ehci_regs* %2, i32 0, i32 1
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %0, i32* %status) noredzone
  %and = and i32 %call, 4096
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end4, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %died_poll_count = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 6
  %4 = load i32* %died_poll_count, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %died_poll_count, align 4
  %cmp = icmp slt i32 %4, 5
  br i1 %cmp, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %5, i32 2, i1 zeroext true) noredzone
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call2 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %6) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call2, i32 0, i32 0
  %controller = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 0
  %7 = load %struct.device** %controller, align 8
  %call3 = call i32 (%struct.device*, i8*, ...)* @dev_warn(%struct.device* %7, i8* getelementptr inbounds ([55 x i8]* @.str8, i32 0, i32 0)) noredzone
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 12
  store i32 0, i32* %rh_state, align 4
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs5 = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 8
  %11 = load %struct.ehci_regs** %regs5, align 8
  %configured_flag = getelementptr inbounds %struct.ehci_regs* %11, i32 0, i32 10
  call void @ehci_writel(%struct.ehci_hcd* %9, i32 0, i32* %configured_flag) noredzone
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs6 = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 8
  %14 = load %struct.ehci_regs** %regs6, align 8
  %intr_enable = getelementptr inbounds %struct.ehci_regs* %14, i32 0, i32 2
  call void @ehci_writel(%struct.ehci_hcd* %12, i32 0, i32* %intr_enable) noredzone
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_work(%struct.ehci_hcd* %15) noredzone
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @end_unlink_async(%struct.ehci_hcd* %16) noredzone
  br label %return

return:                                           ; preds = %if.end4, %if.then1
  ret void
}

define internal void @end_unlink_async(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %early_exit = alloca i8, align 1
  %__mptr = alloca %struct.list_head*, align 8
  %__mptr32 = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = bitcast %struct.ehci_hcd* %0 to i8*
  %bf.field.offs = getelementptr i8* %1, i32 708
  %2 = bitcast i8* %bf.field.offs to i32*
  %3 = load i32* %2, align 4
  %4 = lshr i32 %3, 9
  %bf.clear = and i32 %4, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 15
  %7 = load %struct.ehci_qh** %async, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %7, i32 0, i32 1
  %8 = load i64* %qh_dma, align 8
  %conv = trunc i64 %8 to i32
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 8
  %10 = load %struct.ehci_regs** %regs, align 8
  %async_next = getelementptr inbounds %struct.ehci_regs* %10, i32 0, i32 6
  call void @ehci_writel(%struct.ehci_hcd* %5, i32 %conv, i32* %async_next) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %12 = bitcast %struct.ehci_hcd* %11 to i8*
  %bf.field.offs1 = getelementptr i8* %12, i32 244
  %13 = load i8* %bf.field.offs1, align 4
  %14 = and i8 %13, -9
  store i8 %14, i8* %bf.field.offs1, align 4
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 17
  %call = call i32 @list_empty(%struct.list_head* %async_unlink) noredzone
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink5 = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 17
  %next = getelementptr inbounds %struct.list_head* %async_unlink5, i32 0, i32 0
  %17 = load %struct.list_head** %next, align 8
  store %struct.list_head* %17, %struct.list_head** %__mptr, align 8
  %18 = load %struct.list_head** %__mptr, align 8
  %19 = bitcast %struct.list_head* %18 to i8*
  %add.ptr = getelementptr i8* %19, i64 -64
  %20 = bitcast i8* %add.ptr to %struct.ehci_qh*
  store %struct.ehci_qh* %20, %struct.ehci_qh** %qh, align 8
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %22 = bitcast %struct.ehci_hcd* %21 to i8*
  %bf.field.offs6 = getelementptr i8* %22, i32 244
  %23 = load i8* %bf.field.offs6, align 4
  %24 = lshr i8 %23, 4
  %bf.clear7 = and i8 %24, 1
  %25 = trunc i8 %bf.clear7 to i1
  %frombool = zext i1 %25 to i8
  store i8 %frombool, i8* %early_exit, align 1
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %26, i32 0, i32 12
  %27 = load i32* %rh_state, align 4
  %cmp = icmp ult i32 %27, 2
  br i1 %cmp, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end4
  %28 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink10 = getelementptr inbounds %struct.ehci_hcd* %28, i32 0, i32 17
  %29 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_idle = getelementptr inbounds %struct.ehci_hcd* %29, i32 0, i32 18
  call void @list_splice_tail_init(%struct.list_head* %async_unlink10, %struct.list_head* %async_idle) noredzone
  br label %if.end19

if.else:                                          ; preds = %if.end4
  %30 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %30, i32 0, i32 9
  %31 = load i8* %qh_state, align 1
  %conv11 = zext i8 %31 to i32
  %cmp12 = icmp eq i32 %conv11, 4
  br i1 %cmp12, label %if.then14, label %if.else16

if.then14:                                        ; preds = %if.else
  %32 = load %struct.ehci_qh** %qh, align 8
  %qh_state15 = getelementptr inbounds %struct.ehci_qh* %32, i32 0, i32 9
  store i8 2, i8* %qh_state15, align 1
  store i8 1, i8* %early_exit, align 1
  br label %if.end18

if.else16:                                        ; preds = %if.else
  %33 = load %struct.ehci_qh** %qh, align 8
  %unlink_node = getelementptr inbounds %struct.ehci_qh* %33, i32 0, i32 6
  %34 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_idle17 = getelementptr inbounds %struct.ehci_hcd* %34, i32 0, i32 18
  call void @list_move_tail(%struct.list_head* %unlink_node, %struct.list_head* %async_idle17) noredzone
  br label %if.end18

if.end18:                                         ; preds = %if.else16, %if.then14
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then9
  %35 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink20 = getelementptr inbounds %struct.ehci_hcd* %35, i32 0, i32 17
  %call21 = call i32 @list_empty(%struct.list_head* %async_unlink20) noredzone
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.end24, label %if.then23

if.then23:                                        ; preds = %if.end19
  %36 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @start_iaa_cycle(%struct.ehci_hcd* %36) noredzone
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end19
  %37 = load i8* %early_exit, align 1
  %tobool25 = trunc i8 %37 to i1
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end24
  br label %return

if.end27:                                         ; preds = %if.end24
  %38 = load %struct.ehci_hcd** %ehci.addr, align 8
  %39 = bitcast %struct.ehci_hcd* %38 to i8*
  %bf.field.offs28 = getelementptr i8* %39, i32 244
  %40 = load i8* %bf.field.offs28, align 4
  %41 = and i8 %40, -17
  %42 = or i8 %41, 16
  store i8 %42, i8* %bf.field.offs28, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end51, %if.end27
  %43 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_idle29 = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 18
  %call30 = call i32 @list_empty(%struct.list_head* %async_idle29) noredzone
  %tobool31 = icmp ne i32 %call30, 0
  %lnot = xor i1 %tobool31, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %44 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_idle33 = getelementptr inbounds %struct.ehci_hcd* %44, i32 0, i32 18
  %next34 = getelementptr inbounds %struct.list_head* %async_idle33, i32 0, i32 0
  %45 = load %struct.list_head** %next34, align 8
  store %struct.list_head* %45, %struct.list_head** %__mptr32, align 8
  %46 = load %struct.list_head** %__mptr32, align 8
  %47 = bitcast %struct.list_head* %46 to i8*
  %add.ptr35 = getelementptr i8* %47, i64 -64
  %48 = bitcast i8* %add.ptr35 to %struct.ehci_qh*
  store %struct.ehci_qh* %48, %struct.ehci_qh** %qh, align 8
  %49 = load %struct.ehci_qh** %qh, align 8
  %unlink_node36 = getelementptr inbounds %struct.ehci_qh* %49, i32 0, i32 6
  call void @list_del(%struct.list_head* %unlink_node36) noredzone
  %50 = load %struct.ehci_qh** %qh, align 8
  %qh_state37 = getelementptr inbounds %struct.ehci_qh* %50, i32 0, i32 9
  store i8 3, i8* %qh_state37, align 1
  %51 = load %struct.ehci_qh** %qh, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %51, i32 0, i32 2
  %qh38 = bitcast %union.ehci_shadow* %qh_next to %struct.ehci_qh**
  store %struct.ehci_qh* null, %struct.ehci_qh** %qh38, align 8
  %52 = load %struct.ehci_qh** %qh, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %52, i32 0, i32 3
  %call39 = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.end43, label %if.then41

if.then41:                                        ; preds = %while.body
  %53 = load %struct.ehci_hcd** %ehci.addr, align 8
  %54 = load %struct.ehci_qh** %qh, align 8
  %call42 = call i32 @qh_completions(%struct.ehci_hcd* %53, %struct.ehci_qh* %54) noredzone
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %while.body
  %55 = load %struct.ehci_qh** %qh, align 8
  %qtd_list44 = getelementptr inbounds %struct.ehci_qh* %55, i32 0, i32 3
  %call45 = call i32 @list_empty(%struct.list_head* %qtd_list44) noredzone
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.end51, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end43
  %56 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state47 = getelementptr inbounds %struct.ehci_hcd* %56, i32 0, i32 12
  %57 = load i32* %rh_state47, align 4
  %cmp48 = icmp eq i32 %57, 2
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %land.lhs.true
  %58 = load %struct.ehci_hcd** %ehci.addr, align 8
  %59 = load %struct.ehci_qh** %qh, align 8
  call void @qh_link_async(%struct.ehci_hcd* %58, %struct.ehci_qh* %59) noredzone
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %land.lhs.true, %if.end43
  %60 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @disable_async(%struct.ehci_hcd* %60) noredzone
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %61 = load %struct.ehci_hcd** %ehci.addr, align 8
  %62 = bitcast %struct.ehci_hcd* %61 to i8*
  %bf.field.offs52 = getelementptr i8* %62, i32 244
  %63 = load i8* %bf.field.offs52, align 4
  %64 = and i8 %63, -17
  store i8 %64, i8* %bf.field.offs52, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then26, %if.then3
  ret void
}

define internal void @unlink_empty_async_suspended(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %__ret_warn_on = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 15
  %1 = load %struct.ehci_qh** %async, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %1, i32 0, i32 2
  %qh1 = bitcast %union.ehci_shadow* %qh_next to %struct.ehci_qh**
  %2 = load %struct.ehci_qh** %qh1, align 8
  %tobool = icmp ne %struct.ehci_qh* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async2 = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 15
  %4 = load %struct.ehci_qh** %async2, align 8
  %qh_next3 = getelementptr inbounds %struct.ehci_qh* %4, i32 0, i32 2
  %qh4 = bitcast %union.ehci_shadow* %qh_next3 to %struct.ehci_qh**
  %5 = load %struct.ehci_qh** %qh4, align 8
  store %struct.ehci_qh* %5, %struct.ehci_qh** %qh, align 8
  %6 = load %struct.ehci_qh** %qh, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %6, i32 0, i32 3
  %call = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool5 = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool5, true
  %lnot6 = xor i1 %lnot, true
  %lnot7 = xor i1 %lnot6, true
  %lnot.ext = zext i1 %lnot7 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %7 = load i32* %__ret_warn_on, align 4
  %tobool8 = icmp ne i32 %7, 0
  %lnot9 = xor i1 %tobool8, true
  %lnot11 = xor i1 %lnot9, true
  %lnot.ext12 = zext i1 %lnot11 to i32
  %conv = sext i32 %lnot.ext12 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool13 = icmp ne i64 %expval, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  call void @warn_slowpath_null(i8* getelementptr inbounds ([59 x i8]* @.str5, i32 0, i32 0), i32 1411) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %8 = load i32* %__ret_warn_on, align 4
  %tobool14 = icmp ne i32 %8, 0
  %lnot15 = xor i1 %tobool14, true
  %lnot17 = xor i1 %lnot15, true
  %lnot.ext18 = zext i1 %lnot17 to i32
  %conv19 = sext i32 %lnot.ext18 to i64
  %expval20 = call i64 @llvm.expect.i64(i64 %conv19, i64 0)
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %10 = load %struct.ehci_qh** %qh, align 8
  call void @single_unlink_async(%struct.ehci_hcd* %9, %struct.ehci_qh* %10) noredzone
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @start_iaa_cycle(%struct.ehci_hcd* %11) noredzone
  ret void
}

define internal void @ehci_handle_start_intr_unlinks(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %stopped = alloca i8, align 1
  %qh = alloca %struct.ehci_qh*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 12
  %1 = load i32* %rh_state, align 4
  %cmp = icmp ult i32 %1, 2
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %stopped, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_wait = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 27
  %call = call i32 @list_empty(%struct.list_head* %intr_unlink_wait) noredzone
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_wait1 = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 27
  %next = getelementptr inbounds %struct.list_head* %intr_unlink_wait1, i32 0, i32 0
  %4 = load %struct.list_head** %next, align 8
  store %struct.list_head* %4, %struct.list_head** %__mptr, align 8
  %5 = load %struct.list_head** %__mptr, align 8
  %6 = bitcast %struct.list_head* %5 to i8*
  %add.ptr = getelementptr i8* %6, i64 -64
  %7 = bitcast i8* %add.ptr to %struct.ehci_qh*
  store %struct.ehci_qh* %7, %struct.ehci_qh** %qh, align 8
  %8 = load i8* %stopped, align 1
  %tobool2 = trunc i8 %8 to i1
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %9 = load %struct.ehci_qh** %qh, align 8
  %unlink_cycle = getelementptr inbounds %struct.ehci_qh* %9, i32 0, i32 8
  %10 = load i32* %unlink_cycle, align 4
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_wait_cycle = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 29
  %12 = load i32* %intr_unlink_wait_cycle, align 4
  %cmp3 = icmp eq i32 %10, %12
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %while.end

if.end:                                           ; preds = %land.lhs.true, %while.body
  %13 = load %struct.ehci_qh** %qh, align 8
  %unlink_node = getelementptr inbounds %struct.ehci_qh* %13, i32 0, i32 6
  call void @list_del_init(%struct.list_head* %unlink_node) noredzone
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %15 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_intr(%struct.ehci_hcd* %14, %struct.ehci_qh* %15) noredzone
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_wait4 = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 27
  %call5 = call i32 @list_empty(%struct.list_head* %intr_unlink_wait4) noredzone
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %while.end
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %17, i32 5, i1 zeroext true) noredzone
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_wait_cycle8 = getelementptr inbounds %struct.ehci_hcd* %18, i32 0, i32 29
  %19 = load i32* %intr_unlink_wait_cycle8, align 4
  %inc = add i32 %19, 1
  store i32 %inc, i32* %intr_unlink_wait_cycle8, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %while.end
  ret void
}

define internal void @ehci_handle_intr_unlinks(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %stopped = alloca i8, align 1
  %qh = alloca %struct.ehci_qh*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 12
  %1 = load i32* %rh_state, align 4
  %cmp = icmp ult i32 %1, 2
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %stopped, align 1
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %3 = bitcast %struct.ehci_hcd* %2 to i8*
  %bf.field.offs = getelementptr i8* %3, i32 244
  %4 = load i8* %bf.field.offs, align 4
  %5 = and i8 %4, -5
  %6 = or i8 %5, 4
  store i8 %6, i8* %bf.field.offs, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 28
  %call = call i32 @list_empty(%struct.list_head* %intr_unlink) noredzone
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink1 = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 28
  %next = getelementptr inbounds %struct.list_head* %intr_unlink1, i32 0, i32 0
  %9 = load %struct.list_head** %next, align 8
  store %struct.list_head* %9, %struct.list_head** %__mptr, align 8
  %10 = load %struct.list_head** %__mptr, align 8
  %11 = bitcast %struct.list_head* %10 to i8*
  %add.ptr = getelementptr i8* %11, i64 -64
  %12 = bitcast i8* %add.ptr to %struct.ehci_qh*
  store %struct.ehci_qh* %12, %struct.ehci_qh** %qh, align 8
  %13 = load i8* %stopped, align 1
  %tobool2 = trunc i8 %13 to i1
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %14 = load %struct.ehci_qh** %qh, align 8
  %unlink_cycle = getelementptr inbounds %struct.ehci_qh* %14, i32 0, i32 8
  %15 = load i32* %unlink_cycle, align 4
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_cycle = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 30
  %17 = load i32* %intr_unlink_cycle, align 4
  %cmp3 = icmp eq i32 %15, %17
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %while.end

if.end:                                           ; preds = %land.lhs.true, %while.body
  %18 = load %struct.ehci_qh** %qh, align 8
  %unlink_node = getelementptr inbounds %struct.ehci_qh* %18, i32 0, i32 6
  call void @list_del_init(%struct.list_head* %unlink_node) noredzone
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %20 = load %struct.ehci_qh** %qh, align 8
  call void @end_unlink_intr(%struct.ehci_hcd* %19, %struct.ehci_qh* %20) noredzone
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink4 = getelementptr inbounds %struct.ehci_hcd* %21, i32 0, i32 28
  %call5 = call i32 @list_empty(%struct.list_head* %intr_unlink4) noredzone
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %while.end
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %22, i32 3, i1 zeroext true) noredzone
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_cycle8 = getelementptr inbounds %struct.ehci_hcd* %23, i32 0, i32 30
  %24 = load i32* %intr_unlink_cycle8, align 4
  %inc = add i32 %24, 1
  store i32 %inc, i32* %intr_unlink_cycle8, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %while.end
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %26 = bitcast %struct.ehci_hcd* %25 to i8*
  %bf.field.offs10 = getelementptr i8* %26, i32 244
  %27 = load i8* %bf.field.offs10, align 4
  %28 = and i8 %27, -5
  store i8 %28, i8* %bf.field.offs10, align 4
  ret void
}

define internal void @end_free_itds(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %itd = alloca %struct.ehci_itd*, align 8
  %n = alloca %struct.ehci_itd*, align 8
  %sitd = alloca %struct.ehci_sitd*, align 8
  %sn = alloca %struct.ehci_sitd*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %__mptr1 = alloca %struct.list_head*, align 8
  %__mptr12 = alloca %struct.list_head*, align 8
  %__mptr16 = alloca %struct.list_head*, align 8
  %__mptr19 = alloca %struct.list_head*, align 8
  %__mptr33 = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 12
  %1 = load i32* %rh_state, align 4
  %cmp = icmp ult i32 %1, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_itd_to_free = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 38
  store %struct.ehci_itd* null, %struct.ehci_itd** %last_itd_to_free, align 8
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_sitd_to_free = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 40
  store %struct.ehci_sitd* null, %struct.ehci_sitd** %last_sitd_to_free, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_itd_list = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 37
  %next = getelementptr inbounds %struct.list_head* %cached_itd_list, i32 0, i32 0
  %5 = load %struct.list_head** %next, align 8
  store %struct.list_head* %5, %struct.list_head** %__mptr, align 8
  %6 = load %struct.list_head** %__mptr, align 8
  %7 = bitcast %struct.list_head* %6 to i8*
  %add.ptr = getelementptr i8* %7, i64 -128
  %8 = bitcast i8* %add.ptr to %struct.ehci_itd*
  store %struct.ehci_itd* %8, %struct.ehci_itd** %itd, align 8
  %9 = load %struct.ehci_itd** %itd, align 8
  %itd_list = getelementptr inbounds %struct.ehci_itd* %9, i32 0, i32 8
  %next2 = getelementptr inbounds %struct.list_head* %itd_list, i32 0, i32 0
  %10 = load %struct.list_head** %next2, align 8
  store %struct.list_head* %10, %struct.list_head** %__mptr1, align 8
  %11 = load %struct.list_head** %__mptr1, align 8
  %12 = bitcast %struct.list_head* %11 to i8*
  %add.ptr3 = getelementptr i8* %12, i64 -128
  %13 = bitcast i8* %add.ptr3 to %struct.ehci_itd*
  store %struct.ehci_itd* %13, %struct.ehci_itd** %n, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %14 = load %struct.ehci_itd** %itd, align 8
  %itd_list4 = getelementptr inbounds %struct.ehci_itd* %14, i32 0, i32 8
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_itd_list5 = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 37
  %cmp6 = icmp ne %struct.list_head* %itd_list4, %cached_itd_list5
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.ehci_itd** %itd, align 8
  %itd_list7 = getelementptr inbounds %struct.ehci_itd* %16, i32 0, i32 8
  call void @list_del(%struct.list_head* %itd_list7) noredzone
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %itd_pool = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 50
  %18 = load %struct.dma_pool** %itd_pool, align 8
  %19 = load %struct.ehci_itd** %itd, align 8
  %20 = bitcast %struct.ehci_itd* %19 to i8*
  %21 = load %struct.ehci_itd** %itd, align 8
  %itd_dma = getelementptr inbounds %struct.ehci_itd* %21, i32 0, i32 4
  %22 = load i64* %itd_dma, align 8
  call void @dma_pool_free(%struct.dma_pool* %18, i8* %20, i64 %22) noredzone
  %23 = load %struct.ehci_itd** %itd, align 8
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_itd_to_free8 = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 38
  %25 = load %struct.ehci_itd** %last_itd_to_free8, align 8
  %cmp9 = icmp eq %struct.ehci_itd* %23, %25
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.body
  br label %for.end

if.end11:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end11
  %26 = load %struct.ehci_itd** %n, align 8
  store %struct.ehci_itd* %26, %struct.ehci_itd** %itd, align 8
  %27 = load %struct.ehci_itd** %n, align 8
  %itd_list13 = getelementptr inbounds %struct.ehci_itd* %27, i32 0, i32 8
  %next14 = getelementptr inbounds %struct.list_head* %itd_list13, i32 0, i32 0
  %28 = load %struct.list_head** %next14, align 8
  store %struct.list_head* %28, %struct.list_head** %__mptr12, align 8
  %29 = load %struct.list_head** %__mptr12, align 8
  %30 = bitcast %struct.list_head* %29 to i8*
  %add.ptr15 = getelementptr i8* %30, i64 -128
  %31 = bitcast i8* %add.ptr15 to %struct.ehci_itd*
  store %struct.ehci_itd* %31, %struct.ehci_itd** %n, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then10, %for.cond
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_sitd_list = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 39
  %next17 = getelementptr inbounds %struct.list_head* %cached_sitd_list, i32 0, i32 0
  %33 = load %struct.list_head** %next17, align 8
  store %struct.list_head* %33, %struct.list_head** %__mptr16, align 8
  %34 = load %struct.list_head** %__mptr16, align 8
  %35 = bitcast %struct.list_head* %34 to i8*
  %add.ptr18 = getelementptr i8* %35, i64 -72
  %36 = bitcast i8* %add.ptr18 to %struct.ehci_sitd*
  store %struct.ehci_sitd* %36, %struct.ehci_sitd** %sitd, align 8
  %37 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_list = getelementptr inbounds %struct.ehci_sitd* %37, i32 0, i32 11
  %next20 = getelementptr inbounds %struct.list_head* %sitd_list, i32 0, i32 0
  %38 = load %struct.list_head** %next20, align 8
  store %struct.list_head* %38, %struct.list_head** %__mptr19, align 8
  %39 = load %struct.list_head** %__mptr19, align 8
  %40 = bitcast %struct.list_head* %39 to i8*
  %add.ptr21 = getelementptr i8* %40, i64 -72
  %41 = bitcast i8* %add.ptr21 to %struct.ehci_sitd*
  store %struct.ehci_sitd* %41, %struct.ehci_sitd** %sn, align 8
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc32, %for.end
  %42 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_list23 = getelementptr inbounds %struct.ehci_sitd* %42, i32 0, i32 11
  %43 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_sitd_list24 = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 39
  %cmp25 = icmp ne %struct.list_head* %sitd_list23, %cached_sitd_list24
  br i1 %cmp25, label %for.body26, label %for.end37

for.body26:                                       ; preds = %for.cond22
  %44 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_list27 = getelementptr inbounds %struct.ehci_sitd* %44, i32 0, i32 11
  call void @list_del(%struct.list_head* %sitd_list27) noredzone
  %45 = load %struct.ehci_hcd** %ehci.addr, align 8
  %sitd_pool = getelementptr inbounds %struct.ehci_hcd* %45, i32 0, i32 51
  %46 = load %struct.dma_pool** %sitd_pool, align 8
  %47 = load %struct.ehci_sitd** %sitd, align 8
  %48 = bitcast %struct.ehci_sitd* %47 to i8*
  %49 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_dma = getelementptr inbounds %struct.ehci_sitd* %49, i32 0, i32 7
  %50 = load i64* %sitd_dma, align 8
  call void @dma_pool_free(%struct.dma_pool* %46, i8* %48, i64 %50) noredzone
  %51 = load %struct.ehci_sitd** %sitd, align 8
  %52 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_sitd_to_free28 = getelementptr inbounds %struct.ehci_hcd* %52, i32 0, i32 40
  %53 = load %struct.ehci_sitd** %last_sitd_to_free28, align 8
  %cmp29 = icmp eq %struct.ehci_sitd* %51, %53
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %for.body26
  br label %for.end37

if.end31:                                         ; preds = %for.body26
  br label %for.inc32

for.inc32:                                        ; preds = %if.end31
  %54 = load %struct.ehci_sitd** %sn, align 8
  store %struct.ehci_sitd* %54, %struct.ehci_sitd** %sitd, align 8
  %55 = load %struct.ehci_sitd** %sn, align 8
  %sitd_list34 = getelementptr inbounds %struct.ehci_sitd* %55, i32 0, i32 11
  %next35 = getelementptr inbounds %struct.list_head* %sitd_list34, i32 0, i32 0
  %56 = load %struct.list_head** %next35, align 8
  store %struct.list_head* %56, %struct.list_head** %__mptr33, align 8
  %57 = load %struct.list_head** %__mptr33, align 8
  %58 = bitcast %struct.list_head* %57 to i8*
  %add.ptr36 = getelementptr i8* %58, i64 -72
  %59 = bitcast i8* %add.ptr36 to %struct.ehci_sitd*
  store %struct.ehci_sitd* %59, %struct.ehci_sitd** %sn, align 8
  br label %for.cond22

for.end37:                                        ; preds = %if.then30, %for.cond22
  %60 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_itd_list38 = getelementptr inbounds %struct.ehci_hcd* %60, i32 0, i32 37
  %call = call i32 @list_empty(%struct.list_head* %cached_itd_list38) noredzone
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then42

lor.lhs.false:                                    ; preds = %for.end37
  %61 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_sitd_list39 = getelementptr inbounds %struct.ehci_hcd* %61, i32 0, i32 39
  %call40 = call i32 @list_empty(%struct.list_head* %cached_sitd_list39) noredzone
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %lor.lhs.false, %for.end37
  %62 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @start_free_itds(%struct.ehci_hcd* %62) noredzone
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %lor.lhs.false
  ret void
}

declare i32 @hrtimer_cancel(%struct.hrtimer*) noredzone

declare void @dma_pool_free(%struct.dma_pool*, i8*, i64) noredzone

define internal void @start_free_itds(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %__mptr1 = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 1
  %1 = load i32* %enabled_hrtimer_events, align 4
  %conv = zext i32 %1 to i64
  %and = and i64 %conv, 16
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_itd_list = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 37
  %prev = getelementptr inbounds %struct.list_head* %cached_itd_list, i32 0, i32 1
  %3 = load %struct.list_head** %prev, align 8
  store %struct.list_head* %3, %struct.list_head** %__mptr, align 8
  %4 = load %struct.list_head** %__mptr, align 8
  %5 = bitcast %struct.list_head* %4 to i8*
  %add.ptr = getelementptr i8* %5, i64 -128
  %6 = bitcast i8* %add.ptr to %struct.ehci_itd*
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_itd_to_free = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 38
  store %struct.ehci_itd* %6, %struct.ehci_itd** %last_itd_to_free, align 8
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_sitd_list = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 39
  %prev2 = getelementptr inbounds %struct.list_head* %cached_sitd_list, i32 0, i32 1
  %9 = load %struct.list_head** %prev2, align 8
  store %struct.list_head* %9, %struct.list_head** %__mptr1, align 8
  %10 = load %struct.list_head** %__mptr1, align 8
  %11 = bitcast %struct.list_head* %10 to i8*
  %add.ptr3 = getelementptr i8* %11, i64 -72
  %12 = bitcast i8* %add.ptr3 to %struct.ehci_sitd*
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_sitd_to_free = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 40
  store %struct.ehci_sitd* %12, %struct.ehci_sitd** %last_sitd_to_free, align 8
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %14, i32 4, i1 zeroext true) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define internal void @list_del_init(%struct.list_head* %entry1) nounwind inlinehint noredzone {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  %0 = load %struct.list_head** %entry.addr, align 8
  call void @__list_del_entry(%struct.list_head* %0) noredzone
  %1 = load %struct.list_head** %entry.addr, align 8
  call void @INIT_LIST_HEAD(%struct.list_head* %1) noredzone
  ret void
}

define internal void @end_unlink_intr(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %hw = alloca %struct.ehci_qh_hw*, align 8
  %rc = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %hw1 = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 0
  %1 = load %struct.ehci_qh_hw** %hw1, align 8
  store %struct.ehci_qh_hw* %1, %struct.ehci_qh_hw** %hw, align 8
  %2 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %2, i32 0, i32 9
  store i8 3, i8* %qh_state, align 1
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %3, i32 1) noredzone
  %4 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qh_hw* %4, i32 0, i32 0
  store i32 %call, i32* %hw_next, align 4
  %5 = load %struct.ehci_qh** %qh.addr, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %5, i32 0, i32 3
  %call2 = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %7 = load %struct.ehci_qh** %qh.addr, align 8
  %call3 = call i32 @qh_completions(%struct.ehci_hcd* %6, %struct.ehci_qh* %7) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.ehci_qh** %qh.addr, align 8
  %qtd_list4 = getelementptr inbounds %struct.ehci_qh* %8, i32 0, i32 3
  %call5 = call i32 @list_empty(%struct.list_head* %qtd_list4) noredzone
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end14, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 12
  %10 = load i32* %rh_state, align 4
  %cmp = icmp eq i32 %10, 2
  br i1 %cmp, label %if.then7, label %if.end14

if.then7:                                         ; preds = %land.lhs.true
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %12 = load %struct.ehci_qh** %qh.addr, align 8
  %call8 = call i32 @qh_schedule(%struct.ehci_hcd* %11, %struct.ehci_qh* %12) noredzone
  store i32 %call8, i32* %rc, align 4
  %13 = load i32* %rc, align 4
  %cmp9 = icmp eq i32 %13, 0
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.then7
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %15 = load %struct.ehci_qh** %qh.addr, align 8
  call void @qh_refresh(%struct.ehci_hcd* %14, %struct.ehci_qh* %15) noredzone
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %17 = load %struct.ehci_qh** %qh.addr, align 8
  call void @qh_link_periodic(%struct.ehci_hcd* %16, %struct.ehci_qh* %17) noredzone
  br label %if.end13

if.else:                                          ; preds = %if.then7
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call11 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %18) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call11, i32 0, i32 0
  %controller = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 0
  %19 = load %struct.device** %controller, align 8
  %20 = load %struct.ehci_qh** %qh.addr, align 8
  %21 = load i32* %rc, align 4
  %call12 = call i32 (%struct.device*, i8*, ...)* @dev_err(%struct.device* %19, i8* getelementptr inbounds ([32 x i8]* @.str6, i32 0, i32 0), %struct.ehci_qh* %20, i32 %21) noredzone
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then10
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %land.lhs.true, %if.end
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_count = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 33
  %23 = load i32* %intr_count, align 4
  %dec = add i32 %23, -1
  store i32 %dec, i32* %intr_count, align 4
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @disable_periodic(%struct.ehci_hcd* %24) noredzone
  ret void
}

define internal i32 @qh_completions(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %last = alloca %struct.ehci_qtd*, align 8
  %end = alloca %struct.ehci_qtd*, align 8
  %entry1 = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.list_head*, align 8
  %last_status = alloca i32, align 4
  %stopped = alloca i32, align 4
  %state = alloca i8, align 1
  %hw = alloca %struct.ehci_qh_hw*, align 8
  %qtd = alloca %struct.ehci_qtd*, align 8
  %urb = alloca %struct.urb*, align 8
  %token = alloca i32, align 4
  %__mptr = alloca %struct.list_head*, align 8
  %__mptr166 = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %dummy = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 5
  %1 = load %struct.ehci_qtd** %dummy, align 8
  store %struct.ehci_qtd* %1, %struct.ehci_qtd** %end, align 8
  %2 = load %struct.ehci_qh** %qh.addr, align 8
  %hw6 = getelementptr inbounds %struct.ehci_qh* %2, i32 0, i32 0
  %3 = load %struct.ehci_qh_hw** %hw6, align 8
  store %struct.ehci_qh_hw* %3, %struct.ehci_qh_hw** %hw, align 8
  %4 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %4, i32 0, i32 9
  %5 = load i8* %qh_state, align 1
  store i8 %5, i8* %state, align 1
  %6 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state7 = getelementptr inbounds %struct.ehci_qh* %6, i32 0, i32 9
  store i8 5, i8* %qh_state7, align 1
  %7 = load i8* %state, align 1
  %conv = zext i8 %7 to i32
  %cmp = icmp eq i32 %conv, 3
  %conv8 = zext i1 %cmp to i32
  store i32 %conv8, i32* %stopped, align 4
  br label %rescan

rescan:                                           ; preds = %if.then200, %entry
  store %struct.ehci_qtd* null, %struct.ehci_qtd** %last, align 8
  store i32 -115, i32* %last_status, align 4
  %8 = load %struct.ehci_qh** %qh.addr, align 8
  %9 = bitcast %struct.ehci_qh* %8 to i8*
  %bf.field.offs = getelementptr i8* %9, i32 132
  %10 = bitcast i8* %bf.field.offs to i32*
  %11 = load i32* %10, align 4
  %12 = and i32 %11, -67108865
  store i32 %12, i32* %10, align 4
  %13 = load %struct.ehci_qh** %qh.addr, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %13, i32 0, i32 3
  %next = getelementptr inbounds %struct.list_head* %qtd_list, i32 0, i32 0
  %14 = load %struct.list_head** %next, align 8
  store %struct.list_head* %14, %struct.list_head** %entry1, align 8
  %15 = load %struct.list_head** %entry1, align 8
  %next9 = getelementptr inbounds %struct.list_head* %15, i32 0, i32 0
  %16 = load %struct.list_head** %next9, align 8
  store %struct.list_head* %16, %struct.list_head** %tmp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %rescan
  %17 = load %struct.list_head** %entry1, align 8
  %18 = load %struct.ehci_qh** %qh.addr, align 8
  %qtd_list10 = getelementptr inbounds %struct.ehci_qh* %18, i32 0, i32 3
  %cmp11 = icmp ne %struct.list_head* %17, %qtd_list10
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %token, align 4
  %19 = load %struct.list_head** %entry1, align 8
  store %struct.list_head* %19, %struct.list_head** %__mptr, align 8
  %20 = load %struct.list_head** %__mptr, align 8
  %21 = bitcast %struct.list_head* %20 to i8*
  %add.ptr = getelementptr i8* %21, i64 -64
  %22 = bitcast i8* %add.ptr to %struct.ehci_qtd*
  store %struct.ehci_qtd* %22, %struct.ehci_qtd** %qtd, align 8
  %23 = load %struct.ehci_qtd** %qtd, align 8
  %urb17 = getelementptr inbounds %struct.ehci_qtd* %23, i32 0, i32 7
  %24 = load %struct.urb** %urb17, align 8
  store %struct.urb* %24, %struct.urb** %urb, align 8
  %25 = load %struct.ehci_qtd** %last, align 8
  %tobool = icmp ne %struct.ehci_qtd* %25, null
  br i1 %tobool, label %if.then, label %if.end26

if.then:                                          ; preds = %for.body
  %26 = load %struct.ehci_qtd** %last, align 8
  %urb18 = getelementptr inbounds %struct.ehci_qtd* %26, i32 0, i32 7
  %27 = load %struct.urb** %urb18, align 8
  %28 = load %struct.urb** %urb, align 8
  %cmp19 = icmp ne %struct.urb* %27, %28
  %lnot = xor i1 %cmp19, true
  %lnot21 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot21 to i32
  %conv22 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv22, i64 1)
  %tobool23 = icmp ne i64 %expval, 0
  br i1 %tobool23, label %if.then24, label %if.end

if.then24:                                        ; preds = %if.then
  %29 = load %struct.ehci_hcd** %ehci.addr, align 8
  %30 = load %struct.ehci_qtd** %last, align 8
  %urb25 = getelementptr inbounds %struct.ehci_qtd* %30, i32 0, i32 7
  %31 = load %struct.urb** %urb25, align 8
  %32 = load i32* %last_status, align 4
  call void @ehci_urb_done(%struct.ehci_hcd* %29, %struct.urb* %31, i32 %32) noredzone
  store i32 -115, i32* %last_status, align 4
  br label %if.end

if.end:                                           ; preds = %if.then24, %if.then
  %33 = load %struct.ehci_hcd** %ehci.addr, align 8
  %34 = load %struct.ehci_qtd** %last, align 8
  call void @ehci_qtd_free(%struct.ehci_hcd* %33, %struct.ehci_qtd* %34) noredzone
  store %struct.ehci_qtd* null, %struct.ehci_qtd** %last, align 8
  br label %if.end26

if.end26:                                         ; preds = %if.end, %for.body
  %35 = load %struct.ehci_qtd** %qtd, align 8
  %36 = load %struct.ehci_qtd** %end, align 8
  %cmp27 = icmp eq %struct.ehci_qtd* %35, %36
  br i1 %cmp27, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end26
  br label %for.end

if.end30:                                         ; preds = %if.end26
  call void asm sideeffect "lfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !5
  %37 = load %struct.ehci_hcd** %ehci.addr, align 8
  %38 = load %struct.ehci_qtd** %qtd, align 8
  %hw_token = getelementptr inbounds %struct.ehci_qtd* %38, i32 0, i32 2
  %39 = load i32* %hw_token, align 4
  %call = call i32 @hc32_to_cpu(%struct.ehci_hcd* %37, i32 %39) noredzone
  store i32 %call, i32* %token, align 4
  br label %retry_xacterr

retry_xacterr:                                    ; preds = %if.then53, %if.end30
  %40 = load i32* %token, align 4
  %and = and i32 %40, 128
  %cmp31 = icmp eq i32 %and, 0
  br i1 %cmp31, label %if.then33, label %if.else76

if.then33:                                        ; preds = %retry_xacterr
  %41 = load i32* %token, align 4
  %and34 = and i32 %41, 32
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.then33
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %if.then33
  %42 = load i32* %token, align 4
  %and38 = and i32 %42, 64
  %cmp39 = icmp ne i32 %and38, 0
  br i1 %cmp39, label %if.then41, label %if.else

if.then41:                                        ; preds = %if.end37
  %43 = load i32* %token, align 4
  %and42 = and i32 %43, 8
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %if.then41
  %44 = load i32* %token, align 4
  %shr = lshr i32 %44, 10
  %and44 = and i32 %shr, 3
  %cmp45 = icmp eq i32 %and44, 0
  br i1 %cmp45, label %land.lhs.true47, label %if.end59

land.lhs.true47:                                  ; preds = %land.lhs.true
  %45 = load %struct.ehci_qh** %qh.addr, align 8
  %xacterrs = getelementptr inbounds %struct.ehci_qh* %45, i32 0, i32 10
  %46 = load i8* %xacterrs, align 1
  %inc = add i8 %46, 1
  store i8 %inc, i8* %xacterrs, align 1
  %conv48 = zext i8 %inc to i32
  %cmp49 = icmp slt i32 %conv48, 32
  br i1 %cmp49, label %land.lhs.true51, label %if.end59

land.lhs.true51:                                  ; preds = %land.lhs.true47
  %47 = load %struct.urb** %urb, align 8
  %unlinked = getelementptr inbounds %struct.urb* %47, i32 0, i32 4
  %48 = load i32* %unlinked, align 4
  %tobool52 = icmp ne i32 %48, 0
  br i1 %tobool52, label %if.end59, label %if.then53

if.then53:                                        ; preds = %land.lhs.true51
  %49 = load i32* %token, align 4
  %and54 = and i32 %49, -65
  store i32 %and54, i32* %token, align 4
  %50 = load i32* %token, align 4
  %or = or i32 %50, 3200
  store i32 %or, i32* %token, align 4
  %51 = load %struct.ehci_hcd** %ehci.addr, align 8
  %52 = load i32* %token, align 4
  %call55 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %51, i32 %52) noredzone
  %53 = load %struct.ehci_qtd** %qtd, align 8
  %hw_token56 = getelementptr inbounds %struct.ehci_qtd* %53, i32 0, i32 2
  store i32 %call55, i32* %hw_token56, align 4
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !6
  %54 = load %struct.ehci_hcd** %ehci.addr, align 8
  %55 = load i32* %token, align 4
  %call57 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %54, i32 %55) noredzone
  %56 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_token58 = getelementptr inbounds %struct.ehci_qh_hw* %56, i32 0, i32 6
  store i32 %call57, i32* %hw_token58, align 4
  br label %retry_xacterr

if.end59:                                         ; preds = %land.lhs.true51, %land.lhs.true47, %land.lhs.true, %if.then41
  store i32 1, i32* %stopped, align 4
  br label %if.end75

if.else:                                          ; preds = %if.end37
  %57 = load i32* %token, align 4
  %shr60 = lshr i32 %57, 16
  %and61 = and i32 %shr60, 32767
  %cmp62 = icmp ne i32 %and61, 0
  br i1 %cmp62, label %land.lhs.true64, label %if.end74

land.lhs.true64:                                  ; preds = %if.else
  %58 = load i32* %token, align 4
  %shr65 = lshr i32 %58, 8
  %and66 = and i32 %shr65, 3
  %cmp67 = icmp eq i32 %and66, 1
  br i1 %cmp67, label %land.lhs.true69, label %if.end74

land.lhs.true69:                                  ; preds = %land.lhs.true64
  %59 = load %struct.ehci_qtd** %qtd, align 8
  %hw_alt_next = getelementptr inbounds %struct.ehci_qtd* %59, i32 0, i32 1
  %60 = load i32* %hw_alt_next, align 4
  %61 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call70 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %61, i32 1) noredzone
  %and71 = and i32 %60, %call70
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.end74, label %if.then73

if.then73:                                        ; preds = %land.lhs.true69
  store i32 1, i32* %stopped, align 4
  br label %if.end74

if.end74:                                         ; preds = %if.then73, %land.lhs.true69, %land.lhs.true64, %if.else
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.end59
  br label %if.end124

if.else76:                                        ; preds = %retry_xacterr
  %62 = load i32* %stopped, align 4
  %tobool77 = icmp ne i32 %62, 0
  br i1 %tobool77, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.else76
  %63 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %63, i32 0, i32 12
  %64 = load i32* %rh_state, align 4
  %cmp78 = icmp uge i32 %64, 2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else76
  %65 = phi i1 [ false, %if.else76 ], [ %cmp78, %land.rhs ]
  %lnot80 = xor i1 %65, true
  %lnot82 = xor i1 %lnot80, true
  %lnot.ext83 = zext i1 %lnot82 to i32
  %conv84 = sext i32 %lnot.ext83 to i64
  %expval85 = call i64 @llvm.expect.i64(i64 %conv84, i64 1)
  %tobool86 = icmp ne i64 %expval85, 0
  br i1 %tobool86, label %if.then87, label %if.else88

if.then87:                                        ; preds = %land.end
  br label %for.end

if.else88:                                        ; preds = %land.end
  store i32 1, i32* %stopped, align 4
  %66 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state89 = getelementptr inbounds %struct.ehci_hcd* %66, i32 0, i32 12
  %67 = load i32* %rh_state89, align 4
  %cmp90 = icmp ult i32 %67, 2
  br i1 %cmp90, label %if.then92, label %if.else93

if.then92:                                        ; preds = %if.else88
  store i32 -108, i32* %last_status, align 4
  br label %if.end101

if.else93:                                        ; preds = %if.else88
  %68 = load i32* %last_status, align 4
  %cmp94 = icmp eq i32 %68, -115
  br i1 %cmp94, label %land.lhs.true96, label %if.end100

land.lhs.true96:                                  ; preds = %if.else93
  %69 = load %struct.urb** %urb, align 8
  %unlinked97 = getelementptr inbounds %struct.urb* %69, i32 0, i32 4
  %70 = load i32* %unlinked97, align 4
  %tobool98 = icmp ne i32 %70, 0
  br i1 %tobool98, label %if.end100, label %if.then99

if.then99:                                        ; preds = %land.lhs.true96
  br label %for.inc

if.end100:                                        ; preds = %land.lhs.true96, %if.else93
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.then92
  %71 = load i8* %state, align 1
  %conv102 = zext i8 %71 to i32
  %cmp103 = icmp eq i32 %conv102, 3
  br i1 %cmp103, label %land.lhs.true105, label %if.end122

land.lhs.true105:                                 ; preds = %if.end101
  %72 = load %struct.ehci_qh** %qh.addr, align 8
  %qtd_list106 = getelementptr inbounds %struct.ehci_qh* %72, i32 0, i32 3
  %next107 = getelementptr inbounds %struct.list_head* %qtd_list106, i32 0, i32 0
  %73 = load %struct.list_head** %next107, align 8
  %74 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list108 = getelementptr inbounds %struct.ehci_qtd* %74, i32 0, i32 6
  %cmp109 = icmp eq %struct.list_head* %73, %qtd_list108
  br i1 %cmp109, label %land.lhs.true111, label %if.end122

land.lhs.true111:                                 ; preds = %land.lhs.true105
  %75 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_token112 = getelementptr inbounds %struct.ehci_qh_hw* %75, i32 0, i32 6
  %76 = load i32* %hw_token112, align 4
  %77 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call113 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %77, i32 128) noredzone
  %and114 = and i32 %76, %call113
  %tobool115 = icmp ne i32 %and114, 0
  br i1 %tobool115, label %if.then116, label %if.end122

if.then116:                                       ; preds = %land.lhs.true111
  %78 = load %struct.ehci_hcd** %ehci.addr, align 8
  %79 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_token117 = getelementptr inbounds %struct.ehci_qh_hw* %79, i32 0, i32 6
  %80 = load i32* %hw_token117, align 4
  %call118 = call i32 @hc32_to_cpu(%struct.ehci_hcd* %78, i32 %80) noredzone
  store i32 %call118, i32* %token, align 4
  %81 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call119 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %81, i32 128) noredzone
  %neg = xor i32 %call119, -1
  %82 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_token120 = getelementptr inbounds %struct.ehci_qh_hw* %82, i32 0, i32 6
  %83 = load i32* %hw_token120, align 4
  %and121 = and i32 %83, %neg
  store i32 %and121, i32* %hw_token120, align 4
  %84 = load %struct.ehci_hcd** %ehci.addr, align 8
  %85 = load %struct.ehci_qh** %qh.addr, align 8
  %86 = load %struct.urb** %urb, align 8
  %87 = load i32* %token, align 4
  call void @ehci_clear_tt_buffer(%struct.ehci_hcd* %84, %struct.ehci_qh* %85, %struct.urb* %86, i32 %87) noredzone
  br label %if.end122

if.end122:                                        ; preds = %if.then116, %land.lhs.true111, %land.lhs.true105, %if.end101
  br label %if.end123

if.end123:                                        ; preds = %if.end122
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.end75
  %88 = load i32* %last_status, align 4
  %cmp125 = icmp eq i32 %88, -115
  br i1 %cmp125, label %if.then127, label %if.end157

if.then127:                                       ; preds = %if.end124
  %89 = load %struct.ehci_hcd** %ehci.addr, align 8
  %90 = load %struct.urb** %urb, align 8
  %91 = load %struct.ehci_qtd** %qtd, align 8
  %length = getelementptr inbounds %struct.ehci_qtd* %91, i32 0, i32 8
  %92 = load i64* %length, align 8
  %93 = load i32* %token, align 4
  %call128 = call i32 @qtd_copy_status(%struct.ehci_hcd* %89, %struct.urb* %90, i64 %92, i32 %93) noredzone
  store i32 %call128, i32* %last_status, align 4
  %94 = load i32* %last_status, align 4
  %cmp129 = icmp eq i32 %94, -121
  br i1 %cmp129, label %land.lhs.true131, label %if.end137

land.lhs.true131:                                 ; preds = %if.then127
  %95 = load %struct.ehci_qtd** %qtd, align 8
  %hw_alt_next132 = getelementptr inbounds %struct.ehci_qtd* %95, i32 0, i32 1
  %96 = load i32* %hw_alt_next132, align 4
  %97 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call133 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %97, i32 1) noredzone
  %and134 = and i32 %96, %call133
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %if.then136, label %if.end137

if.then136:                                       ; preds = %land.lhs.true131
  store i32 -115, i32* %last_status, align 4
  br label %if.end137

if.end137:                                        ; preds = %if.then136, %land.lhs.true131, %if.then127
  %98 = load i32* %last_status, align 4
  %cmp138 = icmp ne i32 %98, -115
  br i1 %cmp138, label %land.rhs140, label %land.end143

land.rhs140:                                      ; preds = %if.end137
  %99 = load i32* %last_status, align 4
  %cmp141 = icmp ne i32 %99, -121
  br label %land.end143

land.end143:                                      ; preds = %land.rhs140, %if.end137
  %100 = phi i1 [ false, %if.end137 ], [ %cmp141, %land.rhs140 ]
  %lnot144 = xor i1 %100, true
  %lnot146 = xor i1 %lnot144, true
  %lnot.ext147 = zext i1 %lnot146 to i32
  %conv148 = sext i32 %lnot.ext147 to i64
  %expval149 = call i64 @llvm.expect.i64(i64 %conv148, i64 0)
  %tobool150 = icmp ne i64 %expval149, 0
  br i1 %tobool150, label %if.then151, label %if.end156

if.then151:                                       ; preds = %land.end143
  %101 = load i32* %last_status, align 4
  %cmp152 = icmp ne i32 %101, -32
  br i1 %cmp152, label %if.then154, label %if.end155

if.then154:                                       ; preds = %if.then151
  %102 = load %struct.ehci_hcd** %ehci.addr, align 8
  %103 = load %struct.ehci_qh** %qh.addr, align 8
  %104 = load %struct.urb** %urb, align 8
  %105 = load i32* %token, align 4
  call void @ehci_clear_tt_buffer(%struct.ehci_hcd* %102, %struct.ehci_qh* %103, %struct.urb* %104, i32 %105) noredzone
  br label %if.end155

if.end155:                                        ; preds = %if.then154, %if.then151
  br label %if.end156

if.end156:                                        ; preds = %if.end155, %land.end143
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %if.end124
  %106 = load i32* %stopped, align 4
  %tobool158 = icmp ne i32 %106, 0
  br i1 %tobool158, label %land.lhs.true159, label %if.end171

land.lhs.true159:                                 ; preds = %if.end157
  %107 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list160 = getelementptr inbounds %struct.ehci_qtd* %107, i32 0, i32 6
  %prev = getelementptr inbounds %struct.list_head* %qtd_list160, i32 0, i32 1
  %108 = load %struct.list_head** %prev, align 8
  %109 = load %struct.ehci_qh** %qh.addr, align 8
  %qtd_list161 = getelementptr inbounds %struct.ehci_qh* %109, i32 0, i32 3
  %cmp162 = icmp ne %struct.list_head* %108, %qtd_list161
  br i1 %cmp162, label %if.then164, label %if.end171

if.then164:                                       ; preds = %land.lhs.true159
  %110 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list167 = getelementptr inbounds %struct.ehci_qtd* %110, i32 0, i32 6
  %prev168 = getelementptr inbounds %struct.list_head* %qtd_list167, i32 0, i32 1
  %111 = load %struct.list_head** %prev168, align 8
  store %struct.list_head* %111, %struct.list_head** %__mptr166, align 8
  %112 = load %struct.list_head** %__mptr166, align 8
  %113 = bitcast %struct.list_head* %112 to i8*
  %add.ptr169 = getelementptr i8* %113, i64 -64
  %114 = bitcast i8* %add.ptr169 to %struct.ehci_qtd*
  store %struct.ehci_qtd* %114, %struct.ehci_qtd** %last, align 8
  %115 = load %struct.ehci_qtd** %qtd, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qtd* %115, i32 0, i32 0
  %116 = load i32* %hw_next, align 4
  %117 = load %struct.ehci_qtd** %last, align 8
  %hw_next170 = getelementptr inbounds %struct.ehci_qtd* %117, i32 0, i32 0
  store i32 %116, i32* %hw_next170, align 4
  br label %if.end171

if.end171:                                        ; preds = %if.then164, %land.lhs.true159, %if.end157
  %118 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list172 = getelementptr inbounds %struct.ehci_qtd* %118, i32 0, i32 6
  call void @list_del(%struct.list_head* %qtd_list172) noredzone
  %119 = load %struct.ehci_qtd** %qtd, align 8
  store %struct.ehci_qtd* %119, %struct.ehci_qtd** %last, align 8
  %120 = load %struct.ehci_qh** %qh.addr, align 8
  %xacterrs173 = getelementptr inbounds %struct.ehci_qh* %120, i32 0, i32 10
  store i8 0, i8* %xacterrs173, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end171, %if.then99
  %121 = load %struct.list_head** %tmp, align 8
  store %struct.list_head* %121, %struct.list_head** %entry1, align 8
  %122 = load %struct.list_head** %entry1, align 8
  %next174 = getelementptr inbounds %struct.list_head* %122, i32 0, i32 0
  %123 = load %struct.list_head** %next174, align 8
  store %struct.list_head* %123, %struct.list_head** %tmp, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then87, %if.then29, %for.cond
  %124 = load %struct.ehci_qtd** %last, align 8
  %cmp175 = icmp ne %struct.ehci_qtd* %124, null
  %lnot177 = xor i1 %cmp175, true
  %lnot179 = xor i1 %lnot177, true
  %lnot.ext180 = zext i1 %lnot179 to i32
  %conv181 = sext i32 %lnot.ext180 to i64
  %expval182 = call i64 @llvm.expect.i64(i64 %conv181, i64 1)
  %tobool183 = icmp ne i64 %expval182, 0
  br i1 %tobool183, label %if.then184, label %if.end186

if.then184:                                       ; preds = %for.end
  %125 = load %struct.ehci_hcd** %ehci.addr, align 8
  %126 = load %struct.ehci_qtd** %last, align 8
  %urb185 = getelementptr inbounds %struct.ehci_qtd* %126, i32 0, i32 7
  %127 = load %struct.urb** %urb185, align 8
  %128 = load i32* %last_status, align 4
  call void @ehci_urb_done(%struct.ehci_hcd* %125, %struct.urb* %127, i32 %128) noredzone
  %129 = load %struct.ehci_hcd** %ehci.addr, align 8
  %130 = load %struct.ehci_qtd** %last, align 8
  call void @ehci_qtd_free(%struct.ehci_hcd* %129, %struct.ehci_qtd* %130) noredzone
  br label %if.end186

if.end186:                                        ; preds = %if.then184, %for.end
  %131 = load %struct.ehci_qh** %qh.addr, align 8
  %132 = bitcast %struct.ehci_qh* %131 to i8*
  %bf.field.offs187 = getelementptr i8* %132, i32 132
  %133 = bitcast i8* %bf.field.offs187 to i32*
  %134 = load i32* %133, align 4
  %135 = lshr i32 %134, 26
  %bf.clear = and i32 %135, 1
  %tobool188 = icmp ne i32 %bf.clear, 0
  %lnot189 = xor i1 %tobool188, true
  %lnot191 = xor i1 %lnot189, true
  %lnot.ext192 = zext i1 %lnot191 to i32
  %conv193 = sext i32 %lnot.ext192 to i64
  %expval194 = call i64 @llvm.expect.i64(i64 %conv193, i64 0)
  %tobool195 = icmp ne i64 %expval194, 0
  br i1 %tobool195, label %if.then196, label %if.end202

if.then196:                                       ; preds = %if.end186
  %136 = load i8* %state, align 1
  %conv197 = zext i8 %136 to i32
  %cmp198 = icmp eq i32 %conv197, 3
  br i1 %cmp198, label %if.then200, label %if.end201

if.then200:                                       ; preds = %if.then196
  br label %rescan

if.end201:                                        ; preds = %if.then196
  br label %if.end202

if.end202:                                        ; preds = %if.end201, %if.end186
  %137 = load i8* %state, align 1
  %138 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state203 = getelementptr inbounds %struct.ehci_qh* %138, i32 0, i32 9
  store i8 %137, i8* %qh_state203, align 1
  %139 = load i32* %stopped, align 4
  %cmp204 = icmp ne i32 %139, 0
  br i1 %cmp204, label %if.then209, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end202
  %140 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_qtd_next = getelementptr inbounds %struct.ehci_qh_hw* %140, i32 0, i32 4
  %141 = load i32* %hw_qtd_next, align 4
  %142 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call206 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %142, i32 1) noredzone
  %cmp207 = icmp eq i32 %141, %call206
  br i1 %cmp207, label %if.then209, label %if.end211

if.then209:                                       ; preds = %lor.lhs.false, %if.end202
  %143 = load %struct.ehci_qh** %qh.addr, align 8
  %144 = bitcast %struct.ehci_qh* %143 to i8*
  %bf.field.offs210 = getelementptr i8* %144, i32 132
  %145 = bitcast i8* %bf.field.offs210 to i32*
  %146 = load i32* %145, align 4
  %147 = and i32 %146, -134217729
  %148 = or i32 %147, 134217728
  store i32 %148, i32* %145, align 4
  br label %if.end211

if.end211:                                        ; preds = %if.then209, %lor.lhs.false
  %149 = load %struct.ehci_qh** %qh.addr, align 8
  %150 = bitcast %struct.ehci_qh* %149 to i8*
  %bf.field.offs212 = getelementptr i8* %150, i32 132
  %151 = bitcast i8* %bf.field.offs212 to i32*
  %152 = load i32* %151, align 4
  %153 = lshr i32 %152, 27
  %bf.clear213 = and i32 %153, 1
  ret i32 %bf.clear213
}

define internal i32 @qh_schedule(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %status = alloca i32, align 4
  %uframe = alloca i32, align 4
  %c_mask = alloca i32, align 4
  %hw = alloca %struct.ehci_qh_hw*, align 8
  %tt = alloca %struct.ehci_tt*, align 8
  %i = alloca i32, align 4
  %frame = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %hw1 = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 0
  %1 = load %struct.ehci_qh_hw** %hw1, align 8
  store %struct.ehci_qh_hw* %1, %struct.ehci_qh_hw** %hw, align 8
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %2, i32 1) noredzone
  %3 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qh_hw* %3, i32 0, i32 0
  store i32 %call, i32* %hw_next, align 4
  %4 = load %struct.ehci_qh** %qh.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_qh* %4, i32 0, i32 7
  %phase = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 6
  %5 = load i16* %phase, align 2
  %conv = zext i16 %5 to i32
  %cmp = icmp ne i32 %conv, 29999
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %uframe, align 4
  store i32 0, i32* %c_mask, align 4
  %6 = load %struct.ehci_qh** %qh.addr, align 8
  %ps3 = getelementptr inbounds %struct.ehci_qh* %6, i32 0, i32 7
  %udev = getelementptr inbounds %struct.ehci_per_sched* %ps3, i32 0, i32 0
  %7 = load %struct.usb_device** %udev, align 8
  %call4 = call %struct.ehci_tt* @find_tt(%struct.usb_device* %7) noredzone
  store %struct.ehci_tt* %call4, %struct.ehci_tt** %tt, align 8
  %8 = load %struct.ehci_tt** %tt, align 8
  %9 = bitcast %struct.ehci_tt* %8 to i8*
  %call5 = call zeroext i1 @IS_ERR(i8* %9) noredzone
  br i1 %call5, label %if.then6, label %if.end9

if.then6:                                         ; preds = %if.end
  %10 = load %struct.ehci_tt** %tt, align 8
  %11 = bitcast %struct.ehci_tt* %10 to i8*
  %call7 = call i64 @PTR_ERR(i8* %11) noredzone
  %conv8 = trunc i64 %call7 to i32
  store i32 %conv8, i32* %status, align 4
  br label %done

if.end9:                                          ; preds = %if.end
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %tt_budget = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 62
  %arraydecay = getelementptr inbounds [64 x i8]* %tt_budget, i32 0, i32 0
  %13 = load %struct.ehci_tt** %tt, align 8
  call void @compute_tt_budget(i8* %arraydecay, %struct.ehci_tt* %13) noredzone
  %14 = load %struct.ehci_qh** %qh.addr, align 8
  %ps10 = getelementptr inbounds %struct.ehci_qh* %14, i32 0, i32 7
  %bw_period = getelementptr inbounds %struct.ehci_per_sched* %ps10, i32 0, i32 12
  %15 = load i8* %bw_period, align 1
  %tobool = icmp ne i8 %15, 0
  br i1 %tobool, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end9
  %16 = load %struct.ehci_qh** %qh.addr, align 8
  %ps12 = getelementptr inbounds %struct.ehci_qh* %16, i32 0, i32 7
  %bw_period13 = getelementptr inbounds %struct.ehci_per_sched* %ps12, i32 0, i32 12
  %17 = load i8* %bw_period13, align 1
  %conv14 = zext i8 %17 to i32
  store i32 %conv14, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc30, %if.then11
  %18 = load i32* %i, align 4
  %cmp15 = icmp sgt i32 %18, 0
  br i1 %cmp15, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %random_frame = getelementptr inbounds %struct.ehci_hcd* %19, i32 0, i32 52
  %20 = load i32* %random_frame, align 4
  %inc = add i32 %20, 1
  store i32 %inc, i32* %random_frame, align 4
  %21 = load %struct.ehci_qh** %qh.addr, align 8
  %ps17 = getelementptr inbounds %struct.ehci_qh* %21, i32 0, i32 7
  %bw_period18 = getelementptr inbounds %struct.ehci_per_sched* %ps17, i32 0, i32 12
  %22 = load i8* %bw_period18, align 1
  %conv19 = zext i8 %22 to i32
  %sub = sub i32 %conv19, 1
  %and = and i32 %inc, %sub
  store i32 %and, i32* %frame, align 4
  store i32 0, i32* %uframe, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc, %for.body
  %23 = load i32* %uframe, align 4
  %cmp21 = icmp ult i32 %23, 8
  br i1 %cmp21, label %for.body23, label %for.end

for.body23:                                       ; preds = %for.cond20
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %25 = load i32* %frame, align 4
  %26 = load i32* %uframe, align 4
  %27 = load %struct.ehci_qh** %qh.addr, align 8
  %28 = load %struct.ehci_tt** %tt, align 8
  %call24 = call i32 @check_intr_schedule(%struct.ehci_hcd* %24, i32 %25, i32 %26, %struct.ehci_qh* %27, i32* %c_mask, %struct.ehci_tt* %28) noredzone
  store i32 %call24, i32* %status, align 4
  %29 = load i32* %status, align 4
  %cmp25 = icmp eq i32 %29, 0
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body23
  br label %got_it

if.end28:                                         ; preds = %for.body23
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %30 = load i32* %uframe, align 4
  %inc29 = add i32 %30, 1
  store i32 %inc29, i32* %uframe, align 4
  br label %for.cond20

for.end:                                          ; preds = %for.cond20
  br label %for.inc30

for.inc30:                                        ; preds = %for.end
  %31 = load i32* %i, align 4
  %dec = add i32 %31, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  br label %if.end33

if.else:                                          ; preds = %if.end9
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %33 = load %struct.ehci_qh** %qh.addr, align 8
  %34 = load %struct.ehci_tt** %tt, align 8
  %call32 = call i32 @check_intr_schedule(%struct.ehci_hcd* %32, i32 0, i32 0, %struct.ehci_qh* %33, i32* %c_mask, %struct.ehci_tt* %34) noredzone
  store i32 %call32, i32* %status, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else, %for.end31
  %35 = load i32* %status, align 4
  %tobool34 = icmp ne i32 %35, 0
  br i1 %tobool34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end33
  br label %done

if.end36:                                         ; preds = %if.end33
  br label %got_it

got_it:                                           ; preds = %if.end36, %if.then27
  %36 = load %struct.ehci_qh** %qh.addr, align 8
  %ps37 = getelementptr inbounds %struct.ehci_qh* %36, i32 0, i32 7
  %period = getelementptr inbounds %struct.ehci_per_sched* %ps37, i32 0, i32 5
  %37 = load i16* %period, align 2
  %conv38 = zext i16 %37 to i32
  %tobool39 = icmp ne i32 %conv38, 0
  br i1 %tobool39, label %cond.true, label %cond.false

cond.true:                                        ; preds = %got_it
  %38 = load %struct.ehci_hcd** %ehci.addr, align 8
  %random_frame40 = getelementptr inbounds %struct.ehci_hcd* %38, i32 0, i32 52
  %39 = load i32* %random_frame40, align 4
  %40 = load %struct.ehci_qh** %qh.addr, align 8
  %ps41 = getelementptr inbounds %struct.ehci_qh* %40, i32 0, i32 7
  %period42 = getelementptr inbounds %struct.ehci_per_sched* %ps41, i32 0, i32 5
  %41 = load i16* %period42, align 2
  %conv43 = zext i16 %41 to i32
  %sub44 = sub i32 %conv43, 1
  %and45 = and i32 %39, %sub44
  br label %cond.end

cond.false:                                       ; preds = %got_it
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and45, %cond.true ], [ 0, %cond.false ]
  %conv46 = trunc i32 %cond to i16
  %42 = load %struct.ehci_qh** %qh.addr, align 8
  %ps47 = getelementptr inbounds %struct.ehci_qh* %42, i32 0, i32 7
  %phase48 = getelementptr inbounds %struct.ehci_per_sched* %ps47, i32 0, i32 6
  store i16 %conv46, i16* %phase48, align 2
  %43 = load %struct.ehci_qh** %qh.addr, align 8
  %ps49 = getelementptr inbounds %struct.ehci_qh* %43, i32 0, i32 7
  %phase50 = getelementptr inbounds %struct.ehci_per_sched* %ps49, i32 0, i32 6
  %44 = load i16* %phase50, align 2
  %conv51 = zext i16 %44 to i32
  %45 = load %struct.ehci_qh** %qh.addr, align 8
  %ps52 = getelementptr inbounds %struct.ehci_qh* %45, i32 0, i32 7
  %bw_period53 = getelementptr inbounds %struct.ehci_per_sched* %ps52, i32 0, i32 12
  %46 = load i8* %bw_period53, align 1
  %conv54 = zext i8 %46 to i32
  %sub55 = sub i32 %conv54, 1
  %and56 = and i32 %conv51, %sub55
  %conv57 = trunc i32 %and56 to i8
  %47 = load %struct.ehci_qh** %qh.addr, align 8
  %ps58 = getelementptr inbounds %struct.ehci_qh* %47, i32 0, i32 7
  %bw_phase = getelementptr inbounds %struct.ehci_per_sched* %ps58, i32 0, i32 7
  store i8 %conv57, i8* %bw_phase, align 1
  %48 = load i32* %uframe, align 4
  %conv59 = trunc i32 %48 to i8
  %49 = load %struct.ehci_qh** %qh.addr, align 8
  %ps60 = getelementptr inbounds %struct.ehci_qh* %49, i32 0, i32 7
  %phase_uf = getelementptr inbounds %struct.ehci_per_sched* %ps60, i32 0, i32 8
  store i8 %conv59, i8* %phase_uf, align 1
  %50 = load %struct.ehci_qh** %qh.addr, align 8
  %ps61 = getelementptr inbounds %struct.ehci_qh* %50, i32 0, i32 7
  %period62 = getelementptr inbounds %struct.ehci_per_sched* %ps61, i32 0, i32 5
  %51 = load i16* %period62, align 2
  %conv63 = zext i16 %51 to i32
  %tobool64 = icmp ne i32 %conv63, 0
  br i1 %tobool64, label %cond.true65, label %cond.false67

cond.true65:                                      ; preds = %cond.end
  %52 = load i32* %c_mask, align 4
  %shl = shl i32 %52, 8
  %53 = load i32* %uframe, align 4
  %shl66 = shl i32 1, %53
  %or = or i32 %shl, %shl66
  br label %cond.end68

cond.false67:                                     ; preds = %cond.end
  br label %cond.end68

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi i32 [ %or, %cond.true65 ], [ 255, %cond.false67 ]
  %conv70 = trunc i32 %cond69 to i16
  %54 = load %struct.ehci_qh** %qh.addr, align 8
  %ps71 = getelementptr inbounds %struct.ehci_qh* %54, i32 0, i32 7
  %cs_mask = getelementptr inbounds %struct.ehci_per_sched* %ps71, i32 0, i32 4
  store i16 %conv70, i16* %cs_mask, align 2
  %55 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call72 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %55, i32 -65536) noredzone
  %56 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_info2 = getelementptr inbounds %struct.ehci_qh_hw* %56, i32 0, i32 2
  %57 = load i32* %hw_info2, align 4
  %and73 = and i32 %57, %call72
  store i32 %and73, i32* %hw_info2, align 4
  %58 = load %struct.ehci_hcd** %ehci.addr, align 8
  %59 = load %struct.ehci_qh** %qh.addr, align 8
  %ps74 = getelementptr inbounds %struct.ehci_qh* %59, i32 0, i32 7
  %cs_mask75 = getelementptr inbounds %struct.ehci_per_sched* %ps74, i32 0, i32 4
  %60 = load i16* %cs_mask75, align 2
  %conv76 = zext i16 %60 to i32
  %call77 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %58, i32 %conv76) noredzone
  %61 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_info278 = getelementptr inbounds %struct.ehci_qh_hw* %61, i32 0, i32 2
  %62 = load i32* %hw_info278, align 4
  %or79 = or i32 %62, %call77
  store i32 %or79, i32* %hw_info278, align 4
  %63 = load %struct.ehci_hcd** %ehci.addr, align 8
  %64 = load %struct.ehci_qh** %qh.addr, align 8
  call void @reserve_release_intr_bandwidth(%struct.ehci_hcd* %63, %struct.ehci_qh* %64, i32 1) noredzone
  br label %done

done:                                             ; preds = %cond.end68, %if.then35, %if.then6
  %65 = load i32* %status, align 4
  store i32 %65, i32* %retval
  br label %return

return:                                           ; preds = %done, %if.then
  %66 = load i32* %retval
  ret i32 %66
}

define internal void @qh_link_periodic(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %i = alloca i32, align 4
  %period = alloca i32, align 4
  %prev = alloca %union.ehci_shadow*, align 8
  %hw_p = alloca i32*, align 8
  %here = alloca %union.ehci_shadow, align 8
  %type = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 7
  %period1 = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 5
  %1 = load i16* %period1, align 2
  %conv = zext i16 %1 to i32
  store i32 %conv, i32* %period, align 4
  %2 = load i32* %period, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %period, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.ehci_qh** %qh.addr, align 8
  %ps3 = getelementptr inbounds %struct.ehci_qh* %3, i32 0, i32 7
  %phase = getelementptr inbounds %struct.ehci_per_sched* %ps3, i32 0, i32 6
  %4 = load i16* %phase, align 2
  %conv4 = zext i16 %4 to i32
  store i32 %conv4, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32* %i, align 4
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 21
  %7 = load i32* %periodic_size, align 4
  %cmp5 = icmp ult i32 %5, %7
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32* %i, align 4
  %idxprom = zext i32 %8 to i64
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 26
  %10 = load %union.ehci_shadow** %pshadow, align 8
  %arrayidx = getelementptr %union.ehci_shadow* %10, i64 %idxprom
  store %union.ehci_shadow* %arrayidx, %union.ehci_shadow** %prev, align 8
  %11 = load i32* %i, align 4
  %idxprom7 = zext i32 %11 to i64
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 22
  %13 = load i32** %periodic, align 8
  %arrayidx8 = getelementptr i32* %13, i64 %idxprom7
  store i32* %arrayidx8, i32** %hw_p, align 8
  %14 = load %union.ehci_shadow** %prev, align 8
  %15 = bitcast %union.ehci_shadow* %here to i8*
  %16 = bitcast %union.ehci_shadow* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 8, i32 8, i1 false)
  store i32 0, i32* %type, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %for.body
  %ptr = bitcast %union.ehci_shadow* %here to i8**
  %17 = load i8** %ptr, align 8
  %tobool = icmp ne i8* %17, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i32** %hw_p, align 8
  %19 = load i32* %18, align 4
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %20, i32 6) noredzone
  %and = and i32 %19, %call
  store i32 %and, i32* %type, align 4
  %21 = load i32* %type, align 4
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call9 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %22, i32 2) noredzone
  %cmp10 = icmp eq i32 %21, %call9
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %while.body
  br label %while.end

if.end13:                                         ; preds = %while.body
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %24 = load %union.ehci_shadow** %prev, align 8
  %25 = load i32* %type, align 4
  %call14 = call %union.ehci_shadow* @periodic_next_shadow(%struct.ehci_hcd* %23, %union.ehci_shadow* %24, i32 %25) noredzone
  store %union.ehci_shadow* %call14, %union.ehci_shadow** %prev, align 8
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %27 = load i32* %type, align 4
  %call15 = call i32* @shadow_next_periodic(%struct.ehci_hcd* %26, %union.ehci_shadow* %here, i32 %27) noredzone
  store i32* %call15, i32** %hw_p, align 8
  %28 = load %union.ehci_shadow** %prev, align 8
  %29 = bitcast %union.ehci_shadow* %here to i8*
  %30 = bitcast %union.ehci_shadow* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 8, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %if.then12, %while.cond
  br label %while.cond16

while.cond16:                                     ; preds = %if.end33, %while.end
  %ptr17 = bitcast %union.ehci_shadow* %here to i8**
  %31 = load i8** %ptr17, align 8
  %tobool18 = icmp ne i8* %31, null
  br i1 %tobool18, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond16
  %32 = load %struct.ehci_qh** %qh.addr, align 8
  %qh19 = bitcast %union.ehci_shadow* %here to %struct.ehci_qh**
  %33 = load %struct.ehci_qh** %qh19, align 8
  %cmp20 = icmp ne %struct.ehci_qh* %32, %33
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond16
  %34 = phi i1 [ false, %while.cond16 ], [ %cmp20, %land.rhs ]
  br i1 %34, label %while.body22, label %while.end36

while.body22:                                     ; preds = %land.end
  %35 = load %struct.ehci_qh** %qh.addr, align 8
  %ps23 = getelementptr inbounds %struct.ehci_qh* %35, i32 0, i32 7
  %period24 = getelementptr inbounds %struct.ehci_per_sched* %ps23, i32 0, i32 5
  %36 = load i16* %period24, align 2
  %conv25 = zext i16 %36 to i32
  %qh26 = bitcast %union.ehci_shadow* %here to %struct.ehci_qh**
  %37 = load %struct.ehci_qh** %qh26, align 8
  %ps27 = getelementptr inbounds %struct.ehci_qh* %37, i32 0, i32 7
  %period28 = getelementptr inbounds %struct.ehci_per_sched* %ps27, i32 0, i32 5
  %38 = load i16* %period28, align 2
  %conv29 = zext i16 %38 to i32
  %cmp30 = icmp sgt i32 %conv25, %conv29
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %while.body22
  br label %while.end36

if.end33:                                         ; preds = %while.body22
  %qh34 = bitcast %union.ehci_shadow* %here to %struct.ehci_qh**
  %39 = load %struct.ehci_qh** %qh34, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %39, i32 0, i32 2
  store %union.ehci_shadow* %qh_next, %union.ehci_shadow** %prev, align 8
  %qh35 = bitcast %union.ehci_shadow* %here to %struct.ehci_qh**
  %40 = load %struct.ehci_qh** %qh35, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %40, i32 0, i32 0
  %41 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qh_hw* %41, i32 0, i32 0
  store i32* %hw_next, i32** %hw_p, align 8
  %42 = load %union.ehci_shadow** %prev, align 8
  %43 = bitcast %union.ehci_shadow* %here to i8*
  %44 = bitcast %union.ehci_shadow* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 8, i32 8, i1 false)
  br label %while.cond16

while.end36:                                      ; preds = %if.then32, %land.end
  %45 = load %struct.ehci_qh** %qh.addr, align 8
  %qh37 = bitcast %union.ehci_shadow* %here to %struct.ehci_qh**
  %46 = load %struct.ehci_qh** %qh37, align 8
  %cmp38 = icmp ne %struct.ehci_qh* %45, %46
  br i1 %cmp38, label %if.then40, label %if.end52

if.then40:                                        ; preds = %while.end36
  %47 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_next41 = getelementptr inbounds %struct.ehci_qh* %47, i32 0, i32 2
  %48 = bitcast %union.ehci_shadow* %qh_next41 to i8*
  %49 = bitcast %union.ehci_shadow* %here to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 8, i32 8, i1 false)
  %qh42 = bitcast %union.ehci_shadow* %here to %struct.ehci_qh**
  %50 = load %struct.ehci_qh** %qh42, align 8
  %tobool43 = icmp ne %struct.ehci_qh* %50, null
  br i1 %tobool43, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.then40
  %51 = load i32** %hw_p, align 8
  %52 = load i32* %51, align 4
  %53 = load %struct.ehci_qh** %qh.addr, align 8
  %hw45 = getelementptr inbounds %struct.ehci_qh* %53, i32 0, i32 0
  %54 = load %struct.ehci_qh_hw** %hw45, align 8
  %hw_next46 = getelementptr inbounds %struct.ehci_qh_hw* %54, i32 0, i32 0
  store i32 %52, i32* %hw_next46, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.then40
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !7
  %55 = load %struct.ehci_qh** %qh.addr, align 8
  %56 = load %union.ehci_shadow** %prev, align 8
  %qh48 = bitcast %union.ehci_shadow* %56 to %struct.ehci_qh**
  store %struct.ehci_qh* %55, %struct.ehci_qh** %qh48, align 8
  %57 = load %struct.ehci_hcd** %ehci.addr, align 8
  %58 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %58, i32 0, i32 1
  %59 = load i64* %qh_dma, align 8
  %conv49 = trunc i64 %59 to i32
  %and50 = and i32 %conv49, -32
  %or = or i32 %and50, 2
  %call51 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %57, i32 %or) noredzone
  %60 = load i32** %hw_p, align 8
  store i32 %call51, i32* %60, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.end47, %while.end36
  br label %for.inc

for.inc:                                          ; preds = %if.end52
  %61 = load i32* %period, align 4
  %62 = load i32* %i, align 4
  %add = add i32 %62, %61
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %63 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %63, i32 0, i32 9
  store i8 1, i8* %qh_state, align 1
  %64 = load %struct.ehci_qh** %qh.addr, align 8
  %xacterrs = getelementptr inbounds %struct.ehci_qh* %64, i32 0, i32 10
  store i8 0, i8* %xacterrs, align 1
  %65 = load %struct.ehci_qh** %qh.addr, align 8
  %66 = bitcast %struct.ehci_qh* %65 to i8*
  %bf.field.offs = getelementptr i8* %66, i32 132
  %67 = bitcast i8* %bf.field.offs to i32*
  %68 = load i32* %67, align 4
  %69 = and i32 %68, -134217729
  store i32 %69, i32* %67, align 4
  %70 = load %struct.ehci_qh** %qh.addr, align 8
  %ps53 = getelementptr inbounds %struct.ehci_qh* %70, i32 0, i32 7
  %bw_period = getelementptr inbounds %struct.ehci_per_sched* %ps53, i32 0, i32 12
  %71 = load i8* %bw_period, align 1
  %conv54 = zext i8 %71 to i32
  %tobool55 = icmp ne i32 %conv54, 0
  br i1 %tobool55, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %72 = load %struct.ehci_qh** %qh.addr, align 8
  %ps56 = getelementptr inbounds %struct.ehci_qh* %72, i32 0, i32 7
  %usecs = getelementptr inbounds %struct.ehci_per_sched* %ps56, i32 0, i32 9
  %73 = load i8* %usecs, align 1
  %conv57 = zext i8 %73 to i32
  %74 = load %struct.ehci_qh** %qh.addr, align 8
  %ps58 = getelementptr inbounds %struct.ehci_qh* %74, i32 0, i32 7
  %c_usecs = getelementptr inbounds %struct.ehci_per_sched* %ps58, i32 0, i32 10
  %75 = load i8* %c_usecs, align 1
  %conv59 = zext i8 %75 to i32
  %add60 = add i32 %conv57, %conv59
  %76 = load %struct.ehci_qh** %qh.addr, align 8
  %ps61 = getelementptr inbounds %struct.ehci_qh* %76, i32 0, i32 7
  %bw_period62 = getelementptr inbounds %struct.ehci_per_sched* %ps61, i32 0, i32 12
  %77 = load i8* %bw_period62, align 1
  %conv63 = zext i8 %77 to i32
  %div = sdiv i32 %add60, %conv63
  br label %cond.end

cond.false:                                       ; preds = %for.end
  %78 = load %struct.ehci_qh** %qh.addr, align 8
  %ps64 = getelementptr inbounds %struct.ehci_qh* %78, i32 0, i32 7
  %usecs65 = getelementptr inbounds %struct.ehci_per_sched* %ps64, i32 0, i32 9
  %79 = load i8* %usecs65, align 1
  %conv66 = zext i8 %79 to i32
  %mul = mul i32 %conv66, 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %mul, %cond.false ]
  %80 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call67 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %80) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call67, i32 0, i32 0
  %bandwidth_allocated = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 14
  %81 = load i32* %bandwidth_allocated, align 4
  %add68 = add i32 %81, %cond
  store i32 %add68, i32* %bandwidth_allocated, align 4
  %82 = load %struct.ehci_qh** %qh.addr, align 8
  %intr_node = getelementptr inbounds %struct.ehci_qh* %82, i32 0, i32 4
  %83 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_qh_list = getelementptr inbounds %struct.ehci_hcd* %83, i32 0, i32 24
  call void @list_add(%struct.list_head* %intr_node, %struct.list_head* %intr_qh_list) noredzone
  %84 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_count = getelementptr inbounds %struct.ehci_hcd* %84, i32 0, i32 33
  %85 = load i32* %intr_count, align 4
  %inc = add i32 %85, 1
  store i32 %inc, i32* %intr_count, align 4
  %86 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @enable_periodic(%struct.ehci_hcd* %86) noredzone
  ret void
}

define internal void @disable_periodic(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_count = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 35
  %1 = load i32* %periodic_count, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %periodic_count, align 4
  %tobool = icmp ne i32 %dec, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_poll_PSS(%struct.ehci_hcd* %2) noredzone
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

define internal void @ehci_poll_PSS(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %actual = alloca i32, align 4
  %want = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 12
  %1 = load i32* %rh_state, align 4
  %cmp = icmp ne i32 %1, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end18

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 55
  %3 = load i32* %command, align 4
  %and = and i32 %3, 16
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 16384, i32 0
  store i32 %cond, i32* %want, align 4
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 8
  %6 = load %struct.ehci_regs** %regs, align 8
  %status = getelementptr inbounds %struct.ehci_regs* %6, i32 0, i32 1
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %4, i32* %status) noredzone
  %and1 = and i32 %call, 16384
  store i32 %and1, i32* %actual, align 4
  %7 = load i32* %want, align 4
  %8 = load i32* %actual, align 4
  %cmp2 = icmp ne i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end7

if.then3:                                         ; preds = %if.end
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %PSS_poll_count = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 4
  %10 = load i32* %PSS_poll_count, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %PSS_poll_count, align 4
  %cmp4 = icmp slt i32 %10, 2
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %11, i32 1, i1 zeroext true) noredzone
  br label %if.end18

if.end6:                                          ; preds = %if.then3
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.end
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %PSS_poll_count8 = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 4
  store i32 0, i32* %PSS_poll_count8, align 4
  %13 = load i32* %want, align 4
  %cmp9 = icmp eq i32 %13, 0
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.end7
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_count = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 35
  %15 = load i32* %periodic_count, align 4
  %cmp11 = icmp ugt i32 %15, 0
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then10
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_set_command_bit(%struct.ehci_hcd* %16, i32 16) noredzone
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.then10
  br label %if.end18

if.else:                                          ; preds = %if.end7
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_count14 = getelementptr inbounds %struct.ehci_hcd* %17, i32 0, i32 35
  %18 = load i32* %periodic_count14, align 4
  %cmp15 = icmp eq i32 %18, 0
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.else
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %19, i32 8, i1 zeroext true) noredzone
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.then, %if.then5, %if.end17, %if.end13
  ret void
}

define internal %union.ehci_shadow* @periodic_next_shadow(%struct.ehci_hcd* %ehci, %union.ehci_shadow* %periodic, i32 %tag) nounwind noredzone {
entry:
  %retval = alloca %union.ehci_shadow*, align 8
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %periodic.addr = alloca %union.ehci_shadow*, align 8
  %tag.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %union.ehci_shadow* %periodic, %union.ehci_shadow** %periodic.addr, align 8
  store i32 %tag, i32* %tag.addr, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load i32* %tag.addr, align 4
  %call = call i32 @hc32_to_cpu(%struct.ehci_hcd* %0, i32 %1) noredzone
  switch i32 %call, label %sw.default [
    i32 2, label %sw.bb
    i32 6, label %sw.bb1
    i32 0, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %union.ehci_shadow** %periodic.addr, align 8
  %qh = bitcast %union.ehci_shadow* %2 to %struct.ehci_qh**
  %3 = load %struct.ehci_qh** %qh, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %3, i32 0, i32 2
  store %union.ehci_shadow* %qh_next, %union.ehci_shadow** %retval
  br label %return

sw.bb1:                                           ; preds = %entry
  %4 = load %union.ehci_shadow** %periodic.addr, align 8
  %fstn = bitcast %union.ehci_shadow* %4 to %struct.ehci_fstn**
  %5 = load %struct.ehci_fstn** %fstn, align 8
  %fstn_next = getelementptr inbounds %struct.ehci_fstn* %5, i32 0, i32 3
  store %union.ehci_shadow* %fstn_next, %union.ehci_shadow** %retval
  br label %return

sw.bb2:                                           ; preds = %entry
  %6 = load %union.ehci_shadow** %periodic.addr, align 8
  %itd = bitcast %union.ehci_shadow* %6 to %struct.ehci_itd**
  %7 = load %struct.ehci_itd** %itd, align 8
  %itd_next = getelementptr inbounds %struct.ehci_itd* %7, i32 0, i32 5
  store %union.ehci_shadow* %itd_next, %union.ehci_shadow** %retval
  br label %return

sw.default:                                       ; preds = %entry
  %8 = load %union.ehci_shadow** %periodic.addr, align 8
  %sitd = bitcast %union.ehci_shadow* %8 to %struct.ehci_sitd**
  %9 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_next = getelementptr inbounds %struct.ehci_sitd* %9, i32 0, i32 8
  store %union.ehci_shadow* %sitd_next, %union.ehci_shadow** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb2, %sw.bb1, %sw.bb
  %10 = load %union.ehci_shadow** %retval
  ret %union.ehci_shadow* %10
}

define internal i32* @shadow_next_periodic(%struct.ehci_hcd* %ehci, %union.ehci_shadow* %periodic, i32 %tag) nounwind noredzone {
entry:
  %retval = alloca i32*, align 8
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %periodic.addr = alloca %union.ehci_shadow*, align 8
  %tag.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %union.ehci_shadow* %periodic, %union.ehci_shadow** %periodic.addr, align 8
  store i32 %tag, i32* %tag.addr, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load i32* %tag.addr, align 4
  %call = call i32 @hc32_to_cpu(%struct.ehci_hcd* %0, i32 %1) noredzone
  switch i32 %call, label %sw.default [
    i32 2, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %union.ehci_shadow** %periodic.addr, align 8
  %qh = bitcast %union.ehci_shadow* %2 to %struct.ehci_qh**
  %3 = load %struct.ehci_qh** %qh, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %3, i32 0, i32 0
  %4 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qh_hw* %4, i32 0, i32 0
  store i32* %hw_next, i32** %retval
  br label %return

sw.default:                                       ; preds = %entry
  %5 = load %union.ehci_shadow** %periodic.addr, align 8
  %hw_next1 = bitcast %union.ehci_shadow* %5 to i32**
  %6 = load i32** %hw_next1, align 8
  store i32* %6, i32** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %7 = load i32** %retval
  ret i32* %7
}

define internal void @list_add(%struct.list_head* %new, %struct.list_head* %head) nounwind inlinehint noredzone {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head** %new.addr, align 8
  %1 = load %struct.list_head** %head.addr, align 8
  %2 = load %struct.list_head** %head.addr, align 8
  %next = getelementptr inbounds %struct.list_head* %2, i32 0, i32 0
  %3 = load %struct.list_head** %next, align 8
  call void @__list_add(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %3) noredzone
  ret void
}

define internal void @enable_periodic(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_count = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 35
  %1 = load i32* %periodic_count, align 4
  %inc = add i32 %1, 1
  store i32 %inc, i32* %periodic_count, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 1
  %3 = load i32* %enabled_hrtimer_events, align 4
  %conv = zext i32 %3 to i64
  %and = and i64 %conv, -257
  %conv1 = trunc i64 %and to i32
  store i32 %conv1, i32* %enabled_hrtimer_events, align 4
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_poll_PSS(%struct.ehci_hcd* %4) noredzone
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @turn_on_io_watchdog(%struct.ehci_hcd* %5) noredzone
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

define internal void @__list_add(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) nounwind inlinehint noredzone {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  %0 = load %struct.list_head** %new.addr, align 8
  %1 = load %struct.list_head** %next.addr, align 8
  %prev1 = getelementptr inbounds %struct.list_head* %1, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %prev1, align 8
  %2 = load %struct.list_head** %next.addr, align 8
  %3 = load %struct.list_head** %new.addr, align 8
  %next2 = getelementptr inbounds %struct.list_head* %3, i32 0, i32 0
  store %struct.list_head* %2, %struct.list_head** %next2, align 8
  %4 = load %struct.list_head** %prev.addr, align 8
  %5 = load %struct.list_head** %new.addr, align 8
  %prev3 = getelementptr inbounds %struct.list_head* %5, i32 0, i32 1
  store %struct.list_head* %4, %struct.list_head** %prev3, align 8
  %6 = load %struct.list_head** %new.addr, align 8
  %7 = load %struct.list_head** %prev.addr, align 8
  %next4 = getelementptr inbounds %struct.list_head* %7, i32 0, i32 0
  store %struct.list_head* %6, %struct.list_head** %next4, align 8
  ret void
}

define internal i32 @hc32_to_cpu(%struct.ehci_hcd* %ehci, i32 %x) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %x.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32* %x.addr, align 4
  ret i32 %0
}

define internal %struct.ehci_tt* @find_tt(%struct.usb_device* %udev) nounwind noredzone {
entry:
  %retval = alloca %struct.ehci_tt*, align 8
  %udev.addr = alloca %struct.usb_device*, align 8
  %utt = alloca %struct.usb_tt*, align 8
  %tt1 = alloca %struct.ehci_tt*, align 8
  %tt_index = alloca %struct.ehci_tt**, align 8
  %ptt = alloca %struct.ehci_tt**, align 8
  %port = alloca i32, align 4
  %allocated_index = alloca i8, align 1
  %ehci = alloca %struct.ehci_hcd*, align 8
  store %struct.usb_device* %udev, %struct.usb_device** %udev.addr, align 8
  %0 = load %struct.usb_device** %udev.addr, align 8
  %tt = getelementptr inbounds %struct.usb_device* %0, i32 0, i32 5
  %1 = load %struct.usb_tt** %tt, align 8
  store %struct.usb_tt* %1, %struct.usb_tt** %utt, align 8
  store i8 0, i8* %allocated_index, align 1
  %2 = load %struct.usb_tt** %utt, align 8
  %tobool = icmp ne %struct.usb_tt* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.ehci_tt* null, %struct.ehci_tt** %retval
  br label %return

if.end:                                           ; preds = %entry
  store %struct.ehci_tt** null, %struct.ehci_tt*** %tt_index, align 8
  %3 = load %struct.usb_tt** %utt, align 8
  %multi = getelementptr inbounds %struct.usb_tt* %3, i32 0, i32 1
  %4 = load i32* %multi, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load %struct.usb_tt** %utt, align 8
  %hcpriv = getelementptr inbounds %struct.usb_tt* %5, i32 0, i32 3
  %6 = load i8** %hcpriv, align 8
  %7 = bitcast i8* %6 to %struct.ehci_tt**
  store %struct.ehci_tt** %7, %struct.ehci_tt*** %tt_index, align 8
  %8 = load %struct.ehci_tt*** %tt_index, align 8
  %tobool4 = icmp ne %struct.ehci_tt** %8, null
  br i1 %tobool4, label %if.end11, label %if.then5

if.then5:                                         ; preds = %if.then3
  %9 = load %struct.usb_tt** %utt, align 8
  %hub = getelementptr inbounds %struct.usb_tt* %9, i32 0, i32 0
  %10 = load %struct.usb_device** %hub, align 8
  %maxchild = getelementptr inbounds %struct.usb_device* %10, i32 0, i32 29
  %11 = load i32* %maxchild, align 4
  %conv = sext i32 %11 to i64
  %mul = mul i64 %conv, 8
  %call = call i8* @kzalloc(i64 %mul, i32 32) noredzone
  %12 = bitcast i8* %call to %struct.ehci_tt**
  store %struct.ehci_tt** %12, %struct.ehci_tt*** %tt_index, align 8
  %13 = load %struct.ehci_tt*** %tt_index, align 8
  %tobool6 = icmp ne %struct.ehci_tt** %13, null
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %if.then5
  %call8 = call i8* @ERR_PTR(i64 -12) noredzone
  %14 = bitcast i8* %call8 to %struct.ehci_tt*
  store %struct.ehci_tt* %14, %struct.ehci_tt** %retval
  br label %return

if.end9:                                          ; preds = %if.then5
  %15 = load %struct.ehci_tt*** %tt_index, align 8
  %16 = bitcast %struct.ehci_tt** %15 to i8*
  %17 = load %struct.usb_tt** %utt, align 8
  %hcpriv10 = getelementptr inbounds %struct.usb_tt* %17, i32 0, i32 3
  store i8* %16, i8** %hcpriv10, align 8
  store i8 1, i8* %allocated_index, align 1
  br label %if.end11

if.end11:                                         ; preds = %if.end9, %if.then3
  %18 = load %struct.usb_device** %udev.addr, align 8
  %ttport = getelementptr inbounds %struct.usb_device* %18, i32 0, i32 6
  %19 = load i32* %ttport, align 4
  %sub = sub i32 %19, 1
  store i32 %sub, i32* %port, align 4
  %20 = load i32* %port, align 4
  %idxprom = zext i32 %20 to i64
  %21 = load %struct.ehci_tt*** %tt_index, align 8
  %arrayidx = getelementptr %struct.ehci_tt** %21, i64 %idxprom
  store %struct.ehci_tt** %arrayidx, %struct.ehci_tt*** %ptt, align 8
  br label %if.end13

if.else:                                          ; preds = %if.end
  store i32 0, i32* %port, align 4
  %22 = load %struct.usb_tt** %utt, align 8
  %hcpriv12 = getelementptr inbounds %struct.usb_tt* %22, i32 0, i32 3
  %23 = bitcast i8** %hcpriv12 to %struct.ehci_tt**
  store %struct.ehci_tt** %23, %struct.ehci_tt*** %ptt, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.end11
  %24 = load %struct.ehci_tt*** %ptt, align 8
  %25 = load %struct.ehci_tt** %24, align 8
  store %struct.ehci_tt* %25, %struct.ehci_tt** %tt1, align 8
  %26 = load %struct.ehci_tt** %tt1, align 8
  %tobool14 = icmp ne %struct.ehci_tt* %26, null
  br i1 %tobool14, label %if.end28, label %if.then15

if.then15:                                        ; preds = %if.end13
  %27 = load %struct.usb_device** %udev.addr, align 8
  %bus = getelementptr inbounds %struct.usb_device* %27, i32 0, i32 9
  %28 = load %struct.usb_bus** %bus, align 8
  %call16 = call %struct.usb_hcd* @bus_to_hcd(%struct.usb_bus* %28) noredzone
  %call17 = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %call16) noredzone
  store %struct.ehci_hcd* %call17, %struct.ehci_hcd** %ehci, align 8
  %call18 = call i8* @kzalloc(i64 64, i32 32) noredzone
  %29 = bitcast i8* %call18 to %struct.ehci_tt*
  store %struct.ehci_tt* %29, %struct.ehci_tt** %tt1, align 8
  %30 = load %struct.ehci_tt** %tt1, align 8
  %tobool19 = icmp ne %struct.ehci_tt* %30, null
  br i1 %tobool19, label %if.end26, label %if.then20

if.then20:                                        ; preds = %if.then15
  %31 = load i8* %allocated_index, align 1
  %tobool21 = trunc i8 %31 to i1
  br i1 %tobool21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.then20
  %32 = load %struct.usb_tt** %utt, align 8
  %hcpriv23 = getelementptr inbounds %struct.usb_tt* %32, i32 0, i32 3
  store i8* null, i8** %hcpriv23, align 8
  %33 = load %struct.ehci_tt*** %tt_index, align 8
  %34 = bitcast %struct.ehci_tt** %33 to i8*
  call void @kfree(i8* %34) noredzone
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.then20
  %call25 = call i8* @ERR_PTR(i64 -12) noredzone
  %35 = bitcast i8* %call25 to %struct.ehci_tt*
  store %struct.ehci_tt* %35, %struct.ehci_tt** %retval
  br label %return

if.end26:                                         ; preds = %if.then15
  %36 = load %struct.ehci_tt** %tt1, align 8
  %tt_list = getelementptr inbounds %struct.ehci_tt* %36, i32 0, i32 1
  %37 = load %struct.ehci_hcd** %ehci, align 8
  %tt_list27 = getelementptr inbounds %struct.ehci_hcd* %37, i32 0, i32 63
  call void @list_add_tail(%struct.list_head* %tt_list, %struct.list_head* %tt_list27) noredzone
  %38 = load %struct.ehci_tt** %tt1, align 8
  %ps_list = getelementptr inbounds %struct.ehci_tt* %38, i32 0, i32 2
  call void @INIT_LIST_HEAD(%struct.list_head* %ps_list) noredzone
  %39 = load %struct.usb_tt** %utt, align 8
  %40 = load %struct.ehci_tt** %tt1, align 8
  %usb_tt = getelementptr inbounds %struct.ehci_tt* %40, i32 0, i32 3
  store %struct.usb_tt* %39, %struct.usb_tt** %usb_tt, align 8
  %41 = load i32* %port, align 4
  %42 = load %struct.ehci_tt** %tt1, align 8
  %tt_port = getelementptr inbounds %struct.ehci_tt* %42, i32 0, i32 4
  store i32 %41, i32* %tt_port, align 4
  %43 = load %struct.ehci_tt** %tt1, align 8
  %44 = load %struct.ehci_tt*** %ptt, align 8
  store %struct.ehci_tt* %43, %struct.ehci_tt** %44, align 8
  br label %if.end28

if.end28:                                         ; preds = %if.end26, %if.end13
  %45 = load %struct.ehci_tt** %tt1, align 8
  store %struct.ehci_tt* %45, %struct.ehci_tt** %retval
  br label %return

return:                                           ; preds = %if.end28, %if.end24, %if.then7, %if.then
  %46 = load %struct.ehci_tt** %retval
  ret %struct.ehci_tt* %46
}

define internal zeroext i1 @IS_ERR(i8* %ptr) nounwind inlinehint noredzone {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8** %ptr.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  %cmp = icmp uge i64 %1, -4095
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  ret i1 %tobool
}

define internal i64 @PTR_ERR(i8* %ptr) nounwind inlinehint noredzone {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8** %ptr.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  ret i64 %1
}

define internal void @compute_tt_budget(i8* %budget_table, %struct.ehci_tt* %tt) nounwind noredzone {
entry:
  %budget_table.addr = alloca i8*, align 8
  %tt.addr = alloca %struct.ehci_tt*, align 8
  %ps = alloca %struct.ehci_per_sched*, align 8
  %uframe = alloca i32, align 4
  %uf = alloca i32, align 4
  %x = alloca i32, align 4
  %budget_line = alloca i8*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %__mptr30 = alloca %struct.list_head*, align 8
  store i8* %budget_table, i8** %budget_table.addr, align 8
  store %struct.ehci_tt* %tt, %struct.ehci_tt** %tt.addr, align 8
  %0 = load %struct.ehci_tt** %tt.addr, align 8
  %tobool = icmp ne %struct.ehci_tt* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %for.end34

if.end:                                           ; preds = %entry
  %1 = load i8** %budget_table.addr, align 8
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 64, i32 1, i1 false)
  %2 = load %struct.ehci_tt** %tt.addr, align 8
  %ps_list = getelementptr inbounds %struct.ehci_tt* %2, i32 0, i32 2
  %next = getelementptr inbounds %struct.list_head* %ps_list, i32 0, i32 0
  %3 = load %struct.list_head** %next, align 8
  store %struct.list_head* %3, %struct.list_head** %__mptr, align 8
  %4 = load %struct.list_head** %__mptr, align 8
  %5 = bitcast %struct.list_head* %4 to i8*
  %add.ptr = getelementptr i8* %5, i64 -16
  %6 = bitcast i8* %add.ptr to %struct.ehci_per_sched*
  store %struct.ehci_per_sched* %6, %struct.ehci_per_sched** %ps, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %if.end
  %7 = load %struct.ehci_per_sched** %ps, align 8
  %ps_list1 = getelementptr inbounds %struct.ehci_per_sched* %7, i32 0, i32 2
  %8 = load %struct.ehci_tt** %tt.addr, align 8
  %ps_list2 = getelementptr inbounds %struct.ehci_tt* %8, i32 0, i32 2
  %cmp = icmp ne %struct.list_head* %ps_list1, %ps_list2
  br i1 %cmp, label %for.body, label %for.end34

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ehci_per_sched** %ps, align 8
  %bw_phase = getelementptr inbounds %struct.ehci_per_sched* %9, i32 0, i32 7
  %10 = load i8* %bw_phase, align 1
  %conv = zext i8 %10 to i32
  %shl = shl i32 %conv, 3
  store i32 %shl, i32* %uframe, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc25, %for.body
  %11 = load i32* %uframe, align 4
  %cmp4 = icmp ult i32 %11, 64
  br i1 %cmp4, label %for.body6, label %for.end28

for.body6:                                        ; preds = %for.cond3
  %12 = load i32* %uframe, align 4
  %idxprom = zext i32 %12 to i64
  %13 = load i8** %budget_table.addr, align 8
  %arrayidx = getelementptr i8* %13, i64 %idxprom
  store i8* %arrayidx, i8** %budget_line, align 8
  %14 = load %struct.ehci_per_sched** %ps, align 8
  %tt_usecs = getelementptr inbounds %struct.ehci_per_sched* %14, i32 0, i32 3
  %15 = load i16* %tt_usecs, align 2
  %conv7 = zext i16 %15 to i32
  store i32 %conv7, i32* %x, align 4
  %16 = load %struct.ehci_per_sched** %ps, align 8
  %phase_uf = getelementptr inbounds %struct.ehci_per_sched* %16, i32 0, i32 8
  %17 = load i8* %phase_uf, align 1
  %conv8 = zext i8 %17 to i32
  store i32 %conv8, i32* %uf, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body6
  %18 = load i32* %uf, align 4
  %cmp10 = icmp ult i32 %18, 8
  br i1 %cmp10, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %19 = load i32* %uf, align 4
  %idxprom13 = zext i32 %19 to i64
  %20 = load i8** %budget_line, align 8
  %arrayidx14 = getelementptr i8* %20, i64 %idxprom13
  %21 = load i8* %arrayidx14, align 1
  %conv15 = zext i8 %21 to i32
  %22 = load i32* %x, align 4
  %add = add i32 %22, %conv15
  store i32 %add, i32* %x, align 4
  %23 = load i32* %x, align 4
  %cmp16 = icmp ule i32 %23, 125
  br i1 %cmp16, label %if.then18, label %if.else

if.then18:                                        ; preds = %for.body12
  %24 = load i32* %x, align 4
  %conv19 = trunc i32 %24 to i8
  %25 = load i32* %uf, align 4
  %idxprom20 = zext i32 %25 to i64
  %26 = load i8** %budget_line, align 8
  %arrayidx21 = getelementptr i8* %26, i64 %idxprom20
  store i8 %conv19, i8* %arrayidx21, align 1
  br label %for.end

if.else:                                          ; preds = %for.body12
  %27 = load i32* %uf, align 4
  %idxprom22 = zext i32 %27 to i64
  %28 = load i8** %budget_line, align 8
  %arrayidx23 = getelementptr i8* %28, i64 %idxprom22
  store i8 125, i8* %arrayidx23, align 1
  %29 = load i32* %x, align 4
  %sub = sub i32 %29, 125
  store i32 %sub, i32* %x, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.else
  br label %for.inc

for.inc:                                          ; preds = %if.end24
  %30 = load i32* %uf, align 4
  %inc = add i32 %30, 1
  store i32 %inc, i32* %uf, align 4
  br label %for.cond9

for.end:                                          ; preds = %if.then18, %for.cond9
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %31 = load %struct.ehci_per_sched** %ps, align 8
  %bw_uperiod = getelementptr inbounds %struct.ehci_per_sched* %31, i32 0, i32 11
  %32 = load i8* %bw_uperiod, align 1
  %conv26 = zext i8 %32 to i32
  %33 = load i32* %uframe, align 4
  %add27 = add i32 %33, %conv26
  store i32 %add27, i32* %uframe, align 4
  br label %for.cond3

for.end28:                                        ; preds = %for.cond3
  br label %for.inc29

for.inc29:                                        ; preds = %for.end28
  %34 = load %struct.ehci_per_sched** %ps, align 8
  %ps_list31 = getelementptr inbounds %struct.ehci_per_sched* %34, i32 0, i32 2
  %next32 = getelementptr inbounds %struct.list_head* %ps_list31, i32 0, i32 0
  %35 = load %struct.list_head** %next32, align 8
  store %struct.list_head* %35, %struct.list_head** %__mptr30, align 8
  %36 = load %struct.list_head** %__mptr30, align 8
  %37 = bitcast %struct.list_head* %36 to i8*
  %add.ptr33 = getelementptr i8* %37, i64 -16
  %38 = bitcast i8* %add.ptr33 to %struct.ehci_per_sched*
  store %struct.ehci_per_sched* %38, %struct.ehci_per_sched** %ps, align 8
  br label %for.cond

for.end34:                                        ; preds = %if.then, %for.cond
  ret void
}

define internal i32 @check_intr_schedule(%struct.ehci_hcd* %ehci, i32 %frame, i32 %uframe, %struct.ehci_qh* %qh, i32* %c_maskp, %struct.ehci_tt* %tt) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %frame.addr = alloca i32, align 4
  %uframe.addr = alloca i32, align 4
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %c_maskp.addr = alloca i32*, align 8
  %tt.addr = alloca %struct.ehci_tt*, align 8
  %retval1 = alloca i32, align 4
  %mask = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %frame, i32* %frame.addr, align 4
  store i32 %uframe, i32* %uframe.addr, align 4
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  store i32* %c_maskp, i32** %c_maskp.addr, align 8
  store %struct.ehci_tt* %tt, %struct.ehci_tt** %tt.addr, align 8
  store i32 -28, i32* %retval1, align 4
  store i8 0, i8* %mask, align 1
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 7
  %c_usecs = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 10
  %1 = load i8* %c_usecs, align 1
  %conv = zext i8 %1 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32* %uframe.addr, align 4
  %cmp = icmp uge i32 %2, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %done

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %4 = load i32* %frame.addr, align 4
  %5 = load i32* %uframe.addr, align 4
  %6 = load %struct.ehci_qh** %qh.addr, align 8
  %ps3 = getelementptr inbounds %struct.ehci_qh* %6, i32 0, i32 7
  %bw_uperiod = getelementptr inbounds %struct.ehci_per_sched* %ps3, i32 0, i32 11
  %7 = load i8* %bw_uperiod, align 1
  %conv4 = zext i8 %7 to i32
  %8 = load %struct.ehci_qh** %qh.addr, align 8
  %ps5 = getelementptr inbounds %struct.ehci_qh* %8, i32 0, i32 7
  %usecs = getelementptr inbounds %struct.ehci_per_sched* %ps5, i32 0, i32 9
  %9 = load i8* %usecs, align 1
  %conv6 = zext i8 %9 to i32
  %call = call i32 @check_period(%struct.ehci_hcd* %3, i32 %4, i32 %5, i32 %conv4, i32 %conv6) noredzone
  %tobool7 = icmp ne i32 %call, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end
  br label %done

if.end9:                                          ; preds = %if.end
  %10 = load %struct.ehci_qh** %qh.addr, align 8
  %ps10 = getelementptr inbounds %struct.ehci_qh* %10, i32 0, i32 7
  %c_usecs11 = getelementptr inbounds %struct.ehci_per_sched* %ps10, i32 0, i32 10
  %11 = load i8* %c_usecs11, align 1
  %tobool12 = icmp ne i8 %11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end9
  store i32 0, i32* %retval1, align 4
  %12 = load i32** %c_maskp.addr, align 8
  store i32 0, i32* %12, align 4
  br label %done

if.end14:                                         ; preds = %if.end9
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %14 = load %struct.ehci_qh** %qh.addr, align 8
  %ps15 = getelementptr inbounds %struct.ehci_qh* %14, i32 0, i32 7
  %15 = load %struct.ehci_tt** %tt.addr, align 8
  %16 = load i32* %frame.addr, align 4
  %17 = load i32* %uframe.addr, align 4
  %call16 = call i32 @tt_available(%struct.ehci_hcd* %13, %struct.ehci_per_sched* %ps15, %struct.ehci_tt* %15, i32 %16, i32 %17) noredzone
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then18, label %if.end37

if.then18:                                        ; preds = %if.end14
  %18 = load i32* %uframe.addr, align 4
  %add = add i32 %18, 2
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then18
  %19 = load i32* %i, align 4
  %cmp19 = icmp ult i32 %19, 8
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %20 = load i32* %i, align 4
  %21 = load i32* %uframe.addr, align 4
  %add21 = add i32 %21, 4
  %cmp22 = icmp ule i32 %20, %add21
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %22 = phi i1 [ false, %for.cond ], [ %cmp22, %land.rhs ]
  br i1 %22, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %24 = load i32* %frame.addr, align 4
  %25 = load i32* %i, align 4
  %26 = load %struct.ehci_qh** %qh.addr, align 8
  %ps24 = getelementptr inbounds %struct.ehci_qh* %26, i32 0, i32 7
  %bw_uperiod25 = getelementptr inbounds %struct.ehci_per_sched* %ps24, i32 0, i32 11
  %27 = load i8* %bw_uperiod25, align 1
  %conv26 = zext i8 %27 to i32
  %28 = load %struct.ehci_qh** %qh.addr, align 8
  %ps27 = getelementptr inbounds %struct.ehci_qh* %28, i32 0, i32 7
  %c_usecs28 = getelementptr inbounds %struct.ehci_per_sched* %ps27, i32 0, i32 10
  %29 = load i8* %c_usecs28, align 1
  %conv29 = zext i8 %29 to i32
  %call30 = call i32 @check_period(%struct.ehci_hcd* %23, i32 %24, i32 %25, i32 %conv26, i32 %conv29) noredzone
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.else, label %if.then32

if.then32:                                        ; preds = %for.body
  br label %done

if.else:                                          ; preds = %for.body
  %30 = load i32* %i, align 4
  %shl = shl i32 1, %30
  %31 = load i8* %mask, align 1
  %conv33 = zext i8 %31 to i32
  %or = or i32 %conv33, %shl
  %conv34 = trunc i32 %or to i8
  store i8 %conv34, i8* %mask, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.else
  br label %for.inc

for.inc:                                          ; preds = %if.end35
  %32 = load i32* %i, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  store i32 0, i32* %retval1, align 4
  %33 = load i8* %mask, align 1
  %conv36 = zext i8 %33 to i32
  %34 = load i32** %c_maskp.addr, align 8
  store i32 %conv36, i32* %34, align 4
  br label %if.end37

if.end37:                                         ; preds = %for.end, %if.end14
  br label %done

done:                                             ; preds = %if.end37, %if.then32, %if.then13, %if.then8, %if.then
  %35 = load i32* %retval1, align 4
  ret i32 %35
}

define internal void @reserve_release_intr_bandwidth(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh, i32 %sign) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %sign.addr = alloca i32, align 4
  %start_uf = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %usecs = alloca i32, align 4
  %c_usecs = alloca i32, align 4
  %tt_usecs = alloca i32, align 4
  %tt = alloca %struct.ehci_tt*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  store i32 %sign, i32* %sign.addr, align 4
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 7
  %usecs1 = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 9
  %1 = load i8* %usecs1, align 1
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %usecs, align 4
  %2 = load %struct.ehci_qh** %qh.addr, align 8
  %ps2 = getelementptr inbounds %struct.ehci_qh* %2, i32 0, i32 7
  %c_usecs3 = getelementptr inbounds %struct.ehci_per_sched* %ps2, i32 0, i32 10
  %3 = load i8* %c_usecs3, align 1
  %conv4 = zext i8 %3 to i32
  store i32 %conv4, i32* %c_usecs, align 4
  %4 = load %struct.ehci_qh** %qh.addr, align 8
  %ps5 = getelementptr inbounds %struct.ehci_qh* %4, i32 0, i32 7
  %tt_usecs6 = getelementptr inbounds %struct.ehci_per_sched* %ps5, i32 0, i32 3
  %5 = load i16* %tt_usecs6, align 2
  %conv7 = zext i16 %5 to i32
  store i32 %conv7, i32* %tt_usecs, align 4
  %6 = load %struct.ehci_qh** %qh.addr, align 8
  %ps8 = getelementptr inbounds %struct.ehci_qh* %6, i32 0, i32 7
  %phase = getelementptr inbounds %struct.ehci_per_sched* %ps8, i32 0, i32 6
  %7 = load i16* %phase, align 2
  %conv9 = zext i16 %7 to i32
  %cmp = icmp eq i32 %conv9, 29999
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end91

if.end:                                           ; preds = %entry
  %8 = load %struct.ehci_qh** %qh.addr, align 8
  %ps11 = getelementptr inbounds %struct.ehci_qh* %8, i32 0, i32 7
  %bw_phase = getelementptr inbounds %struct.ehci_per_sched* %ps11, i32 0, i32 7
  %9 = load i8* %bw_phase, align 1
  %conv12 = zext i8 %9 to i32
  %shl = shl i32 %conv12, 3
  store i32 %shl, i32* %start_uf, align 4
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %11 = load i32* %sign.addr, align 4
  %12 = load %struct.ehci_qh** %qh.addr, align 8
  %ps13 = getelementptr inbounds %struct.ehci_qh* %12, i32 0, i32 7
  call void @bandwidth_dbg(%struct.ehci_hcd* %10, i32 %11, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), %struct.ehci_per_sched* %ps13) noredzone
  %13 = load i32* %sign.addr, align 4
  %cmp14 = icmp slt i32 %13, 0
  br i1 %cmp14, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end
  %14 = load i32* %usecs, align 4
  %sub = sub i32 0, %14
  store i32 %sub, i32* %usecs, align 4
  %15 = load i32* %c_usecs, align 4
  %sub17 = sub i32 0, %15
  store i32 %sub17, i32* %c_usecs, align 4
  %16 = load i32* %tt_usecs, align 4
  %sub18 = sub i32 0, %16
  store i32 %sub18, i32* %tt_usecs, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.end
  %17 = load i32* %start_uf, align 4
  %18 = load %struct.ehci_qh** %qh.addr, align 8
  %ps20 = getelementptr inbounds %struct.ehci_qh* %18, i32 0, i32 7
  %phase_uf = getelementptr inbounds %struct.ehci_per_sched* %ps20, i32 0, i32 8
  %19 = load i8* %phase_uf, align 1
  %conv21 = zext i8 %19 to i32
  %add = add i32 %17, %conv21
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end19
  %20 = load i32* %i, align 4
  %cmp22 = icmp ult i32 %20, 64
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32* %usecs, align 4
  %22 = load i32* %i, align 4
  %idxprom = zext i32 %22 to i64
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_hcd* %23, i32 0, i32 61
  %arrayidx = getelementptr [64 x i8]* %bandwidth, i32 0, i64 %idxprom
  %24 = load i8* %arrayidx, align 1
  %conv24 = zext i8 %24 to i32
  %add25 = add i32 %conv24, %21
  %conv26 = trunc i32 %add25 to i8
  store i8 %conv26, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %25 = load %struct.ehci_qh** %qh.addr, align 8
  %ps27 = getelementptr inbounds %struct.ehci_qh* %25, i32 0, i32 7
  %bw_uperiod = getelementptr inbounds %struct.ehci_per_sched* %ps27, i32 0, i32 11
  %26 = load i8* %bw_uperiod, align 1
  %conv28 = zext i8 %26 to i32
  %27 = load i32* %i, align 4
  %add29 = add i32 %27, %conv28
  store i32 %add29, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load %struct.ehci_qh** %qh.addr, align 8
  %ps30 = getelementptr inbounds %struct.ehci_qh* %28, i32 0, i32 7
  %c_usecs31 = getelementptr inbounds %struct.ehci_per_sched* %ps30, i32 0, i32 10
  %29 = load i8* %c_usecs31, align 1
  %tobool = icmp ne i8 %29, 0
  br i1 %tobool, label %if.then32, label %if.end64

if.then32:                                        ; preds = %for.end
  %30 = load i32* %start_uf, align 4
  store i32 %30, i32* %i, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc58, %if.then32
  %31 = load i32* %i, align 4
  %cmp34 = icmp ult i32 %31, 64
  br i1 %cmp34, label %for.body36, label %for.end63

for.body36:                                       ; preds = %for.cond33
  store i32 2, i32* %j, align 4
  %32 = load i32* %j, align 4
  %add37 = add i32 %32, 8
  %shl38 = shl i32 1, %add37
  store i32 %shl38, i32* %m, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc55, %for.body36
  %33 = load i32* %j, align 4
  %cmp40 = icmp ult i32 %33, 8
  br i1 %cmp40, label %for.body42, label %for.end57

for.body42:                                       ; preds = %for.cond39
  %34 = load %struct.ehci_qh** %qh.addr, align 8
  %ps43 = getelementptr inbounds %struct.ehci_qh* %34, i32 0, i32 7
  %cs_mask = getelementptr inbounds %struct.ehci_per_sched* %ps43, i32 0, i32 4
  %35 = load i16* %cs_mask, align 2
  %conv44 = zext i16 %35 to i32
  %36 = load i32* %m, align 4
  %and = and i32 %conv44, %36
  %tobool45 = icmp ne i32 %and, 0
  br i1 %tobool45, label %if.then46, label %if.end54

if.then46:                                        ; preds = %for.body42
  %37 = load i32* %c_usecs, align 4
  %38 = load i32* %i, align 4
  %39 = load i32* %j, align 4
  %add47 = add i32 %38, %39
  %idxprom48 = zext i32 %add47 to i64
  %40 = load %struct.ehci_hcd** %ehci.addr, align 8
  %bandwidth49 = getelementptr inbounds %struct.ehci_hcd* %40, i32 0, i32 61
  %arrayidx50 = getelementptr [64 x i8]* %bandwidth49, i32 0, i64 %idxprom48
  %41 = load i8* %arrayidx50, align 1
  %conv51 = zext i8 %41 to i32
  %add52 = add i32 %conv51, %37
  %conv53 = trunc i32 %add52 to i8
  store i8 %conv53, i8* %arrayidx50, align 1
  br label %if.end54

if.end54:                                         ; preds = %if.then46, %for.body42
  br label %for.inc55

for.inc55:                                        ; preds = %if.end54
  %42 = load i32* %j, align 4
  %inc = add i32 %42, 1
  store i32 %inc, i32* %j, align 4
  %43 = load i32* %m, align 4
  %shl56 = shl i32 %43, 1
  store i32 %shl56, i32* %m, align 4
  br label %for.cond39

for.end57:                                        ; preds = %for.cond39
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %44 = load %struct.ehci_qh** %qh.addr, align 8
  %ps59 = getelementptr inbounds %struct.ehci_qh* %44, i32 0, i32 7
  %bw_uperiod60 = getelementptr inbounds %struct.ehci_per_sched* %ps59, i32 0, i32 11
  %45 = load i8* %bw_uperiod60, align 1
  %conv61 = zext i8 %45 to i32
  %46 = load i32* %i, align 4
  %add62 = add i32 %46, %conv61
  store i32 %add62, i32* %i, align 4
  br label %for.cond33

for.end63:                                        ; preds = %for.cond33
  br label %if.end64

if.end64:                                         ; preds = %for.end63, %for.end
  %47 = load i32* %tt_usecs, align 4
  %tobool65 = icmp ne i32 %47, 0
  br i1 %tobool65, label %if.then66, label %if.end91

if.then66:                                        ; preds = %if.end64
  %48 = load %struct.ehci_qh** %qh.addr, align 8
  %ps67 = getelementptr inbounds %struct.ehci_qh* %48, i32 0, i32 7
  %udev = getelementptr inbounds %struct.ehci_per_sched* %ps67, i32 0, i32 0
  %49 = load %struct.usb_device** %udev, align 8
  %call = call %struct.ehci_tt* @find_tt(%struct.usb_device* %49) noredzone
  store %struct.ehci_tt* %call, %struct.ehci_tt** %tt, align 8
  %50 = load i32* %sign.addr, align 4
  %cmp68 = icmp sgt i32 %50, 0
  br i1 %cmp68, label %if.then70, label %if.else

if.then70:                                        ; preds = %if.then66
  %51 = load %struct.ehci_qh** %qh.addr, align 8
  %ps71 = getelementptr inbounds %struct.ehci_qh* %51, i32 0, i32 7
  %ps_list = getelementptr inbounds %struct.ehci_per_sched* %ps71, i32 0, i32 2
  %52 = load %struct.ehci_tt** %tt, align 8
  %ps_list72 = getelementptr inbounds %struct.ehci_tt* %52, i32 0, i32 2
  call void @list_add_tail(%struct.list_head* %ps_list, %struct.list_head* %ps_list72) noredzone
  br label %if.end75

if.else:                                          ; preds = %if.then66
  %53 = load %struct.ehci_qh** %qh.addr, align 8
  %ps73 = getelementptr inbounds %struct.ehci_qh* %53, i32 0, i32 7
  %ps_list74 = getelementptr inbounds %struct.ehci_per_sched* %ps73, i32 0, i32 2
  call void @list_del(%struct.list_head* %ps_list74) noredzone
  br label %if.end75

if.end75:                                         ; preds = %if.else, %if.then70
  %54 = load i32* %start_uf, align 4
  %shr = lshr i32 %54, 3
  store i32 %shr, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc86, %if.end75
  %55 = load i32* %i, align 4
  %cmp77 = icmp ult i32 %55, 8
  br i1 %cmp77, label %for.body79, label %for.end90

for.body79:                                       ; preds = %for.cond76
  %56 = load i32* %tt_usecs, align 4
  %57 = load i32* %i, align 4
  %idxprom80 = zext i32 %57 to i64
  %58 = load %struct.ehci_tt** %tt, align 8
  %bandwidth81 = getelementptr inbounds %struct.ehci_tt* %58, i32 0, i32 0
  %arrayidx82 = getelementptr [8 x i16]* %bandwidth81, i32 0, i64 %idxprom80
  %59 = load i16* %arrayidx82, align 2
  %conv83 = zext i16 %59 to i32
  %add84 = add i32 %conv83, %56
  %conv85 = trunc i32 %add84 to i16
  store i16 %conv85, i16* %arrayidx82, align 2
  br label %for.inc86

for.inc86:                                        ; preds = %for.body79
  %60 = load %struct.ehci_qh** %qh.addr, align 8
  %ps87 = getelementptr inbounds %struct.ehci_qh* %60, i32 0, i32 7
  %bw_period = getelementptr inbounds %struct.ehci_per_sched* %ps87, i32 0, i32 12
  %61 = load i8* %bw_period, align 1
  %conv88 = zext i8 %61 to i32
  %62 = load i32* %i, align 4
  %add89 = add i32 %62, %conv88
  store i32 %add89, i32* %i, align 4
  br label %for.cond76

for.end90:                                        ; preds = %for.cond76
  br label %if.end91

if.end91:                                         ; preds = %if.then, %for.end90, %if.end64
  ret void
}

define internal void @bandwidth_dbg(%struct.ehci_hcd* %ehci, i32 %sign, i8* %type, %struct.ehci_per_sched* %ps) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %sign.addr = alloca i32, align 4
  %type.addr = alloca i8*, align 8
  %ps.addr = alloca %struct.ehci_per_sched*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %sign, i32* %sign.addr, align 4
  store i8* %type, i8** %type.addr, align 8
  store %struct.ehci_per_sched* %ps, %struct.ehci_per_sched** %ps.addr, align 8
  ret void
}

define internal void @list_add_tail(%struct.list_head* %new, %struct.list_head* %head) nounwind inlinehint noredzone {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head** %new.addr, align 8
  %1 = load %struct.list_head** %head.addr, align 8
  %prev = getelementptr inbounds %struct.list_head* %1, i32 0, i32 1
  %2 = load %struct.list_head** %prev, align 8
  %3 = load %struct.list_head** %head.addr, align 8
  call void @__list_add(%struct.list_head* %0, %struct.list_head* %2, %struct.list_head* %3) noredzone
  ret void
}

define internal i32 @check_period(%struct.ehci_hcd* %ehci, i32 %frame, i32 %uframe, i32 %uperiod, i32 %usecs) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %frame.addr = alloca i32, align 4
  %uframe.addr = alloca i32, align 4
  %uperiod.addr = alloca i32, align 4
  %usecs.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %frame, i32* %frame.addr, align 4
  store i32 %uframe, i32* %uframe.addr, align 4
  store i32 %uperiod, i32* %uperiod.addr, align 4
  store i32 %usecs, i32* %usecs.addr, align 4
  %0 = load i32* %uframe.addr, align 4
  %cmp = icmp uge i32 %0, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %uframe_periodic_max = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 36
  %2 = load i32* %uframe_periodic_max, align 4
  %3 = load i32* %usecs.addr, align 4
  %sub = sub i32 %2, %3
  store i32 %sub, i32* %usecs.addr, align 4
  %4 = load i32* %frame.addr, align 4
  %shl = shl i32 %4, 3
  %5 = load i32* %uframe.addr, align 4
  %add = add i32 %5, %shl
  store i32 %add, i32* %uframe.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32* %uframe.addr, align 4
  %cmp1 = icmp ult i32 %6, 64
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32* %uframe.addr, align 4
  %idxprom = zext i32 %7 to i64
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 61
  %arrayidx = getelementptr [64 x i8]* %bandwidth, i32 0, i64 %idxprom
  %9 = load i8* %arrayidx, align 1
  %conv = zext i8 %9 to i32
  %10 = load i32* %usecs.addr, align 4
  %cmp2 = icmp ugt i32 %conv, %10
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end5:                                          ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end5
  %11 = load i32* %uperiod.addr, align 4
  %12 = load i32* %uframe.addr, align 4
  %add6 = add i32 %12, %11
  store i32 %add6, i32* %uframe.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then4, %if.then
  %13 = load i32* %retval
  ret i32 %13
}

define internal i32 @tt_available(%struct.ehci_hcd* %ehci, %struct.ehci_per_sched* %ps, %struct.ehci_tt* %tt, i32 %frame, i32 %uframe) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %ps.addr = alloca %struct.ehci_per_sched*, align 8
  %tt.addr = alloca %struct.ehci_tt*, align 8
  %frame.addr = alloca i32, align 4
  %uframe.addr = alloca i32, align 4
  %period = alloca i32, align 4
  %usecs = alloca i32, align 4
  %i = alloca i32, align 4
  %uf = alloca i32, align 4
  %tt_usecs7 = alloca [8 x i16], align 16
  %ufs = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_per_sched* %ps, %struct.ehci_per_sched** %ps.addr, align 8
  store %struct.ehci_tt* %tt, %struct.ehci_tt** %tt.addr, align 8
  store i32 %frame, i32* %frame.addr, align 4
  store i32 %uframe, i32* %uframe.addr, align 4
  %0 = load %struct.ehci_per_sched** %ps.addr, align 8
  %bw_period = getelementptr inbounds %struct.ehci_per_sched* %0, i32 0, i32 12
  %1 = load i8* %bw_period, align 1
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %period, align 4
  %2 = load %struct.ehci_per_sched** %ps.addr, align 8
  %tt_usecs = getelementptr inbounds %struct.ehci_per_sched* %2, i32 0, i32 3
  %3 = load i16* %tt_usecs, align 2
  %conv1 = zext i16 %3 to i32
  store i32 %conv1, i32* %usecs, align 4
  %4 = load i32* %period, align 4
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32* %uframe.addr, align 4
  %cmp3 = icmp uge i32 %5, 7
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load i32* %period, align 4
  %sub = sub i32 %6, 1
  %7 = load i32* %frame.addr, align 4
  %and = and i32 %7, %sub
  store i32 %and, i32* %frame.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc66, %if.end
  %8 = load i32* %frame.addr, align 4
  %cmp5 = icmp ult i32 %8, 8
  br i1 %cmp5, label %for.body, label %for.end68

for.body:                                         ; preds = %for.cond
  %9 = load i32* %frame.addr, align 4
  %idxprom = zext i32 %9 to i64
  %10 = load %struct.ehci_tt** %tt.addr, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_tt* %10, i32 0, i32 0
  %arrayidx = getelementptr [8 x i16]* %bandwidth, i32 0, i64 %idxprom
  %11 = load i16* %arrayidx, align 2
  %conv8 = zext i16 %11 to i32
  %12 = load i32* %usecs, align 4
  %add = add i32 %conv8, %12
  %cmp9 = icmp ugt i32 %add, 900
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end12:                                         ; preds = %for.body
  %13 = load i32* %frame.addr, align 4
  %shl = shl i32 %13, 3
  store i32 %shl, i32* %uf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc, %if.end12
  %14 = load i32* %i, align 4
  %cmp14 = icmp ult i32 %14, 8
  br i1 %cmp14, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond13
  %15 = load i32* %uf, align 4
  %idxprom17 = zext i32 %15 to i64
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %tt_budget = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 62
  %arrayidx18 = getelementptr [64 x i8]* %tt_budget, i32 0, i64 %idxprom17
  %17 = load i8* %arrayidx18, align 1
  %conv19 = zext i8 %17 to i16
  %18 = load i32* %i, align 4
  %idxprom20 = zext i32 %18 to i64
  %arrayidx21 = getelementptr [8 x i16]* %tt_usecs7, i32 0, i64 %idxprom20
  store i16 %conv19, i16* %arrayidx21, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %19 = load i32* %i, align 4
  %inc = add i32 %19, 1
  store i32 %inc, i32* %i, align 4
  %20 = load i32* %uf, align 4
  %inc22 = add i32 %20, 1
  store i32 %inc22, i32* %uf, align 4
  br label %for.cond13

for.end:                                          ; preds = %for.cond13
  %21 = load i32* %uframe.addr, align 4
  %idxprom23 = zext i32 %21 to i64
  %arrayidx24 = getelementptr [8 x i8]* @max_tt_usecs, i32 0, i64 %idxprom23
  %22 = load i8* %arrayidx24, align 1
  %conv25 = zext i8 %22 to i32
  %23 = load i32* %uframe.addr, align 4
  %idxprom26 = zext i32 %23 to i64
  %arrayidx27 = getelementptr [8 x i16]* %tt_usecs7, i32 0, i64 %idxprom26
  %24 = load i16* %arrayidx27, align 2
  %conv28 = zext i16 %24 to i32
  %cmp29 = icmp sle i32 %conv25, %conv28
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end32:                                         ; preds = %for.end
  %25 = load i32* %usecs, align 4
  %cmp33 = icmp ult i32 125, %25
  br i1 %cmp33, label %if.then35, label %if.end53

if.then35:                                        ; preds = %if.end32
  %26 = load i32* %usecs, align 4
  %div = udiv i32 %26, 125
  store i32 %div, i32* %ufs, align 4
  %27 = load i32* %uframe.addr, align 4
  store i32 %27, i32* %i, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc50, %if.then35
  %28 = load i32* %i, align 4
  %29 = load i32* %uframe.addr, align 4
  %30 = load i32* %ufs, align 4
  %add37 = add i32 %29, %30
  %cmp38 = icmp ult i32 %28, %add37
  br i1 %cmp38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond36
  %31 = load i32* %i, align 4
  %cmp40 = icmp ult i32 %31, 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond36
  %32 = phi i1 [ false, %for.cond36 ], [ %cmp40, %land.rhs ]
  br i1 %32, label %for.body42, label %for.end52

for.body42:                                       ; preds = %land.end
  %33 = load i32* %i, align 4
  %idxprom43 = zext i32 %33 to i64
  %arrayidx44 = getelementptr [8 x i16]* %tt_usecs7, i32 0, i64 %idxprom43
  %34 = load i16* %arrayidx44, align 2
  %conv45 = zext i16 %34 to i32
  %cmp46 = icmp slt i32 0, %conv45
  br i1 %cmp46, label %if.then48, label %if.end49

if.then48:                                        ; preds = %for.body42
  store i32 0, i32* %retval
  br label %return

if.end49:                                         ; preds = %for.body42
  br label %for.inc50

for.inc50:                                        ; preds = %if.end49
  %35 = load i32* %i, align 4
  %inc51 = add i32 %35, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond36

for.end52:                                        ; preds = %land.end
  br label %if.end53

if.end53:                                         ; preds = %for.end52, %if.end32
  %36 = load i32* %usecs, align 4
  %37 = load i32* %uframe.addr, align 4
  %idxprom54 = zext i32 %37 to i64
  %arrayidx55 = getelementptr [8 x i16]* %tt_usecs7, i32 0, i64 %idxprom54
  %38 = load i16* %arrayidx55, align 2
  %conv56 = zext i16 %38 to i32
  %add57 = add i32 %conv56, %36
  %conv58 = trunc i32 %add57 to i16
  store i16 %conv58, i16* %arrayidx55, align 2
  %arraydecay = getelementptr inbounds [8 x i16]* %tt_usecs7, i32 0, i32 0
  call void @carryover_tt_bandwidth(i16* %arraydecay) noredzone
  %39 = load i8* getelementptr inbounds ([8 x i8]* @max_tt_usecs, i32 0, i64 7), align 1
  %conv59 = zext i8 %39 to i32
  %arrayidx60 = getelementptr [8 x i16]* %tt_usecs7, i32 0, i64 7
  %40 = load i16* %arrayidx60, align 2
  %conv61 = zext i16 %40 to i32
  %cmp62 = icmp slt i32 %conv59, %conv61
  br i1 %cmp62, label %if.then64, label %if.end65

if.then64:                                        ; preds = %if.end53
  store i32 0, i32* %retval
  br label %return

if.end65:                                         ; preds = %if.end53
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %41 = load i32* %period, align 4
  %42 = load i32* %frame.addr, align 4
  %add67 = add i32 %42, %41
  store i32 %add67, i32* %frame.addr, align 4
  br label %for.cond

for.end68:                                        ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end68, %if.then64, %if.then48, %if.then31, %if.then11, %if.then
  %43 = load i32* %retval
  ret i32 %43
}

define internal void @carryover_tt_bandwidth(i16* %tt_usecs) nounwind inlinehint noredzone {
entry:
  %tt_usecs.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  store i16* %tt_usecs, i16** %tt_usecs.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr [8 x i8]* @max_tt_usecs, i32 0, i64 %idxprom
  %2 = load i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %3 = load i32* %i, align 4
  %idxprom1 = sext i32 %3 to i64
  %4 = load i16** %tt_usecs.addr, align 8
  %arrayidx2 = getelementptr i16* %4, i64 %idxprom1
  %5 = load i16* %arrayidx2, align 2
  %conv3 = zext i16 %5 to i32
  %cmp4 = icmp slt i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32* %i, align 4
  %idxprom6 = sext i32 %6 to i64
  %7 = load i16** %tt_usecs.addr, align 8
  %arrayidx7 = getelementptr i16* %7, i64 %idxprom6
  %8 = load i16* %arrayidx7, align 2
  %conv8 = zext i16 %8 to i32
  %9 = load i32* %i, align 4
  %idxprom9 = sext i32 %9 to i64
  %arrayidx10 = getelementptr [8 x i8]* @max_tt_usecs, i32 0, i64 %idxprom9
  %10 = load i8* %arrayidx10, align 1
  %conv11 = zext i8 %10 to i32
  %sub = sub i32 %conv8, %conv11
  %11 = load i32* %i, align 4
  %add = add i32 %11, 1
  %idxprom12 = sext i32 %add to i64
  %12 = load i16** %tt_usecs.addr, align 8
  %arrayidx13 = getelementptr i16* %12, i64 %idxprom12
  %13 = load i16* %arrayidx13, align 2
  %conv14 = zext i16 %13 to i32
  %add15 = add i32 %conv14, %sub
  %conv16 = trunc i32 %add15 to i16
  store i16 %conv16, i16* %arrayidx13, align 2
  %14 = load i32* %i, align 4
  %idxprom17 = sext i32 %14 to i64
  %arrayidx18 = getelementptr [8 x i8]* @max_tt_usecs, i32 0, i64 %idxprom17
  %15 = load i8* %arrayidx18, align 1
  %conv19 = zext i8 %15 to i16
  %16 = load i32* %i, align 4
  %idxprom20 = sext i32 %16 to i64
  %17 = load i16** %tt_usecs.addr, align 8
  %arrayidx21 = getelementptr i16* %17, i64 %idxprom20
  store i16 %conv19, i16* %arrayidx21, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load i32* %i, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define internal i8* @kzalloc(i64 %size, i32 %flags) nounwind inlinehint noredzone {
entry:
  %size.addr.i = alloca i64, align 8
  %flags.addr.i = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64* %size.addr, align 8
  %1 = load i32* %flags.addr, align 4
  %or = or i32 %1, 32768
  store i64 %0, i64* %size.addr.i, align 8
  store i32 %or, i32* %flags.addr.i, align 4
  %2 = load i64* %size.addr.i, align 8
  %3 = load i32* %flags.addr.i, align 4
  %call.i = call i8* @__kmalloc(i64 %2, i32 %3) nounwind noredzone
  ret i8* %call.i
}

define internal i8* @ERR_PTR(i64 %error) nounwind inlinehint noredzone {
entry:
  %error.addr = alloca i64, align 8
  store i64 %error, i64* %error.addr, align 8
  %0 = load i64* %error.addr, align 8
  %1 = inttoptr i64 %0 to i8*
  ret i8* %1
}

define internal %struct.usb_hcd* @bus_to_hcd(%struct.usb_bus* %bus) nounwind inlinehint noredzone {
entry:
  %bus.addr = alloca %struct.usb_bus*, align 8
  %__mptr = alloca %struct.usb_bus*, align 8
  store %struct.usb_bus* %bus, %struct.usb_bus** %bus.addr, align 8
  %0 = load %struct.usb_bus** %bus.addr, align 8
  store %struct.usb_bus* %0, %struct.usb_bus** %__mptr, align 8
  %1 = load %struct.usb_bus** %__mptr, align 8
  %2 = bitcast %struct.usb_bus* %1 to i8*
  %add.ptr = getelementptr i8* %2, i64 0
  %3 = bitcast i8* %add.ptr to %struct.usb_hcd*
  ret %struct.usb_hcd* %3
}

define internal void @INIT_LIST_HEAD(%struct.list_head* %list) nounwind inlinehint noredzone {
entry:
  %list.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  %0 = load %struct.list_head** %list.addr, align 8
  %1 = load %struct.list_head** %list.addr, align 8
  %next = getelementptr inbounds %struct.list_head* %1, i32 0, i32 0
  store %struct.list_head* %0, %struct.list_head** %next, align 8
  %2 = load %struct.list_head** %list.addr, align 8
  %3 = load %struct.list_head** %list.addr, align 8
  %prev = getelementptr inbounds %struct.list_head* %3, i32 0, i32 1
  store %struct.list_head* %2, %struct.list_head** %prev, align 8
  ret void
}

declare i8* @__kmalloc(i64, i32) noredzone

define internal void @ehci_urb_done(%struct.ehci_hcd* %ehci, %struct.urb* %urb, i32 %status) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %status.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %status, i32* %status.addr, align 4
  %0 = load %struct.urb** %urb.addr, align 8
  %pipe = getelementptr inbounds %struct.urb* %0, i32 0, i32 10
  %1 = load i32* %pipe, align 4
  %shr = lshr i32 %1, 30
  %and = and i32 %shr, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %2) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call, i32 0, i32 0
  %bandwidth_int_reqs = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 15
  %3 = load i32* %bandwidth_int_reqs, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %bandwidth_int_reqs, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.urb** %urb.addr, align 8
  %unlinked = getelementptr inbounds %struct.urb* %4, i32 0, i32 4
  %5 = load i32* %unlinked, align 4
  %tobool = icmp ne i32 %5, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool2 = icmp ne i64 %expval, 0
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then3
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end12

if.else:                                          ; preds = %if.end
  %6 = load i32* %status.addr, align 4
  %cmp4 = icmp eq i32 %6, -115
  br i1 %cmp4, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %7 = load i32* %status.addr, align 4
  %cmp6 = icmp eq i32 %7, -121
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  store i32 0, i32* %status.addr, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %lor.lhs.false
  br label %do.body10

do.body10:                                        ; preds = %if.end9
  br label %do.end11

do.end11:                                         ; preds = %do.body10
  br label %if.end12

if.end12:                                         ; preds = %do.end11, %do.end
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call13 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %8) noredzone
  %9 = load %struct.urb** %urb.addr, align 8
  call void @usb_hcd_unlink_urb_from_ep(%struct.usb_hcd* %call13, %struct.urb* %9) noredzone
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call14 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %10) noredzone
  %11 = load %struct.urb** %urb.addr, align 8
  %12 = load i32* %status.addr, align 4
  call void @usb_hcd_giveback_urb(%struct.usb_hcd* %call14, %struct.urb* %11, i32 %12) noredzone
  ret void
}

define internal void @ehci_qtd_free(%struct.ehci_hcd* %ehci, %struct.ehci_qtd* %qtd) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qtd.addr = alloca %struct.ehci_qtd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qtd* %qtd, %struct.ehci_qtd** %qtd.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qtd_pool = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 49
  %1 = load %struct.dma_pool** %qtd_pool, align 8
  %2 = load %struct.ehci_qtd** %qtd.addr, align 8
  %3 = bitcast %struct.ehci_qtd* %2 to i8*
  %4 = load %struct.ehci_qtd** %qtd.addr, align 8
  %qtd_dma = getelementptr inbounds %struct.ehci_qtd* %4, i32 0, i32 5
  %5 = load i64* %qtd_dma, align 8
  call void @dma_pool_free(%struct.dma_pool* %1, i8* %3, i64 %5) noredzone
  ret void
}

define internal void @ehci_clear_tt_buffer(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh, %struct.urb* %urb, i32 %token) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %token.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %token, i32* %token.addr, align 4
  %0 = load %struct.urb** %urb.addr, align 8
  %dev = getelementptr inbounds %struct.urb* %0, i32 0, i32 8
  %1 = load %struct.usb_device** %dev, align 8
  %tt = getelementptr inbounds %struct.usb_device* %1, i32 0, i32 5
  %2 = load %struct.usb_tt** %tt, align 8
  %tobool = icmp ne %struct.usb_tt* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.urb** %urb.addr, align 8
  %pipe = getelementptr inbounds %struct.urb* %3, i32 0, i32 10
  %4 = load i32* %pipe, align 4
  %shr = lshr i32 %4, 30
  %and = and i32 %shr, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.end16, label %land.lhs.true1

land.lhs.true1:                                   ; preds = %land.lhs.true
  %5 = load %struct.ehci_qh** %qh.addr, align 8
  %6 = bitcast %struct.ehci_qh* %5 to i8*
  %bf.field.offs = getelementptr i8* %6, i32 132
  %7 = bitcast i8* %bf.field.offs to i32*
  %8 = load i32* %7, align 4
  %9 = lshr i32 %8, 25
  %bf.clear = and i32 %9, 1
  %tobool2 = icmp ne i32 %bf.clear, 0
  br i1 %tobool2, label %if.end16, label %if.then

if.then:                                          ; preds = %land.lhs.true1
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %10) noredzone
  %11 = bitcast %struct.usb_hcd* %call to i8*
  %bf.field.offs3 = getelementptr i8* %11, i32 352
  %12 = bitcast i8* %bf.field.offs3 to i32*
  %13 = load i32* %12, align 8
  %14 = lshr i32 %13, 7
  %bf.clear4 = and i32 %14, 1
  %tobool5 = icmp ne i32 %bf.clear4, 0
  br i1 %tobool5, label %lor.lhs.false, label %if.then10

lor.lhs.false:                                    ; preds = %if.then
  %15 = load %struct.urb** %urb.addr, align 8
  %dev6 = getelementptr inbounds %struct.urb* %15, i32 0, i32 8
  %16 = load %struct.usb_device** %dev6, align 8
  %tt7 = getelementptr inbounds %struct.usb_device* %16, i32 0, i32 5
  %17 = load %struct.usb_tt** %tt7, align 8
  %hub = getelementptr inbounds %struct.usb_tt* %17, i32 0, i32 0
  %18 = load %struct.usb_device** %hub, align 8
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call8 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %19) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call8, i32 0, i32 0
  %root_hub = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 10
  %20 = load %struct.usb_device** %root_hub, align 8
  %cmp9 = icmp ne %struct.usb_device* %18, %20
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %lor.lhs.false, %if.then
  %21 = load %struct.urb** %urb.addr, align 8
  %call11 = call i32 @usb_hub_clear_tt_buffer(%struct.urb* %21) noredzone
  %cmp12 = icmp eq i32 %call11, 0
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %if.then10
  %22 = load %struct.ehci_qh** %qh.addr, align 8
  %23 = bitcast %struct.ehci_qh* %22 to i8*
  %bf.field.offs14 = getelementptr i8* %23, i32 132
  %24 = bitcast i8* %bf.field.offs14 to i32*
  %25 = load i32* %24, align 4
  %26 = and i32 %25, -33554433
  %27 = or i32 %26, 33554432
  store i32 %27, i32* %24, align 4
  br label %if.end

if.end:                                           ; preds = %if.then13, %if.then10
  br label %if.end15

if.else:                                          ; preds = %lor.lhs.false
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.end
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %land.lhs.true1, %land.lhs.true, %entry
  ret void
}

define internal i32 @qtd_copy_status(%struct.ehci_hcd* %ehci, %struct.urb* %urb, i64 %length, i32 %token) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %length.addr = alloca i64, align 8
  %token.addr = alloca i32, align 4
  %status = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i64 %length, i64* %length.addr, align 8
  store i32 %token, i32* %token.addr, align 4
  store i32 -115, i32* %status, align 4
  %0 = load i32* %token.addr, align 4
  %shr = lshr i32 %0, 8
  %and = and i32 %shr, 3
  %cmp = icmp ne i32 %and, 2
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64* %length.addr, align 8
  %2 = load i32* %token.addr, align 4
  %shr2 = lshr i32 %2, 16
  %and3 = and i32 %shr2, 32767
  %conv4 = zext i32 %and3 to i64
  %sub = sub i64 %1, %conv4
  %3 = load %struct.urb** %urb.addr, align 8
  %actual_length = getelementptr inbounds %struct.urb* %3, i32 0, i32 20
  %4 = load i32* %actual_length, align 4
  %conv5 = zext i32 %4 to i64
  %add = add i64 %conv5, %sub
  %conv6 = trunc i64 %add to i32
  store i32 %conv6, i32* %actual_length, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.urb** %urb.addr, align 8
  %unlinked = getelementptr inbounds %struct.urb* %5, i32 0, i32 4
  %6 = load i32* %unlinked, align 4
  %tobool7 = icmp ne i32 %6, 0
  %lnot8 = xor i1 %tobool7, true
  %lnot10 = xor i1 %lnot8, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %conv12 = sext i32 %lnot.ext11 to i64
  %expval13 = call i64 @llvm.expect.i64(i64 %conv12, i64 0)
  %tobool14 = icmp ne i64 %expval13, 0
  br i1 %tobool14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %7 = load i32* %status, align 4
  store i32 %7, i32* %retval
  br label %return

if.end16:                                         ; preds = %if.end
  %8 = load i32* %token.addr, align 4
  %shr17 = lshr i32 %8, 16
  %and18 = and i32 %shr17, 32767
  %cmp19 = icmp ne i32 %and18, 0
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end16
  %9 = load i32* %token.addr, align 4
  %shr21 = lshr i32 %9, 8
  %and22 = and i32 %shr21, 3
  %cmp23 = icmp eq i32 %and22, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end16
  %10 = phi i1 [ false, %if.end16 ], [ %cmp23, %land.rhs ]
  %lnot25 = xor i1 %10, true
  %lnot27 = xor i1 %lnot25, true
  %lnot.ext28 = zext i1 %lnot27 to i32
  %conv29 = sext i32 %lnot.ext28 to i64
  %expval30 = call i64 @llvm.expect.i64(i64 %conv29, i64 0)
  %tobool31 = icmp ne i64 %expval30, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %land.end
  store i32 -121, i32* %status, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %land.end
  %11 = load i32* %token.addr, align 4
  %and34 = and i32 %11, 64
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then36, label %if.end66

if.then36:                                        ; preds = %if.end33
  %12 = load i32* %token.addr, align 4
  %and37 = and i32 %12, 16
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.then39, label %if.else

if.then39:                                        ; preds = %if.then36
  store i32 -75, i32* %status, align 4
  br label %if.end65

if.else:                                          ; preds = %if.then36
  %13 = load i32* %token.addr, align 4
  %shr40 = lshr i32 %13, 10
  %and41 = and i32 %shr40, 3
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %if.then43, label %if.else44

if.then43:                                        ; preds = %if.else
  store i32 -32, i32* %status, align 4
  br label %if.end64

if.else44:                                        ; preds = %if.else
  %14 = load i32* %token.addr, align 4
  %and45 = and i32 %14, 4
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.then47, label %if.else48

if.then47:                                        ; preds = %if.else44
  store i32 -71, i32* %status, align 4
  br label %if.end63

if.else48:                                        ; preds = %if.else44
  %15 = load i32* %token.addr, align 4
  %and49 = and i32 %15, 32
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.then51, label %if.else56

if.then51:                                        ; preds = %if.else48
  %16 = load i32* %token.addr, align 4
  %shr52 = lshr i32 %16, 8
  %and53 = and i32 %shr52, 3
  %cmp54 = icmp eq i32 %and53, 1
  %cond = select i1 %cmp54, i32 -63, i32 -70
  store i32 %cond, i32* %status, align 4
  br label %if.end62

if.else56:                                        ; preds = %if.else48
  %17 = load i32* %token.addr, align 4
  %and57 = and i32 %17, 8
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then59, label %if.else60

if.then59:                                        ; preds = %if.else56
  store i32 -71, i32* %status, align 4
  br label %if.end61

if.else60:                                        ; preds = %if.else56
  store i32 -71, i32* %status, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.else60, %if.then59
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then51
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then47
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then43
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then39
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.end33
  %18 = load i32* %status, align 4
  store i32 %18, i32* %retval
  br label %return

return:                                           ; preds = %if.end66, %if.then15
  %19 = load i32* %retval
  ret i32 %19
}

declare i32 @usb_hub_clear_tt_buffer(%struct.urb*) noredzone

declare void @usb_hcd_unlink_urb_from_ep(%struct.usb_hcd*, %struct.urb*) noredzone

declare void @usb_hcd_giveback_urb(%struct.usb_hcd*, %struct.urb*, i32) noredzone

define internal void @__list_del_entry(%struct.list_head* %entry1) nounwind inlinehint noredzone {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  %0 = load %struct.list_head** %entry.addr, align 8
  %prev = getelementptr inbounds %struct.list_head* %0, i32 0, i32 1
  %1 = load %struct.list_head** %prev, align 8
  %2 = load %struct.list_head** %entry.addr, align 8
  %next = getelementptr inbounds %struct.list_head* %2, i32 0, i32 0
  %3 = load %struct.list_head** %next, align 8
  call void @__list_del(%struct.list_head* %1, %struct.list_head* %3) noredzone
  ret void
}

define internal void @start_unlink_intr(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 9
  %1 = load i8* %qh_state, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %3 = load %struct.ehci_qh** %qh.addr, align 8
  call void @cancel_unlink_wait_intr(%struct.ehci_hcd* %2, %struct.ehci_qh* %3) noredzone
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load %struct.ehci_qh** %qh.addr, align 8
  call void @qh_unlink_periodic(%struct.ehci_hcd* %4, %struct.ehci_qh* %5) noredzone
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !8
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_cycle = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 30
  %7 = load i32* %intr_unlink_cycle, align 4
  %8 = load %struct.ehci_qh** %qh.addr, align 8
  %unlink_cycle = getelementptr inbounds %struct.ehci_qh* %8, i32 0, i32 8
  store i32 %7, i32* %unlink_cycle, align 4
  %9 = load %struct.ehci_qh** %qh.addr, align 8
  %unlink_node = getelementptr inbounds %struct.ehci_qh* %9, i32 0, i32 6
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 28
  call void @list_add_tail(%struct.list_head* %unlink_node, %struct.list_head* %intr_unlink) noredzone
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %12 = bitcast %struct.ehci_hcd* %11 to i8*
  %bf.field.offs = getelementptr i8* %12, i32 244
  %13 = load i8* %bf.field.offs, align 4
  %14 = lshr i8 %13, 2
  %bf.clear = and i8 %14, 1
  %15 = trunc i8 %bf.clear to i1
  br i1 %15, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  br label %if.end15

if.else:                                          ; preds = %if.end
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 12
  %17 = load i32* %rh_state, align 4
  %cmp3 = icmp ult i32 %17, 2
  br i1 %cmp3, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_handle_intr_unlinks(%struct.ehci_hcd* %18) noredzone
  br label %if.end14

if.else6:                                         ; preds = %if.else
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink7 = getelementptr inbounds %struct.ehci_hcd* %19, i32 0, i32 28
  %next = getelementptr inbounds %struct.list_head* %intr_unlink7, i32 0, i32 0
  %20 = load %struct.list_head** %next, align 8
  %21 = load %struct.ehci_qh** %qh.addr, align 8
  %unlink_node8 = getelementptr inbounds %struct.ehci_qh* %21, i32 0, i32 6
  %cmp9 = icmp eq %struct.list_head* %20, %unlink_node8
  br i1 %cmp9, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.else6
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %22, i32 3, i1 zeroext true) noredzone
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_cycle12 = getelementptr inbounds %struct.ehci_hcd* %23, i32 0, i32 30
  %24 = load i32* %intr_unlink_cycle12, align 4
  %inc = add i32 %24, 1
  store i32 %inc, i32* %intr_unlink_cycle12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.else6
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then5
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.end14, %if.then2
  ret void
}

define internal void @cancel_unlink_wait_intr(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 9
  %1 = load i8* %qh_state, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.ehci_qh** %qh.addr, align 8
  %unlink_node = getelementptr inbounds %struct.ehci_qh* %2, i32 0, i32 6
  %call = call i32 @list_empty(%struct.list_head* %unlink_node) noredzone
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.ehci_qh** %qh.addr, align 8
  %unlink_node2 = getelementptr inbounds %struct.ehci_qh* %3, i32 0, i32 6
  call void @list_del_init(%struct.list_head* %unlink_node2) noredzone
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

define internal void @qh_unlink_periodic(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %i = alloca i32, align 4
  %period = alloca i32, align 4
  %__mptr = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 7
  %period1 = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 5
  %1 = load i16* %period1, align 2
  %conv = zext i16 %1 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ 1, %cond.false ]
  store i32 %cond, i32* %period, align 4
  %2 = load %struct.ehci_qh** %qh.addr, align 8
  %ps2 = getelementptr inbounds %struct.ehci_qh* %2, i32 0, i32 7
  %phase = getelementptr inbounds %struct.ehci_per_sched* %ps2, i32 0, i32 6
  %3 = load i16* %phase, align 2
  %conv3 = zext i16 %3 to i32
  store i32 %conv3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load i32* %i, align 4
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 21
  %6 = load i32* %periodic_size, align 4
  %cmp = icmp ult i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %8 = load i32* %i, align 4
  %9 = load %struct.ehci_qh** %qh.addr, align 8
  %10 = bitcast %struct.ehci_qh* %9 to i8*
  call void @periodic_unlink(%struct.ehci_hcd* %7, i32 %8, i8* %10) noredzone
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32* %period, align 4
  %12 = load i32* %i, align 4
  %add = add i32 %12, %11
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.ehci_qh** %qh.addr, align 8
  %ps5 = getelementptr inbounds %struct.ehci_qh* %13, i32 0, i32 7
  %bw_period = getelementptr inbounds %struct.ehci_per_sched* %ps5, i32 0, i32 12
  %14 = load i8* %bw_period, align 1
  %conv6 = zext i8 %14 to i32
  %tobool7 = icmp ne i32 %conv6, 0
  br i1 %tobool7, label %cond.true8, label %cond.false17

cond.true8:                                       ; preds = %for.end
  %15 = load %struct.ehci_qh** %qh.addr, align 8
  %ps9 = getelementptr inbounds %struct.ehci_qh* %15, i32 0, i32 7
  %usecs = getelementptr inbounds %struct.ehci_per_sched* %ps9, i32 0, i32 9
  %16 = load i8* %usecs, align 1
  %conv10 = zext i8 %16 to i32
  %17 = load %struct.ehci_qh** %qh.addr, align 8
  %ps11 = getelementptr inbounds %struct.ehci_qh* %17, i32 0, i32 7
  %c_usecs = getelementptr inbounds %struct.ehci_per_sched* %ps11, i32 0, i32 10
  %18 = load i8* %c_usecs, align 1
  %conv12 = zext i8 %18 to i32
  %add13 = add i32 %conv10, %conv12
  %19 = load %struct.ehci_qh** %qh.addr, align 8
  %ps14 = getelementptr inbounds %struct.ehci_qh* %19, i32 0, i32 7
  %bw_period15 = getelementptr inbounds %struct.ehci_per_sched* %ps14, i32 0, i32 12
  %20 = load i8* %bw_period15, align 1
  %conv16 = zext i8 %20 to i32
  %div = sdiv i32 %add13, %conv16
  br label %cond.end21

cond.false17:                                     ; preds = %for.end
  %21 = load %struct.ehci_qh** %qh.addr, align 8
  %ps18 = getelementptr inbounds %struct.ehci_qh* %21, i32 0, i32 7
  %usecs19 = getelementptr inbounds %struct.ehci_per_sched* %ps18, i32 0, i32 9
  %22 = load i8* %usecs19, align 1
  %conv20 = zext i8 %22 to i32
  %mul = mul i32 %conv20, 8
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false17, %cond.true8
  %cond22 = phi i32 [ %div, %cond.true8 ], [ %mul, %cond.false17 ]
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %23) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call, i32 0, i32 0
  %bandwidth_allocated = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 14
  %24 = load i32* %bandwidth_allocated, align 4
  %sub = sub i32 %24, %cond22
  store i32 %sub, i32* %bandwidth_allocated, align 4
  %25 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %25, i32 0, i32 9
  store i8 2, i8* %qh_state, align 1
  %26 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %26, i32 0, i32 2
  %ptr = bitcast %union.ehci_shadow* %qh_next to i8**
  store i8* null, i8** %ptr, align 8
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next = getelementptr inbounds %struct.ehci_hcd* %27, i32 0, i32 14
  %28 = load %struct.ehci_qh** %qh_scan_next, align 8
  %29 = load %struct.ehci_qh** %qh.addr, align 8
  %cmp23 = icmp eq %struct.ehci_qh* %28, %29
  br i1 %cmp23, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end21
  %30 = load %struct.ehci_qh** %qh.addr, align 8
  %intr_node = getelementptr inbounds %struct.ehci_qh* %30, i32 0, i32 4
  %next = getelementptr inbounds %struct.list_head* %intr_node, i32 0, i32 0
  %31 = load %struct.list_head** %next, align 8
  store %struct.list_head* %31, %struct.list_head** %__mptr, align 8
  %32 = load %struct.list_head** %__mptr, align 8
  %33 = bitcast %struct.list_head* %32 to i8*
  %add.ptr = getelementptr i8* %33, i64 -40
  %34 = bitcast i8* %add.ptr to %struct.ehci_qh*
  %35 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next25 = getelementptr inbounds %struct.ehci_hcd* %35, i32 0, i32 14
  store %struct.ehci_qh* %34, %struct.ehci_qh** %qh_scan_next25, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end21
  %36 = load %struct.ehci_qh** %qh.addr, align 8
  %intr_node26 = getelementptr inbounds %struct.ehci_qh* %36, i32 0, i32 4
  call void @list_del(%struct.list_head* %intr_node26) noredzone
  ret void
}

define internal void @periodic_unlink(%struct.ehci_hcd* %ehci, i32 %frame, i8* %ptr) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %frame.addr = alloca i32, align 4
  %ptr.addr = alloca i8*, align 8
  %prev_p = alloca %union.ehci_shadow*, align 8
  %hw_p = alloca i32*, align 8
  %here = alloca %union.ehci_shadow, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %frame, i32* %frame.addr, align 4
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i32* %frame.addr, align 4
  %idxprom = zext i32 %0 to i64
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 26
  %2 = load %union.ehci_shadow** %pshadow, align 8
  %arrayidx = getelementptr %union.ehci_shadow* %2, i64 %idxprom
  store %union.ehci_shadow* %arrayidx, %union.ehci_shadow** %prev_p, align 8
  %3 = load i32* %frame.addr, align 4
  %idxprom1 = zext i32 %3 to i64
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 22
  %5 = load i32** %periodic, align 8
  %arrayidx2 = getelementptr i32* %5, i64 %idxprom1
  store i32* %arrayidx2, i32** %hw_p, align 8
  %6 = load %union.ehci_shadow** %prev_p, align 8
  %7 = bitcast %union.ehci_shadow* %here to i8*
  %8 = bitcast %union.ehci_shadow* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 8, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %ptr3 = bitcast %union.ehci_shadow* %here to i8**
  %9 = load i8** %ptr3, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %ptr4 = bitcast %union.ehci_shadow* %here to i8**
  %10 = load i8** %ptr4, align 8
  %11 = load i8** %ptr.addr, align 8
  %cmp = icmp ne i8* %10, %11
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %12, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %14 = load %union.ehci_shadow** %prev_p, align 8
  %15 = load i32** %hw_p, align 8
  %16 = load i32* %15, align 4
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %17, i32 6) noredzone
  %and = and i32 %16, %call
  %call5 = call %union.ehci_shadow* @periodic_next_shadow(%struct.ehci_hcd* %13, %union.ehci_shadow* %14, i32 %and) noredzone
  store %union.ehci_shadow* %call5, %union.ehci_shadow** %prev_p, align 8
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %19 = load i32** %hw_p, align 8
  %20 = load i32* %19, align 4
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call6 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %21, i32 6) noredzone
  %and7 = and i32 %20, %call6
  %call8 = call i32* @shadow_next_periodic(%struct.ehci_hcd* %18, %union.ehci_shadow* %here, i32 %and7) noredzone
  store i32* %call8, i32** %hw_p, align 8
  %22 = load %union.ehci_shadow** %prev_p, align 8
  %23 = bitcast %union.ehci_shadow* %here to i8*
  %24 = bitcast %union.ehci_shadow* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 8, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %ptr9 = bitcast %union.ehci_shadow* %here to i8**
  %25 = load i8** %ptr9, align 8
  %tobool10 = icmp ne i8* %25, null
  br i1 %tobool10, label %if.end, label %if.then

if.then:                                          ; preds = %while.end
  br label %if.end25

if.end:                                           ; preds = %while.end
  %26 = load %union.ehci_shadow** %prev_p, align 8
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %28 = load i32** %hw_p, align 8
  %29 = load i32* %28, align 4
  %30 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call11 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %30, i32 6) noredzone
  %and12 = and i32 %29, %call11
  %call13 = call %union.ehci_shadow* @periodic_next_shadow(%struct.ehci_hcd* %27, %union.ehci_shadow* %here, i32 %and12) noredzone
  %31 = bitcast %union.ehci_shadow* %26 to i8*
  %32 = bitcast %union.ehci_shadow* %call13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 8, i32 8, i1 false)
  %33 = load %struct.ehci_hcd** %ehci.addr, align 8
  %34 = bitcast %struct.ehci_hcd* %33 to i8*
  %bf.field.offs = getelementptr i8* %34, i32 708
  %35 = bitcast i8* %bf.field.offs to i32*
  %36 = load i32* %35, align 4
  %37 = lshr i32 %36, 8
  %bf.clear = and i32 %37, 1
  %tobool14 = icmp ne i32 %bf.clear, 0
  br i1 %tobool14, label %lor.lhs.false, label %if.then20

lor.lhs.false:                                    ; preds = %if.end
  %38 = load %struct.ehci_hcd** %ehci.addr, align 8
  %39 = load i32** %hw_p, align 8
  %40 = load i32* %39, align 4
  %41 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call15 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %41, i32 6) noredzone
  %and16 = and i32 %40, %call15
  %call17 = call i32* @shadow_next_periodic(%struct.ehci_hcd* %38, %union.ehci_shadow* %here, i32 %and16) noredzone
  %42 = load i32* %call17, align 4
  %43 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call18 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %43, i32 1) noredzone
  %cmp19 = icmp ne i32 %42, %call18
  br i1 %cmp19, label %if.then20, label %if.else

if.then20:                                        ; preds = %lor.lhs.false, %if.end
  %44 = load %struct.ehci_hcd** %ehci.addr, align 8
  %45 = load i32** %hw_p, align 8
  %46 = load i32* %45, align 4
  %47 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call21 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %47, i32 6) noredzone
  %and22 = and i32 %46, %call21
  %call23 = call i32* @shadow_next_periodic(%struct.ehci_hcd* %44, %union.ehci_shadow* %here, i32 %and22) noredzone
  %48 = load i32* %call23, align 4
  %49 = load i32** %hw_p, align 8
  store i32 %48, i32* %49, align 4
  br label %if.end25

if.else:                                          ; preds = %lor.lhs.false
  %50 = load %struct.ehci_hcd** %ehci.addr, align 8
  %51 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy = getelementptr inbounds %struct.ehci_hcd* %51, i32 0, i32 16
  %52 = load %struct.ehci_qh** %dummy, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %52, i32 0, i32 1
  %53 = load i64* %qh_dma, align 8
  %conv = trunc i64 %53 to i32
  %call24 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %50, i32 %conv) noredzone
  %54 = load i32** %hw_p, align 8
  store i32 %call24, i32* %54, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then, %if.else, %if.then20
  ret void
}

define internal void @single_unlink_async(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  %prev = alloca %struct.ehci_qh*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 9
  store i8 4, i8* %qh_state, align 1
  %1 = load %struct.ehci_qh** %qh.addr, align 8
  %unlink_node = getelementptr inbounds %struct.ehci_qh* %1, i32 0, i32 6
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 17
  call void @list_add_tail(%struct.list_head* %unlink_node, %struct.list_head* %async_unlink) noredzone
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 15
  %4 = load %struct.ehci_qh** %async, align 8
  store %struct.ehci_qh* %4, %struct.ehci_qh** %prev, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load %struct.ehci_qh** %prev, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %5, i32 0, i32 2
  %qh1 = bitcast %union.ehci_shadow* %qh_next to %struct.ehci_qh**
  %6 = load %struct.ehci_qh** %qh1, align 8
  %7 = load %struct.ehci_qh** %qh.addr, align 8
  %cmp = icmp ne %struct.ehci_qh* %6, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.ehci_qh** %prev, align 8
  %qh_next2 = getelementptr inbounds %struct.ehci_qh* %8, i32 0, i32 2
  %qh3 = bitcast %union.ehci_shadow* %qh_next2 to %struct.ehci_qh**
  %9 = load %struct.ehci_qh** %qh3, align 8
  store %struct.ehci_qh* %9, %struct.ehci_qh** %prev, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load %struct.ehci_qh** %qh.addr, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %10, i32 0, i32 0
  %11 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qh_hw* %11, i32 0, i32 0
  %12 = load i32* %hw_next, align 4
  %13 = load %struct.ehci_qh** %prev, align 8
  %hw4 = getelementptr inbounds %struct.ehci_qh* %13, i32 0, i32 0
  %14 = load %struct.ehci_qh_hw** %hw4, align 8
  %hw_next5 = getelementptr inbounds %struct.ehci_qh_hw* %14, i32 0, i32 0
  store i32 %12, i32* %hw_next5, align 4
  %15 = load %struct.ehci_qh** %prev, align 8
  %qh_next6 = getelementptr inbounds %struct.ehci_qh* %15, i32 0, i32 2
  %16 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_next7 = getelementptr inbounds %struct.ehci_qh* %16, i32 0, i32 2
  %17 = bitcast %union.ehci_shadow* %qh_next6 to i8*
  %18 = bitcast %union.ehci_shadow* %qh_next7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 8, i32 8, i1 false)
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next = getelementptr inbounds %struct.ehci_hcd* %19, i32 0, i32 14
  %20 = load %struct.ehci_qh** %qh_scan_next, align 8
  %21 = load %struct.ehci_qh** %qh.addr, align 8
  %cmp8 = icmp eq %struct.ehci_qh* %20, %21
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %22 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_next9 = getelementptr inbounds %struct.ehci_qh* %22, i32 0, i32 2
  %qh10 = bitcast %union.ehci_shadow* %qh_next9 to %struct.ehci_qh**
  %23 = load %struct.ehci_qh** %qh10, align 8
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next11 = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 14
  store %struct.ehci_qh* %23, %struct.ehci_qh** %qh_scan_next11, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  ret void
}

define internal void @start_iaa_cycle(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = bitcast %struct.ehci_hcd* %0 to i8*
  %bf.field.offs = getelementptr i8* %1, i32 244
  %2 = load i8* %bf.field.offs, align 4
  %3 = lshr i8 %2, 3
  %bf.clear = and i8 %3, 1
  %4 = trunc i8 %bf.clear to i1
  br i1 %4, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end19

if.end:                                           ; preds = %entry
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %6 = bitcast %struct.ehci_hcd* %5 to i8*
  %bf.field.offs1 = getelementptr i8* %6, i32 244
  %7 = load i8* %bf.field.offs1, align 4
  %8 = and i8 %7, -9
  %9 = or i8 %8, 8
  store i8 %9, i8* %bf.field.offs1, align 4
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 12
  %11 = load i32* %rh_state, align 4
  %cmp = icmp ult i32 %11, 2
  %lnot = xor i1 %cmp, true
  %lnot2 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @end_unlink_async(%struct.ehci_hcd* %12) noredzone
  br label %if.end19

if.else:                                          ; preds = %if.end
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state4 = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 12
  %14 = load i32* %rh_state4, align 4
  %cmp5 = icmp eq i32 %14, 2
  %lnot7 = xor i1 %cmp5, true
  %lnot9 = xor i1 %lnot7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %conv11 = sext i32 %lnot.ext10 to i64
  %expval12 = call i64 @llvm.expect.i64(i64 %conv11, i64 1)
  %tobool13 = icmp ne i64 %expval12, 0
  br i1 %tobool13, label %if.then14, label %if.end18

if.then14:                                        ; preds = %if.else
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !9
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 55
  %17 = load i32* %command, align 4
  %or = or i32 %17, 64
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %18, i32 0, i32 8
  %19 = load %struct.ehci_regs** %regs, align 8
  %command15 = getelementptr inbounds %struct.ehci_regs* %19, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %15, i32 %or, i32* %command15) noredzone
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs16 = getelementptr inbounds %struct.ehci_hcd* %21, i32 0, i32 8
  %22 = load %struct.ehci_regs** %regs16, align 8
  %command17 = getelementptr inbounds %struct.ehci_regs* %22, i32 0, i32 0
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %20, i32* %command17) noredzone
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %23, i32 7, i1 zeroext true) noredzone
  br label %if.end18

if.end18:                                         ; preds = %if.then14, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.then, %if.end18, %if.then3
  ret void
}

define internal void @list_splice_tail_init(%struct.list_head* %list, %struct.list_head* %head) nounwind inlinehint noredzone {
entry:
  %list.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head** %list.addr, align 8
  %call = call i32 @list_empty(%struct.list_head* %0) noredzone
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.list_head** %list.addr, align 8
  %2 = load %struct.list_head** %head.addr, align 8
  %prev = getelementptr inbounds %struct.list_head* %2, i32 0, i32 1
  %3 = load %struct.list_head** %prev, align 8
  %4 = load %struct.list_head** %head.addr, align 8
  call void @__list_splice(%struct.list_head* %1, %struct.list_head* %3, %struct.list_head* %4) noredzone
  %5 = load %struct.list_head** %list.addr, align 8
  call void @INIT_LIST_HEAD(%struct.list_head* %5) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define internal void @list_move_tail(%struct.list_head* %list, %struct.list_head* %head) nounwind inlinehint noredzone {
entry:
  %list.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head** %list.addr, align 8
  call void @__list_del_entry(%struct.list_head* %0) noredzone
  %1 = load %struct.list_head** %list.addr, align 8
  %2 = load %struct.list_head** %head.addr, align 8
  call void @list_add_tail(%struct.list_head* %1, %struct.list_head* %2) noredzone
  ret void
}

define internal void @disable_async(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %__ret_warn_on = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_count = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 20
  %1 = load i32* %async_count, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %async_count, align 4
  %tobool = icmp ne i32 %dec, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 15
  %3 = load %struct.ehci_qh** %async, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %3, i32 0, i32 2
  %qh = bitcast %union.ehci_shadow* %qh_next to %struct.ehci_qh**
  %4 = load %struct.ehci_qh** %qh, align 8
  %tobool1 = icmp ne %struct.ehci_qh* %4, null
  br i1 %tobool1, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 17
  %call = call i32 @list_empty(%struct.list_head* %async_unlink) noredzone
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_idle = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 18
  %call3 = call i32 @list_empty(%struct.list_head* %async_idle) noredzone
  %tobool4 = icmp ne i32 %call3, 0
  %lnot = xor i1 %tobool4, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %if.end
  %7 = phi i1 [ true, %lor.lhs.false ], [ true, %if.end ], [ %lnot, %lor.rhs ]
  %lnot5 = xor i1 %7, true
  %lnot6 = xor i1 %lnot5, true
  %lnot.ext = zext i1 %lnot6 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %8 = load i32* %__ret_warn_on, align 4
  %tobool7 = icmp ne i32 %8, 0
  %lnot8 = xor i1 %tobool7, true
  %lnot10 = xor i1 %lnot8, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %conv = sext i32 %lnot.ext11 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool12 = icmp ne i64 %expval, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([59 x i8]* @.str5, i32 0, i32 0), i32 968) noredzone
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %lor.end
  %9 = load i32* %__ret_warn_on, align 4
  %tobool15 = icmp ne i32 %9, 0
  %lnot16 = xor i1 %tobool15, true
  %lnot18 = xor i1 %lnot16, true
  %lnot.ext19 = zext i1 %lnot18 to i32
  %conv20 = sext i32 %lnot.ext19 to i64
  %expval21 = call i64 @llvm.expect.i64(i64 %conv20, i64 0)
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_poll_ASS(%struct.ehci_hcd* %10) noredzone
  br label %return

return:                                           ; preds = %if.end14, %if.then
  ret void
}

define internal void @__list_splice(%struct.list_head* %list, %struct.list_head* %prev, %struct.list_head* %next) nounwind inlinehint noredzone {
entry:
  %list.addr = alloca %struct.list_head*, align 8
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  %first = alloca %struct.list_head*, align 8
  %last = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  %0 = load %struct.list_head** %list.addr, align 8
  %next1 = getelementptr inbounds %struct.list_head* %0, i32 0, i32 0
  %1 = load %struct.list_head** %next1, align 8
  store %struct.list_head* %1, %struct.list_head** %first, align 8
  %2 = load %struct.list_head** %list.addr, align 8
  %prev2 = getelementptr inbounds %struct.list_head* %2, i32 0, i32 1
  %3 = load %struct.list_head** %prev2, align 8
  store %struct.list_head* %3, %struct.list_head** %last, align 8
  %4 = load %struct.list_head** %prev.addr, align 8
  %5 = load %struct.list_head** %first, align 8
  %prev3 = getelementptr inbounds %struct.list_head* %5, i32 0, i32 1
  store %struct.list_head* %4, %struct.list_head** %prev3, align 8
  %6 = load %struct.list_head** %first, align 8
  %7 = load %struct.list_head** %prev.addr, align 8
  %next4 = getelementptr inbounds %struct.list_head* %7, i32 0, i32 0
  store %struct.list_head* %6, %struct.list_head** %next4, align 8
  %8 = load %struct.list_head** %next.addr, align 8
  %9 = load %struct.list_head** %last, align 8
  %next5 = getelementptr inbounds %struct.list_head* %9, i32 0, i32 0
  store %struct.list_head* %8, %struct.list_head** %next5, align 8
  %10 = load %struct.list_head** %last, align 8
  %11 = load %struct.list_head** %next.addr, align 8
  %prev6 = getelementptr inbounds %struct.list_head* %11, i32 0, i32 1
  store %struct.list_head* %10, %struct.list_head** %prev6, align 8
  ret void
}

declare i32 @dev_warn(%struct.device*, i8*, ...) noredzone

define internal void @ehci_work(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = bitcast %struct.ehci_hcd* %0 to i8*
  %bf.field.offs = getelementptr i8* %1, i32 244
  %2 = load i8* %bf.field.offs, align 4
  %bf.clear = and i8 %2, 1
  %3 = trunc i8 %bf.clear to i1
  br i1 %3, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = bitcast %struct.ehci_hcd* %4 to i8*
  %bf.field.offs1 = getelementptr i8* %5, i32 244
  %6 = load i8* %bf.field.offs1, align 4
  %7 = and i8 %6, -3
  %8 = or i8 %7, 2
  store i8 %8, i8* %bf.field.offs1, align 4
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %10 = bitcast %struct.ehci_hcd* %9 to i8*
  %bf.field.offs2 = getelementptr i8* %10, i32 244
  %11 = load i8* %bf.field.offs2, align 4
  %12 = and i8 %11, -2
  %13 = or i8 %12, 1
  store i8 %13, i8* %bf.field.offs2, align 4
  br label %rescan

rescan:                                           ; preds = %if.then13, %if.end
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %15 = bitcast %struct.ehci_hcd* %14 to i8*
  %bf.field.offs3 = getelementptr i8* %15, i32 244
  %16 = load i8* %bf.field.offs3, align 4
  %17 = and i8 %16, -3
  store i8 %17, i8* %bf.field.offs3, align 4
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_count = getelementptr inbounds %struct.ehci_hcd* %18, i32 0, i32 20
  %19 = load i32* %async_count, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %rescan
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @scan_async(%struct.ehci_hcd* %20) noredzone
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %rescan
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_count = getelementptr inbounds %struct.ehci_hcd* %21, i32 0, i32 33
  %22 = load i32* %intr_count, align 4
  %cmp = icmp ugt i32 %22, 0
  br i1 %cmp, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end5
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @scan_intr(%struct.ehci_hcd* %23) noredzone
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end5
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %isoc_count = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 34
  %25 = load i32* %isoc_count, align 4
  %cmp8 = icmp ugt i32 %25, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @scan_isoc(%struct.ehci_hcd* %26) noredzone
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end7
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %28 = bitcast %struct.ehci_hcd* %27 to i8*
  %bf.field.offs11 = getelementptr i8* %28, i32 244
  %29 = load i8* %bf.field.offs11, align 4
  %30 = lshr i8 %29, 1
  %bf.clear12 = and i8 %30, 1
  %31 = trunc i8 %bf.clear12 to i1
  br i1 %31, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end10
  br label %rescan

if.end14:                                         ; preds = %if.end10
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %33 = bitcast %struct.ehci_hcd* %32 to i8*
  %bf.field.offs15 = getelementptr i8* %33, i32 244
  %34 = load i8* %bf.field.offs15, align 4
  %35 = and i8 %34, -2
  store i8 %35, i8* %bf.field.offs15, align 4
  %36 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @turn_on_io_watchdog(%struct.ehci_hcd* %36) noredzone
  br label %return

return:                                           ; preds = %if.end14, %if.then
  ret void
}

define internal void @scan_async(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %check_unlinks_later = alloca i8, align 1
  %temp = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i8 0, i8* %check_unlinks_later, align 1
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 15
  %1 = load %struct.ehci_qh** %async, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %1, i32 0, i32 2
  %qh1 = bitcast %union.ehci_shadow* %qh_next to %struct.ehci_qh**
  %2 = load %struct.ehci_qh** %qh1, align 8
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 14
  store %struct.ehci_qh* %2, %struct.ehci_qh** %qh_scan_next, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end20, %entry
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next2 = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 14
  %5 = load %struct.ehci_qh** %qh_scan_next2, align 8
  %tobool = icmp ne %struct.ehci_qh* %5, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next3 = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 14
  %7 = load %struct.ehci_qh** %qh_scan_next3, align 8
  store %struct.ehci_qh* %7, %struct.ehci_qh** %qh, align 8
  %8 = load %struct.ehci_qh** %qh, align 8
  %qh_next4 = getelementptr inbounds %struct.ehci_qh* %8, i32 0, i32 2
  %qh5 = bitcast %union.ehci_shadow* %qh_next4 to %struct.ehci_qh**
  %9 = load %struct.ehci_qh** %qh5, align 8
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next6 = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 14
  store %struct.ehci_qh* %9, %struct.ehci_qh** %qh_scan_next6, align 8
  %11 = load %struct.ehci_qh** %qh, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %11, i32 0, i32 3
  %call = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool7 = icmp ne i32 %call, 0
  br i1 %tobool7, label %if.end20, label %if.then

if.then:                                          ; preds = %while.body
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %13 = load %struct.ehci_qh** %qh, align 8
  %call8 = call i32 @qh_completions(%struct.ehci_hcd* %12, %struct.ehci_qh* %13) noredzone
  store i32 %call8, i32* %temp, align 4
  %14 = load i32* %temp, align 4
  %tobool9 = icmp ne i32 %14, 0
  %lnot = xor i1 %tobool9, true
  %lnot10 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot10 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool11 = icmp ne i64 %expval, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %16 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_async(%struct.ehci_hcd* %15, %struct.ehci_qh* %16) noredzone
  br label %if.end19

if.else:                                          ; preds = %if.then
  %17 = load %struct.ehci_qh** %qh, align 8
  %qtd_list13 = getelementptr inbounds %struct.ehci_qh* %17, i32 0, i32 3
  %call14 = call i32 @list_empty(%struct.list_head* %qtd_list13) noredzone
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %18 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %18, i32 0, i32 9
  %19 = load i8* %qh_state, align 1
  %conv16 = zext i8 %19 to i32
  %cmp = icmp eq i32 %conv16, 1
  br i1 %cmp, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink_cycle = getelementptr inbounds %struct.ehci_hcd* %20, i32 0, i32 19
  %21 = load i32* %async_unlink_cycle, align 4
  %22 = load %struct.ehci_qh** %qh, align 8
  %unlink_cycle = getelementptr inbounds %struct.ehci_qh* %22, i32 0, i32 8
  store i32 %21, i32* %unlink_cycle, align 4
  store i8 1, i8* %check_unlinks_later, align 1
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then12
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load i8* %check_unlinks_later, align 1
  %tobool21 = trunc i8 %23 to i1
  br i1 %tobool21, label %land.lhs.true23, label %if.end31

land.lhs.true23:                                  ; preds = %while.end
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 12
  %25 = load i32* %rh_state, align 4
  %cmp24 = icmp eq i32 %25, 2
  br i1 %cmp24, label %land.lhs.true26, label %if.end31

land.lhs.true26:                                  ; preds = %land.lhs.true23
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %26, i32 0, i32 1
  %27 = load i32* %enabled_hrtimer_events, align 4
  %conv27 = zext i32 %27 to i64
  %and = and i64 %conv27, 64
  %tobool28 = icmp ne i64 %and, 0
  br i1 %tobool28, label %if.end31, label %if.then29

if.then29:                                        ; preds = %land.lhs.true26
  %28 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %28, i32 6, i1 zeroext true) noredzone
  %29 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink_cycle30 = getelementptr inbounds %struct.ehci_hcd* %29, i32 0, i32 19
  %30 = load i32* %async_unlink_cycle30, align 4
  %inc = add i32 %30, 1
  store i32 %inc, i32* %async_unlink_cycle30, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %land.lhs.true26, %land.lhs.true23, %while.end
  ret void
}

define internal void @scan_intr(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %__mptr1 = alloca %struct.list_head*, align 8
  %temp = alloca i32, align 4
  %__mptr28 = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_qh_list = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 24
  %next = getelementptr inbounds %struct.list_head* %intr_qh_list, i32 0, i32 0
  %1 = load %struct.list_head** %next, align 8
  store %struct.list_head* %1, %struct.list_head** %__mptr, align 8
  %2 = load %struct.list_head** %__mptr, align 8
  %3 = bitcast %struct.list_head* %2 to i8*
  %add.ptr = getelementptr i8* %3, i64 -40
  %4 = bitcast i8* %add.ptr to %struct.ehci_qh*
  store %struct.ehci_qh* %4, %struct.ehci_qh** %qh, align 8
  %5 = load %struct.ehci_qh** %qh, align 8
  %intr_node = getelementptr inbounds %struct.ehci_qh* %5, i32 0, i32 4
  %next2 = getelementptr inbounds %struct.list_head* %intr_node, i32 0, i32 0
  %6 = load %struct.list_head** %next2, align 8
  store %struct.list_head* %6, %struct.list_head** %__mptr1, align 8
  %7 = load %struct.list_head** %__mptr1, align 8
  %8 = bitcast %struct.list_head* %7 to i8*
  %add.ptr3 = getelementptr i8* %8, i64 -40
  %9 = bitcast i8* %add.ptr3 to %struct.ehci_qh*
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 14
  store %struct.ehci_qh* %9, %struct.ehci_qh** %qh_scan_next, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load %struct.ehci_qh** %qh, align 8
  %intr_node4 = getelementptr inbounds %struct.ehci_qh* %11, i32 0, i32 4
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_qh_list5 = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 24
  %cmp = icmp ne %struct.list_head* %intr_node4, %intr_qh_list5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.ehci_qh** %qh, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %13, i32 0, i32 3
  %call = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end26, label %if.then

if.then:                                          ; preds = %for.body
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %15 = load %struct.ehci_qh** %qh, align 8
  %call6 = call i32 @qh_completions(%struct.ehci_hcd* %14, %struct.ehci_qh* %15) noredzone
  store i32 %call6, i32* %temp, align 4
  %16 = load i32* %temp, align 4
  %tobool7 = icmp ne i32 %16, 0
  %lnot = xor i1 %tobool7, true
  %lnot8 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool9 = icmp ne i64 %expval, 0
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.then
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %18 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_intr(%struct.ehci_hcd* %17, %struct.ehci_qh* %18) noredzone
  br label %if.end25

if.else:                                          ; preds = %if.then
  %19 = load %struct.ehci_qh** %qh, align 8
  %qtd_list11 = getelementptr inbounds %struct.ehci_qh* %19, i32 0, i32 3
  %call12 = call i32 @list_empty(%struct.list_head* %qtd_list11) noredzone
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else
  %20 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %20, i32 0, i32 9
  %21 = load i8* %qh_state, align 1
  %conv14 = zext i8 %21 to i32
  %cmp15 = icmp eq i32 %conv14, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else
  %22 = phi i1 [ false, %if.else ], [ %cmp15, %land.rhs ]
  %lnot17 = xor i1 %22, true
  %lnot19 = xor i1 %lnot17, true
  %lnot.ext20 = zext i1 %lnot19 to i32
  %conv21 = sext i32 %lnot.ext20 to i64
  %expval22 = call i64 @llvm.expect.i64(i64 %conv21, i64 0)
  %tobool23 = icmp ne i64 %expval22, 0
  br i1 %tobool23, label %if.then24, label %if.end

if.then24:                                        ; preds = %land.end
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %24 = load %struct.ehci_qh** %qh, align 8
  call void @start_unlink_intr_wait(%struct.ehci_hcd* %23, %struct.ehci_qh* %24) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then24, %land.end
  br label %if.end25

if.end25:                                         ; preds = %if.end, %if.then10
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end26
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next27 = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 14
  %26 = load %struct.ehci_qh** %qh_scan_next27, align 8
  store %struct.ehci_qh* %26, %struct.ehci_qh** %qh, align 8
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next29 = getelementptr inbounds %struct.ehci_hcd* %27, i32 0, i32 14
  %28 = load %struct.ehci_qh** %qh_scan_next29, align 8
  %intr_node30 = getelementptr inbounds %struct.ehci_qh* %28, i32 0, i32 4
  %next31 = getelementptr inbounds %struct.list_head* %intr_node30, i32 0, i32 0
  %29 = load %struct.list_head** %next31, align 8
  store %struct.list_head* %29, %struct.list_head** %__mptr28, align 8
  %30 = load %struct.list_head** %__mptr28, align 8
  %31 = bitcast %struct.list_head* %30 to i8*
  %add.ptr32 = getelementptr i8* %31, i64 -40
  %32 = bitcast i8* %add.ptr32 to %struct.ehci_qh*
  %33 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_scan_next33 = getelementptr inbounds %struct.ehci_hcd* %33, i32 0, i32 14
  store %struct.ehci_qh* %32, %struct.ehci_qh** %qh_scan_next33, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define internal void @scan_isoc(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %uf = alloca i32, align 4
  %now_frame = alloca i32, align 4
  %frame = alloca i32, align 4
  %fmask = alloca i32, align 4
  %modified = alloca i8, align 1
  %live = alloca i8, align 1
  %q = alloca %union.ehci_shadow, align 8
  %q_p = alloca %union.ehci_shadow*, align 8
  %type = alloca i32, align 4
  %hw_p = alloca i32*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 21
  %1 = load i32* %periodic_size, align 4
  %sub = sub i32 %1, 1
  store i32 %sub, i32* %fmask, align 4
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 12
  %3 = load i32* %rh_state, align 4
  %cmp = icmp uge i32 %3, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @ehci_read_frame_index(%struct.ehci_hcd* %4) noredzone
  store i32 %call, i32* %uf, align 4
  %5 = load i32* %uf, align 4
  %shr = lshr i32 %5, 3
  %6 = load i32* %fmask, align 4
  %and = and i32 %shr, %6
  store i32 %and, i32* %now_frame, align 4
  store i8 1, i8* %live, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_iso_frame = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 32
  %8 = load i32* %last_iso_frame, align 4
  %sub1 = sub i32 %8, 1
  %9 = load i32* %fmask, align 4
  %and2 = and i32 %sub1, %9
  store i32 %and2, i32* %now_frame, align 4
  store i8 0, i8* %live, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32* %now_frame, align 4
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %now_frame3 = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 31
  store i32 %10, i32* %now_frame3, align 4
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_iso_frame4 = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 32
  %13 = load i32* %last_iso_frame4, align 4
  store i32 %13, i32* %frame, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end117, %if.end
  br label %restart

restart:                                          ; preds = %if.then112, %for.cond
  %14 = load i32* %frame, align 4
  %idxprom = zext i32 %14 to i64
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 26
  %16 = load %union.ehci_shadow** %pshadow, align 8
  %arrayidx = getelementptr %union.ehci_shadow* %16, i64 %idxprom
  store %union.ehci_shadow* %arrayidx, %union.ehci_shadow** %q_p, align 8
  %17 = load i32* %frame, align 4
  %idxprom5 = zext i32 %17 to i64
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic = getelementptr inbounds %struct.ehci_hcd* %18, i32 0, i32 22
  %19 = load i32** %periodic, align 8
  %arrayidx6 = getelementptr i32* %19, i64 %idxprom5
  store i32* %arrayidx6, i32** %hw_p, align 8
  %20 = load %union.ehci_shadow** %q_p, align 8
  %ptr = bitcast %union.ehci_shadow* %20 to i8**
  %21 = load i8** %ptr, align 8
  %ptr7 = bitcast %union.ehci_shadow* %q to i8**
  store i8* %21, i8** %ptr7, align 8
  %22 = load i32** %hw_p, align 8
  %23 = load i32* %22, align 4
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call8 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %24, i32 6) noredzone
  %and9 = and i32 %23, %call8
  store i32 %and9, i32* %type, align 4
  store i8 0, i8* %modified, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end113, %restart
  %ptr10 = bitcast %union.ehci_shadow* %q to i8**
  %25 = load i8** %ptr10, align 8
  %cmp11 = icmp ne i8* %25, null
  br i1 %cmp11, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %27 = load i32* %type, align 4
  %call12 = call i32 @hc32_to_cpu(%struct.ehci_hcd* %26, i32 %27) noredzone
  switch i32 %call12, label %sw.default [
    i32 0, label %sw.bb
    i32 4, label %sw.bb53
    i32 2, label %sw.bb103
    i32 6, label %sw.bb103
  ]

sw.bb:                                            ; preds = %while.body
  %28 = load i32* %frame, align 4
  %29 = load i32* %now_frame, align 4
  %cmp13 = icmp eq i32 %28, %29
  br i1 %cmp13, label %land.lhs.true, label %if.end33

land.lhs.true:                                    ; preds = %sw.bb
  %30 = load i8* %live, align 1
  %tobool = trunc i8 %30 to i1
  br i1 %tobool, label %if.then14, label %if.end33

if.then14:                                        ; preds = %land.lhs.true
  call void asm sideeffect "lfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !10
  store i32 0, i32* %uf, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc, %if.then14
  %31 = load i32* %uf, align 4
  %cmp16 = icmp ult i32 %31, 8
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond15
  %32 = load i32* %uf, align 4
  %idxprom17 = zext i32 %32 to i64
  %itd = bitcast %union.ehci_shadow* %q to %struct.ehci_itd**
  %33 = load %struct.ehci_itd** %itd, align 8
  %hw_transaction = getelementptr inbounds %struct.ehci_itd* %33, i32 0, i32 1
  %arrayidx18 = getelementptr [8 x i32]* %hw_transaction, i32 0, i64 %idxprom17
  %34 = load i32* %arrayidx18, align 4
  %35 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call19 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %35, i32 -2147483648) noredzone
  %and20 = and i32 %34, %call19
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %for.body
  br label %for.end

if.end23:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end23
  %36 = load i32* %uf, align 4
  %inc = add i32 %36, 1
  store i32 %inc, i32* %uf, align 4
  br label %for.cond15

for.end:                                          ; preds = %if.then22, %for.cond15
  %37 = load i32* %uf, align 4
  %cmp24 = icmp ult i32 %37, 8
  br i1 %cmp24, label %if.then25, label %if.end32

if.then25:                                        ; preds = %for.end
  %itd26 = bitcast %union.ehci_shadow* %q to %struct.ehci_itd**
  %38 = load %struct.ehci_itd** %itd26, align 8
  %itd_next = getelementptr inbounds %struct.ehci_itd* %38, i32 0, i32 5
  store %union.ehci_shadow* %itd_next, %union.ehci_shadow** %q_p, align 8
  %itd27 = bitcast %union.ehci_shadow* %q to %struct.ehci_itd**
  %39 = load %struct.ehci_itd** %itd27, align 8
  %hw_next = getelementptr inbounds %struct.ehci_itd* %39, i32 0, i32 0
  store i32* %hw_next, i32** %hw_p, align 8
  %itd28 = bitcast %union.ehci_shadow* %q to %struct.ehci_itd**
  %40 = load %struct.ehci_itd** %itd28, align 8
  %hw_next29 = getelementptr inbounds %struct.ehci_itd* %40, i32 0, i32 0
  %41 = load i32* %hw_next29, align 4
  %42 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call30 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %42, i32 6) noredzone
  %and31 = and i32 %41, %call30
  store i32 %and31, i32* %type, align 4
  %43 = load %union.ehci_shadow** %q_p, align 8
  %44 = bitcast %union.ehci_shadow* %q to i8*
  %45 = bitcast %union.ehci_shadow* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %45, i64 8, i32 8, i1 false)
  br label %sw.epilog

if.end32:                                         ; preds = %for.end
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %land.lhs.true, %sw.bb
  %46 = load %union.ehci_shadow** %q_p, align 8
  %itd34 = bitcast %union.ehci_shadow* %q to %struct.ehci_itd**
  %47 = load %struct.ehci_itd** %itd34, align 8
  %itd_next35 = getelementptr inbounds %struct.ehci_itd* %47, i32 0, i32 5
  %48 = bitcast %union.ehci_shadow* %46 to i8*
  %49 = bitcast %union.ehci_shadow* %itd_next35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 8, i32 8, i1 false)
  %50 = load %struct.ehci_hcd** %ehci.addr, align 8
  %51 = bitcast %struct.ehci_hcd* %50 to i8*
  %bf.field.offs = getelementptr i8* %51, i32 708
  %52 = bitcast i8* %bf.field.offs to i32*
  %53 = load i32* %52, align 4
  %54 = lshr i32 %53, 8
  %bf.clear = and i32 %54, 1
  %tobool36 = icmp ne i32 %bf.clear, 0
  br i1 %tobool36, label %lor.lhs.false, label %if.then41

lor.lhs.false:                                    ; preds = %if.end33
  %itd37 = bitcast %union.ehci_shadow* %q to %struct.ehci_itd**
  %55 = load %struct.ehci_itd** %itd37, align 8
  %hw_next38 = getelementptr inbounds %struct.ehci_itd* %55, i32 0, i32 0
  %56 = load i32* %hw_next38, align 4
  %57 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call39 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %57, i32 1) noredzone
  %cmp40 = icmp ne i32 %56, %call39
  br i1 %cmp40, label %if.then41, label %if.else44

if.then41:                                        ; preds = %lor.lhs.false, %if.end33
  %itd42 = bitcast %union.ehci_shadow* %q to %struct.ehci_itd**
  %58 = load %struct.ehci_itd** %itd42, align 8
  %hw_next43 = getelementptr inbounds %struct.ehci_itd* %58, i32 0, i32 0
  %59 = load i32* %hw_next43, align 4
  %60 = load i32** %hw_p, align 8
  store i32 %59, i32* %60, align 4
  br label %if.end46

if.else44:                                        ; preds = %lor.lhs.false
  %61 = load %struct.ehci_hcd** %ehci.addr, align 8
  %62 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy = getelementptr inbounds %struct.ehci_hcd* %62, i32 0, i32 16
  %63 = load %struct.ehci_qh** %dummy, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %63, i32 0, i32 1
  %64 = load i64* %qh_dma, align 8
  %conv = trunc i64 %64 to i32
  %call45 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %61, i32 %conv) noredzone
  %65 = load i32** %hw_p, align 8
  store i32 %call45, i32* %65, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.else44, %if.then41
  %itd47 = bitcast %union.ehci_shadow* %q to %struct.ehci_itd**
  %66 = load %struct.ehci_itd** %itd47, align 8
  %hw_next48 = getelementptr inbounds %struct.ehci_itd* %66, i32 0, i32 0
  %67 = load i32* %hw_next48, align 4
  %68 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call49 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %68, i32 6) noredzone
  %and50 = and i32 %67, %call49
  store i32 %and50, i32* %type, align 4
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !11
  %69 = load %struct.ehci_hcd** %ehci.addr, align 8
  %itd51 = bitcast %union.ehci_shadow* %q to %struct.ehci_itd**
  %70 = load %struct.ehci_itd** %itd51, align 8
  %call52 = call zeroext i1 @itd_complete(%struct.ehci_hcd* %69, %struct.ehci_itd* %70) noredzone
  %frombool = zext i1 %call52 to i8
  store i8 %frombool, i8* %modified, align 1
  %71 = load %union.ehci_shadow** %q_p, align 8
  %72 = bitcast %union.ehci_shadow* %q to i8*
  %73 = bitcast %union.ehci_shadow* %71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %73, i64 8, i32 8, i1 false)
  br label %sw.epilog

sw.bb53:                                          ; preds = %while.body
  %74 = load i32* %frame, align 4
  %75 = load i32* %now_frame, align 4
  %cmp54 = icmp eq i32 %74, %75
  br i1 %cmp54, label %land.lhs.true60, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %sw.bb53
  %76 = load i32* %frame, align 4
  %add = add i32 %76, 1
  %77 = load i32* %fmask, align 4
  %and57 = and i32 %add, %77
  %78 = load i32* %now_frame, align 4
  %cmp58 = icmp eq i32 %and57, %78
  br i1 %cmp58, label %land.lhs.true60, label %if.end75

land.lhs.true60:                                  ; preds = %lor.lhs.false56, %sw.bb53
  %79 = load i8* %live, align 1
  %tobool61 = trunc i8 %79 to i1
  br i1 %tobool61, label %land.lhs.true63, label %if.end75

land.lhs.true63:                                  ; preds = %land.lhs.true60
  %sitd = bitcast %union.ehci_shadow* %q to %struct.ehci_sitd**
  %80 = load %struct.ehci_sitd** %sitd, align 8
  %hw_results = getelementptr inbounds %struct.ehci_sitd* %80, i32 0, i32 3
  %81 = load i32* %hw_results, align 4
  %82 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call64 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %82, i32 128) noredzone
  %and65 = and i32 %81, %call64
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.then67, label %if.end75

if.then67:                                        ; preds = %land.lhs.true63
  %sitd68 = bitcast %union.ehci_shadow* %q to %struct.ehci_sitd**
  %83 = load %struct.ehci_sitd** %sitd68, align 8
  %sitd_next = getelementptr inbounds %struct.ehci_sitd* %83, i32 0, i32 8
  store %union.ehci_shadow* %sitd_next, %union.ehci_shadow** %q_p, align 8
  %sitd69 = bitcast %union.ehci_shadow* %q to %struct.ehci_sitd**
  %84 = load %struct.ehci_sitd** %sitd69, align 8
  %hw_next70 = getelementptr inbounds %struct.ehci_sitd* %84, i32 0, i32 0
  store i32* %hw_next70, i32** %hw_p, align 8
  %sitd71 = bitcast %union.ehci_shadow* %q to %struct.ehci_sitd**
  %85 = load %struct.ehci_sitd** %sitd71, align 8
  %hw_next72 = getelementptr inbounds %struct.ehci_sitd* %85, i32 0, i32 0
  %86 = load i32* %hw_next72, align 4
  %87 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call73 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %87, i32 6) noredzone
  %and74 = and i32 %86, %call73
  store i32 %and74, i32* %type, align 4
  %88 = load %union.ehci_shadow** %q_p, align 8
  %89 = bitcast %union.ehci_shadow* %q to i8*
  %90 = bitcast %union.ehci_shadow* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %89, i8* %90, i64 8, i32 8, i1 false)
  br label %sw.epilog

if.end75:                                         ; preds = %land.lhs.true63, %land.lhs.true60, %lor.lhs.false56
  %91 = load %union.ehci_shadow** %q_p, align 8
  %sitd76 = bitcast %union.ehci_shadow* %q to %struct.ehci_sitd**
  %92 = load %struct.ehci_sitd** %sitd76, align 8
  %sitd_next77 = getelementptr inbounds %struct.ehci_sitd* %92, i32 0, i32 8
  %93 = bitcast %union.ehci_shadow* %91 to i8*
  %94 = bitcast %union.ehci_shadow* %sitd_next77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %93, i8* %94, i64 8, i32 8, i1 false)
  %95 = load %struct.ehci_hcd** %ehci.addr, align 8
  %96 = bitcast %struct.ehci_hcd* %95 to i8*
  %bf.field.offs78 = getelementptr i8* %96, i32 708
  %97 = bitcast i8* %bf.field.offs78 to i32*
  %98 = load i32* %97, align 4
  %99 = lshr i32 %98, 8
  %bf.clear79 = and i32 %99, 1
  %tobool80 = icmp ne i32 %bf.clear79, 0
  br i1 %tobool80, label %lor.lhs.false81, label %if.then87

lor.lhs.false81:                                  ; preds = %if.end75
  %sitd82 = bitcast %union.ehci_shadow* %q to %struct.ehci_sitd**
  %100 = load %struct.ehci_sitd** %sitd82, align 8
  %hw_next83 = getelementptr inbounds %struct.ehci_sitd* %100, i32 0, i32 0
  %101 = load i32* %hw_next83, align 4
  %102 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call84 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %102, i32 1) noredzone
  %cmp85 = icmp ne i32 %101, %call84
  br i1 %cmp85, label %if.then87, label %if.else90

if.then87:                                        ; preds = %lor.lhs.false81, %if.end75
  %sitd88 = bitcast %union.ehci_shadow* %q to %struct.ehci_sitd**
  %103 = load %struct.ehci_sitd** %sitd88, align 8
  %hw_next89 = getelementptr inbounds %struct.ehci_sitd* %103, i32 0, i32 0
  %104 = load i32* %hw_next89, align 4
  %105 = load i32** %hw_p, align 8
  store i32 %104, i32* %105, align 4
  br label %if.end95

if.else90:                                        ; preds = %lor.lhs.false81
  %106 = load %struct.ehci_hcd** %ehci.addr, align 8
  %107 = load %struct.ehci_hcd** %ehci.addr, align 8
  %dummy91 = getelementptr inbounds %struct.ehci_hcd* %107, i32 0, i32 16
  %108 = load %struct.ehci_qh** %dummy91, align 8
  %qh_dma92 = getelementptr inbounds %struct.ehci_qh* %108, i32 0, i32 1
  %109 = load i64* %qh_dma92, align 8
  %conv93 = trunc i64 %109 to i32
  %call94 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %106, i32 %conv93) noredzone
  %110 = load i32** %hw_p, align 8
  store i32 %call94, i32* %110, align 4
  br label %if.end95

if.end95:                                         ; preds = %if.else90, %if.then87
  %sitd96 = bitcast %union.ehci_shadow* %q to %struct.ehci_sitd**
  %111 = load %struct.ehci_sitd** %sitd96, align 8
  %hw_next97 = getelementptr inbounds %struct.ehci_sitd* %111, i32 0, i32 0
  %112 = load i32* %hw_next97, align 4
  %113 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call98 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %113, i32 6) noredzone
  %and99 = and i32 %112, %call98
  store i32 %and99, i32* %type, align 4
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !12
  %114 = load %struct.ehci_hcd** %ehci.addr, align 8
  %sitd100 = bitcast %union.ehci_shadow* %q to %struct.ehci_sitd**
  %115 = load %struct.ehci_sitd** %sitd100, align 8
  %call101 = call zeroext i1 @sitd_complete(%struct.ehci_hcd* %114, %struct.ehci_sitd* %115) noredzone
  %frombool102 = zext i1 %call101 to i8
  store i8 %frombool102, i8* %modified, align 1
  %116 = load %union.ehci_shadow** %q_p, align 8
  %117 = bitcast %union.ehci_shadow* %q to i8*
  %118 = bitcast %union.ehci_shadow* %116 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %117, i8* %118, i64 8, i32 8, i1 false)
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  br label %sw.bb103

sw.bb103:                                         ; preds = %while.body, %while.body, %sw.default
  %ptr104 = bitcast %union.ehci_shadow* %q to i8**
  store i8* null, i8** %ptr104, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb103, %if.end95, %if.then67, %if.end46, %if.then25
  %119 = load i8* %modified, align 1
  %tobool105 = trunc i8 %119 to i1
  br i1 %tobool105, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.epilog
  %120 = load %struct.ehci_hcd** %ehci.addr, align 8
  %isoc_count = getelementptr inbounds %struct.ehci_hcd* %120, i32 0, i32 34
  %121 = load i32* %isoc_count, align 4
  %cmp107 = icmp ugt i32 %121, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.epilog
  %122 = phi i1 [ false, %sw.epilog ], [ %cmp107, %land.rhs ]
  %lnot = xor i1 %122, true
  %lnot109 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot109 to i32
  %conv110 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv110, i64 0)
  %tobool111 = icmp ne i64 %expval, 0
  br i1 %tobool111, label %if.then112, label %if.end113

if.then112:                                       ; preds = %land.end
  br label %restart

if.end113:                                        ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %123 = load i32* %frame, align 4
  %124 = load i32* %now_frame, align 4
  %cmp114 = icmp eq i32 %123, %124
  br i1 %cmp114, label %if.then116, label %if.end117

if.then116:                                       ; preds = %while.end
  br label %for.end121

if.end117:                                        ; preds = %while.end
  %125 = load i32* %frame, align 4
  %126 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_iso_frame118 = getelementptr inbounds %struct.ehci_hcd* %126, i32 0, i32 32
  store i32 %125, i32* %last_iso_frame118, align 4
  %127 = load i32* %frame, align 4
  %add119 = add i32 %127, 1
  %128 = load i32* %fmask, align 4
  %and120 = and i32 %add119, %128
  store i32 %and120, i32* %frame, align 4
  br label %for.cond

for.end121:                                       ; preds = %if.then116
  ret void
}

define internal i32 @ehci_read_frame_index(%struct.ehci_hcd* %ehci) nounwind inlinehint noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = bitcast %struct.ehci_hcd* %0 to i8*
  %bf.field.offs = getelementptr i8* %1, i32 708
  %2 = bitcast i8* %bf.field.offs to i32*
  %3 = load i32* %2, align 4
  %4 = lshr i32 %3, 10
  %bf.clear = and i32 %4, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @ehci_moschip_read_frame_index(%struct.ehci_hcd* %5) noredzone
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 8
  %8 = load %struct.ehci_regs** %regs, align 8
  %frame_index = getelementptr inbounds %struct.ehci_regs* %8, i32 0, i32 3
  %call1 = call i32 @ehci_readl(%struct.ehci_hcd* %6, i32* %frame_index) noredzone
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32* %retval
  ret i32 %9
}

define internal zeroext i1 @itd_complete(%struct.ehci_hcd* %ehci, %struct.ehci_itd* %itd) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %itd.addr = alloca %struct.ehci_itd*, align 8
  %urb = alloca %struct.urb*, align 8
  %desc = alloca %struct.usb_iso_packet_descriptor*, align 8
  %t = alloca i32, align 4
  %uframe = alloca i32, align 4
  %urb_index = alloca i32, align 4
  %stream = alloca %struct.ehci_iso_stream*, align 8
  %dev = alloca %struct.usb_device*, align 8
  %retval3 = alloca i8, align 1
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_itd* %itd, %struct.ehci_itd** %itd.addr, align 8
  %0 = load %struct.ehci_itd** %itd.addr, align 8
  %urb1 = getelementptr inbounds %struct.ehci_itd* %0, i32 0, i32 6
  %1 = load %struct.urb** %urb1, align 8
  store %struct.urb* %1, %struct.urb** %urb, align 8
  store i32 -1, i32* %urb_index, align 4
  %2 = load %struct.ehci_itd** %itd.addr, align 8
  %stream2 = getelementptr inbounds %struct.ehci_itd* %2, i32 0, i32 7
  %3 = load %struct.ehci_iso_stream** %stream2, align 8
  store %struct.ehci_iso_stream* %3, %struct.ehci_iso_stream** %stream, align 8
  store i8 0, i8* %retval3, align 1
  store i32 0, i32* %uframe, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %uframe, align 4
  %cmp = icmp ult i32 %4, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %uframe, align 4
  %idxprom = zext i32 %5 to i64
  %6 = load %struct.ehci_itd** %itd.addr, align 8
  %index = getelementptr inbounds %struct.ehci_itd* %6, i32 0, i32 11
  %arrayidx = getelementptr [8 x i32]* %index, i32 0, i64 %idxprom
  %7 = load i32* %arrayidx, align 4
  %cmp4 = icmp eq i32 %7, -1
  %lnot = xor i1 %cmp4, true
  %lnot5 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot5 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %8 = load i32* %uframe, align 4
  %idxprom6 = zext i32 %8 to i64
  %9 = load %struct.ehci_itd** %itd.addr, align 8
  %index7 = getelementptr inbounds %struct.ehci_itd* %9, i32 0, i32 11
  %arrayidx8 = getelementptr [8 x i32]* %index7, i32 0, i64 %idxprom6
  %10 = load i32* %arrayidx8, align 4
  store i32 %10, i32* %urb_index, align 4
  %11 = load i32* %urb_index, align 4
  %idxprom9 = sext i32 %11 to i64
  %12 = load %struct.urb** %urb, align 8
  %iso_frame_desc = getelementptr inbounds %struct.urb* %12, i32 0, i32 29
  %arrayidx10 = getelementptr [0 x %struct.usb_iso_packet_descriptor]* %iso_frame_desc, i32 0, i64 %idxprom9
  store %struct.usb_iso_packet_descriptor* %arrayidx10, %struct.usb_iso_packet_descriptor** %desc, align 8
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %14 = load i32* %uframe, align 4
  %idxprom11 = zext i32 %14 to i64
  %15 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_transaction = getelementptr inbounds %struct.ehci_itd* %15, i32 0, i32 1
  %arrayidx12 = getelementptr [8 x i32]* %hw_transaction, i32 0, i64 %idxprom11
  %call = call i32 @hc32_to_cpup(%struct.ehci_hcd* %13, i32* %arrayidx12) noredzone
  store i32 %call, i32* %t, align 4
  %16 = load i32* %uframe, align 4
  %idxprom13 = zext i32 %16 to i64
  %17 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_transaction14 = getelementptr inbounds %struct.ehci_itd* %17, i32 0, i32 1
  %arrayidx15 = getelementptr [8 x i32]* %hw_transaction14, i32 0, i64 %idxprom13
  store i32 0, i32* %arrayidx15, align 4
  %18 = load i32* %t, align 4
  %and = and i32 %18, 1879048192
  %tobool16 = icmp ne i32 %and, 0
  %lnot17 = xor i1 %tobool16, true
  %lnot19 = xor i1 %lnot17, true
  %lnot.ext20 = zext i1 %lnot19 to i32
  %conv21 = sext i32 %lnot.ext20 to i64
  %expval22 = call i64 @llvm.expect.i64(i64 %conv21, i64 0)
  %tobool23 = icmp ne i64 %expval22, 0
  br i1 %tobool23, label %if.then24, label %if.else45

if.then24:                                        ; preds = %if.end
  %19 = load %struct.urb** %urb, align 8
  %error_count = getelementptr inbounds %struct.urb* %19, i32 0, i32 26
  %20 = load i32* %error_count, align 4
  %inc = add i32 %20, 1
  store i32 %inc, i32* %error_count, align 4
  %21 = load i32* %t, align 4
  %and25 = and i32 %21, 1073741824
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then27, label %if.else

if.then27:                                        ; preds = %if.then24
  %22 = load %struct.urb** %urb, align 8
  %pipe = getelementptr inbounds %struct.urb* %22, i32 0, i32 10
  %23 = load i32* %pipe, align 4
  %and28 = and i32 %23, 128
  %tobool29 = icmp ne i32 %and28, 0
  %cond = select i1 %tobool29, i32 -63, i32 -70
  %24 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %status = getelementptr inbounds %struct.usb_iso_packet_descriptor* %24, i32 0, i32 3
  store i32 %cond, i32* %status, align 4
  br label %if.end37

if.else:                                          ; preds = %if.then24
  %25 = load i32* %t, align 4
  %and30 = and i32 %25, 536870912
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then32, label %if.else34

if.then32:                                        ; preds = %if.else
  %26 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %status33 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %26, i32 0, i32 3
  store i32 -75, i32* %status33, align 4
  br label %if.end36

if.else34:                                        ; preds = %if.else
  %27 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %status35 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %27, i32 0, i32 3
  store i32 -71, i32* %status35, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.else34, %if.then32
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then27
  %28 = load i32* %t, align 4
  %and38 = and i32 %28, 536870912
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.end44, label %if.then40

if.then40:                                        ; preds = %if.end37
  %29 = load i32* %t, align 4
  %shr = lshr i32 %29, 16
  %and41 = and i32 %shr, 4095
  %30 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %actual_length = getelementptr inbounds %struct.usb_iso_packet_descriptor* %30, i32 0, i32 2
  store i32 %and41, i32* %actual_length, align 4
  %31 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %actual_length42 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %31, i32 0, i32 2
  %32 = load i32* %actual_length42, align 4
  %33 = load %struct.urb** %urb, align 8
  %actual_length43 = getelementptr inbounds %struct.urb* %33, i32 0, i32 20
  %34 = load i32* %actual_length43, align 4
  %add = add i32 %34, %32
  store i32 %add, i32* %actual_length43, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.then40, %if.end37
  br label %if.end68

if.else45:                                        ; preds = %if.end
  %35 = load i32* %t, align 4
  %and46 = and i32 %35, -2147483648
  %cmp47 = icmp eq i32 %and46, 0
  %lnot49 = xor i1 %cmp47, true
  %lnot51 = xor i1 %lnot49, true
  %lnot.ext52 = zext i1 %lnot51 to i32
  %conv53 = sext i32 %lnot.ext52 to i64
  %expval54 = call i64 @llvm.expect.i64(i64 %conv53, i64 1)
  %tobool55 = icmp ne i64 %expval54, 0
  br i1 %tobool55, label %if.then56, label %if.else64

if.then56:                                        ; preds = %if.else45
  %36 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %status57 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %36, i32 0, i32 3
  store i32 0, i32* %status57, align 4
  %37 = load i32* %t, align 4
  %shr58 = lshr i32 %37, 16
  %and59 = and i32 %shr58, 4095
  %38 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %actual_length60 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %38, i32 0, i32 2
  store i32 %and59, i32* %actual_length60, align 4
  %39 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %actual_length61 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %39, i32 0, i32 2
  %40 = load i32* %actual_length61, align 4
  %41 = load %struct.urb** %urb, align 8
  %actual_length62 = getelementptr inbounds %struct.urb* %41, i32 0, i32 20
  %42 = load i32* %actual_length62, align 4
  %add63 = add i32 %42, %40
  store i32 %add63, i32* %actual_length62, align 4
  br label %if.end67

if.else64:                                        ; preds = %if.else45
  %43 = load %struct.urb** %urb, align 8
  %error_count65 = getelementptr inbounds %struct.urb* %43, i32 0, i32 26
  %44 = load i32* %error_count65, align 4
  %inc66 = add i32 %44, 1
  store i32 %inc66, i32* %error_count65, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.else64, %if.then56
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.end44
  br label %for.inc

for.inc:                                          ; preds = %if.end68, %if.then
  %45 = load i32* %uframe, align 4
  %inc69 = add i32 %45, 1
  store i32 %inc69, i32* %uframe, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load i32* %urb_index, align 4
  %add70 = add i32 %46, 1
  %47 = load %struct.urb** %urb, align 8
  %number_of_packets = getelementptr inbounds %struct.urb* %47, i32 0, i32 24
  %48 = load i32* %number_of_packets, align 4
  %cmp71 = icmp ne i32 %add70, %48
  %lnot73 = xor i1 %cmp71, true
  %lnot75 = xor i1 %lnot73, true
  %lnot.ext76 = zext i1 %lnot75 to i32
  %conv77 = sext i32 %lnot.ext76 to i64
  %expval78 = call i64 @llvm.expect.i64(i64 %conv77, i64 1)
  %tobool79 = icmp ne i64 %expval78, 0
  br i1 %tobool79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %for.end
  br label %done

if.end81:                                         ; preds = %for.end
  %49 = load %struct.urb** %urb, align 8
  %dev82 = getelementptr inbounds %struct.urb* %49, i32 0, i32 8
  %50 = load %struct.usb_device** %dev82, align 8
  store %struct.usb_device* %50, %struct.usb_device** %dev, align 8
  %51 = load %struct.ehci_hcd** %ehci.addr, align 8
  %52 = load %struct.urb** %urb, align 8
  call void @ehci_urb_done(%struct.ehci_hcd* %51, %struct.urb* %52, i32 0) noredzone
  store i8 1, i8* %retval3, align 1
  store %struct.urb* null, %struct.urb** %urb, align 8
  %53 = load %struct.ehci_hcd** %ehci.addr, align 8
  %isoc_count = getelementptr inbounds %struct.ehci_hcd* %53, i32 0, i32 34
  %54 = load i32* %isoc_count, align 4
  %dec = add i32 %54, -1
  store i32 %dec, i32* %isoc_count, align 4
  %55 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @disable_periodic(%struct.ehci_hcd* %55) noredzone
  %56 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call83 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %56) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call83, i32 0, i32 0
  %bandwidth_isoc_reqs = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 16
  %57 = load i32* %bandwidth_isoc_reqs, align 4
  %dec84 = add i32 %57, -1
  store i32 %dec84, i32* %bandwidth_isoc_reqs, align 4
  %58 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call85 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %58) noredzone
  %self86 = getelementptr inbounds %struct.usb_hcd* %call85, i32 0, i32 0
  %bandwidth_isoc_reqs87 = getelementptr inbounds %struct.usb_bus* %self86, i32 0, i32 16
  %59 = load i32* %bandwidth_isoc_reqs87, align 4
  %cmp88 = icmp eq i32 %59, 0
  br i1 %cmp88, label %if.then90, label %if.end95

if.then90:                                        ; preds = %if.end81
  %60 = load %struct.ehci_hcd** %ehci.addr, align 8
  %61 = bitcast %struct.ehci_hcd* %60 to i8*
  %bf.field.offs = getelementptr i8* %61, i32 708
  %62 = bitcast i8* %bf.field.offs to i32*
  %63 = load i32* %62, align 4
  %64 = lshr i32 %63, 7
  %bf.clear = and i32 %64, 1
  %cmp91 = icmp eq i32 %bf.clear, 1
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %if.then90
  call void @usb_amd_quirk_pll_enable() noredzone
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %if.then90
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %if.end81
  %65 = load %struct.ehci_iso_stream** %stream, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_stream* %65, i32 0, i32 3
  %call96 = call i32 @list_is_singular(%struct.list_head* %td_list) noredzone
  %tobool97 = icmp ne i32 %call96, 0
  %lnot98 = xor i1 %tobool97, true
  %lnot100 = xor i1 %lnot98, true
  %lnot.ext101 = zext i1 %lnot100 to i32
  %conv102 = sext i32 %lnot.ext101 to i64
  %expval103 = call i64 @llvm.expect.i64(i64 %conv102, i64 0)
  %tobool104 = icmp ne i64 %expval103, 0
  br i1 %tobool104, label %if.then105, label %if.end108

if.then105:                                       ; preds = %if.end95
  %66 = load %struct.ehci_iso_stream** %stream, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_iso_stream* %66, i32 0, i32 10
  %67 = load i32* %bandwidth, align 4
  %68 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call106 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %68) noredzone
  %self107 = getelementptr inbounds %struct.usb_hcd* %call106, i32 0, i32 0
  %bandwidth_allocated = getelementptr inbounds %struct.usb_bus* %self107, i32 0, i32 14
  %69 = load i32* %bandwidth_allocated, align 4
  %sub = sub i32 %69, %67
  store i32 %sub, i32* %bandwidth_allocated, align 4
  br label %if.end108

if.end108:                                        ; preds = %if.then105, %if.end95
  br label %done

done:                                             ; preds = %if.end108, %if.then80
  %70 = load %struct.ehci_itd** %itd.addr, align 8
  %urb109 = getelementptr inbounds %struct.ehci_itd* %70, i32 0, i32 6
  store %struct.urb* null, %struct.urb** %urb109, align 8
  %71 = load %struct.ehci_itd** %itd.addr, align 8
  %itd_list = getelementptr inbounds %struct.ehci_itd* %71, i32 0, i32 8
  %72 = load %struct.ehci_iso_stream** %stream, align 8
  %free_list = getelementptr inbounds %struct.ehci_iso_stream* %72, i32 0, i32 4
  call void @list_move_tail(%struct.list_head* %itd_list, %struct.list_head* %free_list) noredzone
  %73 = load %struct.ehci_iso_stream** %stream, align 8
  %td_list110 = getelementptr inbounds %struct.ehci_iso_stream* %73, i32 0, i32 3
  %call111 = call i32 @list_empty(%struct.list_head* %td_list110) noredzone
  %tobool112 = icmp ne i32 %call111, 0
  br i1 %tobool112, label %if.then113, label %if.end115

if.then113:                                       ; preds = %done
  %74 = load %struct.ehci_iso_stream** %stream, align 8
  %free_list114 = getelementptr inbounds %struct.ehci_iso_stream* %74, i32 0, i32 4
  %75 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_itd_list = getelementptr inbounds %struct.ehci_hcd* %75, i32 0, i32 37
  call void @list_splice_tail_init(%struct.list_head* %free_list114, %struct.list_head* %cached_itd_list) noredzone
  %76 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @start_free_itds(%struct.ehci_hcd* %76) noredzone
  br label %if.end115

if.end115:                                        ; preds = %if.then113, %done
  %77 = load i8* %retval3, align 1
  %tobool116 = trunc i8 %77 to i1
  ret i1 %tobool116
}

define internal zeroext i1 @sitd_complete(%struct.ehci_hcd* %ehci, %struct.ehci_sitd* %sitd) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %sitd.addr = alloca %struct.ehci_sitd*, align 8
  %urb = alloca %struct.urb*, align 8
  %desc = alloca %struct.usb_iso_packet_descriptor*, align 8
  %t = alloca i32, align 4
  %urb_index = alloca i32, align 4
  %stream = alloca %struct.ehci_iso_stream*, align 8
  %dev = alloca %struct.usb_device*, align 8
  %retval3 = alloca i8, align 1
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_sitd* %sitd, %struct.ehci_sitd** %sitd.addr, align 8
  %0 = load %struct.ehci_sitd** %sitd.addr, align 8
  %urb1 = getelementptr inbounds %struct.ehci_sitd* %0, i32 0, i32 9
  %1 = load %struct.urb** %urb1, align 8
  store %struct.urb* %1, %struct.urb** %urb, align 8
  store i32 -1, i32* %urb_index, align 4
  %2 = load %struct.ehci_sitd** %sitd.addr, align 8
  %stream2 = getelementptr inbounds %struct.ehci_sitd* %2, i32 0, i32 10
  %3 = load %struct.ehci_iso_stream** %stream2, align 8
  store %struct.ehci_iso_stream* %3, %struct.ehci_iso_stream** %stream, align 8
  store i8 0, i8* %retval3, align 1
  %4 = load %struct.ehci_sitd** %sitd.addr, align 8
  %index = getelementptr inbounds %struct.ehci_sitd* %4, i32 0, i32 13
  %5 = load i32* %index, align 4
  store i32 %5, i32* %urb_index, align 4
  %6 = load i32* %urb_index, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.urb** %urb, align 8
  %iso_frame_desc = getelementptr inbounds %struct.urb* %7, i32 0, i32 29
  %arrayidx = getelementptr [0 x %struct.usb_iso_packet_descriptor]* %iso_frame_desc, i32 0, i64 %idxprom
  store %struct.usb_iso_packet_descriptor* %arrayidx, %struct.usb_iso_packet_descriptor** %desc, align 8
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %9 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_results = getelementptr inbounds %struct.ehci_sitd* %9, i32 0, i32 3
  %call = call i32 @hc32_to_cpup(%struct.ehci_hcd* %8, i32* %hw_results) noredzone
  store i32 %call, i32* %t, align 4
  %10 = load i32* %t, align 4
  %and = and i32 %10, 124
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot4 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot4 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool5 = icmp ne i64 %expval, 0
  br i1 %tobool5, label %if.then, label %if.else18

if.then:                                          ; preds = %entry
  %11 = load %struct.urb** %urb, align 8
  %error_count = getelementptr inbounds %struct.urb* %11, i32 0, i32 26
  %12 = load i32* %error_count, align 4
  %inc = add i32 %12, 1
  store i32 %inc, i32* %error_count, align 4
  %13 = load i32* %t, align 4
  %and6 = and i32 %13, 32
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.then
  %14 = load %struct.urb** %urb, align 8
  %pipe = getelementptr inbounds %struct.urb* %14, i32 0, i32 10
  %15 = load i32* %pipe, align 4
  %and9 = and i32 %15, 128
  %tobool10 = icmp ne i32 %and9, 0
  %cond = select i1 %tobool10, i32 -63, i32 -70
  %16 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %status = getelementptr inbounds %struct.usb_iso_packet_descriptor* %16, i32 0, i32 3
  store i32 %cond, i32* %status, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then
  %17 = load i32* %t, align 4
  %and11 = and i32 %17, 16
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %18 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %status14 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %18, i32 0, i32 3
  store i32 -75, i32* %status14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %19 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %status16 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %19, i32 0, i32 3
  store i32 -71, i32* %status16, align 4
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then8
  br label %if.end37

if.else18:                                        ; preds = %entry
  %20 = load i32* %t, align 4
  %and19 = and i32 %20, 128
  %tobool20 = icmp ne i32 %and19, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  %expval26 = call i64 @llvm.expect.i64(i64 %conv25, i64 0)
  %tobool27 = icmp ne i64 %expval26, 0
  br i1 %tobool27, label %if.then28, label %if.else31

if.then28:                                        ; preds = %if.else18
  %21 = load %struct.urb** %urb, align 8
  %error_count29 = getelementptr inbounds %struct.urb* %21, i32 0, i32 26
  %22 = load i32* %error_count29, align 4
  %inc30 = add i32 %22, 1
  store i32 %inc30, i32* %error_count29, align 4
  br label %if.end36

if.else31:                                        ; preds = %if.else18
  %23 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %status32 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %23, i32 0, i32 3
  store i32 0, i32* %status32, align 4
  %24 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %length = getelementptr inbounds %struct.usb_iso_packet_descriptor* %24, i32 0, i32 1
  %25 = load i32* %length, align 4
  %26 = load i32* %t, align 4
  %shr = lshr i32 %26, 16
  %and33 = and i32 1023, %shr
  %sub = sub i32 %25, %and33
  %27 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %actual_length = getelementptr inbounds %struct.usb_iso_packet_descriptor* %27, i32 0, i32 2
  store i32 %sub, i32* %actual_length, align 4
  %28 = load %struct.usb_iso_packet_descriptor** %desc, align 8
  %actual_length34 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %28, i32 0, i32 2
  %29 = load i32* %actual_length34, align 4
  %30 = load %struct.urb** %urb, align 8
  %actual_length35 = getelementptr inbounds %struct.urb* %30, i32 0, i32 20
  %31 = load i32* %actual_length35, align 4
  %add = add i32 %31, %29
  store i32 %add, i32* %actual_length35, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.else31, %if.then28
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.end17
  %32 = load i32* %urb_index, align 4
  %add38 = add i32 %32, 1
  %33 = load %struct.urb** %urb, align 8
  %number_of_packets = getelementptr inbounds %struct.urb* %33, i32 0, i32 24
  %34 = load i32* %number_of_packets, align 4
  %cmp = icmp ne i32 %add38, %34
  br i1 %cmp, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.end37
  br label %done

if.end41:                                         ; preds = %if.end37
  %35 = load %struct.urb** %urb, align 8
  %dev42 = getelementptr inbounds %struct.urb* %35, i32 0, i32 8
  %36 = load %struct.usb_device** %dev42, align 8
  store %struct.usb_device* %36, %struct.usb_device** %dev, align 8
  %37 = load %struct.ehci_hcd** %ehci.addr, align 8
  %38 = load %struct.urb** %urb, align 8
  call void @ehci_urb_done(%struct.ehci_hcd* %37, %struct.urb* %38, i32 0) noredzone
  store i8 1, i8* %retval3, align 1
  store %struct.urb* null, %struct.urb** %urb, align 8
  %39 = load %struct.ehci_hcd** %ehci.addr, align 8
  %isoc_count = getelementptr inbounds %struct.ehci_hcd* %39, i32 0, i32 34
  %40 = load i32* %isoc_count, align 4
  %dec = add i32 %40, -1
  store i32 %dec, i32* %isoc_count, align 4
  %41 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @disable_periodic(%struct.ehci_hcd* %41) noredzone
  %42 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call43 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %42) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call43, i32 0, i32 0
  %bandwidth_isoc_reqs = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 16
  %43 = load i32* %bandwidth_isoc_reqs, align 4
  %dec44 = add i32 %43, -1
  store i32 %dec44, i32* %bandwidth_isoc_reqs, align 4
  %44 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call45 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %44) noredzone
  %self46 = getelementptr inbounds %struct.usb_hcd* %call45, i32 0, i32 0
  %bandwidth_isoc_reqs47 = getelementptr inbounds %struct.usb_bus* %self46, i32 0, i32 16
  %45 = load i32* %bandwidth_isoc_reqs47, align 4
  %cmp48 = icmp eq i32 %45, 0
  br i1 %cmp48, label %if.then50, label %if.end55

if.then50:                                        ; preds = %if.end41
  %46 = load %struct.ehci_hcd** %ehci.addr, align 8
  %47 = bitcast %struct.ehci_hcd* %46 to i8*
  %bf.field.offs = getelementptr i8* %47, i32 708
  %48 = bitcast i8* %bf.field.offs to i32*
  %49 = load i32* %48, align 4
  %50 = lshr i32 %49, 7
  %bf.clear = and i32 %50, 1
  %cmp51 = icmp eq i32 %bf.clear, 1
  br i1 %cmp51, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.then50
  call void @usb_amd_quirk_pll_enable() noredzone
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %if.then50
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end41
  %51 = load %struct.ehci_iso_stream** %stream, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_stream* %51, i32 0, i32 3
  %call56 = call i32 @list_is_singular(%struct.list_head* %td_list) noredzone
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %if.end55
  %52 = load %struct.ehci_iso_stream** %stream, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_iso_stream* %52, i32 0, i32 10
  %53 = load i32* %bandwidth, align 4
  %54 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call59 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %54) noredzone
  %self60 = getelementptr inbounds %struct.usb_hcd* %call59, i32 0, i32 0
  %bandwidth_allocated = getelementptr inbounds %struct.usb_bus* %self60, i32 0, i32 14
  %55 = load i32* %bandwidth_allocated, align 4
  %sub61 = sub i32 %55, %53
  store i32 %sub61, i32* %bandwidth_allocated, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %if.end55
  br label %done

done:                                             ; preds = %if.end62, %if.then40
  %56 = load %struct.ehci_sitd** %sitd.addr, align 8
  %urb63 = getelementptr inbounds %struct.ehci_sitd* %56, i32 0, i32 9
  store %struct.urb* null, %struct.urb** %urb63, align 8
  %57 = load %struct.ehci_sitd** %sitd.addr, align 8
  %sitd_list = getelementptr inbounds %struct.ehci_sitd* %57, i32 0, i32 11
  %58 = load %struct.ehci_iso_stream** %stream, align 8
  %free_list = getelementptr inbounds %struct.ehci_iso_stream* %58, i32 0, i32 4
  call void @list_move_tail(%struct.list_head* %sitd_list, %struct.list_head* %free_list) noredzone
  %59 = load %struct.ehci_iso_stream** %stream, align 8
  %td_list64 = getelementptr inbounds %struct.ehci_iso_stream* %59, i32 0, i32 3
  %call65 = call i32 @list_empty(%struct.list_head* %td_list64) noredzone
  %tobool66 = icmp ne i32 %call65, 0
  br i1 %tobool66, label %if.then67, label %if.end69

if.then67:                                        ; preds = %done
  %60 = load %struct.ehci_iso_stream** %stream, align 8
  %free_list68 = getelementptr inbounds %struct.ehci_iso_stream* %60, i32 0, i32 4
  %61 = load %struct.ehci_hcd** %ehci.addr, align 8
  %cached_sitd_list = getelementptr inbounds %struct.ehci_hcd* %61, i32 0, i32 39
  call void @list_splice_tail_init(%struct.list_head* %free_list68, %struct.list_head* %cached_sitd_list) noredzone
  %62 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @start_free_itds(%struct.ehci_hcd* %62) noredzone
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %done
  %63 = load i8* %retval3, align 1
  %tobool70 = trunc i8 %63 to i1
  ret i1 %tobool70
}

declare void @usb_amd_quirk_pll_enable() noredzone

define internal i32 @list_is_singular(%struct.list_head* %head) nounwind inlinehint noredzone {
entry:
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head** %head.addr, align 8
  %call = call i32 @list_empty(%struct.list_head* %0) noredzone
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %1 = load %struct.list_head** %head.addr, align 8
  %next = getelementptr inbounds %struct.list_head* %1, i32 0, i32 0
  %2 = load %struct.list_head** %next, align 8
  %3 = load %struct.list_head** %head.addr, align 8
  %prev = getelementptr inbounds %struct.list_head* %3, i32 0, i32 1
  %4 = load %struct.list_head** %prev, align 8
  %cmp = icmp eq %struct.list_head* %2, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
}

define internal i32 @ehci_moschip_read_frame_index(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %uf = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 8
  %2 = load %struct.ehci_regs** %regs, align 8
  %frame_index = getelementptr inbounds %struct.ehci_regs* %2, i32 0, i32 3
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %0, i32* %frame_index) noredzone
  store i32 %call, i32* %uf, align 4
  %3 = load i32* %uf, align 4
  %and = and i32 %3, 7
  %cmp = icmp eq i32 %and, 0
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs2 = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 8
  %6 = load %struct.ehci_regs** %regs2, align 8
  %frame_index3 = getelementptr inbounds %struct.ehci_regs* %6, i32 0, i32 3
  %call4 = call i32 @ehci_readl(%struct.ehci_hcd* %4, i32* %frame_index3) noredzone
  store i32 %call4, i32* %uf, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32* %uf, align 4
  ret i32 %7
}

define internal void @start_unlink_intr_wait(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_wait_cycle = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 29
  %1 = load i32* %intr_unlink_wait_cycle, align 4
  %2 = load %struct.ehci_qh** %qh.addr, align 8
  %unlink_cycle = getelementptr inbounds %struct.ehci_qh* %2, i32 0, i32 8
  store i32 %1, i32* %unlink_cycle, align 4
  %3 = load %struct.ehci_qh** %qh.addr, align 8
  %unlink_node = getelementptr inbounds %struct.ehci_qh* %3, i32 0, i32 6
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_wait = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 27
  call void @list_add_tail(%struct.list_head* %unlink_node, %struct.list_head* %intr_unlink_wait) noredzone
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 12
  %6 = load i32* %rh_state, align 4
  %cmp = icmp ult i32 %6, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_handle_start_intr_unlinks(%struct.ehci_hcd* %7) noredzone
  br label %if.end6

if.else:                                          ; preds = %entry
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_wait1 = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 27
  %next = getelementptr inbounds %struct.list_head* %intr_unlink_wait1, i32 0, i32 0
  %9 = load %struct.list_head** %next, align 8
  %10 = load %struct.ehci_qh** %qh.addr, align 8
  %unlink_node2 = getelementptr inbounds %struct.ehci_qh* %10, i32 0, i32 6
  %cmp3 = icmp eq %struct.list_head* %9, %unlink_node2
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.else
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %11, i32 5, i1 zeroext true) noredzone
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %intr_unlink_wait_cycle5 = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 29
  %13 = load i32* %intr_unlink_wait_cycle5, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %intr_unlink_wait_cycle5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  ret void
}

define internal void @start_unlink_async(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 9
  %1 = load i8* %qh_state, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %3 = load %struct.ehci_qh** %qh.addr, align 8
  call void @single_unlink_async(%struct.ehci_hcd* %2, %struct.ehci_qh* %3) noredzone
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @start_iaa_cycle(%struct.ehci_hcd* %4) noredzone
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

define internal i32 @usb_endpoint_type(%struct.usb_endpoint_descriptor* %epd) nounwind inlinehint noredzone {
entry:
  %epd.addr = alloca %struct.usb_endpoint_descriptor*, align 8
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
  %0 = load %struct.usb_endpoint_descriptor** %epd.addr, align 8
  %bmAttributes = getelementptr inbounds %struct.usb_endpoint_descriptor* %0, i32 0, i32 3
  %1 = load i8* %bmAttributes, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 3
  ret i32 %and
}

define internal i32 @usb_endpoint_num(%struct.usb_endpoint_descriptor* %epd) nounwind inlinehint noredzone {
entry:
  %epd.addr = alloca %struct.usb_endpoint_descriptor*, align 8
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
  %0 = load %struct.usb_endpoint_descriptor** %epd.addr, align 8
  %bEndpointAddress = getelementptr inbounds %struct.usb_endpoint_descriptor* %0, i32 0, i32 2
  %1 = load i8* %bEndpointAddress, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 15
  ret i32 %and
}

define internal i32 @usb_endpoint_dir_out(%struct.usb_endpoint_descriptor* %epd) nounwind inlinehint noredzone {
entry:
  %epd.addr = alloca %struct.usb_endpoint_descriptor*, align 8
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
  %0 = load %struct.usb_endpoint_descriptor** %epd.addr, align 8
  %bEndpointAddress = getelementptr inbounds %struct.usb_endpoint_descriptor* %0, i32 0, i32 2
  %1 = load i8* %bEndpointAddress, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 128
  %cmp = icmp eq i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

declare void @warn_slowpath_fmt(i8*, i32, i8*, ...) noredzone

define internal void @reserve_release_iso_bandwidth(%struct.ehci_hcd* %ehci, %struct.ehci_iso_stream* %stream, i32 %sign) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %sign.addr = alloca i32, align 4
  %uframe = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s_mask = alloca i32, align 4
  %c_mask = alloca i32, align 4
  %m = alloca i32, align 4
  %usecs = alloca i32, align 4
  %c_usecs = alloca i32, align 4
  %tt_usecs = alloca i32, align 4
  %tt = alloca %struct.ehci_tt*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store i32 %sign, i32* %sign.addr, align 4
  %0 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_iso_stream* %0, i32 0, i32 5
  %usecs1 = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 9
  %1 = load i8* %usecs1, align 1
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %usecs, align 4
  %2 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps2 = getelementptr inbounds %struct.ehci_iso_stream* %2, i32 0, i32 5
  %c_usecs3 = getelementptr inbounds %struct.ehci_per_sched* %ps2, i32 0, i32 10
  %3 = load i8* %c_usecs3, align 1
  %conv4 = zext i8 %3 to i32
  store i32 %conv4, i32* %c_usecs, align 4
  %4 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps5 = getelementptr inbounds %struct.ehci_iso_stream* %4, i32 0, i32 5
  %tt_usecs6 = getelementptr inbounds %struct.ehci_per_sched* %ps5, i32 0, i32 3
  %5 = load i16* %tt_usecs6, align 2
  %conv7 = zext i16 %5 to i32
  store i32 %conv7, i32* %tt_usecs, align 4
  %6 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps8 = getelementptr inbounds %struct.ehci_iso_stream* %6, i32 0, i32 5
  %phase = getelementptr inbounds %struct.ehci_per_sched* %ps8, i32 0, i32 6
  %7 = load i16* %phase, align 2
  %conv9 = zext i16 %7 to i32
  %cmp = icmp eq i32 %conv9, 29999
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end102

if.end:                                           ; preds = %entry
  %8 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps11 = getelementptr inbounds %struct.ehci_iso_stream* %8, i32 0, i32 5
  %bw_phase = getelementptr inbounds %struct.ehci_per_sched* %ps11, i32 0, i32 7
  %9 = load i8* %bw_phase, align 1
  %conv12 = zext i8 %9 to i32
  %shl = shl i32 %conv12, 3
  store i32 %shl, i32* %uframe, align 4
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %11 = load i32* %sign.addr, align 4
  %12 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps13 = getelementptr inbounds %struct.ehci_iso_stream* %12, i32 0, i32 5
  call void @bandwidth_dbg(%struct.ehci_hcd* %10, i32 %11, i8* getelementptr inbounds ([4 x i8]* @.str15, i32 0, i32 0), %struct.ehci_per_sched* %ps13) noredzone
  %13 = load i32* %sign.addr, align 4
  %cmp14 = icmp slt i32 %13, 0
  br i1 %cmp14, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end
  %14 = load i32* %usecs, align 4
  %sub = sub i32 0, %14
  store i32 %sub, i32* %usecs, align 4
  %15 = load i32* %c_usecs, align 4
  %sub17 = sub i32 0, %15
  store i32 %sub17, i32* %c_usecs, align 4
  %16 = load i32* %tt_usecs, align 4
  %sub18 = sub i32 0, %16
  store i32 %sub18, i32* %tt_usecs, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.end
  %17 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %splits = getelementptr inbounds %struct.ehci_iso_stream* %17, i32 0, i32 7
  %18 = load i32* %splits, align 4
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %if.else, label %if.then20

if.then20:                                        ; preds = %if.end19
  %19 = load i32* %uframe, align 4
  %20 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps21 = getelementptr inbounds %struct.ehci_iso_stream* %20, i32 0, i32 5
  %phase_uf = getelementptr inbounds %struct.ehci_per_sched* %ps21, i32 0, i32 8
  %21 = load i8* %phase_uf, align 1
  %conv22 = zext i8 %21 to i32
  %add = add i32 %19, %conv22
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then20
  %22 = load i32* %i, align 4
  %cmp23 = icmp ult i32 %22, 64
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32* %usecs, align 4
  %24 = load i32* %i, align 4
  %idxprom = zext i32 %24 to i64
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 61
  %arrayidx = getelementptr [64 x i8]* %bandwidth, i32 0, i64 %idxprom
  %26 = load i8* %arrayidx, align 1
  %conv25 = zext i8 %26 to i32
  %add26 = add i32 %conv25, %23
  %conv27 = trunc i32 %add26 to i8
  store i8 %conv27, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps28 = getelementptr inbounds %struct.ehci_iso_stream* %27, i32 0, i32 5
  %bw_uperiod = getelementptr inbounds %struct.ehci_per_sched* %ps28, i32 0, i32 11
  %28 = load i8* %bw_uperiod, align 1
  %conv29 = zext i8 %28 to i32
  %29 = load i32* %i, align 4
  %add30 = add i32 %29, %conv29
  store i32 %add30, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end102

if.else:                                          ; preds = %if.end19
  %30 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps31 = getelementptr inbounds %struct.ehci_iso_stream* %30, i32 0, i32 5
  %cs_mask = getelementptr inbounds %struct.ehci_per_sched* %ps31, i32 0, i32 4
  %31 = load i16* %cs_mask, align 2
  %conv32 = zext i16 %31 to i32
  store i32 %conv32, i32* %s_mask, align 4
  %32 = load i32* %s_mask, align 4
  %shr = lshr i32 %32, 8
  store i32 %shr, i32* %c_mask, align 4
  %33 = load i32* %uframe, align 4
  store i32 %33, i32* %i, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc70, %if.else
  %34 = load i32* %i, align 4
  %cmp34 = icmp ult i32 %34, 64
  br i1 %cmp34, label %for.body36, label %for.end75

for.body36:                                       ; preds = %for.cond33
  %35 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps37 = getelementptr inbounds %struct.ehci_iso_stream* %35, i32 0, i32 5
  %phase_uf38 = getelementptr inbounds %struct.ehci_per_sched* %ps37, i32 0, i32 8
  %36 = load i8* %phase_uf38, align 1
  %conv39 = zext i8 %36 to i32
  store i32 %conv39, i32* %j, align 4
  %37 = load i32* %j, align 4
  %shl40 = shl i32 1, %37
  store i32 %shl40, i32* %m, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc67, %for.body36
  %38 = load i32* %j, align 4
  %cmp42 = icmp ult i32 %38, 8
  br i1 %cmp42, label %for.body44, label %for.end69

for.body44:                                       ; preds = %for.cond41
  %39 = load i32* %s_mask, align 4
  %40 = load i32* %m, align 4
  %and = and i32 %39, %40
  %tobool45 = icmp ne i32 %and, 0
  br i1 %tobool45, label %if.then46, label %if.else54

if.then46:                                        ; preds = %for.body44
  %41 = load i32* %usecs, align 4
  %42 = load i32* %i, align 4
  %43 = load i32* %j, align 4
  %add47 = add i32 %42, %43
  %idxprom48 = zext i32 %add47 to i64
  %44 = load %struct.ehci_hcd** %ehci.addr, align 8
  %bandwidth49 = getelementptr inbounds %struct.ehci_hcd* %44, i32 0, i32 61
  %arrayidx50 = getelementptr [64 x i8]* %bandwidth49, i32 0, i64 %idxprom48
  %45 = load i8* %arrayidx50, align 1
  %conv51 = zext i8 %45 to i32
  %add52 = add i32 %conv51, %41
  %conv53 = trunc i32 %add52 to i8
  store i8 %conv53, i8* %arrayidx50, align 1
  br label %if.end66

if.else54:                                        ; preds = %for.body44
  %46 = load i32* %c_mask, align 4
  %47 = load i32* %m, align 4
  %and55 = and i32 %46, %47
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then57, label %if.end65

if.then57:                                        ; preds = %if.else54
  %48 = load i32* %c_usecs, align 4
  %49 = load i32* %i, align 4
  %50 = load i32* %j, align 4
  %add58 = add i32 %49, %50
  %idxprom59 = zext i32 %add58 to i64
  %51 = load %struct.ehci_hcd** %ehci.addr, align 8
  %bandwidth60 = getelementptr inbounds %struct.ehci_hcd* %51, i32 0, i32 61
  %arrayidx61 = getelementptr [64 x i8]* %bandwidth60, i32 0, i64 %idxprom59
  %52 = load i8* %arrayidx61, align 1
  %conv62 = zext i8 %52 to i32
  %add63 = add i32 %conv62, %48
  %conv64 = trunc i32 %add63 to i8
  store i8 %conv64, i8* %arrayidx61, align 1
  br label %if.end65

if.end65:                                         ; preds = %if.then57, %if.else54
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then46
  br label %for.inc67

for.inc67:                                        ; preds = %if.end66
  %53 = load i32* %j, align 4
  %inc = add i32 %53, 1
  store i32 %inc, i32* %j, align 4
  %54 = load i32* %m, align 4
  %shl68 = shl i32 %54, 1
  store i32 %shl68, i32* %m, align 4
  br label %for.cond41

for.end69:                                        ; preds = %for.cond41
  br label %for.inc70

for.inc70:                                        ; preds = %for.end69
  %55 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps71 = getelementptr inbounds %struct.ehci_iso_stream* %55, i32 0, i32 5
  %bw_uperiod72 = getelementptr inbounds %struct.ehci_per_sched* %ps71, i32 0, i32 11
  %56 = load i8* %bw_uperiod72, align 1
  %conv73 = zext i8 %56 to i32
  %57 = load i32* %i, align 4
  %add74 = add i32 %57, %conv73
  store i32 %add74, i32* %i, align 4
  br label %for.cond33

for.end75:                                        ; preds = %for.cond33
  %58 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps76 = getelementptr inbounds %struct.ehci_iso_stream* %58, i32 0, i32 5
  %udev = getelementptr inbounds %struct.ehci_per_sched* %ps76, i32 0, i32 0
  %59 = load %struct.usb_device** %udev, align 8
  %call = call %struct.ehci_tt* @find_tt(%struct.usb_device* %59) noredzone
  store %struct.ehci_tt* %call, %struct.ehci_tt** %tt, align 8
  %60 = load i32* %sign.addr, align 4
  %cmp77 = icmp sgt i32 %60, 0
  br i1 %cmp77, label %if.then79, label %if.else82

if.then79:                                        ; preds = %for.end75
  %61 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps80 = getelementptr inbounds %struct.ehci_iso_stream* %61, i32 0, i32 5
  %ps_list = getelementptr inbounds %struct.ehci_per_sched* %ps80, i32 0, i32 2
  %62 = load %struct.ehci_tt** %tt, align 8
  %ps_list81 = getelementptr inbounds %struct.ehci_tt* %62, i32 0, i32 2
  call void @list_add_tail(%struct.list_head* %ps_list, %struct.list_head* %ps_list81) noredzone
  br label %if.end85

if.else82:                                        ; preds = %for.end75
  %63 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps83 = getelementptr inbounds %struct.ehci_iso_stream* %63, i32 0, i32 5
  %ps_list84 = getelementptr inbounds %struct.ehci_per_sched* %ps83, i32 0, i32 2
  call void @list_del(%struct.list_head* %ps_list84) noredzone
  br label %if.end85

if.end85:                                         ; preds = %if.else82, %if.then79
  %64 = load i32* %uframe, align 4
  %shr86 = lshr i32 %64, 3
  store i32 %shr86, i32* %i, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc97, %if.end85
  %65 = load i32* %i, align 4
  %cmp88 = icmp ult i32 %65, 8
  br i1 %cmp88, label %for.body90, label %for.end101

for.body90:                                       ; preds = %for.cond87
  %66 = load i32* %tt_usecs, align 4
  %67 = load i32* %i, align 4
  %idxprom91 = zext i32 %67 to i64
  %68 = load %struct.ehci_tt** %tt, align 8
  %bandwidth92 = getelementptr inbounds %struct.ehci_tt* %68, i32 0, i32 0
  %arrayidx93 = getelementptr [8 x i16]* %bandwidth92, i32 0, i64 %idxprom91
  %69 = load i16* %arrayidx93, align 2
  %conv94 = zext i16 %69 to i32
  %add95 = add i32 %conv94, %66
  %conv96 = trunc i32 %add95 to i16
  store i16 %conv96, i16* %arrayidx93, align 2
  br label %for.inc97

for.inc97:                                        ; preds = %for.body90
  %70 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps98 = getelementptr inbounds %struct.ehci_iso_stream* %70, i32 0, i32 5
  %bw_period = getelementptr inbounds %struct.ehci_per_sched* %ps98, i32 0, i32 12
  %71 = load i8* %bw_period, align 1
  %conv99 = zext i8 %71 to i32
  %72 = load i32* %i, align 4
  %add100 = add i32 %72, %conv99
  store i32 %add100, i32* %i, align 4
  br label %for.cond87

for.end101:                                       ; preds = %for.cond87
  br label %if.end102

if.end102:                                        ; preds = %if.then, %for.end101, %for.end
  ret void
}

declare i64 @schedule_timeout_uninterruptible(i64) noredzone

define internal void @qh_destroy(%struct.ehci_hcd* %ehci, %struct.ehci_qh* %qh) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh.addr = alloca %struct.ehci_qh*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* %qh, %struct.ehci_qh** %qh.addr, align 8
  %0 = load %struct.ehci_qh** %qh.addr, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %0, i32 0, i32 3
  %call = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %1, i32 0, i32 2
  %ptr = bitcast %union.ehci_shadow* %qh_next to i8**
  %2 = load i8** %ptr, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([61 x i8]* @.str14, i32 0, i32 0), i32 72, i64 12) nounwind, !srcloc !13
  br label %do.body2

do.body2:                                         ; preds = %do.cond, %do.body
  br label %do.cond

do.cond:                                          ; preds = %do.body2
  br i1 true, label %do.body2, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end4

do.end4:                                          ; preds = %do.end
  br label %if.end

if.end:                                           ; preds = %do.end4, %lor.lhs.false
  %3 = load %struct.ehci_qh** %qh.addr, align 8
  %dummy = getelementptr inbounds %struct.ehci_qh* %3, i32 0, i32 5
  %4 = load %struct.ehci_qtd** %dummy, align 8
  %tobool5 = icmp ne %struct.ehci_qtd* %4, null
  br i1 %tobool5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %6 = load %struct.ehci_qh** %qh.addr, align 8
  %dummy7 = getelementptr inbounds %struct.ehci_qh* %6, i32 0, i32 5
  %7 = load %struct.ehci_qtd** %dummy7, align 8
  call void @ehci_qtd_free(%struct.ehci_hcd* %5, %struct.ehci_qtd* %7) noredzone
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_pool = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 48
  %9 = load %struct.dma_pool** %qh_pool, align 8
  %10 = load %struct.ehci_qh** %qh.addr, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %10, i32 0, i32 0
  %11 = load %struct.ehci_qh_hw** %hw, align 8
  %12 = bitcast %struct.ehci_qh_hw* %11 to i8*
  %13 = load %struct.ehci_qh** %qh.addr, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %13, i32 0, i32 1
  %14 = load i64* %qh_dma, align 8
  call void @dma_pool_free(%struct.dma_pool* %9, i8* %12, i64 %14) noredzone
  %15 = load %struct.ehci_qh** %qh.addr, align 8
  %16 = bitcast %struct.ehci_qh* %15 to i8*
  call void @kfree(i8* %16) noredzone
  ret void
}

declare i32 @usb_hcd_check_unlink_urb(%struct.usb_hcd*, %struct.urb*, i32) noredzone

define internal %struct.list_head* @qh_urb_transaction(%struct.ehci_hcd* %ehci, %struct.urb* %urb, %struct.list_head* %head, i32 %flags) nounwind noredzone {
entry:
  %retval = alloca %struct.list_head*, align 8
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  %flags.addr = alloca i32, align 4
  %qtd = alloca %struct.ehci_qtd*, align 8
  %qtd_prev = alloca %struct.ehci_qtd*, align 8
  %buf = alloca i64, align 8
  %len = alloca i32, align 4
  %this_sg_len = alloca i32, align 4
  %maxpacket = alloca i32, align 4
  %is_input = alloca i32, align 4
  %token = alloca i32, align 4
  %i = alloca i32, align 4
  %sg = alloca %struct.scatterlist*, align 8
  %__min1 = alloca i32, align 4
  %__min2 = alloca i32, align 4
  %this_qtd_len = alloca i32, align 4
  %__min188 = alloca i32, align 4
  %__min290 = alloca i32, align 4
  %one_more = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load i32* %flags.addr, align 4
  %call = call %struct.ehci_qtd* @ehci_qtd_alloc(%struct.ehci_hcd* %0, i32 %1) noredzone
  store %struct.ehci_qtd* %call, %struct.ehci_qtd** %qtd, align 8
  %2 = load %struct.ehci_qtd** %qtd, align 8
  %tobool = icmp ne %struct.ehci_qtd* %2, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.list_head* null, %struct.list_head** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qtd* %3, i32 0, i32 6
  %4 = load %struct.list_head** %head.addr, align 8
  call void @list_add_tail(%struct.list_head* %qtd_list, %struct.list_head* %4) noredzone
  %5 = load %struct.urb** %urb.addr, align 8
  %6 = load %struct.ehci_qtd** %qtd, align 8
  %urb4 = getelementptr inbounds %struct.ehci_qtd* %6, i32 0, i32 7
  store %struct.urb* %5, %struct.urb** %urb4, align 8
  store i32 128, i32* %token, align 4
  %7 = load i32* %token, align 4
  %or = or i32 %7, 3072
  store i32 %or, i32* %token, align 4
  %8 = load %struct.urb** %urb.addr, align 8
  %transfer_buffer_length = getelementptr inbounds %struct.urb* %8, i32 0, i32 19
  %9 = load i32* %transfer_buffer_length, align 4
  store i32 %9, i32* %len, align 4
  %10 = load %struct.urb** %urb.addr, align 8
  %pipe = getelementptr inbounds %struct.urb* %10, i32 0, i32 10
  %11 = load i32* %pipe, align 4
  %and = and i32 %11, 128
  store i32 %and, i32* %is_input, align 4
  %12 = load %struct.urb** %urb.addr, align 8
  %pipe5 = getelementptr inbounds %struct.urb* %12, i32 0, i32 10
  %13 = load i32* %pipe5, align 4
  %shr = lshr i32 %13, 30
  %and6 = and i32 %shr, 3
  %cmp = icmp eq i32 %and6, 2
  br i1 %cmp, label %if.then8, label %if.end33

if.then8:                                         ; preds = %if.end
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %15 = load %struct.ehci_qtd** %qtd, align 8
  %16 = load %struct.urb** %urb.addr, align 8
  %setup_dma = getelementptr inbounds %struct.urb* %16, i32 0, i32 22
  %17 = load i64* %setup_dma, align 8
  %18 = load i32* %token, align 4
  %or9 = or i32 %18, 512
  %call10 = call i32 @qtd_fill(%struct.ehci_hcd* %14, %struct.ehci_qtd* %15, i64 %17, i64 8, i32 %or9, i32 8) noredzone
  %19 = load i32* %token, align 4
  %xor = xor i32 %19, -2147483648
  store i32 %xor, i32* %token, align 4
  %20 = load %struct.ehci_qtd** %qtd, align 8
  store %struct.ehci_qtd* %20, %struct.ehci_qtd** %qtd_prev, align 8
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %22 = load i32* %flags.addr, align 4
  %call11 = call %struct.ehci_qtd* @ehci_qtd_alloc(%struct.ehci_hcd* %21, i32 %22) noredzone
  store %struct.ehci_qtd* %call11, %struct.ehci_qtd** %qtd, align 8
  %23 = load %struct.ehci_qtd** %qtd, align 8
  %tobool12 = icmp ne %struct.ehci_qtd* %23, null
  %lnot13 = xor i1 %tobool12, true
  %lnot15 = xor i1 %lnot13, true
  %lnot17 = xor i1 %lnot15, true
  %lnot.ext18 = zext i1 %lnot17 to i32
  %conv19 = sext i32 %lnot.ext18 to i64
  %expval20 = call i64 @llvm.expect.i64(i64 %conv19, i64 0)
  %tobool21 = icmp ne i64 %expval20, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.then8
  br label %cleanup

if.end23:                                         ; preds = %if.then8
  %24 = load %struct.urb** %urb.addr, align 8
  %25 = load %struct.ehci_qtd** %qtd, align 8
  %urb24 = getelementptr inbounds %struct.ehci_qtd* %25, i32 0, i32 7
  store %struct.urb* %24, %struct.urb** %urb24, align 8
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %27 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_dma = getelementptr inbounds %struct.ehci_qtd* %27, i32 0, i32 5
  %28 = load i64* %qtd_dma, align 8
  %conv25 = trunc i64 %28 to i32
  %call26 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %26, i32 %conv25) noredzone
  %29 = load %struct.ehci_qtd** %qtd_prev, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qtd* %29, i32 0, i32 0
  store i32 %call26, i32* %hw_next, align 4
  %30 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list27 = getelementptr inbounds %struct.ehci_qtd* %30, i32 0, i32 6
  %31 = load %struct.list_head** %head.addr, align 8
  call void @list_add_tail(%struct.list_head* %qtd_list27, %struct.list_head* %31) noredzone
  %32 = load i32* %len, align 4
  %cmp28 = icmp eq i32 %32, 0
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end23
  %33 = load i32* %token, align 4
  %or31 = or i32 %33, 256
  store i32 %or31, i32* %token, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end23
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.end
  %34 = load %struct.urb** %urb.addr, align 8
  %num_mapped_sgs = getelementptr inbounds %struct.urb* %34, i32 0, i32 17
  %35 = load i32* %num_mapped_sgs, align 4
  store i32 %35, i32* %i, align 4
  %36 = load i32* %len, align 4
  %cmp34 = icmp sgt i32 %36, 0
  br i1 %cmp34, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end33
  %37 = load i32* %i, align 4
  %cmp36 = icmp sgt i32 %37, 0
  br i1 %cmp36, label %if.then38, label %if.else

if.then38:                                        ; preds = %land.lhs.true
  %38 = load %struct.urb** %urb.addr, align 8
  %sg39 = getelementptr inbounds %struct.urb* %38, i32 0, i32 16
  %39 = load %struct.scatterlist** %sg39, align 8
  store %struct.scatterlist* %39, %struct.scatterlist** %sg, align 8
  %40 = load %struct.scatterlist** %sg, align 8
  %dma_address = getelementptr inbounds %struct.scatterlist* %40, i32 0, i32 3
  %41 = load i64* %dma_address, align 8
  store i64 %41, i64* %buf, align 8
  %42 = load %struct.scatterlist** %sg, align 8
  %dma_length = getelementptr inbounds %struct.scatterlist* %42, i32 0, i32 4
  %43 = load i32* %dma_length, align 4
  store i32 %43, i32* %__min1, align 4
  %44 = load i32* %len, align 4
  store i32 %44, i32* %__min2, align 4
  %45 = load i32* %__min1, align 4
  %46 = load i32* %__min2, align 4
  %cmp40 = icmp slt i32 %45, %46
  br i1 %cmp40, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then38
  %47 = load i32* %__min1, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then38
  %48 = load i32* %__min2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %47, %cond.true ], [ %48, %cond.false ]
  store i32 %cond, i32* %this_sg_len, align 4
  br label %if.end42

if.else:                                          ; preds = %land.lhs.true, %if.end33
  store %struct.scatterlist* null, %struct.scatterlist** %sg, align 8
  %49 = load %struct.urb** %urb.addr, align 8
  %transfer_dma = getelementptr inbounds %struct.urb* %49, i32 0, i32 15
  %50 = load i64* %transfer_dma, align 8
  store i64 %50, i64* %buf, align 8
  %51 = load i32* %len, align 4
  store i32 %51, i32* %this_sg_len, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.else, %cond.end
  %52 = load i32* %is_input, align 4
  %tobool43 = icmp ne i32 %52, 0
  br i1 %tobool43, label %if.then44, label %if.end46

if.then44:                                        ; preds = %if.end42
  %53 = load i32* %token, align 4
  %or45 = or i32 %53, 256
  store i32 %or45, i32* %token, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then44, %if.end42
  %54 = load %struct.urb** %urb.addr, align 8
  %dev = getelementptr inbounds %struct.urb* %54, i32 0, i32 8
  %55 = load %struct.usb_device** %dev, align 8
  %56 = load %struct.urb** %urb.addr, align 8
  %pipe47 = getelementptr inbounds %struct.urb* %56, i32 0, i32 10
  %57 = load i32* %pipe47, align 4
  %58 = load i32* %is_input, align 4
  %tobool48 = icmp ne i32 %58, 0
  %lnot49 = xor i1 %tobool48, true
  %lnot.ext50 = zext i1 %lnot49 to i32
  %call51 = call zeroext i16 @usb_maxpacket(%struct.usb_device* %55, i32 %57, i32 %lnot.ext50) noredzone
  %conv52 = zext i16 %call51 to i32
  %and53 = and i32 %conv52, 2047
  store i32 %and53, i32* %maxpacket, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end110, %if.end46
  %59 = load %struct.ehci_hcd** %ehci.addr, align 8
  %60 = load %struct.ehci_qtd** %qtd, align 8
  %61 = load i64* %buf, align 8
  %62 = load i32* %this_sg_len, align 4
  %conv54 = sext i32 %62 to i64
  %63 = load i32* %token, align 4
  %64 = load i32* %maxpacket, align 4
  %call55 = call i32 @qtd_fill(%struct.ehci_hcd* %59, %struct.ehci_qtd* %60, i64 %61, i64 %conv54, i32 %63, i32 %64) noredzone
  store i32 %call55, i32* %this_qtd_len, align 4
  %65 = load i32* %this_qtd_len, align 4
  %66 = load i32* %this_sg_len, align 4
  %sub = sub i32 %66, %65
  store i32 %sub, i32* %this_sg_len, align 4
  %67 = load i32* %this_qtd_len, align 4
  %68 = load i32* %len, align 4
  %sub56 = sub i32 %68, %67
  store i32 %sub56, i32* %len, align 4
  %69 = load i32* %this_qtd_len, align 4
  %conv57 = sext i32 %69 to i64
  %70 = load i64* %buf, align 8
  %add = add i64 %70, %conv57
  store i64 %add, i64* %buf, align 8
  %71 = load i32* %is_input, align 4
  %tobool58 = icmp ne i32 %71, 0
  br i1 %tobool58, label %if.then59, label %if.end61

if.then59:                                        ; preds = %for.cond
  %72 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %72, i32 0, i32 15
  %73 = load %struct.ehci_qh** %async, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %73, i32 0, i32 0
  %74 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_alt_next = getelementptr inbounds %struct.ehci_qh_hw* %74, i32 0, i32 5
  %75 = load i32* %hw_alt_next, align 4
  %76 = load %struct.ehci_qtd** %qtd, align 8
  %hw_alt_next60 = getelementptr inbounds %struct.ehci_qtd* %76, i32 0, i32 1
  store i32 %75, i32* %hw_alt_next60, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %for.cond
  %77 = load i32* %maxpacket, align 4
  %78 = load i32* %this_qtd_len, align 4
  %79 = load i32* %maxpacket, align 4
  %sub62 = sub i32 %79, 1
  %add63 = add i32 %78, %sub62
  %and64 = and i32 %77, %add63
  %cmp65 = icmp eq i32 %and64, 0
  br i1 %cmp65, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.end61
  %80 = load i32* %token, align 4
  %xor68 = xor i32 %80, -2147483648
  store i32 %xor68, i32* %token, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %if.end61
  %81 = load i32* %this_sg_len, align 4
  %cmp70 = icmp sle i32 %81, 0
  %lnot72 = xor i1 %cmp70, true
  %lnot74 = xor i1 %lnot72, true
  %lnot.ext75 = zext i1 %lnot74 to i32
  %conv76 = sext i32 %lnot.ext75 to i64
  %expval77 = call i64 @llvm.expect.i64(i64 %conv76, i64 1)
  %tobool78 = icmp ne i64 %expval77, 0
  br i1 %tobool78, label %if.then79, label %if.end97

if.then79:                                        ; preds = %if.end69
  %82 = load i32* %i, align 4
  %dec = add i32 %82, -1
  store i32 %dec, i32* %i, align 4
  %cmp80 = icmp sle i32 %dec, 0
  br i1 %cmp80, label %if.then84, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then79
  %83 = load i32* %len, align 4
  %cmp82 = icmp sle i32 %83, 0
  br i1 %cmp82, label %if.then84, label %if.end85

if.then84:                                        ; preds = %lor.lhs.false, %if.then79
  br label %for.end

if.end85:                                         ; preds = %lor.lhs.false
  %84 = load %struct.scatterlist** %sg, align 8
  %call86 = call %struct.scatterlist* @sg_next(%struct.scatterlist* %84) noredzone
  store %struct.scatterlist* %call86, %struct.scatterlist** %sg, align 8
  %85 = load %struct.scatterlist** %sg, align 8
  %dma_address87 = getelementptr inbounds %struct.scatterlist* %85, i32 0, i32 3
  %86 = load i64* %dma_address87, align 8
  store i64 %86, i64* %buf, align 8
  %87 = load %struct.scatterlist** %sg, align 8
  %dma_length89 = getelementptr inbounds %struct.scatterlist* %87, i32 0, i32 4
  %88 = load i32* %dma_length89, align 4
  store i32 %88, i32* %__min188, align 4
  %89 = load i32* %len, align 4
  store i32 %89, i32* %__min290, align 4
  %90 = load i32* %__min188, align 4
  %91 = load i32* %__min290, align 4
  %cmp91 = icmp slt i32 %90, %91
  br i1 %cmp91, label %cond.true93, label %cond.false94

cond.true93:                                      ; preds = %if.end85
  %92 = load i32* %__min188, align 4
  br label %cond.end95

cond.false94:                                     ; preds = %if.end85
  %93 = load i32* %__min290, align 4
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false94, %cond.true93
  %cond96 = phi i32 [ %92, %cond.true93 ], [ %93, %cond.false94 ]
  store i32 %cond96, i32* %this_sg_len, align 4
  br label %if.end97

if.end97:                                         ; preds = %cond.end95, %if.end69
  %94 = load %struct.ehci_qtd** %qtd, align 8
  store %struct.ehci_qtd* %94, %struct.ehci_qtd** %qtd_prev, align 8
  %95 = load %struct.ehci_hcd** %ehci.addr, align 8
  %96 = load i32* %flags.addr, align 4
  %call98 = call %struct.ehci_qtd* @ehci_qtd_alloc(%struct.ehci_hcd* %95, i32 %96) noredzone
  store %struct.ehci_qtd* %call98, %struct.ehci_qtd** %qtd, align 8
  %97 = load %struct.ehci_qtd** %qtd, align 8
  %tobool99 = icmp ne %struct.ehci_qtd* %97, null
  %lnot100 = xor i1 %tobool99, true
  %lnot102 = xor i1 %lnot100, true
  %lnot104 = xor i1 %lnot102, true
  %lnot.ext105 = zext i1 %lnot104 to i32
  %conv106 = sext i32 %lnot.ext105 to i64
  %expval107 = call i64 @llvm.expect.i64(i64 %conv106, i64 0)
  %tobool108 = icmp ne i64 %expval107, 0
  br i1 %tobool108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end97
  br label %cleanup

if.end110:                                        ; preds = %if.end97
  %98 = load %struct.urb** %urb.addr, align 8
  %99 = load %struct.ehci_qtd** %qtd, align 8
  %urb111 = getelementptr inbounds %struct.ehci_qtd* %99, i32 0, i32 7
  store %struct.urb* %98, %struct.urb** %urb111, align 8
  %100 = load %struct.ehci_hcd** %ehci.addr, align 8
  %101 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_dma112 = getelementptr inbounds %struct.ehci_qtd* %101, i32 0, i32 5
  %102 = load i64* %qtd_dma112, align 8
  %conv113 = trunc i64 %102 to i32
  %call114 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %100, i32 %conv113) noredzone
  %103 = load %struct.ehci_qtd** %qtd_prev, align 8
  %hw_next115 = getelementptr inbounds %struct.ehci_qtd* %103, i32 0, i32 0
  store i32 %call114, i32* %hw_next115, align 4
  %104 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list116 = getelementptr inbounds %struct.ehci_qtd* %104, i32 0, i32 6
  %105 = load %struct.list_head** %head.addr, align 8
  call void @list_add_tail(%struct.list_head* %qtd_list116, %struct.list_head* %105) noredzone
  br label %for.cond

for.end:                                          ; preds = %if.then84
  %106 = load %struct.urb** %urb.addr, align 8
  %transfer_flags = getelementptr inbounds %struct.urb* %106, i32 0, i32 13
  %107 = load i32* %transfer_flags, align 4
  %and117 = and i32 %107, 1
  %cmp118 = icmp eq i32 %and117, 0
  br i1 %cmp118, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.end
  %108 = load %struct.urb** %urb.addr, align 8
  %pipe120 = getelementptr inbounds %struct.urb* %108, i32 0, i32 10
  %109 = load i32* %pipe120, align 4
  %shr121 = lshr i32 %109, 30
  %and122 = and i32 %shr121, 3
  %cmp123 = icmp eq i32 %and122, 2
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.end
  %110 = phi i1 [ true, %for.end ], [ %cmp123, %lor.rhs ]
  %lnot125 = xor i1 %110, true
  %lnot127 = xor i1 %lnot125, true
  %lnot.ext128 = zext i1 %lnot127 to i32
  %conv129 = sext i32 %lnot.ext128 to i64
  %expval130 = call i64 @llvm.expect.i64(i64 %conv129, i64 1)
  %tobool131 = icmp ne i64 %expval130, 0
  br i1 %tobool131, label %if.then132, label %if.end135

if.then132:                                       ; preds = %lor.end
  %111 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call133 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %111, i32 1) noredzone
  %112 = load %struct.ehci_qtd** %qtd, align 8
  %hw_alt_next134 = getelementptr inbounds %struct.ehci_qtd* %112, i32 0, i32 1
  store i32 %call133, i32* %hw_alt_next134, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.then132, %lor.end
  %113 = load %struct.urb** %urb.addr, align 8
  %transfer_buffer_length136 = getelementptr inbounds %struct.urb* %113, i32 0, i32 19
  %114 = load i32* %transfer_buffer_length136, align 4
  %cmp137 = icmp ne i32 %114, 0
  %lnot139 = xor i1 %cmp137, true
  %lnot141 = xor i1 %lnot139, true
  %lnot.ext142 = zext i1 %lnot141 to i32
  %conv143 = sext i32 %lnot.ext142 to i64
  %expval144 = call i64 @llvm.expect.i64(i64 %conv143, i64 1)
  %tobool145 = icmp ne i64 %expval144, 0
  br i1 %tobool145, label %if.then146, label %if.end192

if.then146:                                       ; preds = %if.end135
  store i32 0, i32* %one_more, align 4
  %115 = load %struct.urb** %urb.addr, align 8
  %pipe147 = getelementptr inbounds %struct.urb* %115, i32 0, i32 10
  %116 = load i32* %pipe147, align 4
  %shr148 = lshr i32 %116, 30
  %and149 = and i32 %shr148, 3
  %cmp150 = icmp eq i32 %and149, 2
  br i1 %cmp150, label %if.then152, label %if.else155

if.then152:                                       ; preds = %if.then146
  store i32 1, i32* %one_more, align 4
  %117 = load i32* %token, align 4
  %xor153 = xor i32 %117, 256
  store i32 %xor153, i32* %token, align 4
  %118 = load i32* %token, align 4
  %or154 = or i32 %118, -2147483648
  store i32 %or154, i32* %token, align 4
  br label %if.end168

if.else155:                                       ; preds = %if.then146
  %119 = load %struct.urb** %urb.addr, align 8
  %pipe156 = getelementptr inbounds %struct.urb* %119, i32 0, i32 10
  %120 = load i32* %pipe156, align 4
  %and157 = and i32 %120, 128
  %tobool158 = icmp ne i32 %and157, 0
  br i1 %tobool158, label %if.end167, label %land.lhs.true159

land.lhs.true159:                                 ; preds = %if.else155
  %121 = load %struct.urb** %urb.addr, align 8
  %transfer_flags160 = getelementptr inbounds %struct.urb* %121, i32 0, i32 13
  %122 = load i32* %transfer_flags160, align 4
  %and161 = and i32 %122, 64
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %land.lhs.true163, label %if.end167

land.lhs.true163:                                 ; preds = %land.lhs.true159
  %123 = load %struct.urb** %urb.addr, align 8
  %transfer_buffer_length164 = getelementptr inbounds %struct.urb* %123, i32 0, i32 19
  %124 = load i32* %transfer_buffer_length164, align 4
  %125 = load i32* %maxpacket, align 4
  %rem = urem i32 %124, %125
  %tobool165 = icmp ne i32 %rem, 0
  br i1 %tobool165, label %if.end167, label %if.then166

if.then166:                                       ; preds = %land.lhs.true163
  store i32 1, i32* %one_more, align 4
  br label %if.end167

if.end167:                                        ; preds = %if.then166, %land.lhs.true163, %land.lhs.true159, %if.else155
  br label %if.end168

if.end168:                                        ; preds = %if.end167, %if.then152
  %126 = load i32* %one_more, align 4
  %tobool169 = icmp ne i32 %126, 0
  br i1 %tobool169, label %if.then170, label %if.end191

if.then170:                                       ; preds = %if.end168
  %127 = load %struct.ehci_qtd** %qtd, align 8
  store %struct.ehci_qtd* %127, %struct.ehci_qtd** %qtd_prev, align 8
  %128 = load %struct.ehci_hcd** %ehci.addr, align 8
  %129 = load i32* %flags.addr, align 4
  %call171 = call %struct.ehci_qtd* @ehci_qtd_alloc(%struct.ehci_hcd* %128, i32 %129) noredzone
  store %struct.ehci_qtd* %call171, %struct.ehci_qtd** %qtd, align 8
  %130 = load %struct.ehci_qtd** %qtd, align 8
  %tobool172 = icmp ne %struct.ehci_qtd* %130, null
  %lnot173 = xor i1 %tobool172, true
  %lnot175 = xor i1 %lnot173, true
  %lnot177 = xor i1 %lnot175, true
  %lnot.ext178 = zext i1 %lnot177 to i32
  %conv179 = sext i32 %lnot.ext178 to i64
  %expval180 = call i64 @llvm.expect.i64(i64 %conv179, i64 0)
  %tobool181 = icmp ne i64 %expval180, 0
  br i1 %tobool181, label %if.then182, label %if.end183

if.then182:                                       ; preds = %if.then170
  br label %cleanup

if.end183:                                        ; preds = %if.then170
  %131 = load %struct.urb** %urb.addr, align 8
  %132 = load %struct.ehci_qtd** %qtd, align 8
  %urb184 = getelementptr inbounds %struct.ehci_qtd* %132, i32 0, i32 7
  store %struct.urb* %131, %struct.urb** %urb184, align 8
  %133 = load %struct.ehci_hcd** %ehci.addr, align 8
  %134 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_dma185 = getelementptr inbounds %struct.ehci_qtd* %134, i32 0, i32 5
  %135 = load i64* %qtd_dma185, align 8
  %conv186 = trunc i64 %135 to i32
  %call187 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %133, i32 %conv186) noredzone
  %136 = load %struct.ehci_qtd** %qtd_prev, align 8
  %hw_next188 = getelementptr inbounds %struct.ehci_qtd* %136, i32 0, i32 0
  store i32 %call187, i32* %hw_next188, align 4
  %137 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list189 = getelementptr inbounds %struct.ehci_qtd* %137, i32 0, i32 6
  %138 = load %struct.list_head** %head.addr, align 8
  call void @list_add_tail(%struct.list_head* %qtd_list189, %struct.list_head* %138) noredzone
  %139 = load %struct.ehci_hcd** %ehci.addr, align 8
  %140 = load %struct.ehci_qtd** %qtd, align 8
  %141 = load i32* %token, align 4
  %call190 = call i32 @qtd_fill(%struct.ehci_hcd* %139, %struct.ehci_qtd* %140, i64 0, i64 0, i32 %141, i32 0) noredzone
  br label %if.end191

if.end191:                                        ; preds = %if.end183, %if.end168
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.end135
  %142 = load %struct.urb** %urb.addr, align 8
  %transfer_flags193 = getelementptr inbounds %struct.urb* %142, i32 0, i32 13
  %143 = load i32* %transfer_flags193, align 4
  %and194 = and i32 %143, 128
  %tobool195 = icmp ne i32 %and194, 0
  %lnot196 = xor i1 %tobool195, true
  %lnot198 = xor i1 %lnot196, true
  %lnot200 = xor i1 %lnot198, true
  %lnot.ext201 = zext i1 %lnot200 to i32
  %conv202 = sext i32 %lnot.ext201 to i64
  %expval203 = call i64 @llvm.expect.i64(i64 %conv202, i64 1)
  %tobool204 = icmp ne i64 %expval203, 0
  br i1 %tobool204, label %if.then205, label %if.end208

if.then205:                                       ; preds = %if.end192
  %144 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call206 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %144, i32 32768) noredzone
  %145 = load %struct.ehci_qtd** %qtd, align 8
  %hw_token = getelementptr inbounds %struct.ehci_qtd* %145, i32 0, i32 2
  %146 = load i32* %hw_token, align 4
  %or207 = or i32 %146, %call206
  store i32 %or207, i32* %hw_token, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.then205, %if.end192
  %147 = load %struct.list_head** %head.addr, align 8
  store %struct.list_head* %147, %struct.list_head** %retval
  br label %return

cleanup:                                          ; preds = %if.then182, %if.then109, %if.then22
  %148 = load %struct.ehci_hcd** %ehci.addr, align 8
  %149 = load %struct.urb** %urb.addr, align 8
  %150 = load %struct.list_head** %head.addr, align 8
  call void @qtd_list_free(%struct.ehci_hcd* %148, %struct.urb* %149, %struct.list_head* %150) noredzone
  store %struct.list_head* null, %struct.list_head** %retval
  br label %return

return:                                           ; preds = %cleanup, %if.end208, %if.then
  %151 = load %struct.list_head** %retval
  ret %struct.list_head* %151
}

define internal i32 @submit_async(%struct.ehci_hcd* %ehci, %struct.urb* %urb, %struct.list_head* %qtd_list, i32 %mem_flags) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %qtd_list.addr = alloca %struct.list_head*, align 8
  %mem_flags.addr = alloca i32, align 4
  %epnum = alloca i32, align 4
  %flags = alloca i64, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %rc = alloca i32, align 4
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store %struct.list_head* %qtd_list, %struct.list_head** %qtd_list.addr, align 8
  store i32 %mem_flags, i32* %mem_flags.addr, align 4
  store %struct.ehci_qh* null, %struct.ehci_qh** %qh, align 8
  %0 = load %struct.urb** %urb.addr, align 8
  %ep = getelementptr inbounds %struct.urb* %0, i32 0, i32 9
  %1 = load %struct.usb_host_endpoint** %ep, align 8
  %desc = getelementptr inbounds %struct.usb_host_endpoint* %1, i32 0, i32 0
  %bEndpointAddress = getelementptr inbounds %struct.usb_endpoint_descriptor* %desc, i32 0, i32 2
  %2 = load i8* %bEndpointAddress, align 1
  %conv = zext i8 %2 to i32
  store i32 %conv, i32* %epnum, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv2 = zext i1 %cmp to i32
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 11
  %call = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call3 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call) noredzone
  store i64 %call3, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.end4

do.end4:                                          ; preds = %do.end
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call5 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %4) noredzone
  %flags6 = getelementptr inbounds %struct.usb_hcd* %call5, i32 0, i32 10
  %5 = load i64* %flags6, align 8
  %and = and i64 %5, 1
  %tobool = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot7 = xor i1 %lnot, true
  %lnot8 = xor i1 %lnot7, true
  %lnot.ext = zext i1 %lnot8 to i32
  %conv9 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv9, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  br i1 %tobool10, label %if.then, label %if.end

if.then:                                          ; preds = %do.end4
  store i32 -108, i32* %rc, align 4
  br label %done

if.end:                                           ; preds = %do.end4
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call11 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %6) noredzone
  %7 = load %struct.urb** %urb.addr, align 8
  %call12 = call i32 @usb_hcd_link_urb_to_ep(%struct.usb_hcd* %call11, %struct.urb* %7) noredzone
  store i32 %call12, i32* %rc, align 4
  %8 = load i32* %rc, align 4
  %tobool13 = icmp ne i32 %8, 0
  %lnot14 = xor i1 %tobool13, true
  %lnot16 = xor i1 %lnot14, true
  %lnot.ext17 = zext i1 %lnot16 to i32
  %conv18 = sext i32 %lnot.ext17 to i64
  %expval19 = call i64 @llvm.expect.i64(i64 %conv18, i64 0)
  %tobool20 = icmp ne i64 %expval19, 0
  br i1 %tobool20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end
  br label %done

if.end22:                                         ; preds = %if.end
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %10 = load %struct.urb** %urb.addr, align 8
  %11 = load %struct.list_head** %qtd_list.addr, align 8
  %12 = load i32* %epnum, align 4
  %13 = load %struct.urb** %urb.addr, align 8
  %ep23 = getelementptr inbounds %struct.urb* %13, i32 0, i32 9
  %14 = load %struct.usb_host_endpoint** %ep23, align 8
  %hcpriv = getelementptr inbounds %struct.usb_host_endpoint* %14, i32 0, i32 3
  %call24 = call %struct.ehci_qh* @qh_append_tds(%struct.ehci_hcd* %9, %struct.urb* %10, %struct.list_head* %11, i32 %12, i8** %hcpriv) noredzone
  store %struct.ehci_qh* %call24, %struct.ehci_qh** %qh, align 8
  %15 = load %struct.ehci_qh** %qh, align 8
  %cmp25 = icmp eq %struct.ehci_qh* %15, null
  %lnot27 = xor i1 %cmp25, true
  %lnot29 = xor i1 %lnot27, true
  %lnot.ext30 = zext i1 %lnot29 to i32
  %conv31 = sext i32 %lnot.ext30 to i64
  %expval32 = call i64 @llvm.expect.i64(i64 %conv31, i64 0)
  %tobool33 = icmp ne i64 %expval32, 0
  br i1 %tobool33, label %if.then34, label %if.end36

if.then34:                                        ; preds = %if.end22
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call35 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %16) noredzone
  %17 = load %struct.urb** %urb.addr, align 8
  call void @usb_hcd_unlink_urb_from_ep(%struct.usb_hcd* %call35, %struct.urb* %17) noredzone
  store i32 -12, i32* %rc, align 4
  br label %done

if.end36:                                         ; preds = %if.end22
  %18 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %18, i32 0, i32 9
  %19 = load i8* %qh_state, align 1
  %conv37 = zext i8 %19 to i32
  %cmp38 = icmp eq i32 %conv37, 3
  %lnot40 = xor i1 %cmp38, true
  %lnot42 = xor i1 %lnot40, true
  %lnot.ext43 = zext i1 %lnot42 to i32
  %conv44 = sext i32 %lnot.ext43 to i64
  %expval45 = call i64 @llvm.expect.i64(i64 %conv44, i64 1)
  %tobool46 = icmp ne i64 %expval45, 0
  br i1 %tobool46, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.end36
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %21 = load %struct.ehci_qh** %qh, align 8
  call void @qh_link_async(%struct.ehci_hcd* %20, %struct.ehci_qh* %21) noredzone
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %if.end36
  br label %done

done:                                             ; preds = %if.end48, %if.then34, %if.then21, %if.then
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock49 = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 11
  %23 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock49, i64 %23) noredzone
  %24 = load %struct.ehci_qh** %qh, align 8
  %cmp50 = icmp eq %struct.ehci_qh* %24, null
  %lnot52 = xor i1 %cmp50, true
  %lnot54 = xor i1 %lnot52, true
  %lnot.ext55 = zext i1 %lnot54 to i32
  %conv56 = sext i32 %lnot.ext55 to i64
  %expval57 = call i64 @llvm.expect.i64(i64 %conv56, i64 0)
  %tobool58 = icmp ne i64 %expval57, 0
  br i1 %tobool58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %done
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %26 = load %struct.urb** %urb.addr, align 8
  %27 = load %struct.list_head** %qtd_list.addr, align 8
  call void @qtd_list_free(%struct.ehci_hcd* %25, %struct.urb* %26, %struct.list_head* %27) noredzone
  br label %if.end60

if.end60:                                         ; preds = %if.then59, %done
  %28 = load i32* %rc, align 4
  ret i32 %28
}

define internal i32 @intr_submit(%struct.ehci_hcd* %ehci, %struct.urb* %urb, %struct.list_head* %qtd_list, i32 %mem_flags) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %qtd_list.addr = alloca %struct.list_head*, align 8
  %mem_flags.addr = alloca i32, align 4
  %epnum = alloca i32, align 4
  %flags = alloca i64, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %status = alloca i32, align 4
  %empty = alloca %struct.list_head, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store %struct.list_head* %qtd_list, %struct.list_head** %qtd_list.addr, align 8
  store i32 %mem_flags, i32* %mem_flags.addr, align 4
  %0 = load %struct.urb** %urb.addr, align 8
  %ep = getelementptr inbounds %struct.urb* %0, i32 0, i32 9
  %1 = load %struct.usb_host_endpoint** %ep, align 8
  %desc = getelementptr inbounds %struct.usb_host_endpoint* %1, i32 0, i32 0
  %bEndpointAddress = getelementptr inbounds %struct.usb_endpoint_descriptor* %desc, i32 0, i32 2
  %2 = load i8* %bEndpointAddress, align 1
  %conv = zext i8 %2 to i32
  store i32 %conv, i32* %epnum, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv2 = zext i1 %cmp to i32
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 11
  %call = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call3 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call) noredzone
  store i64 %call3, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.end4

do.end4:                                          ; preds = %do.end
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call5 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %4) noredzone
  %flags6 = getelementptr inbounds %struct.usb_hcd* %call5, i32 0, i32 10
  %5 = load i64* %flags6, align 8
  %and = and i64 %5, 1
  %tobool = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot7 = xor i1 %lnot, true
  %lnot8 = xor i1 %lnot7, true
  %lnot.ext = zext i1 %lnot8 to i32
  %conv9 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv9, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  br i1 %tobool10, label %if.then, label %if.end

if.then:                                          ; preds = %do.end4
  store i32 -108, i32* %status, align 4
  br label %done_not_linked

if.end:                                           ; preds = %do.end4
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call11 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %6) noredzone
  %7 = load %struct.urb** %urb.addr, align 8
  %call12 = call i32 @usb_hcd_link_urb_to_ep(%struct.usb_hcd* %call11, %struct.urb* %7) noredzone
  store i32 %call12, i32* %status, align 4
  %8 = load i32* %status, align 4
  %tobool13 = icmp ne i32 %8, 0
  %lnot14 = xor i1 %tobool13, true
  %lnot16 = xor i1 %lnot14, true
  %lnot.ext17 = zext i1 %lnot16 to i32
  %conv18 = sext i32 %lnot.ext17 to i64
  %expval19 = call i64 @llvm.expect.i64(i64 %conv18, i64 0)
  %tobool20 = icmp ne i64 %expval19, 0
  br i1 %tobool20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end
  br label %done_not_linked

if.end22:                                         ; preds = %if.end
  call void @INIT_LIST_HEAD(%struct.list_head* %empty) noredzone
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %10 = load %struct.urb** %urb.addr, align 8
  %11 = load i32* %epnum, align 4
  %12 = load %struct.urb** %urb.addr, align 8
  %ep23 = getelementptr inbounds %struct.urb* %12, i32 0, i32 9
  %13 = load %struct.usb_host_endpoint** %ep23, align 8
  %hcpriv = getelementptr inbounds %struct.usb_host_endpoint* %13, i32 0, i32 3
  %call24 = call %struct.ehci_qh* @qh_append_tds(%struct.ehci_hcd* %9, %struct.urb* %10, %struct.list_head* %empty, i32 %11, i8** %hcpriv) noredzone
  store %struct.ehci_qh* %call24, %struct.ehci_qh** %qh, align 8
  %14 = load %struct.ehci_qh** %qh, align 8
  %cmp25 = icmp eq %struct.ehci_qh* %14, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end22
  store i32 -12, i32* %status, align 4
  br label %done

if.end28:                                         ; preds = %if.end22
  %15 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %15, i32 0, i32 9
  %16 = load i8* %qh_state, align 1
  %conv29 = zext i8 %16 to i32
  %cmp30 = icmp eq i32 %conv29, 3
  br i1 %cmp30, label %if.then32, label %if.end38

if.then32:                                        ; preds = %if.end28
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %18 = load %struct.ehci_qh** %qh, align 8
  %call33 = call i32 @qh_schedule(%struct.ehci_hcd* %17, %struct.ehci_qh* %18) noredzone
  store i32 %call33, i32* %status, align 4
  %cmp34 = icmp ne i32 %call33, 0
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.then32
  br label %done

if.end37:                                         ; preds = %if.then32
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end28
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %20 = load %struct.urb** %urb.addr, align 8
  %21 = load %struct.list_head** %qtd_list.addr, align 8
  %22 = load i32* %epnum, align 4
  %23 = load %struct.urb** %urb.addr, align 8
  %ep39 = getelementptr inbounds %struct.urb* %23, i32 0, i32 9
  %24 = load %struct.usb_host_endpoint** %ep39, align 8
  %hcpriv40 = getelementptr inbounds %struct.usb_host_endpoint* %24, i32 0, i32 3
  %call41 = call %struct.ehci_qh* @qh_append_tds(%struct.ehci_hcd* %19, %struct.urb* %20, %struct.list_head* %21, i32 %22, i8** %hcpriv40) noredzone
  store %struct.ehci_qh* %call41, %struct.ehci_qh** %qh, align 8
  br label %do.body42

do.body42:                                        ; preds = %if.end38
  %25 = load %struct.ehci_qh** %qh, align 8
  %cmp43 = icmp eq %struct.ehci_qh* %25, null
  %lnot45 = xor i1 %cmp43, true
  %lnot47 = xor i1 %lnot45, true
  %lnot.ext48 = zext i1 %lnot47 to i32
  %conv49 = sext i32 %lnot.ext48 to i64
  %expval50 = call i64 @llvm.expect.i64(i64 %conv49, i64 0)
  %tobool51 = icmp ne i64 %expval50, 0
  br i1 %tobool51, label %if.then52, label %if.end58

if.then52:                                        ; preds = %do.body42
  br label %do.body53

do.body53:                                        ; preds = %if.then52
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([63 x i8]* @.str16, i32 0, i32 0), i32 967, i64 12) nounwind, !srcloc !14
  br label %do.body54

do.body54:                                        ; preds = %do.cond, %do.body53
  br label %do.cond

do.cond:                                          ; preds = %do.body54
  br i1 true, label %do.body54, label %do.end55

do.end55:                                         ; preds = %do.cond
  br label %do.end57

do.end57:                                         ; preds = %do.end55
  br label %if.end58

if.end58:                                         ; preds = %do.end57, %do.body42
  br label %do.end60

do.end60:                                         ; preds = %if.end58
  %26 = load %struct.ehci_qh** %qh, align 8
  %qh_state61 = getelementptr inbounds %struct.ehci_qh* %26, i32 0, i32 9
  %27 = load i8* %qh_state61, align 1
  %conv62 = zext i8 %27 to i32
  %cmp63 = icmp eq i32 %conv62, 3
  br i1 %cmp63, label %if.then65, label %if.else

if.then65:                                        ; preds = %do.end60
  %28 = load %struct.ehci_hcd** %ehci.addr, align 8
  %29 = load %struct.ehci_qh** %qh, align 8
  call void @qh_refresh(%struct.ehci_hcd* %28, %struct.ehci_qh* %29) noredzone
  %30 = load %struct.ehci_hcd** %ehci.addr, align 8
  %31 = load %struct.ehci_qh** %qh, align 8
  call void @qh_link_periodic(%struct.ehci_hcd* %30, %struct.ehci_qh* %31) noredzone
  br label %if.end66

if.else:                                          ; preds = %do.end60
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %33 = load %struct.ehci_qh** %qh, align 8
  call void @cancel_unlink_wait_intr(%struct.ehci_hcd* %32, %struct.ehci_qh* %33) noredzone
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then65
  %34 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call67 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %34) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call67, i32 0, i32 0
  %bandwidth_int_reqs = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 15
  %35 = load i32* %bandwidth_int_reqs, align 4
  %inc = add i32 %35, 1
  store i32 %inc, i32* %bandwidth_int_reqs, align 4
  br label %done

done:                                             ; preds = %if.end66, %if.then36, %if.then27
  %36 = load i32* %status, align 4
  %tobool68 = icmp ne i32 %36, 0
  %lnot69 = xor i1 %tobool68, true
  %lnot71 = xor i1 %lnot69, true
  %lnot.ext72 = zext i1 %lnot71 to i32
  %conv73 = sext i32 %lnot.ext72 to i64
  %expval74 = call i64 @llvm.expect.i64(i64 %conv73, i64 0)
  %tobool75 = icmp ne i64 %expval74, 0
  br i1 %tobool75, label %if.then76, label %if.end78

if.then76:                                        ; preds = %done
  %37 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call77 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %37) noredzone
  %38 = load %struct.urb** %urb.addr, align 8
  call void @usb_hcd_unlink_urb_from_ep(%struct.usb_hcd* %call77, %struct.urb* %38) noredzone
  br label %if.end78

if.end78:                                         ; preds = %if.then76, %done
  br label %done_not_linked

done_not_linked:                                  ; preds = %if.end78, %if.then21, %if.then
  %39 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock79 = getelementptr inbounds %struct.ehci_hcd* %39, i32 0, i32 11
  %40 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock79, i64 %40) noredzone
  %41 = load i32* %status, align 4
  %tobool80 = icmp ne i32 %41, 0
  br i1 %tobool80, label %if.then81, label %if.end82

if.then81:                                        ; preds = %done_not_linked
  %42 = load %struct.ehci_hcd** %ehci.addr, align 8
  %43 = load %struct.urb** %urb.addr, align 8
  %44 = load %struct.list_head** %qtd_list.addr, align 8
  call void @qtd_list_free(%struct.ehci_hcd* %42, %struct.urb* %43, %struct.list_head* %44) noredzone
  br label %if.end82

if.end82:                                         ; preds = %if.then81, %done_not_linked
  %45 = load i32* %status, align 4
  ret i32 %45
}

define internal i32 @itd_submit(%struct.ehci_hcd* %ehci, %struct.urb* %urb, i32 %mem_flags) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %mem_flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %flags = alloca i64, align 8
  %stream = alloca %struct.ehci_iso_stream*, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %mem_flags, i32* %mem_flags.addr, align 4
  store i32 -22, i32* %status, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load %struct.urb** %urb.addr, align 8
  %call = call %struct.ehci_iso_stream* @iso_stream_find(%struct.ehci_hcd* %0, %struct.urb* %1) noredzone
  store %struct.ehci_iso_stream* %call, %struct.ehci_iso_stream** %stream, align 8
  %2 = load %struct.ehci_iso_stream** %stream, align 8
  %cmp = icmp eq %struct.ehci_iso_stream* %2, null
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -12, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.urb** %urb.addr, align 8
  %interval = getelementptr inbounds %struct.urb* %3, i32 0, i32 25
  %4 = load i32* %interval, align 4
  %5 = load %struct.ehci_iso_stream** %stream, align 8
  %uperiod = getelementptr inbounds %struct.ehci_iso_stream* %5, i32 0, i32 8
  %6 = load i16* %uperiod, align 2
  %conv2 = zext i16 %6 to i32
  %cmp3 = icmp ne i32 %4, %conv2
  %lnot5 = xor i1 %cmp3, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv9 = sext i32 %lnot.ext8 to i64
  %expval10 = call i64 @llvm.expect.i64(i64 %conv9, i64 0)
  %tobool11 = icmp ne i64 %expval10, 0
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end
  br label %done

if.end13:                                         ; preds = %if.end
  %7 = load %struct.ehci_iso_stream** %stream, align 8
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %9 = load %struct.urb** %urb.addr, align 8
  %10 = load i32* %mem_flags.addr, align 4
  %call14 = call i32 @itd_urb_transaction(%struct.ehci_iso_stream* %7, %struct.ehci_hcd* %8, %struct.urb* %9, i32 %10) noredzone
  store i32 %call14, i32* %status, align 4
  %11 = load i32* %status, align 4
  %cmp15 = icmp slt i32 %11, 0
  %lnot17 = xor i1 %cmp15, true
  %lnot19 = xor i1 %lnot17, true
  %lnot.ext20 = zext i1 %lnot19 to i32
  %conv21 = sext i32 %lnot.ext20 to i64
  %expval22 = call i64 @llvm.expect.i64(i64 %conv21, i64 0)
  %tobool23 = icmp ne i64 %expval22, 0
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end13
  br label %done

if.end25:                                         ; preds = %if.end13
  br label %do.body

do.body:                                          ; preds = %if.end25
  br label %do.body26

do.body26:                                        ; preds = %do.body
  %cmp27 = icmp eq i64* %__dummy, %__dummy2
  %conv28 = zext i1 %cmp27 to i32
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 11
  %call29 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call30 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call29) noredzone
  store i64 %call30, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body26
  br label %do.end31

do.end31:                                         ; preds = %do.end
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call32 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %13) noredzone
  %flags33 = getelementptr inbounds %struct.usb_hcd* %call32, i32 0, i32 10
  %14 = load i64* %flags33, align 8
  %and = and i64 %14, 1
  %tobool34 = icmp ne i64 %and, 0
  %lnot35 = xor i1 %tobool34, true
  %lnot37 = xor i1 %lnot35, true
  %lnot39 = xor i1 %lnot37, true
  %lnot.ext40 = zext i1 %lnot39 to i32
  %conv41 = sext i32 %lnot.ext40 to i64
  %expval42 = call i64 @llvm.expect.i64(i64 %conv41, i64 0)
  %tobool43 = icmp ne i64 %expval42, 0
  br i1 %tobool43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %do.end31
  store i32 -108, i32* %status, align 4
  br label %done_not_linked

if.end45:                                         ; preds = %do.end31
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call46 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %15) noredzone
  %16 = load %struct.urb** %urb.addr, align 8
  %call47 = call i32 @usb_hcd_link_urb_to_ep(%struct.usb_hcd* %call46, %struct.urb* %16) noredzone
  store i32 %call47, i32* %status, align 4
  %17 = load i32* %status, align 4
  %tobool48 = icmp ne i32 %17, 0
  %lnot49 = xor i1 %tobool48, true
  %lnot51 = xor i1 %lnot49, true
  %lnot.ext52 = zext i1 %lnot51 to i32
  %conv53 = sext i32 %lnot.ext52 to i64
  %expval54 = call i64 @llvm.expect.i64(i64 %conv53, i64 0)
  %tobool55 = icmp ne i64 %expval54, 0
  br i1 %tobool55, label %if.then56, label %if.end57

if.then56:                                        ; preds = %if.end45
  br label %done_not_linked

if.end57:                                         ; preds = %if.end45
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %19 = load %struct.urb** %urb.addr, align 8
  %20 = load %struct.ehci_iso_stream** %stream, align 8
  %call58 = call i32 @iso_stream_schedule(%struct.ehci_hcd* %18, %struct.urb* %19, %struct.ehci_iso_stream* %20) noredzone
  store i32 %call58, i32* %status, align 4
  %21 = load i32* %status, align 4
  %cmp59 = icmp eq i32 %21, 0
  %lnot61 = xor i1 %cmp59, true
  %lnot63 = xor i1 %lnot61, true
  %lnot.ext64 = zext i1 %lnot63 to i32
  %conv65 = sext i32 %lnot.ext64 to i64
  %expval66 = call i64 @llvm.expect.i64(i64 %conv65, i64 1)
  %tobool67 = icmp ne i64 %expval66, 0
  br i1 %tobool67, label %if.then68, label %if.else

if.then68:                                        ; preds = %if.end57
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %23 = load %struct.urb** %urb.addr, align 8
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 21
  %25 = load i32* %periodic_size, align 4
  %shl = shl i32 %25, 3
  %26 = load %struct.ehci_iso_stream** %stream, align 8
  call void @itd_link_urb(%struct.ehci_hcd* %22, %struct.urb* %23, i32 %shl, %struct.ehci_iso_stream* %26) noredzone
  br label %if.end75

if.else:                                          ; preds = %if.end57
  %27 = load i32* %status, align 4
  %cmp69 = icmp sgt i32 %27, 0
  br i1 %cmp69, label %if.then71, label %if.else72

if.then71:                                        ; preds = %if.else
  store i32 0, i32* %status, align 4
  %28 = load %struct.ehci_hcd** %ehci.addr, align 8
  %29 = load %struct.urb** %urb.addr, align 8
  call void @ehci_urb_done(%struct.ehci_hcd* %28, %struct.urb* %29, i32 0) noredzone
  br label %if.end74

if.else72:                                        ; preds = %if.else
  %30 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call73 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %30) noredzone
  %31 = load %struct.urb** %urb.addr, align 8
  call void @usb_hcd_unlink_urb_from_ep(%struct.usb_hcd* %call73, %struct.urb* %31) noredzone
  br label %if.end74

if.end74:                                         ; preds = %if.else72, %if.then71
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.then68
  br label %done_not_linked

done_not_linked:                                  ; preds = %if.end75, %if.then56, %if.then44
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock76 = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 11
  %33 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock76, i64 %33) noredzone
  br label %done

done:                                             ; preds = %done_not_linked, %if.then24, %if.then12
  %34 = load i32* %status, align 4
  store i32 %34, i32* %retval
  br label %return

return:                                           ; preds = %done, %if.then
  %35 = load i32* %retval
  ret i32 %35
}

define internal i32 @sitd_submit(%struct.ehci_hcd* %ehci, %struct.urb* %urb, i32 %mem_flags) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %mem_flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %flags = alloca i64, align 8
  %stream = alloca %struct.ehci_iso_stream*, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %mem_flags, i32* %mem_flags.addr, align 4
  store i32 -22, i32* %status, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load %struct.urb** %urb.addr, align 8
  %call = call %struct.ehci_iso_stream* @iso_stream_find(%struct.ehci_hcd* %0, %struct.urb* %1) noredzone
  store %struct.ehci_iso_stream* %call, %struct.ehci_iso_stream** %stream, align 8
  %2 = load %struct.ehci_iso_stream** %stream, align 8
  %cmp = icmp eq %struct.ehci_iso_stream* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -12, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.urb** %urb.addr, align 8
  %interval = getelementptr inbounds %struct.urb* %3, i32 0, i32 25
  %4 = load i32* %interval, align 4
  %5 = load %struct.ehci_iso_stream** %stream, align 8
  %ps = getelementptr inbounds %struct.ehci_iso_stream* %5, i32 0, i32 5
  %period = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 5
  %6 = load i16* %period, align 2
  %conv = zext i16 %6 to i32
  %cmp1 = icmp ne i32 %4, %conv
  br i1 %cmp1, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %done

if.end4:                                          ; preds = %if.end
  %7 = load %struct.ehci_iso_stream** %stream, align 8
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %9 = load %struct.urb** %urb.addr, align 8
  %10 = load i32* %mem_flags.addr, align 4
  %call5 = call i32 @sitd_urb_transaction(%struct.ehci_iso_stream* %7, %struct.ehci_hcd* %8, %struct.urb* %9, i32 %10) noredzone
  store i32 %call5, i32* %status, align 4
  %11 = load i32* %status, align 4
  %cmp6 = icmp slt i32 %11, 0
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end4
  br label %done

if.end9:                                          ; preds = %if.end4
  br label %do.body

do.body:                                          ; preds = %if.end9
  br label %do.body10

do.body10:                                        ; preds = %do.body
  %cmp11 = icmp eq i64* %__dummy, %__dummy2
  %conv12 = zext i1 %cmp11 to i32
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 11
  %call13 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call14 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call13) noredzone
  store i64 %call14, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body10
  br label %do.end15

do.end15:                                         ; preds = %do.end
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call16 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %13) noredzone
  %flags17 = getelementptr inbounds %struct.usb_hcd* %call16, i32 0, i32 10
  %14 = load i64* %flags17, align 8
  %and = and i64 %14, 1
  %tobool = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot18 = xor i1 %lnot, true
  %lnot19 = xor i1 %lnot18, true
  %lnot.ext = zext i1 %lnot19 to i32
  %conv20 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv20, i64 0)
  %tobool21 = icmp ne i64 %expval, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %do.end15
  store i32 -108, i32* %status, align 4
  br label %done_not_linked

if.end23:                                         ; preds = %do.end15
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call24 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %15) noredzone
  %16 = load %struct.urb** %urb.addr, align 8
  %call25 = call i32 @usb_hcd_link_urb_to_ep(%struct.usb_hcd* %call24, %struct.urb* %16) noredzone
  store i32 %call25, i32* %status, align 4
  %17 = load i32* %status, align 4
  %tobool26 = icmp ne i32 %17, 0
  %lnot27 = xor i1 %tobool26, true
  %lnot29 = xor i1 %lnot27, true
  %lnot.ext30 = zext i1 %lnot29 to i32
  %conv31 = sext i32 %lnot.ext30 to i64
  %expval32 = call i64 @llvm.expect.i64(i64 %conv31, i64 0)
  %tobool33 = icmp ne i64 %expval32, 0
  br i1 %tobool33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.end23
  br label %done_not_linked

if.end35:                                         ; preds = %if.end23
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %19 = load %struct.urb** %urb.addr, align 8
  %20 = load %struct.ehci_iso_stream** %stream, align 8
  %call36 = call i32 @iso_stream_schedule(%struct.ehci_hcd* %18, %struct.urb* %19, %struct.ehci_iso_stream* %20) noredzone
  store i32 %call36, i32* %status, align 4
  %21 = load i32* %status, align 4
  %cmp37 = icmp eq i32 %21, 0
  %lnot39 = xor i1 %cmp37, true
  %lnot41 = xor i1 %lnot39, true
  %lnot.ext42 = zext i1 %lnot41 to i32
  %conv43 = sext i32 %lnot.ext42 to i64
  %expval44 = call i64 @llvm.expect.i64(i64 %conv43, i64 1)
  %tobool45 = icmp ne i64 %expval44, 0
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %if.end35
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %23 = load %struct.urb** %urb.addr, align 8
  %24 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %24, i32 0, i32 21
  %25 = load i32* %periodic_size, align 4
  %shl = shl i32 %25, 3
  %26 = load %struct.ehci_iso_stream** %stream, align 8
  call void @sitd_link_urb(%struct.ehci_hcd* %22, %struct.urb* %23, i32 %shl, %struct.ehci_iso_stream* %26) noredzone
  br label %if.end53

if.else:                                          ; preds = %if.end35
  %27 = load i32* %status, align 4
  %cmp47 = icmp sgt i32 %27, 0
  br i1 %cmp47, label %if.then49, label %if.else50

if.then49:                                        ; preds = %if.else
  store i32 0, i32* %status, align 4
  %28 = load %struct.ehci_hcd** %ehci.addr, align 8
  %29 = load %struct.urb** %urb.addr, align 8
  call void @ehci_urb_done(%struct.ehci_hcd* %28, %struct.urb* %29, i32 0) noredzone
  br label %if.end52

if.else50:                                        ; preds = %if.else
  %30 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call51 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %30) noredzone
  %31 = load %struct.urb** %urb.addr, align 8
  call void @usb_hcd_unlink_urb_from_ep(%struct.usb_hcd* %call51, %struct.urb* %31) noredzone
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.then49
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then46
  br label %done_not_linked

done_not_linked:                                  ; preds = %if.end53, %if.then34, %if.then22
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock54 = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 11
  %33 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock54, i64 %33) noredzone
  br label %done

done:                                             ; preds = %done_not_linked, %if.then8, %if.then3
  %34 = load i32* %status, align 4
  store i32 %34, i32* %retval
  br label %return

return:                                           ; preds = %done, %if.then
  %35 = load i32* %retval
  ret i32 %35
}

define internal %struct.ehci_iso_stream* @iso_stream_find(%struct.ehci_hcd* %ehci, %struct.urb* %urb) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %epnum = alloca i32, align 4
  %stream = alloca %struct.ehci_iso_stream*, align 8
  %ep = alloca %struct.usb_host_endpoint*, align 8
  %flags = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  %0 = load %struct.urb** %urb.addr, align 8
  %pipe = getelementptr inbounds %struct.urb* %0, i32 0, i32 10
  %1 = load i32* %pipe, align 4
  %shr = lshr i32 %1, 15
  %and = and i32 %shr, 15
  store i32 %and, i32* %epnum, align 4
  %2 = load %struct.urb** %urb.addr, align 8
  %pipe1 = getelementptr inbounds %struct.urb* %2, i32 0, i32 10
  %3 = load i32* %pipe1, align 4
  %and2 = and i32 %3, 128
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i32* %epnum, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load %struct.urb** %urb.addr, align 8
  %dev = getelementptr inbounds %struct.urb* %5, i32 0, i32 8
  %6 = load %struct.usb_device** %dev, align 8
  %ep_in = getelementptr inbounds %struct.usb_device* %6, i32 0, i32 16
  %arrayidx = getelementptr [16 x %struct.usb_host_endpoint*]* %ep_in, i32 0, i64 %idxprom
  %7 = load %struct.usb_host_endpoint** %arrayidx, align 8
  store %struct.usb_host_endpoint* %7, %struct.usb_host_endpoint** %ep, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32* %epnum, align 4
  %idxprom3 = zext i32 %8 to i64
  %9 = load %struct.urb** %urb.addr, align 8
  %dev4 = getelementptr inbounds %struct.urb* %9, i32 0, i32 8
  %10 = load %struct.usb_device** %dev4, align 8
  %ep_out = getelementptr inbounds %struct.usb_device* %10, i32 0, i32 17
  %arrayidx5 = getelementptr [16 x %struct.usb_host_endpoint*]* %ep_out, i32 0, i64 %idxprom3
  %11 = load %struct.usb_host_endpoint** %arrayidx5, align 8
  store %struct.usb_host_endpoint* %11, %struct.usb_host_endpoint** %ep, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body6

do.body6:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 11
  %call = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call7 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call) noredzone
  store i64 %call7, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body6
  br label %do.end8

do.end8:                                          ; preds = %do.end
  %13 = load %struct.usb_host_endpoint** %ep, align 8
  %hcpriv = getelementptr inbounds %struct.usb_host_endpoint* %13, i32 0, i32 3
  %14 = load i8** %hcpriv, align 8
  %15 = bitcast i8* %14 to %struct.ehci_iso_stream*
  store %struct.ehci_iso_stream* %15, %struct.ehci_iso_stream** %stream, align 8
  %16 = load %struct.ehci_iso_stream** %stream, align 8
  %cmp9 = icmp eq %struct.ehci_iso_stream* %16, null
  %lnot = xor i1 %cmp9, true
  %lnot11 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot11 to i32
  %conv12 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv12, i64 0)
  %tobool13 = icmp ne i64 %expval, 0
  br i1 %tobool13, label %if.then14, label %if.else28

if.then14:                                        ; preds = %do.end8
  %call15 = call %struct.ehci_iso_stream* @iso_stream_alloc(i32 32) noredzone
  store %struct.ehci_iso_stream* %call15, %struct.ehci_iso_stream** %stream, align 8
  %17 = load %struct.ehci_iso_stream** %stream, align 8
  %cmp16 = icmp ne %struct.ehci_iso_stream* %17, null
  %lnot18 = xor i1 %cmp16, true
  %lnot20 = xor i1 %lnot18, true
  %lnot.ext21 = zext i1 %lnot20 to i32
  %conv22 = sext i32 %lnot.ext21 to i64
  %expval23 = call i64 @llvm.expect.i64(i64 %conv22, i64 1)
  %tobool24 = icmp ne i64 %expval23, 0
  br i1 %tobool24, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.then14
  %18 = load %struct.ehci_iso_stream** %stream, align 8
  %19 = bitcast %struct.ehci_iso_stream* %18 to i8*
  %20 = load %struct.usb_host_endpoint** %ep, align 8
  %hcpriv26 = getelementptr inbounds %struct.usb_host_endpoint* %20, i32 0, i32 3
  store i8* %19, i8** %hcpriv26, align 8
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %22 = load %struct.ehci_iso_stream** %stream, align 8
  %23 = load %struct.urb** %urb.addr, align 8
  call void @iso_stream_init(%struct.ehci_hcd* %21, %struct.ehci_iso_stream* %22, %struct.urb* %23) noredzone
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %if.then14
  br label %if.end40

if.else28:                                        ; preds = %do.end8
  %24 = load %struct.ehci_iso_stream** %stream, align 8
  %hw = getelementptr inbounds %struct.ehci_iso_stream* %24, i32 0, i32 0
  %25 = load %struct.ehci_qh_hw** %hw, align 8
  %cmp29 = icmp ne %struct.ehci_qh_hw* %25, null
  %lnot31 = xor i1 %cmp29, true
  %lnot33 = xor i1 %lnot31, true
  %lnot.ext34 = zext i1 %lnot33 to i32
  %conv35 = sext i32 %lnot.ext34 to i64
  %expval36 = call i64 @llvm.expect.i64(i64 %conv35, i64 0)
  %tobool37 = icmp ne i64 %expval36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.else28
  store %struct.ehci_iso_stream* null, %struct.ehci_iso_stream** %stream, align 8
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %if.else28
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end27
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock41 = getelementptr inbounds %struct.ehci_hcd* %26, i32 0, i32 11
  %27 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock41, i64 %27) noredzone
  %28 = load %struct.ehci_iso_stream** %stream, align 8
  ret %struct.ehci_iso_stream* %28
}

define internal i32 @sitd_urb_transaction(%struct.ehci_iso_stream* %stream, %struct.ehci_hcd* %ehci, %struct.urb* %urb, i32 %mem_flags) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %mem_flags.addr = alloca i32, align 4
  %sitd = alloca %struct.ehci_sitd*, align 8
  %sitd_dma = alloca i64, align 8
  %i = alloca i32, align 4
  %iso_sched = alloca %struct.ehci_iso_sched*, align 8
  %flags = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %__dummy25 = alloca i64, align 8
  %__dummy226 = alloca i64, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %mem_flags, i32* %mem_flags.addr, align 4
  %0 = load %struct.urb** %urb.addr, align 8
  %number_of_packets = getelementptr inbounds %struct.urb* %0, i32 0, i32 24
  %1 = load i32* %number_of_packets, align 4
  %2 = load i32* %mem_flags.addr, align 4
  %call = call %struct.ehci_iso_sched* @iso_sched_alloc(i32 %1, i32 %2) noredzone
  store %struct.ehci_iso_sched* %call, %struct.ehci_iso_sched** %iso_sched, align 8
  %3 = load %struct.ehci_iso_sched** %iso_sched, align 8
  %cmp = icmp eq %struct.ehci_iso_sched* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -12, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load %struct.ehci_iso_sched** %iso_sched, align 8
  %6 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %7 = load %struct.urb** %urb.addr, align 8
  call void @sitd_sched_init(%struct.ehci_hcd* %4, %struct.ehci_iso_sched* %5, %struct.ehci_iso_stream* %6, %struct.urb* %7) noredzone
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %cmp2 = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp2 to i32
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 11
  %call3 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call4 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call3) noredzone
  store i64 %call4, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.end5

do.end5:                                          ; preds = %do.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end5
  %9 = load i32* %i, align 4
  %10 = load %struct.urb** %urb.addr, align 8
  %number_of_packets6 = getelementptr inbounds %struct.urb* %10, i32 0, i32 24
  %11 = load i32* %number_of_packets6, align 4
  %cmp7 = icmp slt i32 %9, %11
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %free_list = getelementptr inbounds %struct.ehci_iso_stream* %12, i32 0, i32 4
  %call9 = call i32 @list_empty(%struct.list_head* %free_list) noredzone
  %tobool = icmp ne i32 %call9, 0
  %lnot = xor i1 %tobool, true
  %lnot10 = xor i1 %lnot, true
  %lnot11 = xor i1 %lnot10, true
  %lnot.ext = zext i1 %lnot11 to i32
  %conv12 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv12, i64 1)
  %tobool13 = icmp ne i64 %expval, 0
  br i1 %tobool13, label %if.then14, label %if.else

if.then14:                                        ; preds = %for.body
  %13 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %free_list15 = getelementptr inbounds %struct.ehci_iso_stream* %13, i32 0, i32 4
  %next = getelementptr inbounds %struct.list_head* %free_list15, i32 0, i32 0
  %14 = load %struct.list_head** %next, align 8
  store %struct.list_head* %14, %struct.list_head** %__mptr, align 8
  %15 = load %struct.list_head** %__mptr, align 8
  %16 = bitcast %struct.list_head* %15 to i8*
  %add.ptr = getelementptr i8* %16, i64 -72
  %17 = bitcast i8* %add.ptr to %struct.ehci_sitd*
  store %struct.ehci_sitd* %17, %struct.ehci_sitd** %sitd, align 8
  %18 = load %struct.ehci_sitd** %sitd, align 8
  %frame = getelementptr inbounds %struct.ehci_sitd* %18, i32 0, i32 12
  %19 = load i32* %frame, align 4
  %20 = load %struct.ehci_hcd** %ehci.addr, align 8
  %now_frame = getelementptr inbounds %struct.ehci_hcd* %20, i32 0, i32 31
  %21 = load i32* %now_frame, align 4
  %cmp16 = icmp eq i32 %19, %21
  br i1 %cmp16, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.then14
  br label %alloc_sitd

if.end19:                                         ; preds = %if.then14
  %22 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_list = getelementptr inbounds %struct.ehci_sitd* %22, i32 0, i32 11
  call void @list_del(%struct.list_head* %sitd_list) noredzone
  %23 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_dma20 = getelementptr inbounds %struct.ehci_sitd* %23, i32 0, i32 7
  %24 = load i64* %sitd_dma20, align 8
  store i64 %24, i64* %sitd_dma, align 8
  br label %if.end38

if.else:                                          ; preds = %for.body
  br label %alloc_sitd

alloc_sitd:                                       ; preds = %if.else, %if.then18
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock21 = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 11
  %26 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock21, i64 %26) noredzone
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %sitd_pool = getelementptr inbounds %struct.ehci_hcd* %27, i32 0, i32 51
  %28 = load %struct.dma_pool** %sitd_pool, align 8
  %29 = load i32* %mem_flags.addr, align 4
  %call22 = call i8* @dma_pool_alloc(%struct.dma_pool* %28, i32 %29, i64* %sitd_dma) noredzone
  %30 = bitcast i8* %call22 to %struct.ehci_sitd*
  store %struct.ehci_sitd* %30, %struct.ehci_sitd** %sitd, align 8
  br label %do.body23

do.body23:                                        ; preds = %alloc_sitd
  br label %do.body24

do.body24:                                        ; preds = %do.body23
  %cmp27 = icmp eq i64* %__dummy25, %__dummy226
  %conv28 = zext i1 %cmp27 to i32
  %31 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock29 = getelementptr inbounds %struct.ehci_hcd* %31, i32 0, i32 11
  %call30 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock29) noredzone
  %call31 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call30) noredzone
  store i64 %call31, i64* %flags, align 8
  br label %do.end32

do.end32:                                         ; preds = %do.body24
  br label %do.end33

do.end33:                                         ; preds = %do.end32
  %32 = load %struct.ehci_sitd** %sitd, align 8
  %tobool34 = icmp ne %struct.ehci_sitd* %32, null
  br i1 %tobool34, label %if.end37, label %if.then35

if.then35:                                        ; preds = %do.end33
  %33 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %34 = load %struct.ehci_iso_sched** %iso_sched, align 8
  call void @iso_sched_free(%struct.ehci_iso_stream* %33, %struct.ehci_iso_sched* %34) noredzone
  %35 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock36 = getelementptr inbounds %struct.ehci_hcd* %35, i32 0, i32 11
  %36 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock36, i64 %36) noredzone
  store i32 -12, i32* %retval
  br label %return

if.end37:                                         ; preds = %do.end33
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end19
  %37 = load %struct.ehci_sitd** %sitd, align 8
  %38 = bitcast %struct.ehci_sitd* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 96, i32 32, i1 false)
  %39 = load i64* %sitd_dma, align 8
  %40 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_dma39 = getelementptr inbounds %struct.ehci_sitd* %40, i32 0, i32 7
  store i64 %39, i64* %sitd_dma39, align 8
  %41 = load %struct.ehci_sitd** %sitd, align 8
  %frame40 = getelementptr inbounds %struct.ehci_sitd* %41, i32 0, i32 12
  store i32 29999, i32* %frame40, align 4
  %42 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_list41 = getelementptr inbounds %struct.ehci_sitd* %42, i32 0, i32 11
  %43 = load %struct.ehci_iso_sched** %iso_sched, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_sched* %43, i32 0, i32 0
  call void @list_add(%struct.list_head* %sitd_list41, %struct.list_head* %td_list) noredzone
  br label %for.inc

for.inc:                                          ; preds = %if.end38
  %44 = load i32* %i, align 4
  %inc = add i32 %44, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %45 = load %struct.ehci_iso_sched** %iso_sched, align 8
  %46 = bitcast %struct.ehci_iso_sched* %45 to i8*
  %47 = load %struct.urb** %urb.addr, align 8
  %hcpriv = getelementptr inbounds %struct.urb* %47, i32 0, i32 1
  store i8* %46, i8** %hcpriv, align 8
  %48 = load %struct.urb** %urb.addr, align 8
  %error_count = getelementptr inbounds %struct.urb* %48, i32 0, i32 26
  store i32 0, i32* %error_count, align 4
  %49 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock42 = getelementptr inbounds %struct.ehci_hcd* %49, i32 0, i32 11
  %50 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock42, i64 %50) noredzone
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then35, %if.then
  %51 = load i32* %retval
  ret i32 %51
}

declare i32 @usb_hcd_link_urb_to_ep(%struct.usb_hcd*, %struct.urb*) noredzone

define internal i32 @iso_stream_schedule(%struct.ehci_hcd* %ehci, %struct.urb* %urb, %struct.ehci_iso_stream* %stream) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %now = alloca i32, align 4
  %base = alloca i32, align 4
  %next = alloca i32, align 4
  %start = alloca i32, align 4
  %period = alloca i32, align 4
  %span = alloca i32, align 4
  %now2 = alloca i32, align 4
  %wrap = alloca i32, align 4
  %skip = alloca i32, align 4
  %status = alloca i32, align 4
  %mod = alloca i32, align 4
  %sched = alloca %struct.ehci_iso_sched*, align 8
  %empty = alloca i8, align 1
  %new_stream = alloca i8, align 1
  %done = alloca i32, align 4
  %tt = alloca %struct.ehci_tt*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store i32 0, i32* %wrap, align 4
  store i32 0, i32* %skip, align 4
  store i32 0, i32* %status, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 21
  %1 = load i32* %periodic_size, align 4
  %shl = shl i32 %1, 3
  store i32 %shl, i32* %mod, align 4
  %2 = load %struct.urb** %urb.addr, align 8
  %hcpriv = getelementptr inbounds %struct.urb* %2, i32 0, i32 1
  %3 = load i8** %hcpriv, align 8
  %4 = bitcast i8* %3 to %struct.ehci_iso_sched*
  store %struct.ehci_iso_sched* %4, %struct.ehci_iso_sched** %sched, align 8
  %5 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_stream* %5, i32 0, i32 3
  %call = call i32 @list_empty(%struct.list_head* %td_list) noredzone
  %tobool = icmp ne i32 %call, 0
  %frombool = zext i1 %tobool to i8
  store i8 %frombool, i8* %empty, align 1
  store i8 0, i8* %new_stream, align 1
  %6 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %uperiod = getelementptr inbounds %struct.ehci_iso_stream* %6, i32 0, i32 8
  %7 = load i16* %uperiod, align 2
  %conv = zext i16 %7 to i32
  store i32 %conv, i32* %period, align 4
  %8 = load %struct.ehci_iso_sched** %sched, align 8
  %span1 = getelementptr inbounds %struct.ehci_iso_sched* %8, i32 0, i32 1
  %9 = load i32* %span1, align 4
  store i32 %9, i32* %span, align 4
  %10 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %highspeed = getelementptr inbounds %struct.ehci_iso_stream* %10, i32 0, i32 2
  %11 = load i8* %highspeed, align 1
  %tobool2 = icmp ne i8 %11, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %12 = load i32* %span, align 4
  %shl3 = shl i32 %12, 3
  store i32 %shl3, i32* %span, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i8* %empty, align 1
  %tobool4 = trunc i8 %13 to i1
  br i1 %tobool4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call6 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %14) noredzone
  %15 = load %struct.urb** %urb.addr, align 8
  %ep = getelementptr inbounds %struct.urb* %15, i32 0, i32 9
  %16 = load %struct.usb_host_endpoint** %ep, align 8
  %call7 = call zeroext i1 @hcd_periodic_completion_in_progress(%struct.usb_hcd* %call6, %struct.usb_host_endpoint* %16) noredzone
  %lnot = xor i1 %call7, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %17 = phi i1 [ false, %if.end ], [ %lnot, %land.rhs ]
  %lnot8 = xor i1 %17, true
  %lnot9 = xor i1 %lnot8, true
  %lnot.ext = zext i1 %lnot9 to i32
  %conv10 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv10, i64 0)
  %tobool11 = icmp ne i64 %expval, 0
  br i1 %tobool11, label %if.then12, label %if.end81

if.then12:                                        ; preds = %land.end
  %18 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_iso_stream* %18, i32 0, i32 5
  %phase = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 6
  %19 = load i16* %phase, align 2
  %conv13 = zext i16 %19 to i32
  %cmp = icmp eq i32 %conv13, 29999
  br i1 %cmp, label %if.then15, label %if.else71

if.then15:                                        ; preds = %if.then12
  store i32 0, i32* %done, align 4
  %20 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps16 = getelementptr inbounds %struct.ehci_iso_stream* %20, i32 0, i32 5
  %udev = getelementptr inbounds %struct.ehci_per_sched* %ps16, i32 0, i32 0
  %21 = load %struct.usb_device** %udev, align 8
  %call17 = call %struct.ehci_tt* @find_tt(%struct.usb_device* %21) noredzone
  store %struct.ehci_tt* %call17, %struct.ehci_tt** %tt, align 8
  %22 = load %struct.ehci_tt** %tt, align 8
  %23 = bitcast %struct.ehci_tt* %22 to i8*
  %call18 = call zeroext i1 @IS_ERR(i8* %23) noredzone
  br i1 %call18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %if.then15
  %24 = load %struct.ehci_tt** %tt, align 8
  %25 = bitcast %struct.ehci_tt* %24 to i8*
  %call20 = call i64 @PTR_ERR(i8* %25) noredzone
  %conv21 = trunc i64 %call20 to i32
  store i32 %conv21, i32* %status, align 4
  br label %fail

if.end22:                                         ; preds = %if.then15
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %tt_budget = getelementptr inbounds %struct.ehci_hcd* %26, i32 0, i32 62
  %arraydecay = getelementptr inbounds [64 x i8]* %tt_budget, i32 0, i32 0
  %27 = load %struct.ehci_tt** %tt, align 8
  call void @compute_tt_budget(i8* %arraydecay, %struct.ehci_tt* %27) noredzone
  %28 = load %struct.ehci_hcd** %ehci.addr, align 8
  %random_frame = getelementptr inbounds %struct.ehci_hcd* %28, i32 0, i32 52
  %29 = load i32* %random_frame, align 4
  %inc = add i32 %29, 1
  store i32 %inc, i32* %random_frame, align 4
  %sub = sub i32 0, %inc
  %shl23 = shl i32 %sub, 3
  %30 = load i32* %period, align 4
  %sub24 = sub i32 %30, 1
  %and = and i32 %shl23, %sub24
  store i32 %and, i32* %start, align 4
  %31 = load i32* %start, align 4
  store i32 %31, i32* %next, align 4
  %32 = load i32* %period, align 4
  %33 = load i32* %start, align 4
  %add = add i32 %33, %32
  store i32 %add, i32* %start, align 4
  br label %do.body

do.body:                                          ; preds = %land.end47, %if.end22
  %34 = load i32* %start, align 4
  %dec = add i32 %34, -1
  store i32 %dec, i32* %start, align 4
  %35 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %highspeed25 = getelementptr inbounds %struct.ehci_iso_stream* %35, i32 0, i32 2
  %36 = load i8* %highspeed25, align 1
  %tobool26 = icmp ne i8 %36, 0
  br i1 %tobool26, label %if.then27, label %if.else

if.then27:                                        ; preds = %do.body
  %37 = load %struct.ehci_hcd** %ehci.addr, align 8
  %38 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %39 = load i32* %start, align 4
  %call28 = call i32 @itd_slot_ok(%struct.ehci_hcd* %37, %struct.ehci_iso_stream* %38, i32 %39) noredzone
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.then27
  store i32 1, i32* %done, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %if.then27
  br label %if.end40

if.else:                                          ; preds = %do.body
  %40 = load i32* %start, align 4
  %rem = urem i32 %40, 8
  %cmp32 = icmp uge i32 %rem, 6
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.else
  br label %do.cond

if.end35:                                         ; preds = %if.else
  %41 = load %struct.ehci_hcd** %ehci.addr, align 8
  %42 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %43 = load i32* %start, align 4
  %44 = load %struct.ehci_iso_sched** %sched, align 8
  %45 = load %struct.ehci_tt** %tt, align 8
  %call36 = call i32 @sitd_slot_ok(%struct.ehci_hcd* %41, %struct.ehci_iso_stream* %42, i32 %43, %struct.ehci_iso_sched* %44, %struct.ehci_tt* %45) noredzone
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end35
  store i32 1, i32* %done, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %if.end35
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end31
  br label %do.cond

do.cond:                                          ; preds = %if.end40, %if.then34
  %46 = load i32* %start, align 4
  %47 = load i32* %next, align 4
  %cmp41 = icmp ugt i32 %46, %47
  br i1 %cmp41, label %land.rhs43, label %land.end47

land.rhs43:                                       ; preds = %do.cond
  %48 = load i32* %done, align 4
  %tobool44 = icmp ne i32 %48, 0
  %lnot45 = xor i1 %tobool44, true
  br label %land.end47

land.end47:                                       ; preds = %land.rhs43, %do.cond
  %49 = phi i1 [ false, %do.cond ], [ %lnot45, %land.rhs43 ]
  br i1 %49, label %do.body, label %do.end

do.end:                                           ; preds = %land.end47
  %50 = load i32* %done, align 4
  %tobool48 = icmp ne i32 %50, 0
  br i1 %tobool48, label %if.end50, label %if.then49

if.then49:                                        ; preds = %do.end
  store i32 -28, i32* %status, align 4
  br label %fail

if.end50:                                         ; preds = %do.end
  %51 = load i32* %start, align 4
  %shr = lshr i32 %51, 3
  %52 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps51 = getelementptr inbounds %struct.ehci_iso_stream* %52, i32 0, i32 5
  %period52 = getelementptr inbounds %struct.ehci_per_sched* %ps51, i32 0, i32 5
  %53 = load i16* %period52, align 2
  %conv53 = zext i16 %53 to i32
  %sub54 = sub i32 %conv53, 1
  %and55 = and i32 %shr, %sub54
  %conv56 = trunc i32 %and55 to i16
  %54 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps57 = getelementptr inbounds %struct.ehci_iso_stream* %54, i32 0, i32 5
  %phase58 = getelementptr inbounds %struct.ehci_per_sched* %ps57, i32 0, i32 6
  store i16 %conv56, i16* %phase58, align 2
  %55 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps59 = getelementptr inbounds %struct.ehci_iso_stream* %55, i32 0, i32 5
  %phase60 = getelementptr inbounds %struct.ehci_per_sched* %ps59, i32 0, i32 6
  %56 = load i16* %phase60, align 2
  %conv61 = zext i16 %56 to i32
  %57 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps62 = getelementptr inbounds %struct.ehci_iso_stream* %57, i32 0, i32 5
  %bw_period = getelementptr inbounds %struct.ehci_per_sched* %ps62, i32 0, i32 12
  %58 = load i8* %bw_period, align 1
  %conv63 = zext i8 %58 to i32
  %sub64 = sub i32 %conv63, 1
  %and65 = and i32 %conv61, %sub64
  %conv66 = trunc i32 %and65 to i8
  %59 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps67 = getelementptr inbounds %struct.ehci_iso_stream* %59, i32 0, i32 5
  %bw_phase = getelementptr inbounds %struct.ehci_per_sched* %ps67, i32 0, i32 7
  store i8 %conv66, i8* %bw_phase, align 1
  %60 = load i32* %start, align 4
  %and68 = and i32 %60, 7
  %conv69 = trunc i32 %and68 to i8
  %61 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps70 = getelementptr inbounds %struct.ehci_iso_stream* %61, i32 0, i32 5
  %phase_uf = getelementptr inbounds %struct.ehci_per_sched* %ps70, i32 0, i32 8
  store i8 %conv69, i8* %phase_uf, align 1
  %62 = load %struct.ehci_hcd** %ehci.addr, align 8
  %63 = load %struct.ehci_iso_stream** %stream.addr, align 8
  call void @reserve_release_iso_bandwidth(%struct.ehci_hcd* %62, %struct.ehci_iso_stream* %63, i32 1) noredzone
  br label %if.end80

if.else71:                                        ; preds = %if.then12
  %64 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps72 = getelementptr inbounds %struct.ehci_iso_stream* %64, i32 0, i32 5
  %phase73 = getelementptr inbounds %struct.ehci_per_sched* %ps72, i32 0, i32 6
  %65 = load i16* %phase73, align 2
  %conv74 = zext i16 %65 to i32
  %shl75 = shl i32 %conv74, 3
  %66 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps76 = getelementptr inbounds %struct.ehci_iso_stream* %66, i32 0, i32 5
  %phase_uf77 = getelementptr inbounds %struct.ehci_per_sched* %ps76, i32 0, i32 8
  %67 = load i8* %phase_uf77, align 1
  %conv78 = zext i8 %67 to i32
  %add79 = add i32 %shl75, %conv78
  store i32 %add79, i32* %start, align 4
  br label %if.end80

if.end80:                                         ; preds = %if.else71, %if.end50
  %68 = load i32* %start, align 4
  %69 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %next_uframe = getelementptr inbounds %struct.ehci_iso_stream* %69, i32 0, i32 6
  store i32 %68, i32* %next_uframe, align 4
  store i8 1, i8* %new_stream, align 1
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %land.end
  %70 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call82 = call i32 @ehci_read_frame_index(%struct.ehci_hcd* %70) noredzone
  %71 = load i32* %mod, align 4
  %sub83 = sub i32 %71, 1
  %and84 = and i32 %call82, %sub83
  store i32 %and84, i32* %now, align 4
  %72 = load %struct.ehci_hcd** %ehci.addr, align 8
  %i_thresh = getelementptr inbounds %struct.ehci_hcd* %72, i32 0, i32 25
  %73 = load i32* %i_thresh, align 4
  %tobool85 = icmp ne i32 %73, 0
  br i1 %tobool85, label %if.then86, label %if.else89

if.then86:                                        ; preds = %if.end81
  %74 = load i32* %now, align 4
  %75 = load %struct.ehci_hcd** %ehci.addr, align 8
  %i_thresh87 = getelementptr inbounds %struct.ehci_hcd* %75, i32 0, i32 25
  %76 = load i32* %i_thresh87, align 4
  %add88 = add i32 %74, %76
  store i32 %add88, i32* %next, align 4
  br label %if.end93

if.else89:                                        ; preds = %if.end81
  %77 = load i32* %now, align 4
  %add90 = add i32 %77, 2
  %add91 = add i32 %add90, 7
  %and92 = and i32 %add91, -8
  store i32 %and92, i32* %next, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.else89, %if.then86
  %78 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_iso_frame = getelementptr inbounds %struct.ehci_hcd* %78, i32 0, i32 32
  %79 = load i32* %last_iso_frame, align 4
  %shl94 = shl i32 %79, 3
  store i32 %shl94, i32* %base, align 4
  %80 = load i32* %next, align 4
  %81 = load i32* %base, align 4
  %sub95 = sub i32 %80, %81
  %82 = load i32* %mod, align 4
  %sub96 = sub i32 %82, 1
  %and97 = and i32 %sub95, %sub96
  store i32 %and97, i32* %next, align 4
  %83 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %next_uframe98 = getelementptr inbounds %struct.ehci_iso_stream* %83, i32 0, i32 6
  %84 = load i32* %next_uframe98, align 4
  %85 = load i32* %base, align 4
  %sub99 = sub i32 %84, %85
  %86 = load i32* %mod, align 4
  %sub100 = sub i32 %86, 1
  %and101 = and i32 %sub99, %sub100
  store i32 %and101, i32* %start, align 4
  %87 = load i8* %new_stream, align 1
  %tobool102 = trunc i8 %87 to i1
  %lnot103 = xor i1 %tobool102, true
  %lnot105 = xor i1 %lnot103, true
  %lnot.ext106 = zext i1 %lnot105 to i32
  %conv107 = sext i32 %lnot.ext106 to i64
  %expval108 = call i64 @llvm.expect.i64(i64 %conv107, i64 0)
  %tobool109 = icmp ne i64 %expval108, 0
  br i1 %tobool109, label %if.then110, label %if.end111

if.then110:                                       ; preds = %if.end93
  br label %do_ASAP

if.end111:                                        ; preds = %if.end93
  %88 = load i32* %now, align 4
  %89 = load i32* %base, align 4
  %sub112 = sub i32 %88, %89
  %90 = load i32* %mod, align 4
  %sub113 = sub i32 %90, 1
  %and114 = and i32 %sub112, %sub113
  store i32 %and114, i32* %now2, align 4
  %91 = load i8* %empty, align 1
  %tobool115 = trunc i8 %91 to i1
  br i1 %tobool115, label %land.end119, label %land.rhs116

land.rhs116:                                      ; preds = %if.end111
  %92 = load i32* %start, align 4
  %93 = load i32* %period, align 4
  %cmp117 = icmp ult i32 %92, %93
  br label %land.end119

land.end119:                                      ; preds = %land.rhs116, %if.end111
  %94 = phi i1 [ false, %if.end111 ], [ %cmp117, %land.rhs116 ]
  %lnot120 = xor i1 %94, true
  %lnot122 = xor i1 %lnot120, true
  %lnot.ext123 = zext i1 %lnot122 to i32
  %conv124 = sext i32 %lnot.ext123 to i64
  %expval125 = call i64 @llvm.expect.i64(i64 %conv124, i64 0)
  %tobool126 = icmp ne i64 %expval125, 0
  br i1 %tobool126, label %if.then127, label %if.end128

if.then127:                                       ; preds = %land.end119
  store i32 -28, i32* %status, align 4
  br label %fail

if.end128:                                        ; preds = %land.end119
  %95 = load i8* %empty, align 1
  %tobool129 = trunc i8 %95 to i1
  br i1 %tobool129, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end128
  %96 = load i32* %start, align 4
  %97 = load i32* %now2, align 4
  %98 = load i32* %period, align 4
  %add130 = add i32 %97, %98
  %cmp131 = icmp ule i32 %96, %add130
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end128
  %99 = phi i1 [ true, %if.end128 ], [ %cmp131, %lor.rhs ]
  %lnot133 = xor i1 %99, true
  %lnot135 = xor i1 %lnot133, true
  %lnot.ext136 = zext i1 %lnot135 to i32
  %conv137 = sext i32 %lnot.ext136 to i64
  %expval138 = call i64 @llvm.expect.i64(i64 %conv137, i64 1)
  %tobool139 = icmp ne i64 %expval138, 0
  br i1 %tobool139, label %if.then140, label %if.else167

if.then140:                                       ; preds = %lor.end
  %100 = load i32* %start, align 4
  %101 = load i32* %next, align 4
  %cmp141 = icmp ult i32 %100, %101
  br i1 %cmp141, label %land.rhs143, label %land.end146

land.rhs143:                                      ; preds = %if.then140
  %102 = load %struct.urb** %urb.addr, align 8
  %transfer_flags = getelementptr inbounds %struct.urb* %102, i32 0, i32 13
  %103 = load i32* %transfer_flags, align 4
  %and144 = and i32 %103, 2
  %tobool145 = icmp ne i32 %and144, 0
  br label %land.end146

land.end146:                                      ; preds = %land.rhs143, %if.then140
  %104 = phi i1 [ false, %if.then140 ], [ %tobool145, %land.rhs143 ]
  %lnot147 = xor i1 %104, true
  %lnot149 = xor i1 %lnot147, true
  %lnot.ext150 = zext i1 %lnot149 to i32
  %conv151 = sext i32 %lnot.ext150 to i64
  %expval152 = call i64 @llvm.expect.i64(i64 %conv151, i64 0)
  %tobool153 = icmp ne i64 %expval152, 0
  br i1 %tobool153, label %if.then154, label %if.end155

if.then154:                                       ; preds = %land.end146
  br label %do_ASAP

if.end155:                                        ; preds = %land.end146
  %105 = load i32* %start, align 4
  %106 = load i32* %now2, align 4
  %cmp156 = icmp uge i32 %105, %106
  %lnot158 = xor i1 %cmp156, true
  %lnot160 = xor i1 %lnot158, true
  %lnot.ext161 = zext i1 %lnot160 to i32
  %conv162 = sext i32 %lnot.ext161 to i64
  %expval163 = call i64 @llvm.expect.i64(i64 %conv162, i64 1)
  %tobool164 = icmp ne i64 %expval163, 0
  br i1 %tobool164, label %if.then165, label %if.end166

if.then165:                                       ; preds = %if.end155
  br label %use_start

if.end166:                                        ; preds = %if.end155
  br label %if.end174

if.else167:                                       ; preds = %lor.end
  %107 = load %struct.urb** %urb.addr, align 8
  %transfer_flags168 = getelementptr inbounds %struct.urb* %107, i32 0, i32 13
  %108 = load i32* %transfer_flags168, align 4
  %and169 = and i32 %108, 2
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %if.then171, label %if.end172

if.then171:                                       ; preds = %if.else167
  br label %do_ASAP

if.end172:                                        ; preds = %if.else167
  %109 = load i32* %mod, align 4
  store i32 %109, i32* %wrap, align 4
  %110 = load i32* %mod, align 4
  %111 = load i32* %now2, align 4
  %add173 = add i32 %111, %110
  store i32 %add173, i32* %now2, align 4
  br label %if.end174

if.end174:                                        ; preds = %if.end172, %if.end166
  %112 = load i32* %now2, align 4
  %113 = load i32* %start, align 4
  %sub175 = sub i32 %112, %113
  %114 = load i32* %period, align 4
  %add176 = add i32 %sub175, %114
  %sub177 = sub i32 %add176, 1
  %115 = load i32* %period, align 4
  %sub178 = sub i32 0, %115
  %and179 = and i32 %sub177, %sub178
  store i32 %and179, i32* %skip, align 4
  %116 = load i32* %skip, align 4
  %117 = load i32* %span, align 4
  %cmp180 = icmp uge i32 %116, %117
  br i1 %cmp180, label %if.then182, label %if.end187

if.then182:                                       ; preds = %if.end174
  %118 = load i32* %span, align 4
  %119 = load i32* %period, align 4
  %sub183 = sub i32 %118, %119
  store i32 %sub183, i32* %skip, align 4
  %120 = load i8* %empty, align 1
  %tobool184 = trunc i8 %120 to i1
  br i1 %tobool184, label %if.then185, label %if.end186

if.then185:                                       ; preds = %if.then182
  %121 = load i32* %span, align 4
  store i32 %121, i32* %skip, align 4
  store i32 1, i32* %status, align 4
  %122 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %123 = load %struct.ehci_iso_sched** %sched, align 8
  call void @iso_sched_free(%struct.ehci_iso_stream* %122, %struct.ehci_iso_sched* %123) noredzone
  store %struct.ehci_iso_sched* null, %struct.ehci_iso_sched** %sched, align 8
  br label %if.end186

if.end186:                                        ; preds = %if.then185, %if.then182
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.end174
  %124 = load i32* %skip, align 4
  %125 = load i32* %period, align 4
  %div = udiv i32 %124, %125
  %126 = load %struct.urb** %urb.addr, align 8
  %error_count = getelementptr inbounds %struct.urb* %126, i32 0, i32 26
  store i32 %div, i32* %error_count, align 4
  %127 = load %struct.ehci_iso_sched** %sched, align 8
  %tobool188 = icmp ne %struct.ehci_iso_sched* %127, null
  br i1 %tobool188, label %if.then189, label %if.end191

if.then189:                                       ; preds = %if.end187
  %128 = load %struct.urb** %urb.addr, align 8
  %error_count190 = getelementptr inbounds %struct.urb* %128, i32 0, i32 26
  %129 = load i32* %error_count190, align 4
  %130 = load %struct.ehci_iso_sched** %sched, align 8
  %first_packet = getelementptr inbounds %struct.ehci_iso_sched* %130, i32 0, i32 2
  store i32 %129, i32* %first_packet, align 4
  br label %if.end191

if.end191:                                        ; preds = %if.then189, %if.end187
  br label %use_start

do_ASAP:                                          ; preds = %if.then171, %if.then154, %if.then110
  %131 = load i32* %next, align 4
  %132 = load i32* %start, align 4
  %133 = load i32* %next, align 4
  %sub192 = sub i32 %132, %133
  %134 = load i32* %period, align 4
  %sub193 = sub i32 %134, 1
  %and194 = and i32 %sub192, %sub193
  %add195 = add i32 %131, %and194
  store i32 %add195, i32* %start, align 4
  br label %use_start

use_start:                                        ; preds = %do_ASAP, %if.end191, %if.then165
  %135 = load i32* %start, align 4
  %136 = load i32* %span, align 4
  %add196 = add i32 %135, %136
  %137 = load i32* %period, align 4
  %sub197 = sub i32 %add196, %137
  %138 = load i32* %mod, align 4
  %139 = load i32* %wrap, align 4
  %add198 = add i32 %138, %139
  %cmp199 = icmp uge i32 %sub197, %add198
  %lnot201 = xor i1 %cmp199, true
  %lnot203 = xor i1 %lnot201, true
  %lnot.ext204 = zext i1 %lnot203 to i32
  %conv205 = sext i32 %lnot.ext204 to i64
  %expval206 = call i64 @llvm.expect.i64(i64 %conv205, i64 0)
  %tobool207 = icmp ne i64 %expval206, 0
  br i1 %tobool207, label %if.then208, label %if.end209

if.then208:                                       ; preds = %use_start
  store i32 -27, i32* %status, align 4
  br label %fail

if.end209:                                        ; preds = %use_start
  %140 = load i32* %base, align 4
  %141 = load i32* %start, align 4
  %add210 = add i32 %141, %140
  store i32 %add210, i32* %start, align 4
  %142 = load i32* %start, align 4
  %143 = load i32* %skip, align 4
  %add211 = add i32 %142, %143
  %144 = load i32* %mod, align 4
  %sub212 = sub i32 %144, 1
  %and213 = and i32 %add211, %sub212
  %145 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %next_uframe214 = getelementptr inbounds %struct.ehci_iso_stream* %145, i32 0, i32 6
  store i32 %and213, i32* %next_uframe214, align 4
  %146 = load i32* %start, align 4
  %147 = load i32* %mod, align 4
  %sub215 = sub i32 %147, 1
  %and216 = and i32 %146, %sub215
  %148 = load %struct.urb** %urb.addr, align 8
  %start_frame = getelementptr inbounds %struct.urb* %148, i32 0, i32 23
  store i32 %and216, i32* %start_frame, align 4
  %149 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %highspeed217 = getelementptr inbounds %struct.ehci_iso_stream* %149, i32 0, i32 2
  %150 = load i8* %highspeed217, align 1
  %tobool218 = icmp ne i8 %150, 0
  br i1 %tobool218, label %if.end222, label %if.then219

if.then219:                                       ; preds = %if.end209
  %151 = load %struct.urb** %urb.addr, align 8
  %start_frame220 = getelementptr inbounds %struct.urb* %151, i32 0, i32 23
  %152 = load i32* %start_frame220, align 4
  %shr221 = ashr i32 %152, 3
  store i32 %shr221, i32* %start_frame220, align 4
  br label %if.end222

if.end222:                                        ; preds = %if.then219, %if.end209
  %153 = load %struct.ehci_hcd** %ehci.addr, align 8
  %isoc_count = getelementptr inbounds %struct.ehci_hcd* %153, i32 0, i32 34
  %154 = load i32* %isoc_count, align 4
  %cmp223 = icmp eq i32 %154, 0
  br i1 %cmp223, label %if.then225, label %if.end228

if.then225:                                       ; preds = %if.end222
  %155 = load i32* %now, align 4
  %shr226 = lshr i32 %155, 3
  %156 = load %struct.ehci_hcd** %ehci.addr, align 8
  %last_iso_frame227 = getelementptr inbounds %struct.ehci_hcd* %156, i32 0, i32 32
  store i32 %shr226, i32* %last_iso_frame227, align 4
  br label %if.end228

if.end228:                                        ; preds = %if.then225, %if.end222
  %157 = load i32* %status, align 4
  store i32 %157, i32* %retval
  br label %return

fail:                                             ; preds = %if.then208, %if.then127, %if.then49, %if.then19
  %158 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %159 = load %struct.ehci_iso_sched** %sched, align 8
  call void @iso_sched_free(%struct.ehci_iso_stream* %158, %struct.ehci_iso_sched* %159) noredzone
  %160 = load %struct.urb** %urb.addr, align 8
  %hcpriv229 = getelementptr inbounds %struct.urb* %160, i32 0, i32 1
  store i8* null, i8** %hcpriv229, align 8
  %161 = load i32* %status, align 4
  store i32 %161, i32* %retval
  br label %return

return:                                           ; preds = %fail, %if.end228
  %162 = load i32* %retval
  ret i32 %162
}

define internal void @sitd_link_urb(%struct.ehci_hcd* %ehci, %struct.urb* %urb, i32 %mod, %struct.ehci_iso_stream* %stream) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %mod.addr = alloca i32, align 4
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %packet = alloca i32, align 4
  %next_uframe = alloca i32, align 4
  %sched = alloca %struct.ehci_iso_sched*, align 8
  %sitd = alloca %struct.ehci_sitd*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %mod, i32* %mod.addr, align 4
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  %0 = load %struct.urb** %urb.addr, align 8
  %hcpriv = getelementptr inbounds %struct.urb* %0, i32 0, i32 1
  %1 = load i8** %hcpriv, align 8
  %2 = bitcast i8* %1 to %struct.ehci_iso_sched*
  store %struct.ehci_iso_sched* %2, %struct.ehci_iso_sched** %sched, align 8
  %3 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %next_uframe1 = getelementptr inbounds %struct.ehci_iso_stream* %3, i32 0, i32 6
  %4 = load i32* %next_uframe1, align 4
  store i32 %4, i32* %next_uframe, align 4
  %5 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_stream* %5, i32 0, i32 3
  %call = call i32 @list_empty(%struct.list_head* %td_list) noredzone
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_iso_stream* %6, i32 0, i32 10
  %7 = load i32* %bandwidth, align 4
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call2 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %8) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call2, i32 0, i32 0
  %bandwidth_allocated = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 14
  %9 = load i32* %bandwidth_allocated, align 4
  %add = add i32 %9, %7
  store i32 %add, i32* %bandwidth_allocated, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call3 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %10) noredzone
  %self4 = getelementptr inbounds %struct.usb_hcd* %call3, i32 0, i32 0
  %bandwidth_isoc_reqs = getelementptr inbounds %struct.usb_bus* %self4, i32 0, i32 16
  %11 = load i32* %bandwidth_isoc_reqs, align 4
  %cmp = icmp eq i32 %11, 0
  br i1 %cmp, label %if.then5, label %if.end9

if.then5:                                         ; preds = %if.end
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %13 = bitcast %struct.ehci_hcd* %12 to i8*
  %bf.field.offs = getelementptr i8* %13, i32 708
  %14 = bitcast i8* %bf.field.offs to i32*
  %15 = load i32* %14, align 4
  %16 = lshr i32 %15, 7
  %bf.clear = and i32 %16, 1
  %cmp6 = icmp eq i32 %bf.clear, 1
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.then5
  call void @usb_amd_quirk_pll_disable() noredzone
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.then5
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call10 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %17) noredzone
  %self11 = getelementptr inbounds %struct.usb_hcd* %call10, i32 0, i32 0
  %bandwidth_isoc_reqs12 = getelementptr inbounds %struct.usb_bus* %self11, i32 0, i32 16
  %18 = load i32* %bandwidth_isoc_reqs12, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %bandwidth_isoc_reqs12, align 4
  %19 = load %struct.ehci_iso_sched** %sched, align 8
  %first_packet = getelementptr inbounds %struct.ehci_iso_sched* %19, i32 0, i32 2
  %20 = load i32* %first_packet, align 4
  store i32 %20, i32* %packet, align 4
  store %struct.ehci_sitd* null, %struct.ehci_sitd** %sitd, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end9
  %21 = load i32* %packet, align 4
  %22 = load %struct.urb** %urb.addr, align 8
  %number_of_packets = getelementptr inbounds %struct.urb* %22, i32 0, i32 24
  %23 = load i32* %number_of_packets, align 4
  %cmp13 = icmp slt i32 %21, %23
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  %24 = load %struct.ehci_iso_sched** %sched, align 8
  %td_list14 = getelementptr inbounds %struct.ehci_iso_sched* %24, i32 0, i32 0
  %call15 = call i32 @list_empty(%struct.list_head* %td_list14) noredzone
  %tobool16 = icmp ne i32 %call15, 0
  %lnot = xor i1 %tobool16, true
  %lnot17 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot17 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool18 = icmp ne i64 %expval, 0
  br i1 %tobool18, label %if.then19, label %if.end24

if.then19:                                        ; preds = %do.body
  br label %do.body20

do.body20:                                        ; preds = %if.then19
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([63 x i8]* @.str16, i32 0, i32 0), i32 2199, i64 12) nounwind, !srcloc !15
  br label %do.body21

do.body21:                                        ; preds = %do.cond, %do.body20
  br label %do.cond

do.cond:                                          ; preds = %do.body21
  br i1 true, label %do.body21, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end23

do.end23:                                         ; preds = %do.end
  br label %if.end24

if.end24:                                         ; preds = %do.end23, %do.body
  br label %do.end26

do.end26:                                         ; preds = %if.end24
  %25 = load %struct.ehci_iso_sched** %sched, align 8
  %td_list27 = getelementptr inbounds %struct.ehci_iso_sched* %25, i32 0, i32 0
  %next = getelementptr inbounds %struct.list_head* %td_list27, i32 0, i32 0
  %26 = load %struct.list_head** %next, align 8
  store %struct.list_head* %26, %struct.list_head** %__mptr, align 8
  %27 = load %struct.list_head** %__mptr, align 8
  %28 = bitcast %struct.list_head* %27 to i8*
  %add.ptr = getelementptr i8* %28, i64 -72
  %29 = bitcast i8* %add.ptr to %struct.ehci_sitd*
  store %struct.ehci_sitd* %29, %struct.ehci_sitd** %sitd, align 8
  %30 = load %struct.ehci_sitd** %sitd, align 8
  %sitd_list = getelementptr inbounds %struct.ehci_sitd* %30, i32 0, i32 11
  %31 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %td_list28 = getelementptr inbounds %struct.ehci_iso_stream* %31, i32 0, i32 3
  call void @list_move_tail(%struct.list_head* %sitd_list, %struct.list_head* %td_list28) noredzone
  %32 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %33 = load %struct.ehci_sitd** %sitd, align 8
  %stream29 = getelementptr inbounds %struct.ehci_sitd* %33, i32 0, i32 10
  store %struct.ehci_iso_stream* %32, %struct.ehci_iso_stream** %stream29, align 8
  %34 = load %struct.urb** %urb.addr, align 8
  %35 = load %struct.ehci_sitd** %sitd, align 8
  %urb30 = getelementptr inbounds %struct.ehci_sitd* %35, i32 0, i32 9
  store %struct.urb* %34, %struct.urb** %urb30, align 8
  %36 = load %struct.ehci_hcd** %ehci.addr, align 8
  %37 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %38 = load %struct.ehci_sitd** %sitd, align 8
  %39 = load %struct.ehci_iso_sched** %sched, align 8
  %40 = load i32* %packet, align 4
  call void @sitd_patch(%struct.ehci_hcd* %36, %struct.ehci_iso_stream* %37, %struct.ehci_sitd* %38, %struct.ehci_iso_sched* %39, i32 %40) noredzone
  %41 = load %struct.ehci_hcd** %ehci.addr, align 8
  %42 = load i32* %next_uframe, align 4
  %shr = lshr i32 %42, 3
  %43 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 21
  %44 = load i32* %periodic_size, align 4
  %sub = sub i32 %44, 1
  %and = and i32 %shr, %sub
  %45 = load %struct.ehci_sitd** %sitd, align 8
  call void @sitd_link(%struct.ehci_hcd* %41, i32 %and, %struct.ehci_sitd* %45) noredzone
  %46 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %uperiod = getelementptr inbounds %struct.ehci_iso_stream* %46, i32 0, i32 8
  %47 = load i16* %uperiod, align 2
  %conv31 = zext i16 %47 to i32
  %48 = load i32* %next_uframe, align 4
  %add32 = add i32 %48, %conv31
  store i32 %add32, i32* %next_uframe, align 4
  br label %for.inc

for.inc:                                          ; preds = %do.end26
  %49 = load i32* %packet, align 4
  %inc33 = add i32 %49, 1
  store i32 %inc33, i32* %packet, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %50 = load i32* %next_uframe, align 4
  %51 = load i32* %mod.addr, align 4
  %sub34 = sub i32 %51, 1
  %and35 = and i32 %50, %sub34
  %52 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %next_uframe36 = getelementptr inbounds %struct.ehci_iso_stream* %52, i32 0, i32 6
  store i32 %and35, i32* %next_uframe36, align 4
  %53 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %54 = load %struct.ehci_iso_sched** %sched, align 8
  call void @iso_sched_free(%struct.ehci_iso_stream* %53, %struct.ehci_iso_sched* %54) noredzone
  %55 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %56 = bitcast %struct.ehci_iso_stream* %55 to i8*
  %57 = load %struct.urb** %urb.addr, align 8
  %hcpriv37 = getelementptr inbounds %struct.urb* %57, i32 0, i32 1
  store i8* %56, i8** %hcpriv37, align 8
  %58 = load %struct.ehci_hcd** %ehci.addr, align 8
  %isoc_count = getelementptr inbounds %struct.ehci_hcd* %58, i32 0, i32 34
  %59 = load i32* %isoc_count, align 4
  %inc38 = add i32 %59, 1
  store i32 %inc38, i32* %isoc_count, align 4
  %60 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @enable_periodic(%struct.ehci_hcd* %60) noredzone
  ret void
}

declare void @usb_amd_quirk_pll_disable() noredzone

define internal void @sitd_patch(%struct.ehci_hcd* %ehci, %struct.ehci_iso_stream* %stream, %struct.ehci_sitd* %sitd, %struct.ehci_iso_sched* %iso_sched, i32 %index) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %sitd.addr = alloca %struct.ehci_sitd*, align 8
  %iso_sched.addr = alloca %struct.ehci_iso_sched*, align 8
  %index.addr = alloca i32, align 4
  %uf = alloca %struct.ehci_iso_packet*, align 8
  %bufp = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store %struct.ehci_sitd* %sitd, %struct.ehci_sitd** %sitd.addr, align 8
  store %struct.ehci_iso_sched* %iso_sched, %struct.ehci_iso_sched** %iso_sched.addr, align 8
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32* %index.addr, align 4
  %idxprom = zext i32 %0 to i64
  %1 = load %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %packet = getelementptr inbounds %struct.ehci_iso_sched* %1, i32 0, i32 3
  %arrayidx = getelementptr [0 x %struct.ehci_iso_packet]* %packet, i32 0, i64 %idxprom
  store %struct.ehci_iso_packet* %arrayidx, %struct.ehci_iso_packet** %uf, align 8
  %2 = load %struct.ehci_iso_packet** %uf, align 8
  %bufp1 = getelementptr inbounds %struct.ehci_iso_packet* %2, i32 0, i32 0
  %3 = load i64* %bufp1, align 8
  store i64 %3, i64* %bufp, align 8
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %4, i32 1) noredzone
  %5 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_next = getelementptr inbounds %struct.ehci_sitd* %5, i32 0, i32 0
  store i32 %call, i32* %hw_next, align 4
  %6 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %address = getelementptr inbounds %struct.ehci_iso_stream* %6, i32 0, i32 14
  %7 = load i32* %address, align 4
  %8 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_fullspeed_ep = getelementptr inbounds %struct.ehci_sitd* %8, i32 0, i32 1
  store i32 %7, i32* %hw_fullspeed_ep, align 4
  %9 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %splits = getelementptr inbounds %struct.ehci_iso_stream* %9, i32 0, i32 7
  %10 = load i32* %splits, align 4
  %11 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_uframe = getelementptr inbounds %struct.ehci_sitd* %11, i32 0, i32 2
  store i32 %10, i32* %hw_uframe, align 4
  %12 = load %struct.ehci_iso_packet** %uf, align 8
  %transaction = getelementptr inbounds %struct.ehci_iso_packet* %12, i32 0, i32 1
  %13 = load i32* %transaction, align 4
  %14 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_results = getelementptr inbounds %struct.ehci_sitd* %14, i32 0, i32 3
  store i32 %13, i32* %hw_results, align 4
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call2 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %15, i32 1) noredzone
  %16 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_backpointer = getelementptr inbounds %struct.ehci_sitd* %16, i32 0, i32 5
  store i32 %call2, i32* %hw_backpointer, align 4
  %17 = load %struct.ehci_iso_packet** %uf, align 8
  %bufp3 = getelementptr inbounds %struct.ehci_iso_packet* %17, i32 0, i32 0
  %18 = load i64* %bufp3, align 8
  store i64 %18, i64* %bufp, align 8
  %19 = load %struct.ehci_hcd** %ehci.addr, align 8
  %20 = load i64* %bufp, align 8
  %conv = trunc i64 %20 to i32
  %call4 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %19, i32 %conv) noredzone
  %21 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_buf = getelementptr inbounds %struct.ehci_sitd* %21, i32 0, i32 4
  %arrayidx5 = getelementptr [2 x i32]* %hw_buf, i32 0, i64 0
  store i32 %call4, i32* %arrayidx5, align 4
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %23 = load i64* %bufp, align 8
  %shr = lshr i64 %23, 32
  %conv6 = trunc i64 %shr to i32
  %call7 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %22, i32 %conv6) noredzone
  %24 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_buf_hi = getelementptr inbounds %struct.ehci_sitd* %24, i32 0, i32 6
  %arrayidx8 = getelementptr [2 x i32]* %hw_buf_hi, i32 0, i64 0
  store i32 %call7, i32* %arrayidx8, align 4
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %26 = load %struct.ehci_iso_packet** %uf, align 8
  %buf1 = getelementptr inbounds %struct.ehci_iso_packet* %26, i32 0, i32 3
  %27 = load i32* %buf1, align 4
  %call9 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %25, i32 %27) noredzone
  %28 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_buf10 = getelementptr inbounds %struct.ehci_sitd* %28, i32 0, i32 4
  %arrayidx11 = getelementptr [2 x i32]* %hw_buf10, i32 0, i64 1
  store i32 %call9, i32* %arrayidx11, align 4
  %29 = load %struct.ehci_iso_packet** %uf, align 8
  %cross = getelementptr inbounds %struct.ehci_iso_packet* %29, i32 0, i32 2
  %30 = load i8* %cross, align 1
  %tobool = icmp ne i8 %30, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %31 = load i64* %bufp, align 8
  %add = add i64 %31, 4096
  store i64 %add, i64* %bufp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %33 = load i64* %bufp, align 8
  %shr12 = lshr i64 %33, 32
  %conv13 = trunc i64 %shr12 to i32
  %call14 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %32, i32 %conv13) noredzone
  %34 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_buf_hi15 = getelementptr inbounds %struct.ehci_sitd* %34, i32 0, i32 6
  %arrayidx16 = getelementptr [2 x i32]* %hw_buf_hi15, i32 0, i64 1
  store i32 %call14, i32* %arrayidx16, align 4
  %35 = load i32* %index.addr, align 4
  %36 = load %struct.ehci_sitd** %sitd.addr, align 8
  %index17 = getelementptr inbounds %struct.ehci_sitd* %36, i32 0, i32 13
  store i32 %35, i32* %index17, align 4
  ret void
}

define internal void @sitd_link(%struct.ehci_hcd* %ehci, i32 %frame, %struct.ehci_sitd* %sitd) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %frame.addr = alloca i32, align 4
  %sitd.addr = alloca %struct.ehci_sitd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %frame, i32* %frame.addr, align 4
  store %struct.ehci_sitd* %sitd, %struct.ehci_sitd** %sitd.addr, align 8
  %0 = load %struct.ehci_sitd** %sitd.addr, align 8
  %sitd_next = getelementptr inbounds %struct.ehci_sitd* %0, i32 0, i32 8
  %1 = load i32* %frame.addr, align 4
  %idxprom = zext i32 %1 to i64
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 26
  %3 = load %union.ehci_shadow** %pshadow, align 8
  %arrayidx = getelementptr %union.ehci_shadow* %3, i64 %idxprom
  %4 = bitcast %union.ehci_shadow* %sitd_next to i8*
  %5 = bitcast %union.ehci_shadow* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 8, i32 8, i1 false)
  %6 = load i32* %frame.addr, align 4
  %idxprom1 = zext i32 %6 to i64
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 22
  %8 = load i32** %periodic, align 8
  %arrayidx2 = getelementptr i32* %8, i64 %idxprom1
  %9 = load i32* %arrayidx2, align 4
  %10 = load %struct.ehci_sitd** %sitd.addr, align 8
  %hw_next = getelementptr inbounds %struct.ehci_sitd* %10, i32 0, i32 0
  store i32 %9, i32* %hw_next, align 4
  %11 = load %struct.ehci_sitd** %sitd.addr, align 8
  %12 = load i32* %frame.addr, align 4
  %idxprom3 = zext i32 %12 to i64
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow4 = getelementptr inbounds %struct.ehci_hcd* %13, i32 0, i32 26
  %14 = load %union.ehci_shadow** %pshadow4, align 8
  %arrayidx5 = getelementptr %union.ehci_shadow* %14, i64 %idxprom3
  %sitd6 = bitcast %union.ehci_shadow* %arrayidx5 to %struct.ehci_sitd**
  store %struct.ehci_sitd* %11, %struct.ehci_sitd** %sitd6, align 8
  %15 = load i32* %frame.addr, align 4
  %16 = load %struct.ehci_sitd** %sitd.addr, align 8
  %frame7 = getelementptr inbounds %struct.ehci_sitd* %16, i32 0, i32 12
  store i32 %15, i32* %frame7, align 4
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !16
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %18 = load %struct.ehci_sitd** %sitd.addr, align 8
  %sitd_dma = getelementptr inbounds %struct.ehci_sitd* %18, i32 0, i32 7
  %19 = load i64* %sitd_dma, align 8
  %or = or i64 %19, 4
  %conv = trunc i64 %or to i32
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %17, i32 %conv) noredzone
  %20 = load i32* %frame.addr, align 4
  %idxprom8 = zext i32 %20 to i64
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic9 = getelementptr inbounds %struct.ehci_hcd* %21, i32 0, i32 22
  %22 = load i32** %periodic9, align 8
  %arrayidx10 = getelementptr i32* %22, i64 %idxprom8
  store i32 %call, i32* %arrayidx10, align 4
  ret void
}

define internal void @iso_sched_free(%struct.ehci_iso_stream* %stream, %struct.ehci_iso_sched* %iso_sched) nounwind noredzone {
entry:
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %iso_sched.addr = alloca %struct.ehci_iso_sched*, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store %struct.ehci_iso_sched* %iso_sched, %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %0 = load %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %tobool = icmp ne %struct.ehci_iso_sched* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_sched* %1, i32 0, i32 0
  %2 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %free_list = getelementptr inbounds %struct.ehci_iso_stream* %2, i32 0, i32 4
  call void @list_splice(%struct.list_head* %td_list, %struct.list_head* %free_list) noredzone
  %3 = load %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %4 = bitcast %struct.ehci_iso_sched* %3 to i8*
  call void @kfree(i8* %4) noredzone
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

define internal void @list_splice(%struct.list_head* %list, %struct.list_head* %head) nounwind inlinehint noredzone {
entry:
  %list.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head** %list.addr, align 8
  %call = call i32 @list_empty(%struct.list_head* %0) noredzone
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.list_head** %list.addr, align 8
  %2 = load %struct.list_head** %head.addr, align 8
  %3 = load %struct.list_head** %head.addr, align 8
  %next = getelementptr inbounds %struct.list_head* %3, i32 0, i32 0
  %4 = load %struct.list_head** %next, align 8
  call void @__list_splice(%struct.list_head* %1, %struct.list_head* %2, %struct.list_head* %4) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define internal zeroext i1 @hcd_periodic_completion_in_progress(%struct.usb_hcd* %hcd, %struct.usb_host_endpoint* %ep) nounwind inlinehint noredzone {
entry:
  %hcd.addr = alloca %struct.usb_hcd*, align 8
  %ep.addr = alloca %struct.usb_host_endpoint*, align 8
  store %struct.usb_hcd* %hcd, %struct.usb_hcd** %hcd.addr, align 8
  store %struct.usb_host_endpoint* %ep, %struct.usb_host_endpoint** %ep.addr, align 8
  %0 = load %struct.usb_hcd** %hcd.addr, align 8
  %high_prio_bh = getelementptr inbounds %struct.usb_hcd* %0, i32 0, i32 18
  %completing_ep = getelementptr inbounds %struct.giveback_urb_bh* %high_prio_bh, i32 0, i32 4
  %1 = load %struct.usb_host_endpoint** %completing_ep, align 8
  %2 = load %struct.usb_host_endpoint** %ep.addr, align 8
  %cmp = icmp eq %struct.usb_host_endpoint* %1, %2
  ret i1 %cmp
}

define internal i32 @itd_slot_ok(%struct.ehci_hcd* %ehci, %struct.ehci_iso_stream* %stream, i32 %uframe) nounwind inlinehint noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %uframe.addr = alloca i32, align 4
  %usecs = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store i32 %uframe, i32* %uframe.addr, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %uframe_periodic_max = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 36
  %1 = load i32* %uframe_periodic_max, align 4
  %2 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_iso_stream* %2, i32 0, i32 5
  %usecs1 = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 9
  %3 = load i8* %usecs1, align 1
  %conv = zext i8 %3 to i32
  %sub = sub i32 %1, %conv
  store i32 %sub, i32* %usecs, align 4
  %4 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps2 = getelementptr inbounds %struct.ehci_iso_stream* %4, i32 0, i32 5
  %bw_uperiod = getelementptr inbounds %struct.ehci_per_sched* %ps2, i32 0, i32 11
  %5 = load i8* %bw_uperiod, align 1
  %conv3 = zext i8 %5 to i32
  %sub4 = sub i32 %conv3, 1
  %6 = load i32* %uframe.addr, align 4
  %and = and i32 %6, %sub4
  store i32 %and, i32* %uframe.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32* %uframe.addr, align 4
  %cmp = icmp ult i32 %7, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32* %uframe.addr, align 4
  %idxprom = zext i32 %8 to i64
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 61
  %arrayidx = getelementptr [64 x i8]* %bandwidth, i32 0, i64 %idxprom
  %10 = load i8* %arrayidx, align 1
  %conv6 = zext i8 %10 to i32
  %11 = load i32* %usecs, align 4
  %cmp7 = icmp ugt i32 %conv6, %11
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps9 = getelementptr inbounds %struct.ehci_iso_stream* %12, i32 0, i32 5
  %bw_uperiod10 = getelementptr inbounds %struct.ehci_per_sched* %ps9, i32 0, i32 11
  %13 = load i8* %bw_uperiod10, align 1
  %conv11 = zext i8 %13 to i32
  %14 = load i32* %uframe.addr, align 4
  %add = add i32 %14, %conv11
  store i32 %add, i32* %uframe.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %15 = load i32* %retval
  ret i32 %15
}

define internal i32 @sitd_slot_ok(%struct.ehci_hcd* %ehci, %struct.ehci_iso_stream* %stream, i32 %uframe, %struct.ehci_iso_sched* %sched, %struct.ehci_tt* %tt) nounwind inlinehint noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %uframe.addr = alloca i32, align 4
  %sched.addr = alloca %struct.ehci_iso_sched*, align 8
  %tt.addr = alloca %struct.ehci_tt*, align 8
  %mask = alloca i32, align 4
  %tmp = alloca i32, align 4
  %frame = alloca i32, align 4
  %uf = alloca i32, align 4
  %max_used = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store i32 %uframe, i32* %uframe.addr, align 4
  store %struct.ehci_iso_sched* %sched, %struct.ehci_iso_sched** %sched.addr, align 8
  store %struct.ehci_tt* %tt, %struct.ehci_tt** %tt.addr, align 8
  %0 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_iso_stream* %0, i32 0, i32 5
  %cs_mask = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 4
  %1 = load i16* %cs_mask, align 2
  %conv = zext i16 %1 to i32
  %2 = load i32* %uframe.addr, align 4
  %and = and i32 %2, 7
  %shl = shl i32 %conv, %and
  store i32 %shl, i32* %mask, align 4
  %3 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps3 = getelementptr inbounds %struct.ehci_iso_stream* %3, i32 0, i32 5
  %cs_mask4 = getelementptr inbounds %struct.ehci_per_sched* %ps3, i32 0, i32 4
  %4 = load i16* %cs_mask4, align 2
  %conv5 = zext i16 %4 to i32
  %and6 = and i32 %conv5, 255
  %5 = load i32* %uframe.addr, align 4
  %and7 = and i32 %5, 7
  %shl8 = shl i32 %and6, %and7
  %cmp = icmp sge i32 %shl8, 128
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i32* %mask, align 4
  %and10 = and i32 %6, -65536
  %tobool = icmp ne i32 %and10, 0
  br i1 %tobool, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end12:                                         ; preds = %if.end
  %7 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps13 = getelementptr inbounds %struct.ehci_iso_stream* %7, i32 0, i32 5
  %bw_uperiod = getelementptr inbounds %struct.ehci_per_sched* %ps13, i32 0, i32 11
  %8 = load i8* %bw_uperiod, align 1
  %conv14 = zext i8 %8 to i32
  %sub = sub i32 %conv14, 1
  %9 = load i32* %uframe.addr, align 4
  %and15 = and i32 %9, %sub
  store i32 %and15, i32* %uframe.addr, align 4
  %10 = load i32* %uframe.addr, align 4
  %shr = lshr i32 %10, 3
  store i32 %shr, i32* %frame, align 4
  %11 = load i32* %uframe.addr, align 4
  %and16 = and i32 %11, 7
  store i32 %and16, i32* %uf, align 4
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %13 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps17 = getelementptr inbounds %struct.ehci_iso_stream* %13, i32 0, i32 5
  %14 = load %struct.ehci_tt** %tt.addr, align 8
  %15 = load i32* %frame, align 4
  %16 = load i32* %uf, align 4
  %call = call i32 @tt_available(%struct.ehci_hcd* %12, %struct.ehci_per_sched* %ps17, %struct.ehci_tt* %14, i32 %15, i32 %16) noredzone
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %if.end12
  store i32 0, i32* %retval
  br label %return

if.end20:                                         ; preds = %if.end12
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end20
  %17 = load i32* %uframe.addr, align 4
  store i32 %17, i32* %uf, align 4
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %uframe_periodic_max = getelementptr inbounds %struct.ehci_hcd* %18, i32 0, i32 36
  %19 = load i32* %uframe_periodic_max, align 4
  %20 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps23 = getelementptr inbounds %struct.ehci_iso_stream* %20, i32 0, i32 5
  %usecs = getelementptr inbounds %struct.ehci_per_sched* %ps23, i32 0, i32 9
  %21 = load i8* %usecs, align 1
  %conv24 = zext i8 %21 to i32
  %sub25 = sub i32 %19, %conv24
  store i32 %sub25, i32* %max_used, align 4
  %22 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps26 = getelementptr inbounds %struct.ehci_iso_stream* %22, i32 0, i32 5
  %cs_mask27 = getelementptr inbounds %struct.ehci_per_sched* %ps26, i32 0, i32 4
  %23 = load i16* %cs_mask27, align 2
  %conv28 = zext i16 %23 to i32
  %and29 = and i32 %conv28, 255
  store i32 %and29, i32* %tmp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %24 = load i32* %tmp, align 4
  %tobool30 = icmp ne i32 %24, 0
  br i1 %tobool30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load i32* %uf, align 4
  %idxprom = zext i32 %25 to i64
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_hcd* %26, i32 0, i32 61
  %arrayidx = getelementptr [64 x i8]* %bandwidth, i32 0, i64 %idxprom
  %27 = load i8* %arrayidx, align 1
  %conv31 = zext i8 %27 to i32
  %28 = load i32* %max_used, align 4
  %cmp32 = icmp ugt i32 %conv31, %28
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end35:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end35
  %29 = load i32* %tmp, align 4
  %shr36 = lshr i32 %29, 1
  store i32 %shr36, i32* %tmp, align 4
  %30 = load i32* %uf, align 4
  %inc = add i32 %30, 1
  store i32 %inc, i32* %uf, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps37 = getelementptr inbounds %struct.ehci_iso_stream* %31, i32 0, i32 5
  %c_usecs = getelementptr inbounds %struct.ehci_per_sched* %ps37, i32 0, i32 10
  %32 = load i8* %c_usecs, align 1
  %tobool38 = icmp ne i8 %32, 0
  br i1 %tobool38, label %if.then39, label %if.end72

if.then39:                                        ; preds = %for.end
  %33 = load %struct.ehci_hcd** %ehci.addr, align 8
  %uframe_periodic_max40 = getelementptr inbounds %struct.ehci_hcd* %33, i32 0, i32 36
  %34 = load i32* %uframe_periodic_max40, align 4
  %35 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps41 = getelementptr inbounds %struct.ehci_iso_stream* %35, i32 0, i32 5
  %c_usecs42 = getelementptr inbounds %struct.ehci_per_sched* %ps41, i32 0, i32 10
  %36 = load i8* %c_usecs42, align 1
  %conv43 = zext i8 %36 to i32
  %sub44 = sub i32 %34, %conv43
  store i32 %sub44, i32* %max_used, align 4
  %37 = load i32* %uframe.addr, align 4
  %and45 = and i32 %37, -8
  store i32 %and45, i32* %uf, align 4
  store i32 1024, i32* %tmp, align 4
  %38 = load i32* %uframe.addr, align 4
  %and46 = and i32 %38, 7
  %add = add i32 %and46, 2
  store i32 %add, i32* %i, align 4
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc68, %if.then39
  %39 = load i32* %i, align 4
  %cmp48 = icmp ult i32 %39, 8
  br i1 %cmp48, label %for.body50, label %for.end71

for.body50:                                       ; preds = %for.cond47
  %40 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps51 = getelementptr inbounds %struct.ehci_iso_stream* %40, i32 0, i32 5
  %cs_mask52 = getelementptr inbounds %struct.ehci_per_sched* %ps51, i32 0, i32 4
  %41 = load i16* %cs_mask52, align 2
  %conv53 = zext i16 %41 to i32
  %42 = load i32* %tmp, align 4
  %and54 = and i32 %conv53, %42
  %cmp55 = icmp eq i32 %and54, 0
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %for.body50
  br label %for.inc68

if.end58:                                         ; preds = %for.body50
  %43 = load i32* %uf, align 4
  %44 = load i32* %i, align 4
  %add59 = add i32 %43, %44
  %idxprom60 = zext i32 %add59 to i64
  %45 = load %struct.ehci_hcd** %ehci.addr, align 8
  %bandwidth61 = getelementptr inbounds %struct.ehci_hcd* %45, i32 0, i32 61
  %arrayidx62 = getelementptr [64 x i8]* %bandwidth61, i32 0, i64 %idxprom60
  %46 = load i8* %arrayidx62, align 1
  %conv63 = zext i8 %46 to i32
  %47 = load i32* %max_used, align 4
  %cmp64 = icmp ugt i32 %conv63, %47
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end58
  store i32 0, i32* %retval
  br label %return

if.end67:                                         ; preds = %if.end58
  br label %for.inc68

for.inc68:                                        ; preds = %if.end67, %if.then57
  %48 = load i32* %i, align 4
  %inc69 = add i32 %48, 1
  store i32 %inc69, i32* %i, align 4
  %49 = load i32* %tmp, align 4
  %shl70 = shl i32 %49, 1
  store i32 %shl70, i32* %tmp, align 4
  br label %for.cond47

for.end71:                                        ; preds = %for.cond47
  br label %if.end72

if.end72:                                         ; preds = %for.end71, %for.end
  %50 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps73 = getelementptr inbounds %struct.ehci_iso_stream* %50, i32 0, i32 5
  %bw_uperiod74 = getelementptr inbounds %struct.ehci_per_sched* %ps73, i32 0, i32 11
  %51 = load i8* %bw_uperiod74, align 1
  %conv75 = zext i8 %51 to i32
  %52 = load i32* %uframe.addr, align 4
  %add76 = add i32 %52, %conv75
  store i32 %add76, i32* %uframe.addr, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end72
  %53 = load i32* %uframe.addr, align 4
  %cmp77 = icmp ult i32 %53, 64
  br i1 %cmp77, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %54 = load i32* %uframe.addr, align 4
  %and79 = and i32 %54, 7
  %55 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps80 = getelementptr inbounds %struct.ehci_iso_stream* %55, i32 0, i32 5
  %cs_mask81 = getelementptr inbounds %struct.ehci_per_sched* %ps80, i32 0, i32 4
  %56 = load i16* %cs_mask81, align 2
  %conv82 = zext i16 %56 to i32
  %shl83 = shl i32 %conv82, %and79
  %conv84 = trunc i32 %shl83 to i16
  store i16 %conv84, i16* %cs_mask81, align 2
  %57 = load %struct.ehci_hcd** %ehci.addr, align 8
  %58 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps85 = getelementptr inbounds %struct.ehci_iso_stream* %58, i32 0, i32 5
  %cs_mask86 = getelementptr inbounds %struct.ehci_per_sched* %ps85, i32 0, i32 4
  %59 = load i16* %cs_mask86, align 2
  %conv87 = zext i16 %59 to i32
  %call88 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %57, i32 %conv87) noredzone
  %60 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %splits = getelementptr inbounds %struct.ehci_iso_stream* %60, i32 0, i32 7
  store i32 %call88, i32* %splits, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then66, %if.then34, %if.then19, %if.then11, %if.then
  %61 = load i32* %retval
  ret i32 %61
}

define internal %struct.ehci_iso_sched* @iso_sched_alloc(i32 %packets, i32 %mem_flags) nounwind noredzone {
entry:
  %packets.addr = alloca i32, align 4
  %mem_flags.addr = alloca i32, align 4
  %iso_sched = alloca %struct.ehci_iso_sched*, align 8
  %size = alloca i32, align 4
  store i32 %packets, i32* %packets.addr, align 4
  store i32 %mem_flags, i32* %mem_flags.addr, align 4
  store i32 24, i32* %size, align 4
  %0 = load i32* %packets.addr, align 4
  %conv = zext i32 %0 to i64
  %mul = mul i64 %conv, 24
  %1 = load i32* %size, align 4
  %conv1 = sext i32 %1 to i64
  %add = add i64 %conv1, %mul
  %conv2 = trunc i64 %add to i32
  store i32 %conv2, i32* %size, align 4
  %2 = load i32* %size, align 4
  %conv3 = sext i32 %2 to i64
  %3 = load i32* %mem_flags.addr, align 4
  %call = call i8* @kzalloc(i64 %conv3, i32 %3) noredzone
  %4 = bitcast i8* %call to %struct.ehci_iso_sched*
  store %struct.ehci_iso_sched* %4, %struct.ehci_iso_sched** %iso_sched, align 8
  %5 = load %struct.ehci_iso_sched** %iso_sched, align 8
  %cmp = icmp ne %struct.ehci_iso_sched* %5, null
  %lnot = xor i1 %cmp, true
  %lnot5 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot5 to i32
  %conv6 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv6, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.ehci_iso_sched** %iso_sched, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_sched* %6, i32 0, i32 0
  call void @INIT_LIST_HEAD(%struct.list_head* %td_list) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.ehci_iso_sched** %iso_sched, align 8
  ret %struct.ehci_iso_sched* %7
}

define internal void @sitd_sched_init(%struct.ehci_hcd* %ehci, %struct.ehci_iso_sched* %iso_sched, %struct.ehci_iso_stream* %stream, %struct.urb* %urb) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %iso_sched.addr = alloca %struct.ehci_iso_sched*, align 8
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %i = alloca i32, align 4
  %dma = alloca i64, align 8
  %packet = alloca %struct.ehci_iso_packet*, align 8
  %length = alloca i32, align 4
  %buf = alloca i64, align 8
  %trans = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_iso_sched* %iso_sched, %struct.ehci_iso_sched** %iso_sched.addr, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  %0 = load %struct.urb** %urb.addr, align 8
  %transfer_dma = getelementptr inbounds %struct.urb* %0, i32 0, i32 15
  %1 = load i64* %transfer_dma, align 8
  store i64 %1, i64* %dma, align 8
  %2 = load %struct.urb** %urb.addr, align 8
  %number_of_packets = getelementptr inbounds %struct.urb* %2, i32 0, i32 24
  %3 = load i32* %number_of_packets, align 4
  %4 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_iso_stream* %4, i32 0, i32 5
  %period = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 5
  %5 = load i16* %period, align 2
  %conv = zext i16 %5 to i32
  %mul = mul i32 %3, %conv
  %6 = load %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %span = getelementptr inbounds %struct.ehci_iso_sched* %6, i32 0, i32 1
  store i32 %mul, i32* %span, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32* %i, align 4
  %8 = load %struct.urb** %urb.addr, align 8
  %number_of_packets1 = getelementptr inbounds %struct.urb* %8, i32 0, i32 24
  %9 = load i32* %number_of_packets1, align 4
  %cmp = icmp ult i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32* %i, align 4
  %idxprom = zext i32 %10 to i64
  %11 = load %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %packet3 = getelementptr inbounds %struct.ehci_iso_sched* %11, i32 0, i32 3
  %arrayidx = getelementptr [0 x %struct.ehci_iso_packet]* %packet3, i32 0, i64 %idxprom
  store %struct.ehci_iso_packet* %arrayidx, %struct.ehci_iso_packet** %packet, align 8
  %12 = load i32* %i, align 4
  %idxprom4 = zext i32 %12 to i64
  %13 = load %struct.urb** %urb.addr, align 8
  %iso_frame_desc = getelementptr inbounds %struct.urb* %13, i32 0, i32 29
  %arrayidx5 = getelementptr [0 x %struct.usb_iso_packet_descriptor]* %iso_frame_desc, i32 0, i64 %idxprom4
  %length6 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %arrayidx5, i32 0, i32 1
  %14 = load i32* %length6, align 4
  %and = and i32 %14, 1023
  store i32 %and, i32* %length, align 4
  %15 = load i64* %dma, align 8
  %16 = load i32* %i, align 4
  %idxprom7 = zext i32 %16 to i64
  %17 = load %struct.urb** %urb.addr, align 8
  %iso_frame_desc8 = getelementptr inbounds %struct.urb* %17, i32 0, i32 29
  %arrayidx9 = getelementptr [0 x %struct.usb_iso_packet_descriptor]* %iso_frame_desc8, i32 0, i64 %idxprom7
  %offset = getelementptr inbounds %struct.usb_iso_packet_descriptor* %arrayidx9, i32 0, i32 0
  %18 = load i32* %offset, align 4
  %conv10 = zext i32 %18 to i64
  %add = add i64 %15, %conv10
  store i64 %add, i64* %buf, align 8
  store i32 128, i32* %trans, align 4
  %19 = load i32* %i, align 4
  %add11 = add i32 %19, 1
  %20 = load %struct.urb** %urb.addr, align 8
  %number_of_packets12 = getelementptr inbounds %struct.urb* %20, i32 0, i32 24
  %21 = load i32* %number_of_packets12, align 4
  %cmp13 = icmp eq i32 %add11, %21
  br i1 %cmp13, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %22 = load %struct.urb** %urb.addr, align 8
  %transfer_flags = getelementptr inbounds %struct.urb* %22, i32 0, i32 13
  %23 = load i32* %transfer_flags, align 4
  %and15 = and i32 %23, 128
  %tobool = icmp ne i32 %and15, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %24 = load i32* %trans, align 4
  %or = or i32 %24, -2147483648
  store i32 %or, i32* %trans, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %25 = load i32* %length, align 4
  %shl = shl i32 %25, 16
  %26 = load i32* %trans, align 4
  %or16 = or i32 %26, %shl
  store i32 %or16, i32* %trans, align 4
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %28 = load i32* %trans, align 4
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %27, i32 %28) noredzone
  %29 = load %struct.ehci_iso_packet** %packet, align 8
  %transaction = getelementptr inbounds %struct.ehci_iso_packet* %29, i32 0, i32 1
  store i32 %call, i32* %transaction, align 4
  %30 = load i64* %buf, align 8
  %31 = load %struct.ehci_iso_packet** %packet, align 8
  %bufp = getelementptr inbounds %struct.ehci_iso_packet* %31, i32 0, i32 0
  store i64 %30, i64* %bufp, align 8
  %32 = load i64* %buf, align 8
  %33 = load i32* %length, align 4
  %conv17 = zext i32 %33 to i64
  %add18 = add i64 %32, %conv17
  %and19 = and i64 %add18, -4096
  %conv20 = trunc i64 %and19 to i32
  %34 = load %struct.ehci_iso_packet** %packet, align 8
  %buf1 = getelementptr inbounds %struct.ehci_iso_packet* %34, i32 0, i32 3
  store i32 %conv20, i32* %buf1, align 4
  %35 = load %struct.ehci_iso_packet** %packet, align 8
  %buf121 = getelementptr inbounds %struct.ehci_iso_packet* %35, i32 0, i32 3
  %36 = load i32* %buf121, align 4
  %conv22 = zext i32 %36 to i64
  %37 = load i64* %buf, align 8
  %and23 = and i64 %37, -4096
  %cmp24 = icmp ne i64 %conv22, %and23
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end
  %38 = load %struct.ehci_iso_packet** %packet, align 8
  %cross = getelementptr inbounds %struct.ehci_iso_packet* %38, i32 0, i32 2
  store i8 1, i8* %cross, align 1
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end
  %39 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %bEndpointAddress = getelementptr inbounds %struct.ehci_iso_stream* %39, i32 0, i32 1
  %40 = load i8* %bEndpointAddress, align 1
  %conv28 = zext i8 %40 to i32
  %and29 = and i32 %conv28, 128
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end27
  br label %for.inc

if.end32:                                         ; preds = %if.end27
  %41 = load i32* %length, align 4
  %add33 = add i32 %41, 187
  %div = udiv i32 %add33, 188
  store i32 %div, i32* %length, align 4
  %42 = load i32* %length, align 4
  %cmp34 = icmp ugt i32 %42, 1
  br i1 %cmp34, label %if.then36, label %if.end38

if.then36:                                        ; preds = %if.end32
  %43 = load i32* %length, align 4
  %or37 = or i32 %43, 8
  store i32 %or37, i32* %length, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %if.end32
  %44 = load i32* %length, align 4
  %45 = load %struct.ehci_iso_packet** %packet, align 8
  %buf139 = getelementptr inbounds %struct.ehci_iso_packet* %45, i32 0, i32 3
  %46 = load i32* %buf139, align 4
  %or40 = or i32 %46, %44
  store i32 %or40, i32* %buf139, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end38, %if.then31
  %47 = load i32* %i, align 4
  %inc = add i32 %47, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i8* @dma_pool_alloc(%struct.dma_pool*, i32, i64*) noredzone

define internal %struct.ehci_iso_stream* @iso_stream_alloc(i32 %mem_flags) nounwind noredzone {
entry:
  %mem_flags.addr = alloca i32, align 4
  %stream = alloca %struct.ehci_iso_stream*, align 8
  store i32 %mem_flags, i32* %mem_flags.addr, align 4
  %0 = load i32* %mem_flags.addr, align 4
  %call = call i8* @kzalloc(i64 128, i32 %0) noredzone
  %1 = bitcast i8* %call to %struct.ehci_iso_stream*
  store %struct.ehci_iso_stream* %1, %struct.ehci_iso_stream** %stream, align 8
  %2 = load %struct.ehci_iso_stream** %stream, align 8
  %cmp = icmp ne %struct.ehci_iso_stream* %2, null
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.ehci_iso_stream** %stream, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_stream* %3, i32 0, i32 3
  call void @INIT_LIST_HEAD(%struct.list_head* %td_list) noredzone
  %4 = load %struct.ehci_iso_stream** %stream, align 8
  %free_list = getelementptr inbounds %struct.ehci_iso_stream* %4, i32 0, i32 4
  call void @INIT_LIST_HEAD(%struct.list_head* %free_list) noredzone
  %5 = load %struct.ehci_iso_stream** %stream, align 8
  %next_uframe = getelementptr inbounds %struct.ehci_iso_stream* %5, i32 0, i32 6
  store i32 29999, i32* %next_uframe, align 4
  %6 = load %struct.ehci_iso_stream** %stream, align 8
  %ps = getelementptr inbounds %struct.ehci_iso_stream* %6, i32 0, i32 5
  %phase = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 6
  store i16 29999, i16* %phase, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.ehci_iso_stream** %stream, align 8
  ret %struct.ehci_iso_stream* %7
}

define internal void @iso_stream_init(%struct.ehci_hcd* %ehci, %struct.ehci_iso_stream* %stream, %struct.urb* %urb) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %dev = alloca %struct.usb_device*, align 8
  %buf1 = alloca i32, align 4
  %epnum = alloca i32, align 4
  %maxp = alloca i32, align 4
  %is_input = alloca i32, align 4
  %tmp = alloca i32, align 4
  %multi = alloca i32, align 4
  %__min1 = alloca i32, align 4
  %__min2 = alloca i32, align 4
  %__min135 = alloca i32, align 4
  %__min237 = alloca i32, align 4
  %addr = alloca i32, align 4
  %think_time = alloca i32, align 4
  %hs_transfers = alloca i32, align 4
  %_max1 = alloca i32, align 4
  %_max2 = alloca i32, align 4
  %tmp127 = alloca i32, align 4
  %__min1151 = alloca i32, align 4
  %__min2153 = alloca i32, align 4
  %__min1167 = alloca i32, align 4
  %__min2169 = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  %0 = load %struct.urb** %urb.addr, align 8
  %dev1 = getelementptr inbounds %struct.urb* %0, i32 0, i32 8
  %1 = load %struct.usb_device** %dev1, align 8
  store %struct.usb_device* %1, %struct.usb_device** %dev, align 8
  %2 = load %struct.urb** %urb.addr, align 8
  %pipe = getelementptr inbounds %struct.urb* %2, i32 0, i32 10
  %3 = load i32* %pipe, align 4
  %shr = lshr i32 %3, 15
  %and = and i32 %shr, 15
  store i32 %and, i32* %epnum, align 4
  %4 = load %struct.urb** %urb.addr, align 8
  %pipe2 = getelementptr inbounds %struct.urb* %4, i32 0, i32 10
  %5 = load i32* %pipe2, align 4
  %and3 = and i32 %5, 128
  %tobool = icmp ne i32 %and3, 0
  %cond = select i1 %tobool, i32 128, i32 0
  store i32 %cond, i32* %is_input, align 4
  %6 = load %struct.urb** %urb.addr, align 8
  %ep = getelementptr inbounds %struct.urb* %6, i32 0, i32 9
  %7 = load %struct.usb_host_endpoint** %ep, align 8
  %desc = getelementptr inbounds %struct.usb_host_endpoint* %7, i32 0, i32 0
  %call = call i32 @usb_endpoint_maxp(%struct.usb_endpoint_descriptor* %desc) noredzone
  store i32 %call, i32* %maxp, align 4
  %8 = load i32* %is_input, align 4
  %tobool4 = icmp ne i32 %8, 0
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 2048, i32* %buf1, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %buf1, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.usb_device** %dev, align 8
  %speed = getelementptr inbounds %struct.usb_device* %9, i32 0, i32 4
  %10 = load i32* %speed, align 4
  %cmp = icmp eq i32 %10, 3
  br i1 %cmp, label %if.then5, label %if.else60

if.then5:                                         ; preds = %if.end
  %11 = load i32* %maxp, align 4
  %shr7 = lshr i32 %11, 11
  %and8 = and i32 %shr7, 3
  %add = add i32 1, %and8
  store i32 %add, i32* %multi, align 4
  %12 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %highspeed = getelementptr inbounds %struct.ehci_iso_stream* %12, i32 0, i32 2
  store i8 1, i8* %highspeed, align 1
  %13 = load i32* %maxp, align 4
  %and9 = and i32 %13, 2047
  store i32 %and9, i32* %maxp, align 4
  %14 = load i32* %maxp, align 4
  %15 = load i32* %buf1, align 4
  %or = or i32 %15, %14
  store i32 %or, i32* %buf1, align 4
  %16 = load i32* %multi, align 4
  %17 = load i32* %maxp, align 4
  %mul = mul i32 %17, %16
  store i32 %mul, i32* %maxp, align 4
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %19 = load i32* %epnum, align 4
  %shl = shl i32 %19, 8
  %20 = load %struct.usb_device** %dev, align 8
  %devnum = getelementptr inbounds %struct.usb_device* %20, i32 0, i32 0
  %21 = load i32* %devnum, align 4
  %or10 = or i32 %shl, %21
  %call11 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %18, i32 %or10) noredzone
  %22 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %buf0 = getelementptr inbounds %struct.ehci_iso_stream* %22, i32 0, i32 11
  store i32 %call11, i32* %buf0, align 4
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %24 = load i32* %buf1, align 4
  %call12 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %23, i32 %24) noredzone
  %25 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %buf113 = getelementptr inbounds %struct.ehci_iso_stream* %25, i32 0, i32 12
  store i32 %call12, i32* %buf113, align 4
  %26 = load %struct.ehci_hcd** %ehci.addr, align 8
  %27 = load i32* %multi, align 4
  %call14 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %26, i32 %27) noredzone
  %28 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %buf2 = getelementptr inbounds %struct.ehci_iso_stream* %28, i32 0, i32 13
  store i32 %call14, i32* %buf2, align 4
  %29 = load i32* %maxp, align 4
  %mul15 = mul i32 56, %29
  %div = udiv i32 %mul15, 6
  %add16 = add i32 3, %div
  %conv = zext i32 %add16 to i64
  %mul17 = mul i64 2083, %conv
  %add18 = add i64 633232, %mul17
  %div19 = udiv i64 %add18, 1000
  %add20 = add i64 %div19, 5
  %add21 = add i64 %add20, 1000
  %sub = sub i64 %add21, 1
  %div22 = udiv i64 %sub, 1000
  %conv23 = trunc i64 %div22 to i8
  %30 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps = getelementptr inbounds %struct.ehci_iso_stream* %30, i32 0, i32 5
  %usecs = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 9
  store i8 %conv23, i8* %usecs, align 1
  store i32 64, i32* %__min1, align 4
  %31 = load %struct.urb** %urb.addr, align 8
  %ep26 = getelementptr inbounds %struct.urb* %31, i32 0, i32 9
  %32 = load %struct.usb_host_endpoint** %ep26, align 8
  %desc27 = getelementptr inbounds %struct.usb_host_endpoint* %32, i32 0, i32 0
  %bInterval = getelementptr inbounds %struct.usb_endpoint_descriptor* %desc27, i32 0, i32 5
  %33 = load i8* %bInterval, align 1
  %conv28 = zext i8 %33 to i32
  %sub29 = sub i32 %conv28, 1
  %shl30 = shl i32 1, %sub29
  store i32 %shl30, i32* %__min2, align 4
  %34 = load i32* %__min1, align 4
  %35 = load i32* %__min2, align 4
  %cmp31 = icmp ult i32 %34, %35
  br i1 %cmp31, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  %36 = load i32* %__min1, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  %37 = load i32* %__min2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond33 = phi i32 [ %36, %cond.true ], [ %37, %cond.false ]
  store i32 %cond33, i32* %tmp, align 4
  %38 = load i32* %tmp, align 4
  store i32 %38, i32* %__min135, align 4
  %39 = load %struct.urb** %urb.addr, align 8
  %interval = getelementptr inbounds %struct.urb* %39, i32 0, i32 25
  %40 = load i32* %interval, align 4
  store i32 %40, i32* %__min237, align 4
  %41 = load i32* %__min135, align 4
  %42 = load i32* %__min237, align 4
  %cmp38 = icmp ult i32 %41, %42
  br i1 %cmp38, label %cond.true40, label %cond.false41

cond.true40:                                      ; preds = %cond.end
  %43 = load i32* %__min135, align 4
  br label %cond.end42

cond.false41:                                     ; preds = %cond.end
  %44 = load i32* %__min237, align 4
  br label %cond.end42

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond43 = phi i32 [ %43, %cond.true40 ], [ %44, %cond.false41 ]
  %conv44 = trunc i32 %cond43 to i8
  %45 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps45 = getelementptr inbounds %struct.ehci_iso_stream* %45, i32 0, i32 5
  %bw_uperiod = getelementptr inbounds %struct.ehci_per_sched* %ps45, i32 0, i32 11
  store i8 %conv44, i8* %bw_uperiod, align 1
  %46 = load %struct.urb** %urb.addr, align 8
  %interval46 = getelementptr inbounds %struct.urb* %46, i32 0, i32 25
  %47 = load i32* %interval46, align 4
  %conv47 = trunc i32 %47 to i16
  %48 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %uperiod = getelementptr inbounds %struct.ehci_iso_stream* %48, i32 0, i32 8
  store i16 %conv47, i16* %uperiod, align 2
  %49 = load %struct.urb** %urb.addr, align 8
  %interval48 = getelementptr inbounds %struct.urb* %49, i32 0, i32 25
  %50 = load i32* %interval48, align 4
  %shr49 = ashr i32 %50, 3
  %conv50 = trunc i32 %shr49 to i16
  %51 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps51 = getelementptr inbounds %struct.ehci_iso_stream* %51, i32 0, i32 5
  %period = getelementptr inbounds %struct.ehci_per_sched* %ps51, i32 0, i32 5
  store i16 %conv50, i16* %period, align 2
  %52 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps52 = getelementptr inbounds %struct.ehci_iso_stream* %52, i32 0, i32 5
  %usecs53 = getelementptr inbounds %struct.ehci_per_sched* %ps52, i32 0, i32 9
  %53 = load i8* %usecs53, align 1
  %conv54 = zext i8 %53 to i32
  %mul55 = mul i32 %conv54, 8
  %54 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps56 = getelementptr inbounds %struct.ehci_iso_stream* %54, i32 0, i32 5
  %bw_uperiod57 = getelementptr inbounds %struct.ehci_per_sched* %ps56, i32 0, i32 11
  %55 = load i8* %bw_uperiod57, align 1
  %conv58 = zext i8 %55 to i32
  %div59 = sdiv i32 %mul55, %conv58
  %56 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_iso_stream* %56, i32 0, i32 10
  store i32 %div59, i32* %bandwidth, align 4
  br label %if.end207

if.else60:                                        ; preds = %if.end
  %57 = load %struct.usb_device** %dev, align 8
  %ttport = getelementptr inbounds %struct.usb_device* %57, i32 0, i32 6
  %58 = load i32* %ttport, align 4
  %shl64 = shl i32 %58, 24
  store i32 %shl64, i32* %addr, align 4
  %59 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call65 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %59) noredzone
  %60 = bitcast %struct.usb_hcd* %call65 to i8*
  %bf.field.offs = getelementptr i8* %60, i32 352
  %61 = bitcast i8* %bf.field.offs to i32*
  %62 = load i32* %61, align 8
  %63 = lshr i32 %62, 7
  %bf.clear = and i32 %63, 1
  %tobool66 = icmp ne i32 %bf.clear, 0
  br i1 %tobool66, label %lor.lhs.false, label %if.then70

lor.lhs.false:                                    ; preds = %if.else60
  %64 = load %struct.usb_device** %dev, align 8
  %tt = getelementptr inbounds %struct.usb_device* %64, i32 0, i32 5
  %65 = load %struct.usb_tt** %tt, align 8
  %hub = getelementptr inbounds %struct.usb_tt* %65, i32 0, i32 0
  %66 = load %struct.usb_device** %hub, align 8
  %67 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call67 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %67) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call67, i32 0, i32 0
  %root_hub = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 10
  %68 = load %struct.usb_device** %root_hub, align 8
  %cmp68 = icmp ne %struct.usb_device* %66, %68
  br i1 %cmp68, label %if.then70, label %if.end76

if.then70:                                        ; preds = %lor.lhs.false, %if.else60
  %69 = load %struct.usb_device** %dev, align 8
  %tt71 = getelementptr inbounds %struct.usb_device* %69, i32 0, i32 5
  %70 = load %struct.usb_tt** %tt71, align 8
  %hub72 = getelementptr inbounds %struct.usb_tt* %70, i32 0, i32 0
  %71 = load %struct.usb_device** %hub72, align 8
  %devnum73 = getelementptr inbounds %struct.usb_device* %71, i32 0, i32 0
  %72 = load i32* %devnum73, align 4
  %shl74 = shl i32 %72, 16
  %73 = load i32* %addr, align 4
  %or75 = or i32 %73, %shl74
  store i32 %or75, i32* %addr, align 4
  br label %if.end76

if.end76:                                         ; preds = %if.then70, %lor.lhs.false
  %74 = load i32* %epnum, align 4
  %shl77 = shl i32 %74, 8
  %75 = load i32* %addr, align 4
  %or78 = or i32 %75, %shl77
  store i32 %or78, i32* %addr, align 4
  %76 = load %struct.usb_device** %dev, align 8
  %devnum79 = getelementptr inbounds %struct.usb_device* %76, i32 0, i32 0
  %77 = load i32* %devnum79, align 4
  %78 = load i32* %addr, align 4
  %or80 = or i32 %78, %77
  store i32 %or80, i32* %addr, align 4
  %79 = load i32* %maxp, align 4
  %mul81 = mul i32 56, %79
  %div82 = udiv i32 %mul81, 6
  %add83 = add i32 3, %div82
  %conv84 = zext i32 %add83 to i64
  %mul85 = mul i64 2083, %conv84
  %add86 = add i64 633232, %mul85
  %div87 = udiv i64 %add86, 1000
  %add88 = add i64 %div87, 5
  %add89 = add i64 %add88, 1000
  %sub90 = sub i64 %add89, 1
  %div91 = udiv i64 %sub90, 1000
  %conv92 = trunc i64 %div91 to i8
  %80 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps93 = getelementptr inbounds %struct.ehci_iso_stream* %80, i32 0, i32 5
  %usecs94 = getelementptr inbounds %struct.ehci_per_sched* %ps93, i32 0, i32 9
  store i8 %conv92, i8* %usecs94, align 1
  %81 = load %struct.usb_device** %dev, align 8
  %tt95 = getelementptr inbounds %struct.usb_device* %81, i32 0, i32 5
  %82 = load %struct.usb_tt** %tt95, align 8
  %tobool96 = icmp ne %struct.usb_tt* %82, null
  br i1 %tobool96, label %cond.true97, label %cond.false100

cond.true97:                                      ; preds = %if.end76
  %83 = load %struct.usb_device** %dev, align 8
  %tt98 = getelementptr inbounds %struct.usb_device* %83, i32 0, i32 5
  %84 = load %struct.usb_tt** %tt98, align 8
  %think_time99 = getelementptr inbounds %struct.usb_tt* %84, i32 0, i32 2
  %85 = load i32* %think_time99, align 4
  br label %cond.end101

cond.false100:                                    ; preds = %if.end76
  br label %cond.end101

cond.end101:                                      ; preds = %cond.false100, %cond.true97
  %cond102 = phi i32 [ %85, %cond.true97 ], [ 0, %cond.false100 ]
  store i32 %cond102, i32* %think_time, align 4
  %86 = load i32* %think_time, align 4
  %conv103 = sext i32 %86 to i64
  %87 = load %struct.usb_device** %dev, align 8
  %speed104 = getelementptr inbounds %struct.usb_device* %87, i32 0, i32 4
  %88 = load i32* %speed104, align 4
  %89 = load i32* %is_input, align 4
  %90 = load i32* %maxp, align 4
  %call105 = call i64 @usb_calc_bus_time(i32 %88, i32 %89, i32 1, i32 %90) noredzone
  %add106 = add i64 %conv103, %call105
  %add107 = add i64 %add106, 1000
  %sub108 = sub i64 %add107, 1
  %div109 = sdiv i64 %sub108, 1000
  %conv110 = trunc i64 %div109 to i16
  %91 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps111 = getelementptr inbounds %struct.ehci_iso_stream* %91, i32 0, i32 5
  %tt_usecs = getelementptr inbounds %struct.ehci_per_sched* %ps111, i32 0, i32 3
  store i16 %conv110, i16* %tt_usecs, align 2
  store i32 1, i32* %_max1, align 4
  %92 = load i32* %maxp, align 4
  %add114 = add i32 %92, 187
  %div115 = udiv i32 %add114, 188
  store i32 %div115, i32* %_max2, align 4
  %cmp116 = icmp eq i32* %_max1, %_max2
  %conv117 = zext i1 %cmp116 to i32
  %93 = load i32* %_max1, align 4
  %94 = load i32* %_max2, align 4
  %cmp118 = icmp ugt i32 %93, %94
  br i1 %cmp118, label %cond.true120, label %cond.false121

cond.true120:                                     ; preds = %cond.end101
  %95 = load i32* %_max1, align 4
  br label %cond.end122

cond.false121:                                    ; preds = %cond.end101
  %96 = load i32* %_max2, align 4
  br label %cond.end122

cond.end122:                                      ; preds = %cond.false121, %cond.true120
  %cond123 = phi i32 [ %95, %cond.true120 ], [ %96, %cond.false121 ]
  store i32 %cond123, i32* %hs_transfers, align 4
  %97 = load i32* %is_input, align 4
  %tobool124 = icmp ne i32 %97, 0
  br i1 %tobool124, label %if.then125, label %if.else144

if.then125:                                       ; preds = %cond.end122
  %98 = load i32* %addr, align 4
  %or128 = or i32 %98, -2147483648
  store i32 %or128, i32* %addr, align 4
  %99 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps129 = getelementptr inbounds %struct.ehci_iso_stream* %99, i32 0, i32 5
  %usecs130 = getelementptr inbounds %struct.ehci_per_sched* %ps129, i32 0, i32 9
  %100 = load i8* %usecs130, align 1
  %101 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps131 = getelementptr inbounds %struct.ehci_iso_stream* %101, i32 0, i32 5
  %c_usecs = getelementptr inbounds %struct.ehci_per_sched* %ps131, i32 0, i32 10
  store i8 %100, i8* %c_usecs, align 1
  %102 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps132 = getelementptr inbounds %struct.ehci_iso_stream* %102, i32 0, i32 5
  %usecs133 = getelementptr inbounds %struct.ehci_per_sched* %ps132, i32 0, i32 9
  store i8 1, i8* %usecs133, align 1
  %103 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps134 = getelementptr inbounds %struct.ehci_iso_stream* %103, i32 0, i32 5
  %cs_mask = getelementptr inbounds %struct.ehci_per_sched* %ps134, i32 0, i32 4
  store i16 1, i16* %cs_mask, align 2
  %104 = load i32* %hs_transfers, align 4
  %add135 = add i32 %104, 2
  %shl136 = shl i32 1, %add135
  %sub137 = sub i32 %shl136, 1
  store i32 %sub137, i32* %tmp127, align 4
  %105 = load i32* %tmp127, align 4
  %shl138 = shl i32 %105, 10
  %106 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps139 = getelementptr inbounds %struct.ehci_iso_stream* %106, i32 0, i32 5
  %cs_mask140 = getelementptr inbounds %struct.ehci_per_sched* %ps139, i32 0, i32 4
  %107 = load i16* %cs_mask140, align 2
  %conv141 = zext i16 %107 to i32
  %or142 = or i32 %conv141, %shl138
  %conv143 = trunc i32 %or142 to i16
  store i16 %conv143, i16* %cs_mask140, align 2
  br label %if.end149

if.else144:                                       ; preds = %cond.end122
  %108 = load i32* %hs_transfers, align 4
  %sub145 = sub i32 %108, 1
  %idxprom = sext i32 %sub145 to i64
  %arrayidx = getelementptr [6 x i8]* @iso_stream_init.smask_out, i32 0, i64 %idxprom
  %109 = load i8* %arrayidx, align 1
  %conv146 = zext i8 %109 to i16
  %110 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps147 = getelementptr inbounds %struct.ehci_iso_stream* %110, i32 0, i32 5
  %cs_mask148 = getelementptr inbounds %struct.ehci_per_sched* %ps147, i32 0, i32 4
  store i16 %conv146, i16* %cs_mask148, align 2
  br label %if.end149

if.end149:                                        ; preds = %if.else144, %if.then125
  store i32 8, i32* %__min1151, align 4
  %111 = load %struct.urb** %urb.addr, align 8
  %ep154 = getelementptr inbounds %struct.urb* %111, i32 0, i32 9
  %112 = load %struct.usb_host_endpoint** %ep154, align 8
  %desc155 = getelementptr inbounds %struct.usb_host_endpoint* %112, i32 0, i32 0
  %bInterval156 = getelementptr inbounds %struct.usb_endpoint_descriptor* %desc155, i32 0, i32 5
  %113 = load i8* %bInterval156, align 1
  %conv157 = zext i8 %113 to i32
  %sub158 = sub i32 %conv157, 1
  %shl159 = shl i32 1, %sub158
  store i32 %shl159, i32* %__min2153, align 4
  %114 = load i32* %__min1151, align 4
  %115 = load i32* %__min2153, align 4
  %cmp160 = icmp ult i32 %114, %115
  br i1 %cmp160, label %cond.true162, label %cond.false163

cond.true162:                                     ; preds = %if.end149
  %116 = load i32* %__min1151, align 4
  br label %cond.end164

cond.false163:                                    ; preds = %if.end149
  %117 = load i32* %__min2153, align 4
  br label %cond.end164

cond.end164:                                      ; preds = %cond.false163, %cond.true162
  %cond165 = phi i32 [ %116, %cond.true162 ], [ %117, %cond.false163 ]
  store i32 %cond165, i32* %tmp, align 4
  %118 = load i32* %tmp, align 4
  store i32 %118, i32* %__min1167, align 4
  %119 = load %struct.urb** %urb.addr, align 8
  %interval170 = getelementptr inbounds %struct.urb* %119, i32 0, i32 25
  %120 = load i32* %interval170, align 4
  store i32 %120, i32* %__min2169, align 4
  %121 = load i32* %__min1167, align 4
  %122 = load i32* %__min2169, align 4
  %cmp171 = icmp ult i32 %121, %122
  br i1 %cmp171, label %cond.true173, label %cond.false174

cond.true173:                                     ; preds = %cond.end164
  %123 = load i32* %__min1167, align 4
  br label %cond.end175

cond.false174:                                    ; preds = %cond.end164
  %124 = load i32* %__min2169, align 4
  br label %cond.end175

cond.end175:                                      ; preds = %cond.false174, %cond.true173
  %cond176 = phi i32 [ %123, %cond.true173 ], [ %124, %cond.false174 ]
  %conv177 = trunc i32 %cond176 to i8
  %125 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps178 = getelementptr inbounds %struct.ehci_iso_stream* %125, i32 0, i32 5
  %bw_period = getelementptr inbounds %struct.ehci_per_sched* %ps178, i32 0, i32 12
  store i8 %conv177, i8* %bw_period, align 1
  %126 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps179 = getelementptr inbounds %struct.ehci_iso_stream* %126, i32 0, i32 5
  %bw_period180 = getelementptr inbounds %struct.ehci_per_sched* %ps179, i32 0, i32 12
  %127 = load i8* %bw_period180, align 1
  %conv181 = zext i8 %127 to i32
  %shl182 = shl i32 %conv181, 3
  %conv183 = trunc i32 %shl182 to i8
  %128 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps184 = getelementptr inbounds %struct.ehci_iso_stream* %128, i32 0, i32 5
  %bw_uperiod185 = getelementptr inbounds %struct.ehci_per_sched* %ps184, i32 0, i32 11
  store i8 %conv183, i8* %bw_uperiod185, align 1
  %129 = load %struct.urb** %urb.addr, align 8
  %interval186 = getelementptr inbounds %struct.urb* %129, i32 0, i32 25
  %130 = load i32* %interval186, align 4
  %conv187 = trunc i32 %130 to i16
  %131 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps188 = getelementptr inbounds %struct.ehci_iso_stream* %131, i32 0, i32 5
  %period189 = getelementptr inbounds %struct.ehci_per_sched* %ps188, i32 0, i32 5
  store i16 %conv187, i16* %period189, align 2
  %132 = load %struct.urb** %urb.addr, align 8
  %interval190 = getelementptr inbounds %struct.urb* %132, i32 0, i32 25
  %133 = load i32* %interval190, align 4
  %shl191 = shl i32 %133, 3
  %conv192 = trunc i32 %shl191 to i16
  %134 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %uperiod193 = getelementptr inbounds %struct.ehci_iso_stream* %134, i32 0, i32 8
  store i16 %conv192, i16* %uperiod193, align 2
  %135 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps194 = getelementptr inbounds %struct.ehci_iso_stream* %135, i32 0, i32 5
  %usecs195 = getelementptr inbounds %struct.ehci_per_sched* %ps194, i32 0, i32 9
  %136 = load i8* %usecs195, align 1
  %conv196 = zext i8 %136 to i32
  %137 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps197 = getelementptr inbounds %struct.ehci_iso_stream* %137, i32 0, i32 5
  %c_usecs198 = getelementptr inbounds %struct.ehci_per_sched* %ps197, i32 0, i32 10
  %138 = load i8* %c_usecs198, align 1
  %conv199 = zext i8 %138 to i32
  %add200 = add i32 %conv196, %conv199
  %139 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps201 = getelementptr inbounds %struct.ehci_iso_stream* %139, i32 0, i32 5
  %bw_period202 = getelementptr inbounds %struct.ehci_per_sched* %ps201, i32 0, i32 12
  %140 = load i8* %bw_period202, align 1
  %conv203 = zext i8 %140 to i32
  %div204 = sdiv i32 %add200, %conv203
  %141 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %bandwidth205 = getelementptr inbounds %struct.ehci_iso_stream* %141, i32 0, i32 10
  store i32 %div204, i32* %bandwidth205, align 4
  %142 = load %struct.ehci_hcd** %ehci.addr, align 8
  %143 = load i32* %addr, align 4
  %call206 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %142, i32 %143) noredzone
  %144 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %address = getelementptr inbounds %struct.ehci_iso_stream* %144, i32 0, i32 14
  store i32 %call206, i32* %address, align 4
  br label %if.end207

if.end207:                                        ; preds = %cond.end175, %cond.end42
  %145 = load %struct.usb_device** %dev, align 8
  %146 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps208 = getelementptr inbounds %struct.ehci_iso_stream* %146, i32 0, i32 5
  %udev = getelementptr inbounds %struct.ehci_per_sched* %ps208, i32 0, i32 0
  store %struct.usb_device* %145, %struct.usb_device** %udev, align 8
  %147 = load %struct.urb** %urb.addr, align 8
  %ep209 = getelementptr inbounds %struct.urb* %147, i32 0, i32 9
  %148 = load %struct.usb_host_endpoint** %ep209, align 8
  %149 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %ps210 = getelementptr inbounds %struct.ehci_iso_stream* %149, i32 0, i32 5
  %ep211 = getelementptr inbounds %struct.ehci_per_sched* %ps210, i32 0, i32 1
  store %struct.usb_host_endpoint* %148, %struct.usb_host_endpoint** %ep211, align 8
  %150 = load i32* %is_input, align 4
  %151 = load i32* %epnum, align 4
  %or212 = or i32 %150, %151
  %conv213 = trunc i32 %or212 to i8
  %152 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %bEndpointAddress = getelementptr inbounds %struct.ehci_iso_stream* %152, i32 0, i32 1
  store i8 %conv213, i8* %bEndpointAddress, align 1
  %153 = load i32* %maxp, align 4
  %conv214 = trunc i32 %153 to i16
  %154 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %maxp215 = getelementptr inbounds %struct.ehci_iso_stream* %154, i32 0, i32 9
  store i16 %conv214, i16* %maxp215, align 2
  ret void
}

define internal i32 @usb_endpoint_maxp(%struct.usb_endpoint_descriptor* %epd) nounwind inlinehint noredzone {
entry:
  %epd.addr = alloca %struct.usb_endpoint_descriptor*, align 8
  store %struct.usb_endpoint_descriptor* %epd, %struct.usb_endpoint_descriptor** %epd.addr, align 8
  %0 = load %struct.usb_endpoint_descriptor** %epd.addr, align 8
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor* %0, i32 0, i32 4
  %1 = load i16* %wMaxPacketSize, align 1
  %conv = zext i16 %1 to i32
  ret i32 %conv
}

declare i64 @usb_calc_bus_time(i32, i32, i32, i32) noredzone

define internal i32 @itd_urb_transaction(%struct.ehci_iso_stream* %stream, %struct.ehci_hcd* %ehci, %struct.urb* %urb, i32 %mem_flags) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %mem_flags.addr = alloca i32, align 4
  %itd = alloca %struct.ehci_itd*, align 8
  %itd_dma = alloca i64, align 8
  %i = alloca i32, align 4
  %num_itds = alloca i32, align 4
  %sched = alloca %struct.ehci_iso_sched*, align 8
  %flags = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %__dummy39 = alloca i64, align 8
  %__dummy240 = alloca i64, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %mem_flags, i32* %mem_flags.addr, align 4
  %0 = load %struct.urb** %urb.addr, align 8
  %number_of_packets = getelementptr inbounds %struct.urb* %0, i32 0, i32 24
  %1 = load i32* %number_of_packets, align 4
  %2 = load i32* %mem_flags.addr, align 4
  %call = call %struct.ehci_iso_sched* @iso_sched_alloc(i32 %1, i32 %2) noredzone
  store %struct.ehci_iso_sched* %call, %struct.ehci_iso_sched** %sched, align 8
  %3 = load %struct.ehci_iso_sched** %sched, align 8
  %cmp = icmp eq %struct.ehci_iso_sched* %3, null
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -12, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load %struct.ehci_iso_sched** %sched, align 8
  %6 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %7 = load %struct.urb** %urb.addr, align 8
  call void @itd_sched_init(%struct.ehci_hcd* %4, %struct.ehci_iso_sched* %5, %struct.ehci_iso_stream* %6, %struct.urb* %7) noredzone
  %8 = load %struct.urb** %urb.addr, align 8
  %interval = getelementptr inbounds %struct.urb* %8, i32 0, i32 25
  %9 = load i32* %interval, align 4
  %cmp2 = icmp slt i32 %9, 8
  br i1 %cmp2, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  %10 = load %struct.ehci_iso_sched** %sched, align 8
  %span = getelementptr inbounds %struct.ehci_iso_sched* %10, i32 0, i32 1
  %11 = load i32* %span, align 4
  %add = add i32 %11, 7
  %div = udiv i32 %add, 8
  %add5 = add i32 1, %div
  store i32 %add5, i32* %num_itds, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %12 = load %struct.urb** %urb.addr, align 8
  %number_of_packets6 = getelementptr inbounds %struct.urb* %12, i32 0, i32 24
  %13 = load i32* %number_of_packets6, align 4
  store i32 %13, i32* %num_itds, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then4
  br label %do.body

do.body:                                          ; preds = %if.end7
  br label %do.body8

do.body8:                                         ; preds = %do.body
  %cmp9 = icmp eq i64* %__dummy, %__dummy2
  %conv10 = zext i1 %cmp9 to i32
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 11
  %call11 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call12 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call11) noredzone
  store i64 %call12, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body8
  br label %do.end13

do.end13:                                         ; preds = %do.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end13
  %15 = load i32* %i, align 4
  %16 = load i32* %num_itds, align 4
  %cmp14 = icmp ult i32 %15, %16
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %free_list = getelementptr inbounds %struct.ehci_iso_stream* %17, i32 0, i32 4
  %call16 = call i32 @list_empty(%struct.list_head* %free_list) noredzone
  %tobool17 = icmp ne i32 %call16, 0
  %lnot18 = xor i1 %tobool17, true
  %lnot20 = xor i1 %lnot18, true
  %lnot22 = xor i1 %lnot20, true
  %lnot.ext23 = zext i1 %lnot22 to i32
  %conv24 = sext i32 %lnot.ext23 to i64
  %expval25 = call i64 @llvm.expect.i64(i64 %conv24, i64 1)
  %tobool26 = icmp ne i64 %expval25, 0
  br i1 %tobool26, label %if.then27, label %if.else34

if.then27:                                        ; preds = %for.body
  %18 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %free_list28 = getelementptr inbounds %struct.ehci_iso_stream* %18, i32 0, i32 4
  %next = getelementptr inbounds %struct.list_head* %free_list28, i32 0, i32 0
  %19 = load %struct.list_head** %next, align 8
  store %struct.list_head* %19, %struct.list_head** %__mptr, align 8
  %20 = load %struct.list_head** %__mptr, align 8
  %21 = bitcast %struct.list_head* %20 to i8*
  %add.ptr = getelementptr i8* %21, i64 -128
  %22 = bitcast i8* %add.ptr to %struct.ehci_itd*
  store %struct.ehci_itd* %22, %struct.ehci_itd** %itd, align 8
  %23 = load %struct.ehci_itd** %itd, align 8
  %frame = getelementptr inbounds %struct.ehci_itd* %23, i32 0, i32 9
  %24 = load i32* %frame, align 4
  %25 = load %struct.ehci_hcd** %ehci.addr, align 8
  %now_frame = getelementptr inbounds %struct.ehci_hcd* %25, i32 0, i32 31
  %26 = load i32* %now_frame, align 4
  %cmp29 = icmp eq i32 %24, %26
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.then27
  br label %alloc_itd

if.end32:                                         ; preds = %if.then27
  %27 = load %struct.ehci_itd** %itd, align 8
  %itd_list = getelementptr inbounds %struct.ehci_itd* %27, i32 0, i32 8
  call void @list_del(%struct.list_head* %itd_list) noredzone
  %28 = load %struct.ehci_itd** %itd, align 8
  %itd_dma33 = getelementptr inbounds %struct.ehci_itd* %28, i32 0, i32 4
  %29 = load i64* %itd_dma33, align 8
  store i64 %29, i64* %itd_dma, align 8
  br label %if.end52

if.else34:                                        ; preds = %for.body
  br label %alloc_itd

alloc_itd:                                        ; preds = %if.else34, %if.then31
  %30 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock35 = getelementptr inbounds %struct.ehci_hcd* %30, i32 0, i32 11
  %31 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock35, i64 %31) noredzone
  %32 = load %struct.ehci_hcd** %ehci.addr, align 8
  %itd_pool = getelementptr inbounds %struct.ehci_hcd* %32, i32 0, i32 50
  %33 = load %struct.dma_pool** %itd_pool, align 8
  %34 = load i32* %mem_flags.addr, align 4
  %call36 = call i8* @dma_pool_alloc(%struct.dma_pool* %33, i32 %34, i64* %itd_dma) noredzone
  %35 = bitcast i8* %call36 to %struct.ehci_itd*
  store %struct.ehci_itd* %35, %struct.ehci_itd** %itd, align 8
  br label %do.body37

do.body37:                                        ; preds = %alloc_itd
  br label %do.body38

do.body38:                                        ; preds = %do.body37
  %cmp41 = icmp eq i64* %__dummy39, %__dummy240
  %conv42 = zext i1 %cmp41 to i32
  %36 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock43 = getelementptr inbounds %struct.ehci_hcd* %36, i32 0, i32 11
  %call44 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock43) noredzone
  %call45 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call44) noredzone
  store i64 %call45, i64* %flags, align 8
  br label %do.end46

do.end46:                                         ; preds = %do.body38
  br label %do.end47

do.end47:                                         ; preds = %do.end46
  %37 = load %struct.ehci_itd** %itd, align 8
  %tobool48 = icmp ne %struct.ehci_itd* %37, null
  br i1 %tobool48, label %if.end51, label %if.then49

if.then49:                                        ; preds = %do.end47
  %38 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %39 = load %struct.ehci_iso_sched** %sched, align 8
  call void @iso_sched_free(%struct.ehci_iso_stream* %38, %struct.ehci_iso_sched* %39) noredzone
  %40 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock50 = getelementptr inbounds %struct.ehci_hcd* %40, i32 0, i32 11
  %41 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock50, i64 %41) noredzone
  store i32 -12, i32* %retval
  br label %return

if.end51:                                         ; preds = %do.end47
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end32
  %42 = load %struct.ehci_itd** %itd, align 8
  %43 = bitcast %struct.ehci_itd* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %43, i8 0, i64 192, i32 32, i1 false)
  %44 = load i64* %itd_dma, align 8
  %45 = load %struct.ehci_itd** %itd, align 8
  %itd_dma53 = getelementptr inbounds %struct.ehci_itd* %45, i32 0, i32 4
  store i64 %44, i64* %itd_dma53, align 8
  %46 = load %struct.ehci_itd** %itd, align 8
  %frame54 = getelementptr inbounds %struct.ehci_itd* %46, i32 0, i32 9
  store i32 29999, i32* %frame54, align 4
  %47 = load %struct.ehci_itd** %itd, align 8
  %itd_list55 = getelementptr inbounds %struct.ehci_itd* %47, i32 0, i32 8
  %48 = load %struct.ehci_iso_sched** %sched, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_sched* %48, i32 0, i32 0
  call void @list_add(%struct.list_head* %itd_list55, %struct.list_head* %td_list) noredzone
  br label %for.inc

for.inc:                                          ; preds = %if.end52
  %49 = load i32* %i, align 4
  %inc = add i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %50 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock56 = getelementptr inbounds %struct.ehci_hcd* %50, i32 0, i32 11
  %51 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock56, i64 %51) noredzone
  %52 = load %struct.ehci_iso_sched** %sched, align 8
  %53 = bitcast %struct.ehci_iso_sched* %52 to i8*
  %54 = load %struct.urb** %urb.addr, align 8
  %hcpriv = getelementptr inbounds %struct.urb* %54, i32 0, i32 1
  store i8* %53, i8** %hcpriv, align 8
  %55 = load %struct.urb** %urb.addr, align 8
  %error_count = getelementptr inbounds %struct.urb* %55, i32 0, i32 26
  store i32 0, i32* %error_count, align 4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then49, %if.then
  %56 = load i32* %retval
  ret i32 %56
}

define internal void @itd_link_urb(%struct.ehci_hcd* %ehci, %struct.urb* %urb, i32 %mod, %struct.ehci_iso_stream* %stream) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %mod.addr = alloca i32, align 4
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %packet = alloca i32, align 4
  %next_uframe = alloca i32, align 4
  %uframe = alloca i32, align 4
  %frame = alloca i32, align 4
  %iso_sched = alloca %struct.ehci_iso_sched*, align 8
  %itd = alloca %struct.ehci_itd*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %mod, i32* %mod.addr, align 4
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  %0 = load %struct.urb** %urb.addr, align 8
  %hcpriv = getelementptr inbounds %struct.urb* %0, i32 0, i32 1
  %1 = load i8** %hcpriv, align 8
  %2 = bitcast i8* %1 to %struct.ehci_iso_sched*
  store %struct.ehci_iso_sched* %2, %struct.ehci_iso_sched** %iso_sched, align 8
  %3 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %next_uframe1 = getelementptr inbounds %struct.ehci_iso_stream* %3, i32 0, i32 6
  %4 = load i32* %next_uframe1, align 4
  %5 = load i32* %mod.addr, align 4
  %sub = sub i32 %5, 1
  %and = and i32 %4, %sub
  store i32 %and, i32* %next_uframe, align 4
  %6 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %td_list = getelementptr inbounds %struct.ehci_iso_stream* %6, i32 0, i32 3
  %call = call i32 @list_empty(%struct.list_head* %td_list) noredzone
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_iso_stream* %7, i32 0, i32 10
  %8 = load i32* %bandwidth, align 4
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call4 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %9) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call4, i32 0, i32 0
  %bandwidth_allocated = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 14
  %10 = load i32* %bandwidth_allocated, align 4
  %add = add i32 %10, %8
  store i32 %add, i32* %bandwidth_allocated, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call5 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %11) noredzone
  %self6 = getelementptr inbounds %struct.usb_hcd* %call5, i32 0, i32 0
  %bandwidth_isoc_reqs = getelementptr inbounds %struct.usb_bus* %self6, i32 0, i32 16
  %12 = load i32* %bandwidth_isoc_reqs, align 4
  %cmp = icmp eq i32 %12, 0
  br i1 %cmp, label %if.then8, label %if.end13

if.then8:                                         ; preds = %if.end
  %13 = load %struct.ehci_hcd** %ehci.addr, align 8
  %14 = bitcast %struct.ehci_hcd* %13 to i8*
  %bf.field.offs = getelementptr i8* %14, i32 708
  %15 = bitcast i8* %bf.field.offs to i32*
  %16 = load i32* %15, align 4
  %17 = lshr i32 %16, 7
  %bf.clear = and i32 %17, 1
  %cmp9 = icmp eq i32 %bf.clear, 1
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then8
  call void @usb_amd_quirk_pll_disable() noredzone
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then8
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call14 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %18) noredzone
  %self15 = getelementptr inbounds %struct.usb_hcd* %call14, i32 0, i32 0
  %bandwidth_isoc_reqs16 = getelementptr inbounds %struct.usb_bus* %self15, i32 0, i32 16
  %19 = load i32* %bandwidth_isoc_reqs16, align 4
  %inc = add i32 %19, 1
  store i32 %inc, i32* %bandwidth_isoc_reqs16, align 4
  %20 = load %struct.ehci_iso_sched** %iso_sched, align 8
  %first_packet = getelementptr inbounds %struct.ehci_iso_sched* %20, i32 0, i32 2
  %21 = load i32* %first_packet, align 4
  store i32 %21, i32* %packet, align 4
  store %struct.ehci_itd* null, %struct.ehci_itd** %itd, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end43, %if.end13
  %22 = load i32* %packet, align 4
  %23 = load %struct.urb** %urb.addr, align 8
  %number_of_packets = getelementptr inbounds %struct.urb* %23, i32 0, i32 24
  %24 = load i32* %number_of_packets, align 4
  %cmp17 = icmp slt i32 %22, %24
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load %struct.ehci_itd** %itd, align 8
  %cmp19 = icmp eq %struct.ehci_itd* %25, null
  br i1 %cmp19, label %if.then21, label %if.end26

if.then21:                                        ; preds = %for.body
  %26 = load %struct.ehci_iso_sched** %iso_sched, align 8
  %td_list22 = getelementptr inbounds %struct.ehci_iso_sched* %26, i32 0, i32 0
  %next = getelementptr inbounds %struct.list_head* %td_list22, i32 0, i32 0
  %27 = load %struct.list_head** %next, align 8
  store %struct.list_head* %27, %struct.list_head** %__mptr, align 8
  %28 = load %struct.list_head** %__mptr, align 8
  %29 = bitcast %struct.list_head* %28 to i8*
  %add.ptr = getelementptr i8* %29, i64 -128
  %30 = bitcast i8* %add.ptr to %struct.ehci_itd*
  store %struct.ehci_itd* %30, %struct.ehci_itd** %itd, align 8
  %31 = load %struct.ehci_itd** %itd, align 8
  %itd_list = getelementptr inbounds %struct.ehci_itd* %31, i32 0, i32 8
  %32 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %td_list23 = getelementptr inbounds %struct.ehci_iso_stream* %32, i32 0, i32 3
  call void @list_move_tail(%struct.list_head* %itd_list, %struct.list_head* %td_list23) noredzone
  %33 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %34 = load %struct.ehci_itd** %itd, align 8
  %stream24 = getelementptr inbounds %struct.ehci_itd* %34, i32 0, i32 7
  store %struct.ehci_iso_stream* %33, %struct.ehci_iso_stream** %stream24, align 8
  %35 = load %struct.urb** %urb.addr, align 8
  %36 = load %struct.ehci_itd** %itd, align 8
  %urb25 = getelementptr inbounds %struct.ehci_itd* %36, i32 0, i32 6
  store %struct.urb* %35, %struct.urb** %urb25, align 8
  %37 = load %struct.ehci_hcd** %ehci.addr, align 8
  %38 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %39 = load %struct.ehci_itd** %itd, align 8
  call void @itd_init(%struct.ehci_hcd* %37, %struct.ehci_iso_stream* %38, %struct.ehci_itd* %39) noredzone
  br label %if.end26

if.end26:                                         ; preds = %if.then21, %for.body
  %40 = load i32* %next_uframe, align 4
  %and27 = and i32 %40, 7
  store i32 %and27, i32* %uframe, align 4
  %41 = load i32* %next_uframe, align 4
  %shr = lshr i32 %41, 3
  store i32 %shr, i32* %frame, align 4
  %42 = load %struct.ehci_hcd** %ehci.addr, align 8
  %43 = load %struct.ehci_itd** %itd, align 8
  %44 = load %struct.ehci_iso_sched** %iso_sched, align 8
  %45 = load i32* %packet, align 4
  %46 = load i32* %uframe, align 4
  %conv28 = trunc i32 %46 to i16
  call void @itd_patch(%struct.ehci_hcd* %42, %struct.ehci_itd* %43, %struct.ehci_iso_sched* %44, i32 %45, i16 zeroext %conv28) noredzone
  %47 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %uperiod = getelementptr inbounds %struct.ehci_iso_stream* %47, i32 0, i32 8
  %48 = load i16* %uperiod, align 2
  %conv29 = zext i16 %48 to i32
  %49 = load i32* %next_uframe, align 4
  %add30 = add i32 %49, %conv29
  store i32 %add30, i32* %next_uframe, align 4
  %50 = load i32* %mod.addr, align 4
  %sub31 = sub i32 %50, 1
  %51 = load i32* %next_uframe, align 4
  %and32 = and i32 %51, %sub31
  store i32 %and32, i32* %next_uframe, align 4
  %52 = load i32* %packet, align 4
  %inc33 = add i32 %52, 1
  store i32 %inc33, i32* %packet, align 4
  %53 = load i32* %next_uframe, align 4
  %shr34 = lshr i32 %53, 3
  %54 = load i32* %frame, align 4
  %cmp35 = icmp ne i32 %shr34, %54
  br i1 %cmp35, label %if.then40, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end26
  %55 = load i32* %packet, align 4
  %56 = load %struct.urb** %urb.addr, align 8
  %number_of_packets37 = getelementptr inbounds %struct.urb* %56, i32 0, i32 24
  %57 = load i32* %number_of_packets37, align 4
  %cmp38 = icmp eq i32 %55, %57
  br i1 %cmp38, label %if.then40, label %if.end43

if.then40:                                        ; preds = %lor.lhs.false, %if.end26
  %58 = load %struct.ehci_hcd** %ehci.addr, align 8
  %59 = load i32* %frame, align 4
  %60 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %60, i32 0, i32 21
  %61 = load i32* %periodic_size, align 4
  %sub41 = sub i32 %61, 1
  %and42 = and i32 %59, %sub41
  %62 = load %struct.ehci_itd** %itd, align 8
  call void @itd_link(%struct.ehci_hcd* %58, i32 %and42, %struct.ehci_itd* %62) noredzone
  store %struct.ehci_itd* null, %struct.ehci_itd** %itd, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.then40, %lor.lhs.false
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %63 = load i32* %next_uframe, align 4
  %64 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %next_uframe44 = getelementptr inbounds %struct.ehci_iso_stream* %64, i32 0, i32 6
  store i32 %63, i32* %next_uframe44, align 4
  %65 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %66 = load %struct.ehci_iso_sched** %iso_sched, align 8
  call void @iso_sched_free(%struct.ehci_iso_stream* %65, %struct.ehci_iso_sched* %66) noredzone
  %67 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %68 = bitcast %struct.ehci_iso_stream* %67 to i8*
  %69 = load %struct.urb** %urb.addr, align 8
  %hcpriv45 = getelementptr inbounds %struct.urb* %69, i32 0, i32 1
  store i8* %68, i8** %hcpriv45, align 8
  %70 = load %struct.ehci_hcd** %ehci.addr, align 8
  %isoc_count = getelementptr inbounds %struct.ehci_hcd* %70, i32 0, i32 34
  %71 = load i32* %isoc_count, align 4
  %inc46 = add i32 %71, 1
  store i32 %inc46, i32* %isoc_count, align 4
  %72 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @enable_periodic(%struct.ehci_hcd* %72) noredzone
  ret void
}

define internal void @itd_init(%struct.ehci_hcd* %ehci, %struct.ehci_iso_stream* %stream, %struct.ehci_itd* %itd) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %itd.addr = alloca %struct.ehci_itd*, align 8
  %i = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store %struct.ehci_itd* %itd, %struct.ehci_itd** %itd.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %0, i32 1) noredzone
  %1 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_next = getelementptr inbounds %struct.ehci_itd* %1, i32 0, i32 0
  store i32 %call, i32* %hw_next, align 4
  %2 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %buf0 = getelementptr inbounds %struct.ehci_iso_stream* %2, i32 0, i32 11
  %3 = load i32* %buf0, align 4
  %4 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_bufp = getelementptr inbounds %struct.ehci_itd* %4, i32 0, i32 2
  %arrayidx = getelementptr [7 x i32]* %hw_bufp, i32 0, i64 0
  store i32 %3, i32* %arrayidx, align 4
  %5 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %buf1 = getelementptr inbounds %struct.ehci_iso_stream* %5, i32 0, i32 12
  %6 = load i32* %buf1, align 4
  %7 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_bufp1 = getelementptr inbounds %struct.ehci_itd* %7, i32 0, i32 2
  %arrayidx2 = getelementptr [7 x i32]* %hw_bufp1, i32 0, i64 1
  store i32 %6, i32* %arrayidx2, align 4
  %8 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %buf2 = getelementptr inbounds %struct.ehci_iso_stream* %8, i32 0, i32 13
  %9 = load i32* %buf2, align 4
  %10 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_bufp3 = getelementptr inbounds %struct.ehci_itd* %10, i32 0, i32 2
  %arrayidx4 = getelementptr [7 x i32]* %hw_bufp3, i32 0, i64 2
  store i32 %9, i32* %arrayidx4, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32* %i, align 4
  %cmp = icmp slt i32 %11, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load %struct.ehci_itd** %itd.addr, align 8
  %index = getelementptr inbounds %struct.ehci_itd* %13, i32 0, i32 11
  %arrayidx5 = getelementptr [8 x i32]* %index, i32 0, i64 %idxprom
  store i32 -1, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32* %i, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define internal void @itd_patch(%struct.ehci_hcd* %ehci, %struct.ehci_itd* %itd, %struct.ehci_iso_sched* %iso_sched, i32 %index, i16 zeroext %uframe) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %itd.addr = alloca %struct.ehci_itd*, align 8
  %iso_sched.addr = alloca %struct.ehci_iso_sched*, align 8
  %index.addr = alloca i32, align 4
  %uframe.addr = alloca i16, align 2
  %uf = alloca %struct.ehci_iso_packet*, align 8
  %pg = alloca i32, align 4
  %bufp26 = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_itd* %itd, %struct.ehci_itd** %itd.addr, align 8
  store %struct.ehci_iso_sched* %iso_sched, %struct.ehci_iso_sched** %iso_sched.addr, align 8
  store i32 %index, i32* %index.addr, align 4
  store i16 %uframe, i16* %uframe.addr, align 2
  %0 = load i32* %index.addr, align 4
  %idxprom = zext i32 %0 to i64
  %1 = load %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %packet = getelementptr inbounds %struct.ehci_iso_sched* %1, i32 0, i32 3
  %arrayidx = getelementptr [0 x %struct.ehci_iso_packet]* %packet, i32 0, i64 %idxprom
  store %struct.ehci_iso_packet* %arrayidx, %struct.ehci_iso_packet** %uf, align 8
  %2 = load %struct.ehci_itd** %itd.addr, align 8
  %pg1 = getelementptr inbounds %struct.ehci_itd* %2, i32 0, i32 10
  %3 = load i32* %pg1, align 4
  store i32 %3, i32* %pg, align 4
  %4 = load i16* %uframe.addr, align 2
  %conv = zext i16 %4 to i32
  %and = and i32 %conv, 7
  %conv2 = trunc i32 %and to i16
  store i16 %conv2, i16* %uframe.addr, align 2
  %5 = load i32* %index.addr, align 4
  %6 = load i16* %uframe.addr, align 2
  %idxprom3 = zext i16 %6 to i64
  %7 = load %struct.ehci_itd** %itd.addr, align 8
  %index4 = getelementptr inbounds %struct.ehci_itd* %7, i32 0, i32 11
  %arrayidx5 = getelementptr [8 x i32]* %index4, i32 0, i64 %idxprom3
  store i32 %5, i32* %arrayidx5, align 4
  %8 = load %struct.ehci_iso_packet** %uf, align 8
  %transaction = getelementptr inbounds %struct.ehci_iso_packet* %8, i32 0, i32 1
  %9 = load i32* %transaction, align 4
  %10 = load i16* %uframe.addr, align 2
  %idxprom6 = zext i16 %10 to i64
  %11 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_transaction = getelementptr inbounds %struct.ehci_itd* %11, i32 0, i32 1
  %arrayidx7 = getelementptr [8 x i32]* %hw_transaction, i32 0, i64 %idxprom6
  store i32 %9, i32* %arrayidx7, align 4
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %13 = load i32* %pg, align 4
  %shl = shl i32 %13, 12
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %12, i32 %shl) noredzone
  %14 = load i16* %uframe.addr, align 2
  %idxprom8 = zext i16 %14 to i64
  %15 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_transaction9 = getelementptr inbounds %struct.ehci_itd* %15, i32 0, i32 1
  %arrayidx10 = getelementptr [8 x i32]* %hw_transaction9, i32 0, i64 %idxprom8
  %16 = load i32* %arrayidx10, align 4
  %or = or i32 %16, %call
  store i32 %or, i32* %arrayidx10, align 4
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %18 = load %struct.ehci_iso_packet** %uf, align 8
  %bufp = getelementptr inbounds %struct.ehci_iso_packet* %18, i32 0, i32 0
  %19 = load i64* %bufp, align 8
  %and11 = and i64 %19, 4294967295
  %conv12 = trunc i64 %and11 to i32
  %call13 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %17, i32 %conv12) noredzone
  %20 = load i32* %pg, align 4
  %idxprom14 = zext i32 %20 to i64
  %21 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_bufp = getelementptr inbounds %struct.ehci_itd* %21, i32 0, i32 2
  %arrayidx15 = getelementptr [7 x i32]* %hw_bufp, i32 0, i64 %idxprom14
  %22 = load i32* %arrayidx15, align 4
  %or16 = or i32 %22, %call13
  store i32 %or16, i32* %arrayidx15, align 4
  %23 = load %struct.ehci_hcd** %ehci.addr, align 8
  %24 = load %struct.ehci_iso_packet** %uf, align 8
  %bufp17 = getelementptr inbounds %struct.ehci_iso_packet* %24, i32 0, i32 0
  %25 = load i64* %bufp17, align 8
  %shr = lshr i64 %25, 32
  %conv18 = trunc i64 %shr to i32
  %call19 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %23, i32 %conv18) noredzone
  %26 = load i32* %pg, align 4
  %idxprom20 = zext i32 %26 to i64
  %27 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_bufp_hi = getelementptr inbounds %struct.ehci_itd* %27, i32 0, i32 3
  %arrayidx21 = getelementptr [7 x i32]* %hw_bufp_hi, i32 0, i64 %idxprom20
  %28 = load i32* %arrayidx21, align 4
  %or22 = or i32 %28, %call19
  store i32 %or22, i32* %arrayidx21, align 4
  %29 = load %struct.ehci_iso_packet** %uf, align 8
  %cross = getelementptr inbounds %struct.ehci_iso_packet* %29, i32 0, i32 2
  %30 = load i8* %cross, align 1
  %tobool = icmp ne i8 %30, 0
  %lnot = xor i1 %tobool, true
  %lnot23 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot23 to i32
  %conv24 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv24, i64 0)
  %tobool25 = icmp ne i64 %expval, 0
  br i1 %tobool25, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %31 = load %struct.ehci_iso_packet** %uf, align 8
  %bufp27 = getelementptr inbounds %struct.ehci_iso_packet* %31, i32 0, i32 0
  %32 = load i64* %bufp27, align 8
  %add = add i64 %32, 4096
  store i64 %add, i64* %bufp26, align 8
  %33 = load i32* %pg, align 4
  %inc = add i32 %33, 1
  store i32 %inc, i32* %pg, align 4
  %34 = load %struct.ehci_itd** %itd.addr, align 8
  %pg28 = getelementptr inbounds %struct.ehci_itd* %34, i32 0, i32 10
  store i32 %inc, i32* %pg28, align 4
  %35 = load %struct.ehci_hcd** %ehci.addr, align 8
  %36 = load i64* %bufp26, align 8
  %and29 = and i64 %36, 4294967295
  %conv30 = trunc i64 %and29 to i32
  %call31 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %35, i32 %conv30) noredzone
  %37 = load i32* %pg, align 4
  %idxprom32 = zext i32 %37 to i64
  %38 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_bufp33 = getelementptr inbounds %struct.ehci_itd* %38, i32 0, i32 2
  %arrayidx34 = getelementptr [7 x i32]* %hw_bufp33, i32 0, i64 %idxprom32
  %39 = load i32* %arrayidx34, align 4
  %or35 = or i32 %39, %call31
  store i32 %or35, i32* %arrayidx34, align 4
  %40 = load %struct.ehci_hcd** %ehci.addr, align 8
  %41 = load i64* %bufp26, align 8
  %shr36 = lshr i64 %41, 32
  %conv37 = trunc i64 %shr36 to i32
  %call38 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %40, i32 %conv37) noredzone
  %42 = load i32* %pg, align 4
  %idxprom39 = zext i32 %42 to i64
  %43 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_bufp_hi40 = getelementptr inbounds %struct.ehci_itd* %43, i32 0, i32 3
  %arrayidx41 = getelementptr [7 x i32]* %hw_bufp_hi40, i32 0, i64 %idxprom39
  %44 = load i32* %arrayidx41, align 4
  %or42 = or i32 %44, %call38
  store i32 %or42, i32* %arrayidx41, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define internal void @itd_link(%struct.ehci_hcd* %ehci, i32 %frame, %struct.ehci_itd* %itd) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %frame.addr = alloca i32, align 4
  %itd.addr = alloca %struct.ehci_itd*, align 8
  %prev = alloca %union.ehci_shadow*, align 8
  %hw_p = alloca i32*, align 8
  %here = alloca %union.ehci_shadow, align 8
  %type = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %frame, i32* %frame.addr, align 4
  store %struct.ehci_itd* %itd, %struct.ehci_itd** %itd.addr, align 8
  %0 = load i32* %frame.addr, align 4
  %idxprom = zext i32 %0 to i64
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %pshadow = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 26
  %2 = load %union.ehci_shadow** %pshadow, align 8
  %arrayidx = getelementptr %union.ehci_shadow* %2, i64 %idxprom
  store %union.ehci_shadow* %arrayidx, %union.ehci_shadow** %prev, align 8
  %3 = load i32* %frame.addr, align 4
  %idxprom1 = zext i32 %3 to i64
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 22
  %5 = load i32** %periodic, align 8
  %arrayidx2 = getelementptr i32* %5, i64 %idxprom1
  store i32* %arrayidx2, i32** %hw_p, align 8
  %6 = load %union.ehci_shadow** %prev, align 8
  %7 = bitcast %union.ehci_shadow* %here to i8*
  %8 = bitcast %union.ehci_shadow* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 8, i32 8, i1 false)
  store i32 0, i32* %type, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %ptr = bitcast %union.ehci_shadow* %here to i8**
  %9 = load i8** %ptr, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i32** %hw_p, align 8
  %11 = load i32* %10, align 4
  %12 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %12, i32 6) noredzone
  %and = and i32 %11, %call
  store i32 %and, i32* %type, align 4
  %13 = load i32* %type, align 4
  %14 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call3 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %14, i32 2) noredzone
  %cmp = icmp eq i32 %13, %call3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %16 = load %union.ehci_shadow** %prev, align 8
  %17 = load i32* %type, align 4
  %call4 = call %union.ehci_shadow* @periodic_next_shadow(%struct.ehci_hcd* %15, %union.ehci_shadow* %16, i32 %17) noredzone
  store %union.ehci_shadow* %call4, %union.ehci_shadow** %prev, align 8
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %19 = load i32* %type, align 4
  %call5 = call i32* @shadow_next_periodic(%struct.ehci_hcd* %18, %union.ehci_shadow* %here, i32 %19) noredzone
  store i32* %call5, i32** %hw_p, align 8
  %20 = load %union.ehci_shadow** %prev, align 8
  %21 = bitcast %union.ehci_shadow* %here to i8*
  %22 = bitcast %union.ehci_shadow* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 8, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %23 = load %struct.ehci_itd** %itd.addr, align 8
  %itd_next = getelementptr inbounds %struct.ehci_itd* %23, i32 0, i32 5
  %24 = bitcast %union.ehci_shadow* %itd_next to i8*
  %25 = bitcast %union.ehci_shadow* %here to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 8, i32 8, i1 false)
  %26 = load i32** %hw_p, align 8
  %27 = load i32* %26, align 4
  %28 = load %struct.ehci_itd** %itd.addr, align 8
  %hw_next = getelementptr inbounds %struct.ehci_itd* %28, i32 0, i32 0
  store i32 %27, i32* %hw_next, align 4
  %29 = load %struct.ehci_itd** %itd.addr, align 8
  %30 = load %union.ehci_shadow** %prev, align 8
  %itd6 = bitcast %union.ehci_shadow* %30 to %struct.ehci_itd**
  store %struct.ehci_itd* %29, %struct.ehci_itd** %itd6, align 8
  %31 = load i32* %frame.addr, align 4
  %32 = load %struct.ehci_itd** %itd.addr, align 8
  %frame7 = getelementptr inbounds %struct.ehci_itd* %32, i32 0, i32 9
  store i32 %31, i32* %frame7, align 4
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !17
  %33 = load %struct.ehci_hcd** %ehci.addr, align 8
  %34 = load %struct.ehci_itd** %itd.addr, align 8
  %itd_dma = getelementptr inbounds %struct.ehci_itd* %34, i32 0, i32 4
  %35 = load i64* %itd_dma, align 8
  %conv = trunc i64 %35 to i32
  %call8 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %33, i32 %conv) noredzone
  %36 = load i32** %hw_p, align 8
  store i32 %call8, i32* %36, align 4
  ret void
}

define internal void @itd_sched_init(%struct.ehci_hcd* %ehci, %struct.ehci_iso_sched* %iso_sched, %struct.ehci_iso_stream* %stream, %struct.urb* %urb) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %iso_sched.addr = alloca %struct.ehci_iso_sched*, align 8
  %stream.addr = alloca %struct.ehci_iso_stream*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %i = alloca i32, align 4
  %dma = alloca i64, align 8
  %uframe = alloca %struct.ehci_iso_packet*, align 8
  %length = alloca i32, align 4
  %buf = alloca i64, align 8
  %trans = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_iso_sched* %iso_sched, %struct.ehci_iso_sched** %iso_sched.addr, align 8
  store %struct.ehci_iso_stream* %stream, %struct.ehci_iso_stream** %stream.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  %0 = load %struct.urb** %urb.addr, align 8
  %transfer_dma = getelementptr inbounds %struct.urb* %0, i32 0, i32 15
  %1 = load i64* %transfer_dma, align 8
  store i64 %1, i64* %dma, align 8
  %2 = load %struct.urb** %urb.addr, align 8
  %number_of_packets = getelementptr inbounds %struct.urb* %2, i32 0, i32 24
  %3 = load i32* %number_of_packets, align 4
  %4 = load %struct.ehci_iso_stream** %stream.addr, align 8
  %uperiod = getelementptr inbounds %struct.ehci_iso_stream* %4, i32 0, i32 8
  %5 = load i16* %uperiod, align 2
  %conv = zext i16 %5 to i32
  %mul = mul i32 %3, %conv
  %6 = load %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %span = getelementptr inbounds %struct.ehci_iso_sched* %6, i32 0, i32 1
  store i32 %mul, i32* %span, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32* %i, align 4
  %8 = load %struct.urb** %urb.addr, align 8
  %number_of_packets1 = getelementptr inbounds %struct.urb* %8, i32 0, i32 24
  %9 = load i32* %number_of_packets1, align 4
  %cmp = icmp ult i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32* %i, align 4
  %idxprom = zext i32 %10 to i64
  %11 = load %struct.ehci_iso_sched** %iso_sched.addr, align 8
  %packet = getelementptr inbounds %struct.ehci_iso_sched* %11, i32 0, i32 3
  %arrayidx = getelementptr [0 x %struct.ehci_iso_packet]* %packet, i32 0, i64 %idxprom
  store %struct.ehci_iso_packet* %arrayidx, %struct.ehci_iso_packet** %uframe, align 8
  %12 = load i32* %i, align 4
  %idxprom3 = zext i32 %12 to i64
  %13 = load %struct.urb** %urb.addr, align 8
  %iso_frame_desc = getelementptr inbounds %struct.urb* %13, i32 0, i32 29
  %arrayidx4 = getelementptr [0 x %struct.usb_iso_packet_descriptor]* %iso_frame_desc, i32 0, i64 %idxprom3
  %length5 = getelementptr inbounds %struct.usb_iso_packet_descriptor* %arrayidx4, i32 0, i32 1
  %14 = load i32* %length5, align 4
  store i32 %14, i32* %length, align 4
  %15 = load i64* %dma, align 8
  %16 = load i32* %i, align 4
  %idxprom6 = zext i32 %16 to i64
  %17 = load %struct.urb** %urb.addr, align 8
  %iso_frame_desc7 = getelementptr inbounds %struct.urb* %17, i32 0, i32 29
  %arrayidx8 = getelementptr [0 x %struct.usb_iso_packet_descriptor]* %iso_frame_desc7, i32 0, i64 %idxprom6
  %offset = getelementptr inbounds %struct.usb_iso_packet_descriptor* %arrayidx8, i32 0, i32 0
  %18 = load i32* %offset, align 4
  %conv9 = zext i32 %18 to i64
  %add = add i64 %15, %conv9
  store i64 %add, i64* %buf, align 8
  store i32 -2147483648, i32* %trans, align 4
  %19 = load i64* %buf, align 8
  %and = and i64 %19, 4095
  %20 = load i32* %trans, align 4
  %conv10 = zext i32 %20 to i64
  %or = or i64 %conv10, %and
  %conv11 = trunc i64 %or to i32
  store i32 %conv11, i32* %trans, align 4
  %21 = load i32* %i, align 4
  %add12 = add i32 %21, 1
  %22 = load %struct.urb** %urb.addr, align 8
  %number_of_packets13 = getelementptr inbounds %struct.urb* %22, i32 0, i32 24
  %23 = load i32* %number_of_packets13, align 4
  %cmp14 = icmp eq i32 %add12, %23
  %lnot = xor i1 %cmp14, true
  %lnot16 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot16 to i32
  %conv17 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv17, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %24 = load %struct.urb** %urb.addr, align 8
  %transfer_flags = getelementptr inbounds %struct.urb* %24, i32 0, i32 13
  %25 = load i32* %transfer_flags, align 4
  %and18 = and i32 %25, 128
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %26 = load i32* %trans, align 4
  %or20 = or i32 %26, 32768
  store i32 %or20, i32* %trans, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %27 = load i32* %length, align 4
  %shl = shl i32 %27, 16
  %28 = load i32* %trans, align 4
  %or21 = or i32 %28, %shl
  store i32 %or21, i32* %trans, align 4
  %29 = load %struct.ehci_hcd** %ehci.addr, align 8
  %30 = load i32* %trans, align 4
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %29, i32 %30) noredzone
  %31 = load %struct.ehci_iso_packet** %uframe, align 8
  %transaction = getelementptr inbounds %struct.ehci_iso_packet* %31, i32 0, i32 1
  store i32 %call, i32* %transaction, align 4
  %32 = load i64* %buf, align 8
  %and22 = and i64 %32, -4096
  %33 = load %struct.ehci_iso_packet** %uframe, align 8
  %bufp = getelementptr inbounds %struct.ehci_iso_packet* %33, i32 0, i32 0
  store i64 %and22, i64* %bufp, align 8
  %34 = load i32* %length, align 4
  %conv23 = zext i32 %34 to i64
  %35 = load i64* %buf, align 8
  %add24 = add i64 %35, %conv23
  store i64 %add24, i64* %buf, align 8
  %36 = load %struct.ehci_iso_packet** %uframe, align 8
  %bufp25 = getelementptr inbounds %struct.ehci_iso_packet* %36, i32 0, i32 0
  %37 = load i64* %bufp25, align 8
  %38 = load i64* %buf, align 8
  %and26 = and i64 %38, -4096
  %cmp27 = icmp ne i64 %37, %and26
  %lnot29 = xor i1 %cmp27, true
  %lnot31 = xor i1 %lnot29, true
  %lnot.ext32 = zext i1 %lnot31 to i32
  %conv33 = sext i32 %lnot.ext32 to i64
  %expval34 = call i64 @llvm.expect.i64(i64 %conv33, i64 0)
  %tobool35 = icmp ne i64 %expval34, 0
  br i1 %tobool35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.end
  %39 = load %struct.ehci_iso_packet** %uframe, align 8
  %cross = getelementptr inbounds %struct.ehci_iso_packet* %39, i32 0, i32 2
  store i8 1, i8* %cross, align 1
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end37
  %40 = load i32* %i, align 4
  %inc = add i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define internal %struct.ehci_qh* @qh_append_tds(%struct.ehci_hcd* %ehci, %struct.urb* %urb, %struct.list_head* %qtd_list, i32 %epnum, i8** %ptr) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %qtd_list.addr = alloca %struct.list_head*, align 8
  %epnum.addr = alloca i32, align 4
  %ptr.addr = alloca i8**, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %qh_addr_mask = alloca i32, align 4
  %qtd = alloca %struct.ehci_qtd*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %dummy = alloca %struct.ehci_qtd*, align 8
  %dma = alloca i64, align 8
  %token = alloca i32, align 4
  %__mptr60 = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store %struct.list_head* %qtd_list, %struct.list_head** %qtd_list.addr, align 8
  store i32 %epnum, i32* %epnum.addr, align 4
  store i8** %ptr, i8*** %ptr.addr, align 8
  store %struct.ehci_qh* null, %struct.ehci_qh** %qh, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %0, i32 127) noredzone
  store i32 %call, i32* %qh_addr_mask, align 4
  %1 = load i8*** %ptr.addr, align 8
  %2 = load i8** %1, align 8
  %3 = bitcast i8* %2 to %struct.ehci_qh*
  store %struct.ehci_qh* %3, %struct.ehci_qh** %qh, align 8
  %4 = load %struct.ehci_qh** %qh, align 8
  %cmp = icmp eq %struct.ehci_qh* %4, null
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %6 = load %struct.urb** %urb.addr, align 8
  %call2 = call %struct.ehci_qh* @qh_make(%struct.ehci_hcd* %5, %struct.urb* %6, i32 32) noredzone
  store %struct.ehci_qh* %call2, %struct.ehci_qh** %qh, align 8
  %7 = load %struct.ehci_qh** %qh, align 8
  %8 = bitcast %struct.ehci_qh* %7 to i8*
  %9 = load i8*** %ptr.addr, align 8
  store i8* %8, i8** %9, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.ehci_qh** %qh, align 8
  %cmp3 = icmp ne %struct.ehci_qh* %10, null
  %lnot5 = xor i1 %cmp3, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv9 = sext i32 %lnot.ext8 to i64
  %expval10 = call i64 @llvm.expect.i64(i64 %conv9, i64 1)
  %tobool11 = icmp ne i64 %expval10, 0
  br i1 %tobool11, label %if.then12, label %if.end67

if.then12:                                        ; preds = %if.end
  %11 = load %struct.list_head** %qtd_list.addr, align 8
  %call13 = call i32 @list_empty(%struct.list_head* %11) noredzone
  %tobool14 = icmp ne i32 %call13, 0
  %lnot15 = xor i1 %tobool14, true
  %lnot17 = xor i1 %lnot15, true
  %lnot.ext18 = zext i1 %lnot17 to i32
  %conv19 = sext i32 %lnot.ext18 to i64
  %expval20 = call i64 @llvm.expect.i64(i64 %conv19, i64 0)
  %tobool21 = icmp ne i64 %expval20, 0
  br i1 %tobool21, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.then12
  store %struct.ehci_qtd* null, %struct.ehci_qtd** %qtd, align 8
  br label %if.end23

if.else:                                          ; preds = %if.then12
  %12 = load %struct.list_head** %qtd_list.addr, align 8
  %next = getelementptr inbounds %struct.list_head* %12, i32 0, i32 0
  %13 = load %struct.list_head** %next, align 8
  store %struct.list_head* %13, %struct.list_head** %__mptr, align 8
  %14 = load %struct.list_head** %__mptr, align 8
  %15 = bitcast %struct.list_head* %14 to i8*
  %add.ptr = getelementptr i8* %15, i64 -64
  %16 = bitcast i8* %add.ptr to %struct.ehci_qtd*
  store %struct.ehci_qtd* %16, %struct.ehci_qtd** %qtd, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then22
  %17 = load i32* %epnum.addr, align 4
  %cmp24 = icmp eq i32 %17, 0
  %lnot26 = xor i1 %cmp24, true
  %lnot28 = xor i1 %lnot26, true
  %lnot.ext29 = zext i1 %lnot28 to i32
  %conv30 = sext i32 %lnot.ext29 to i64
  %expval31 = call i64 @llvm.expect.i64(i64 %conv30, i64 0)
  %tobool32 = icmp ne i64 %expval31, 0
  br i1 %tobool32, label %if.then33, label %if.end39

if.then33:                                        ; preds = %if.end23
  %18 = load %struct.urb** %urb.addr, align 8
  %pipe = getelementptr inbounds %struct.urb* %18, i32 0, i32 10
  %19 = load i32* %pipe, align 4
  %shr = lshr i32 %19, 8
  %and = and i32 %shr, 127
  %cmp34 = icmp eq i32 %and, 0
  br i1 %cmp34, label %if.then36, label %if.end38

if.then36:                                        ; preds = %if.then33
  %20 = load i32* %qh_addr_mask, align 4
  %neg = xor i32 %20, -1
  %21 = load %struct.ehci_qh** %qh, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %21, i32 0, i32 0
  %22 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_info1 = getelementptr inbounds %struct.ehci_qh_hw* %22, i32 0, i32 1
  %23 = load i32* %hw_info1, align 4
  %and37 = and i32 %23, %neg
  store i32 %and37, i32* %hw_info1, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %if.then33
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.end23
  %24 = load %struct.ehci_qtd** %qtd, align 8
  %cmp40 = icmp ne %struct.ehci_qtd* %24, null
  %lnot42 = xor i1 %cmp40, true
  %lnot44 = xor i1 %lnot42, true
  %lnot.ext45 = zext i1 %lnot44 to i32
  %conv46 = sext i32 %lnot.ext45 to i64
  %expval47 = call i64 @llvm.expect.i64(i64 %conv46, i64 1)
  %tobool48 = icmp ne i64 %expval47, 0
  br i1 %tobool48, label %if.then49, label %if.end66

if.then49:                                        ; preds = %if.end39
  %25 = load %struct.ehci_qtd** %qtd, align 8
  %hw_token = getelementptr inbounds %struct.ehci_qtd* %25, i32 0, i32 2
  %26 = load i32* %hw_token, align 4
  store i32 %26, i32* %token, align 4
  %27 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call50 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %27, i32 64) noredzone
  %28 = load %struct.ehci_qtd** %qtd, align 8
  %hw_token51 = getelementptr inbounds %struct.ehci_qtd* %28, i32 0, i32 2
  store i32 %call50, i32* %hw_token51, align 4
  %29 = load %struct.ehci_qh** %qh, align 8
  %dummy52 = getelementptr inbounds %struct.ehci_qh* %29, i32 0, i32 5
  %30 = load %struct.ehci_qtd** %dummy52, align 8
  store %struct.ehci_qtd* %30, %struct.ehci_qtd** %dummy, align 8
  %31 = load %struct.ehci_qtd** %dummy, align 8
  %qtd_dma = getelementptr inbounds %struct.ehci_qtd* %31, i32 0, i32 5
  %32 = load i64* %qtd_dma, align 8
  store i64 %32, i64* %dma, align 8
  %33 = load %struct.ehci_qtd** %dummy, align 8
  %34 = load %struct.ehci_qtd** %qtd, align 8
  %35 = bitcast %struct.ehci_qtd* %33 to i8*
  %36 = bitcast %struct.ehci_qtd* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 96, i32 32, i1 false)
  %37 = load i64* %dma, align 8
  %38 = load %struct.ehci_qtd** %dummy, align 8
  %qtd_dma53 = getelementptr inbounds %struct.ehci_qtd* %38, i32 0, i32 5
  store i64 %37, i64* %qtd_dma53, align 8
  %39 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list54 = getelementptr inbounds %struct.ehci_qtd* %39, i32 0, i32 6
  call void @list_del(%struct.list_head* %qtd_list54) noredzone
  %40 = load %struct.ehci_qtd** %dummy, align 8
  %qtd_list55 = getelementptr inbounds %struct.ehci_qtd* %40, i32 0, i32 6
  %41 = load %struct.list_head** %qtd_list.addr, align 8
  call void @list_add(%struct.list_head* %qtd_list55, %struct.list_head* %41) noredzone
  %42 = load %struct.list_head** %qtd_list.addr, align 8
  %43 = load %struct.ehci_qh** %qh, align 8
  %qtd_list56 = getelementptr inbounds %struct.ehci_qh* %43, i32 0, i32 3
  call void @list_splice_tail(%struct.list_head* %42, %struct.list_head* %qtd_list56) noredzone
  %44 = load %struct.ehci_hcd** %ehci.addr, align 8
  %45 = load %struct.ehci_qtd** %qtd, align 8
  %46 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_dma57 = getelementptr inbounds %struct.ehci_qtd* %46, i32 0, i32 5
  %47 = load i64* %qtd_dma57, align 8
  call void @ehci_qtd_init(%struct.ehci_hcd* %44, %struct.ehci_qtd* %45, i64 %47) noredzone
  %48 = load %struct.ehci_qtd** %qtd, align 8
  %49 = load %struct.ehci_qh** %qh, align 8
  %dummy58 = getelementptr inbounds %struct.ehci_qh* %49, i32 0, i32 5
  store %struct.ehci_qtd* %48, %struct.ehci_qtd** %dummy58, align 8
  %50 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_dma59 = getelementptr inbounds %struct.ehci_qtd* %50, i32 0, i32 5
  %51 = load i64* %qtd_dma59, align 8
  store i64 %51, i64* %dma, align 8
  %52 = load %struct.ehci_qh** %qh, align 8
  %qtd_list61 = getelementptr inbounds %struct.ehci_qh* %52, i32 0, i32 3
  %prev = getelementptr inbounds %struct.list_head* %qtd_list61, i32 0, i32 1
  %53 = load %struct.list_head** %prev, align 8
  store %struct.list_head* %53, %struct.list_head** %__mptr60, align 8
  %54 = load %struct.list_head** %__mptr60, align 8
  %55 = bitcast %struct.list_head* %54 to i8*
  %add.ptr62 = getelementptr i8* %55, i64 -64
  %56 = bitcast i8* %add.ptr62 to %struct.ehci_qtd*
  store %struct.ehci_qtd* %56, %struct.ehci_qtd** %qtd, align 8
  %57 = load %struct.ehci_hcd** %ehci.addr, align 8
  %58 = load i64* %dma, align 8
  %conv63 = trunc i64 %58 to i32
  %call64 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %57, i32 %conv63) noredzone
  %59 = load %struct.ehci_qtd** %qtd, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qtd* %59, i32 0, i32 0
  store i32 %call64, i32* %hw_next, align 4
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !18
  %60 = load i32* %token, align 4
  %61 = load %struct.ehci_qtd** %dummy, align 8
  %hw_token65 = getelementptr inbounds %struct.ehci_qtd* %61, i32 0, i32 2
  store i32 %60, i32* %hw_token65, align 4
  %62 = load %struct.ehci_qh** %qh, align 8
  %63 = bitcast %struct.ehci_qh* %62 to i8*
  %64 = load %struct.urb** %urb.addr, align 8
  %hcpriv = getelementptr inbounds %struct.urb* %64, i32 0, i32 1
  store i8* %63, i8** %hcpriv, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.then49, %if.end39
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end
  %65 = load %struct.ehci_qh** %qh, align 8
  ret %struct.ehci_qh* %65
}

define internal void @qtd_list_free(%struct.ehci_hcd* %ehci, %struct.urb* %urb, %struct.list_head* %qtd_list) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %qtd_list.addr = alloca %struct.list_head*, align 8
  %entry1 = alloca %struct.list_head*, align 8
  %temp = alloca %struct.list_head*, align 8
  %qtd = alloca %struct.ehci_qtd*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store %struct.list_head* %qtd_list, %struct.list_head** %qtd_list.addr, align 8
  %0 = load %struct.list_head** %qtd_list.addr, align 8
  %next = getelementptr inbounds %struct.list_head* %0, i32 0, i32 0
  %1 = load %struct.list_head** %next, align 8
  store %struct.list_head* %1, %struct.list_head** %entry1, align 8
  %2 = load %struct.list_head** %entry1, align 8
  %next2 = getelementptr inbounds %struct.list_head* %2, i32 0, i32 0
  %3 = load %struct.list_head** %next2, align 8
  store %struct.list_head* %3, %struct.list_head** %temp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.list_head** %entry1, align 8
  %5 = load %struct.list_head** %qtd_list.addr, align 8
  %cmp = icmp ne %struct.list_head* %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.list_head** %entry1, align 8
  store %struct.list_head* %6, %struct.list_head** %__mptr, align 8
  %7 = load %struct.list_head** %__mptr, align 8
  %8 = bitcast %struct.list_head* %7 to i8*
  %add.ptr = getelementptr i8* %8, i64 -64
  %9 = bitcast i8* %add.ptr to %struct.ehci_qtd*
  store %struct.ehci_qtd* %9, %struct.ehci_qtd** %qtd, align 8
  %10 = load %struct.ehci_qtd** %qtd, align 8
  %qtd_list3 = getelementptr inbounds %struct.ehci_qtd* %10, i32 0, i32 6
  call void @list_del(%struct.list_head* %qtd_list3) noredzone
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %12 = load %struct.ehci_qtd** %qtd, align 8
  call void @ehci_qtd_free(%struct.ehci_hcd* %11, %struct.ehci_qtd* %12) noredzone
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load %struct.list_head** %temp, align 8
  store %struct.list_head* %13, %struct.list_head** %entry1, align 8
  %14 = load %struct.list_head** %entry1, align 8
  %next4 = getelementptr inbounds %struct.list_head* %14, i32 0, i32 0
  %15 = load %struct.list_head** %next4, align 8
  store %struct.list_head* %15, %struct.list_head** %temp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define internal %struct.ehci_qh* @qh_make(%struct.ehci_hcd* %ehci, %struct.urb* %urb, i32 %flags) nounwind noredzone {
entry:
  %retval = alloca %struct.ehci_qh*, align 8
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %urb.addr = alloca %struct.urb*, align 8
  %flags.addr = alloca i32, align 4
  %qh = alloca %struct.ehci_qh*, align 8
  %info1 = alloca i32, align 4
  %info2 = alloca i32, align 4
  %is_input = alloca i32, align 4
  %type = alloca i32, align 4
  %maxp = alloca i32, align 4
  %tt = alloca %struct.usb_tt*, align 8
  %hw = alloca %struct.ehci_qh_hw*, align 8
  %tmp = alloca i32, align 4
  %__min1 = alloca i32, align 4
  %__min2 = alloca i32, align 4
  %__min164 = alloca i32, align 4
  %__min266 = alloca i32, align 4
  %think_time = alloca i32, align 4
  %__min1141 = alloca i32, align 4
  %__min2143 = alloca i32, align 4
  %__min1158 = alloca i32, align 4
  %__min2160 = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.urb* %urb, %struct.urb** %urb.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load i32* %flags.addr, align 4
  %call = call %struct.ehci_qh* @ehci_qh_alloc(%struct.ehci_hcd* %0, i32 %1) noredzone
  store %struct.ehci_qh* %call, %struct.ehci_qh** %qh, align 8
  store i32 0, i32* %info1, align 4
  store i32 0, i32* %info2, align 4
  store i32 0, i32* %maxp, align 4
  %2 = load %struct.urb** %urb.addr, align 8
  %dev = getelementptr inbounds %struct.urb* %2, i32 0, i32 8
  %3 = load %struct.usb_device** %dev, align 8
  %tt1 = getelementptr inbounds %struct.usb_device* %3, i32 0, i32 5
  %4 = load %struct.usb_tt** %tt1, align 8
  store %struct.usb_tt* %4, %struct.usb_tt** %tt, align 8
  %5 = load %struct.ehci_qh** %qh, align 8
  %tobool = icmp ne %struct.ehci_qh* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %6 = load %struct.ehci_qh** %qh, align 8
  store %struct.ehci_qh* %6, %struct.ehci_qh** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.urb** %urb.addr, align 8
  %pipe = getelementptr inbounds %struct.urb* %7, i32 0, i32 10
  %8 = load i32* %pipe, align 4
  %shr = lshr i32 %8, 15
  %and = and i32 %shr, 15
  %shl = shl i32 %and, 8
  %9 = load i32* %info1, align 4
  %or = or i32 %9, %shl
  store i32 %or, i32* %info1, align 4
  %10 = load %struct.urb** %urb.addr, align 8
  %pipe2 = getelementptr inbounds %struct.urb* %10, i32 0, i32 10
  %11 = load i32* %pipe2, align 4
  %shr3 = lshr i32 %11, 8
  %and4 = and i32 %shr3, 127
  %shl5 = shl i32 %and4, 0
  %12 = load i32* %info1, align 4
  %or6 = or i32 %12, %shl5
  store i32 %or6, i32* %info1, align 4
  %13 = load %struct.urb** %urb.addr, align 8
  %pipe7 = getelementptr inbounds %struct.urb* %13, i32 0, i32 10
  %14 = load i32* %pipe7, align 4
  %and8 = and i32 %14, 128
  store i32 %and8, i32* %is_input, align 4
  %15 = load %struct.urb** %urb.addr, align 8
  %pipe9 = getelementptr inbounds %struct.urb* %15, i32 0, i32 10
  %16 = load i32* %pipe9, align 4
  %shr10 = lshr i32 %16, 30
  %and11 = and i32 %shr10, 3
  store i32 %and11, i32* %type, align 4
  %17 = load %struct.urb** %urb.addr, align 8
  %dev12 = getelementptr inbounds %struct.urb* %17, i32 0, i32 8
  %18 = load %struct.usb_device** %dev12, align 8
  %19 = load %struct.urb** %urb.addr, align 8
  %pipe13 = getelementptr inbounds %struct.urb* %19, i32 0, i32 10
  %20 = load i32* %pipe13, align 4
  %21 = load i32* %is_input, align 4
  %tobool14 = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool14, true
  %lnot.ext = zext i1 %lnot to i32
  %call15 = call zeroext i16 @usb_maxpacket(%struct.usb_device* %18, i32 %20, i32 %lnot.ext) noredzone
  %conv = zext i16 %call15 to i32
  store i32 %conv, i32* %maxp, align 4
  %22 = load i32* %maxp, align 4
  %and16 = and i32 %22, 2047
  %cmp = icmp sgt i32 %and16, 1024
  br i1 %cmp, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end
  br label %done

if.end19:                                         ; preds = %if.end
  %23 = load i32* %type, align 4
  %cmp20 = icmp eq i32 %23, 1
  br i1 %cmp20, label %if.then22, label %if.end179

if.then22:                                        ; preds = %if.end19
  %24 = load i32* %is_input, align 4
  %25 = load i32* %maxp, align 4
  %shr23 = ashr i32 %25, 11
  %and24 = and i32 %shr23, 3
  %add = add i32 1, %and24
  %26 = load i32* %maxp, align 4
  %and25 = and i32 %26, 2047
  %mul = mul i32 %add, %and25
  %call26 = call i64 @usb_calc_bus_time(i32 3, i32 %24, i32 0, i32 %mul) noredzone
  %add27 = add i64 %call26, 1000
  %sub = sub i64 %add27, 1
  %div = sdiv i64 %sub, 1000
  %conv28 = trunc i64 %div to i8
  %27 = load %struct.ehci_qh** %qh, align 8
  %ps = getelementptr inbounds %struct.ehci_qh* %27, i32 0, i32 7
  %usecs = getelementptr inbounds %struct.ehci_per_sched* %ps, i32 0, i32 9
  store i8 %conv28, i8* %usecs, align 1
  %28 = load %struct.ehci_qh** %qh, align 8
  %ps29 = getelementptr inbounds %struct.ehci_qh* %28, i32 0, i32 7
  %phase = getelementptr inbounds %struct.ehci_per_sched* %ps29, i32 0, i32 6
  store i16 29999, i16* %phase, align 2
  %29 = load %struct.urb** %urb.addr, align 8
  %dev30 = getelementptr inbounds %struct.urb* %29, i32 0, i32 8
  %30 = load %struct.usb_device** %dev30, align 8
  %speed = getelementptr inbounds %struct.usb_device* %30, i32 0, i32 4
  %31 = load i32* %speed, align 4
  %cmp31 = icmp eq i32 %31, 3
  br i1 %cmp31, label %if.then33, label %if.else82

if.then33:                                        ; preds = %if.then22
  %32 = load %struct.ehci_qh** %qh, align 8
  %ps34 = getelementptr inbounds %struct.ehci_qh* %32, i32 0, i32 7
  %c_usecs = getelementptr inbounds %struct.ehci_per_sched* %ps34, i32 0, i32 10
  store i8 0, i8* %c_usecs, align 1
  %33 = load %struct.ehci_qh** %qh, align 8
  %gap_uf = getelementptr inbounds %struct.ehci_qh* %33, i32 0, i32 11
  store i8 0, i8* %gap_uf, align 1
  %34 = load %struct.urb** %urb.addr, align 8
  %interval = getelementptr inbounds %struct.urb* %34, i32 0, i32 25
  %35 = load i32* %interval, align 4
  %cmp35 = icmp sgt i32 %35, 1
  br i1 %cmp35, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then33
  %36 = load %struct.urb** %urb.addr, align 8
  %interval37 = getelementptr inbounds %struct.urb* %36, i32 0, i32 25
  %37 = load i32* %interval37, align 4
  %cmp38 = icmp slt i32 %37, 8
  br i1 %cmp38, label %if.then40, label %if.else

if.then40:                                        ; preds = %land.lhs.true
  %38 = load %struct.urb** %urb.addr, align 8
  %interval41 = getelementptr inbounds %struct.urb* %38, i32 0, i32 25
  store i32 1, i32* %interval41, align 4
  br label %if.end51

if.else:                                          ; preds = %land.lhs.true, %if.then33
  %39 = load %struct.urb** %urb.addr, align 8
  %interval42 = getelementptr inbounds %struct.urb* %39, i32 0, i32 25
  %40 = load i32* %interval42, align 4
  %41 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size = getelementptr inbounds %struct.ehci_hcd* %41, i32 0, i32 21
  %42 = load i32* %periodic_size, align 4
  %shl43 = shl i32 %42, 3
  %cmp44 = icmp ugt i32 %40, %shl43
  br i1 %cmp44, label %if.then46, label %if.end50

if.then46:                                        ; preds = %if.else
  %43 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size47 = getelementptr inbounds %struct.ehci_hcd* %43, i32 0, i32 21
  %44 = load i32* %periodic_size47, align 4
  %shl48 = shl i32 %44, 3
  %45 = load %struct.urb** %urb.addr, align 8
  %interval49 = getelementptr inbounds %struct.urb* %45, i32 0, i32 25
  store i32 %shl48, i32* %interval49, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then46, %if.else
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then40
  %46 = load %struct.urb** %urb.addr, align 8
  %interval52 = getelementptr inbounds %struct.urb* %46, i32 0, i32 25
  %47 = load i32* %interval52, align 4
  %shr53 = ashr i32 %47, 3
  %conv54 = trunc i32 %shr53 to i16
  %48 = load %struct.ehci_qh** %qh, align 8
  %ps55 = getelementptr inbounds %struct.ehci_qh* %48, i32 0, i32 7
  %period = getelementptr inbounds %struct.ehci_per_sched* %ps55, i32 0, i32 5
  store i16 %conv54, i16* %period, align 2
  store i32 64, i32* %__min1, align 4
  %49 = load %struct.urb** %urb.addr, align 8
  %ep = getelementptr inbounds %struct.urb* %49, i32 0, i32 9
  %50 = load %struct.usb_host_endpoint** %ep, align 8
  %desc = getelementptr inbounds %struct.usb_host_endpoint* %50, i32 0, i32 0
  %bInterval = getelementptr inbounds %struct.usb_endpoint_descriptor* %desc, i32 0, i32 5
  %51 = load i8* %bInterval, align 1
  %conv58 = zext i8 %51 to i32
  %sub59 = sub i32 %conv58, 1
  %shl60 = shl i32 1, %sub59
  store i32 %shl60, i32* %__min2, align 4
  %52 = load i32* %__min1, align 4
  %53 = load i32* %__min2, align 4
  %cmp61 = icmp ult i32 %52, %53
  br i1 %cmp61, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end51
  %54 = load i32* %__min1, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end51
  %55 = load i32* %__min2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %54, %cond.true ], [ %55, %cond.false ]
  store i32 %cond, i32* %tmp, align 4
  %56 = load i32* %tmp, align 4
  store i32 %56, i32* %__min164, align 4
  %57 = load %struct.urb** %urb.addr, align 8
  %interval67 = getelementptr inbounds %struct.urb* %57, i32 0, i32 25
  %58 = load i32* %interval67, align 4
  store i32 %58, i32* %__min266, align 4
  %59 = load i32* %__min164, align 4
  %60 = load i32* %__min266, align 4
  %cmp68 = icmp ult i32 %59, %60
  br i1 %cmp68, label %cond.true70, label %cond.false71

cond.true70:                                      ; preds = %cond.end
  %61 = load i32* %__min164, align 4
  br label %cond.end72

cond.false71:                                     ; preds = %cond.end
  %62 = load i32* %__min266, align 4
  br label %cond.end72

cond.end72:                                       ; preds = %cond.false71, %cond.true70
  %cond73 = phi i32 [ %61, %cond.true70 ], [ %62, %cond.false71 ]
  %conv74 = trunc i32 %cond73 to i8
  %63 = load %struct.ehci_qh** %qh, align 8
  %ps75 = getelementptr inbounds %struct.ehci_qh* %63, i32 0, i32 7
  %bw_uperiod = getelementptr inbounds %struct.ehci_per_sched* %ps75, i32 0, i32 11
  store i8 %conv74, i8* %bw_uperiod, align 1
  %64 = load %struct.ehci_qh** %qh, align 8
  %ps76 = getelementptr inbounds %struct.ehci_qh* %64, i32 0, i32 7
  %bw_uperiod77 = getelementptr inbounds %struct.ehci_per_sched* %ps76, i32 0, i32 11
  %65 = load i8* %bw_uperiod77, align 1
  %conv78 = zext i8 %65 to i32
  %shr79 = ashr i32 %conv78, 3
  %conv80 = trunc i32 %shr79 to i8
  %66 = load %struct.ehci_qh** %qh, align 8
  %ps81 = getelementptr inbounds %struct.ehci_qh* %66, i32 0, i32 7
  %bw_period = getelementptr inbounds %struct.ehci_per_sched* %ps81, i32 0, i32 12
  store i8 %conv80, i8* %bw_period, align 1
  br label %if.end178

if.else82:                                        ; preds = %if.then22
  %67 = load %struct.urb** %urb.addr, align 8
  %dev84 = getelementptr inbounds %struct.urb* %67, i32 0, i32 8
  %68 = load %struct.usb_device** %dev84, align 8
  %speed85 = getelementptr inbounds %struct.usb_device* %68, i32 0, i32 4
  %69 = load i32* %speed85, align 4
  %70 = load i32* %is_input, align 4
  %71 = load i32* %maxp, align 4
  %call86 = call i64 @usb_calc_bus_time(i32 %69, i32 %70, i32 0, i32 %71) noredzone
  %div87 = sdiv i64 %call86, 125000
  %add88 = add i64 1, %div87
  %conv89 = trunc i64 %add88 to i8
  %72 = load %struct.ehci_qh** %qh, align 8
  %gap_uf90 = getelementptr inbounds %struct.ehci_qh* %72, i32 0, i32 11
  store i8 %conv89, i8* %gap_uf90, align 1
  %73 = load i32* %is_input, align 4
  %tobool91 = icmp ne i32 %73, 0
  br i1 %tobool91, label %if.then92, label %if.else102

if.then92:                                        ; preds = %if.else82
  %74 = load %struct.ehci_qh** %qh, align 8
  %ps93 = getelementptr inbounds %struct.ehci_qh* %74, i32 0, i32 7
  %usecs94 = getelementptr inbounds %struct.ehci_per_sched* %ps93, i32 0, i32 9
  %75 = load i8* %usecs94, align 1
  %conv95 = zext i8 %75 to i64
  %add96 = add i64 %conv95, 1
  %conv97 = trunc i64 %add96 to i8
  %76 = load %struct.ehci_qh** %qh, align 8
  %ps98 = getelementptr inbounds %struct.ehci_qh* %76, i32 0, i32 7
  %c_usecs99 = getelementptr inbounds %struct.ehci_per_sched* %ps98, i32 0, i32 10
  store i8 %conv97, i8* %c_usecs99, align 1
  %77 = load %struct.ehci_qh** %qh, align 8
  %ps100 = getelementptr inbounds %struct.ehci_qh* %77, i32 0, i32 7
  %usecs101 = getelementptr inbounds %struct.ehci_per_sched* %ps100, i32 0, i32 9
  store i8 1, i8* %usecs101, align 1
  br label %if.end110

if.else102:                                       ; preds = %if.else82
  %78 = load %struct.ehci_qh** %qh, align 8
  %ps103 = getelementptr inbounds %struct.ehci_qh* %78, i32 0, i32 7
  %usecs104 = getelementptr inbounds %struct.ehci_per_sched* %ps103, i32 0, i32 9
  %79 = load i8* %usecs104, align 1
  %conv105 = zext i8 %79 to i64
  %add106 = add i64 %conv105, 1
  %conv107 = trunc i64 %add106 to i8
  store i8 %conv107, i8* %usecs104, align 1
  %80 = load %struct.ehci_qh** %qh, align 8
  %ps108 = getelementptr inbounds %struct.ehci_qh* %80, i32 0, i32 7
  %c_usecs109 = getelementptr inbounds %struct.ehci_per_sched* %ps108, i32 0, i32 10
  store i8 1, i8* %c_usecs109, align 1
  br label %if.end110

if.end110:                                        ; preds = %if.else102, %if.then92
  %81 = load %struct.usb_tt** %tt, align 8
  %tobool111 = icmp ne %struct.usb_tt* %81, null
  br i1 %tobool111, label %cond.true112, label %cond.false114

cond.true112:                                     ; preds = %if.end110
  %82 = load %struct.usb_tt** %tt, align 8
  %think_time113 = getelementptr inbounds %struct.usb_tt* %82, i32 0, i32 2
  %83 = load i32* %think_time113, align 4
  br label %cond.end115

cond.false114:                                    ; preds = %if.end110
  br label %cond.end115

cond.end115:                                      ; preds = %cond.false114, %cond.true112
  %cond116 = phi i32 [ %83, %cond.true112 ], [ 0, %cond.false114 ]
  store i32 %cond116, i32* %think_time, align 4
  %84 = load i32* %think_time, align 4
  %conv117 = sext i32 %84 to i64
  %85 = load %struct.urb** %urb.addr, align 8
  %dev118 = getelementptr inbounds %struct.urb* %85, i32 0, i32 8
  %86 = load %struct.usb_device** %dev118, align 8
  %speed119 = getelementptr inbounds %struct.usb_device* %86, i32 0, i32 4
  %87 = load i32* %speed119, align 4
  %88 = load i32* %is_input, align 4
  %89 = load i32* %maxp, align 4
  %and120 = and i32 %89, 2047
  %call121 = call i64 @usb_calc_bus_time(i32 %87, i32 %88, i32 0, i32 %and120) noredzone
  %add122 = add i64 %conv117, %call121
  %add123 = add i64 %add122, 1000
  %sub124 = sub i64 %add123, 1
  %div125 = sdiv i64 %sub124, 1000
  %conv126 = trunc i64 %div125 to i16
  %90 = load %struct.ehci_qh** %qh, align 8
  %ps127 = getelementptr inbounds %struct.ehci_qh* %90, i32 0, i32 7
  %tt_usecs = getelementptr inbounds %struct.ehci_per_sched* %ps127, i32 0, i32 3
  store i16 %conv126, i16* %tt_usecs, align 2
  %91 = load %struct.urb** %urb.addr, align 8
  %interval128 = getelementptr inbounds %struct.urb* %91, i32 0, i32 25
  %92 = load i32* %interval128, align 4
  %93 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size129 = getelementptr inbounds %struct.ehci_hcd* %93, i32 0, i32 21
  %94 = load i32* %periodic_size129, align 4
  %cmp130 = icmp ugt i32 %92, %94
  br i1 %cmp130, label %if.then132, label %if.end135

if.then132:                                       ; preds = %cond.end115
  %95 = load %struct.ehci_hcd** %ehci.addr, align 8
  %periodic_size133 = getelementptr inbounds %struct.ehci_hcd* %95, i32 0, i32 21
  %96 = load i32* %periodic_size133, align 4
  %97 = load %struct.urb** %urb.addr, align 8
  %interval134 = getelementptr inbounds %struct.urb* %97, i32 0, i32 25
  store i32 %96, i32* %interval134, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.then132, %cond.end115
  %98 = load %struct.urb** %urb.addr, align 8
  %interval136 = getelementptr inbounds %struct.urb* %98, i32 0, i32 25
  %99 = load i32* %interval136, align 4
  %conv137 = trunc i32 %99 to i16
  %100 = load %struct.ehci_qh** %qh, align 8
  %ps138 = getelementptr inbounds %struct.ehci_qh* %100, i32 0, i32 7
  %period139 = getelementptr inbounds %struct.ehci_per_sched* %ps138, i32 0, i32 5
  store i16 %conv137, i16* %period139, align 2
  store i32 8, i32* %__min1141, align 4
  %101 = load %struct.urb** %urb.addr, align 8
  %ep144 = getelementptr inbounds %struct.urb* %101, i32 0, i32 9
  %102 = load %struct.usb_host_endpoint** %ep144, align 8
  %desc145 = getelementptr inbounds %struct.usb_host_endpoint* %102, i32 0, i32 0
  %bInterval146 = getelementptr inbounds %struct.usb_endpoint_descriptor* %desc145, i32 0, i32 5
  %103 = load i8* %bInterval146, align 1
  %conv147 = zext i8 %103 to i32
  store i32 %conv147, i32* %__min2143, align 4
  %104 = load i32* %__min1141, align 4
  %105 = load i32* %__min2143, align 4
  %cmp148 = icmp ult i32 %104, %105
  br i1 %cmp148, label %cond.true150, label %cond.false151

cond.true150:                                     ; preds = %if.end135
  %106 = load i32* %__min1141, align 4
  br label %cond.end152

cond.false151:                                    ; preds = %if.end135
  %107 = load i32* %__min2143, align 4
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false151, %cond.true150
  %cond153 = phi i32 [ %106, %cond.true150 ], [ %107, %cond.false151 ]
  store i32 %cond153, i32* %tmp, align 4
  %108 = load i32* %tmp, align 4
  %conv154 = zext i32 %108 to i64
  %call155 = call i64 @__rounddown_pow_of_two(i64 %conv154) nounwind readnone noredzone
  %conv156 = trunc i64 %call155 to i32
  store i32 %conv156, i32* %tmp, align 4
  %109 = load i32* %tmp, align 4
  store i32 %109, i32* %__min1158, align 4
  %110 = load %struct.urb** %urb.addr, align 8
  %interval161 = getelementptr inbounds %struct.urb* %110, i32 0, i32 25
  %111 = load i32* %interval161, align 4
  store i32 %111, i32* %__min2160, align 4
  %112 = load i32* %__min1158, align 4
  %113 = load i32* %__min2160, align 4
  %cmp162 = icmp ult i32 %112, %113
  br i1 %cmp162, label %cond.true164, label %cond.false165

cond.true164:                                     ; preds = %cond.end152
  %114 = load i32* %__min1158, align 4
  br label %cond.end166

cond.false165:                                    ; preds = %cond.end152
  %115 = load i32* %__min2160, align 4
  br label %cond.end166

cond.end166:                                      ; preds = %cond.false165, %cond.true164
  %cond167 = phi i32 [ %114, %cond.true164 ], [ %115, %cond.false165 ]
  %conv168 = trunc i32 %cond167 to i8
  %116 = load %struct.ehci_qh** %qh, align 8
  %ps169 = getelementptr inbounds %struct.ehci_qh* %116, i32 0, i32 7
  %bw_period170 = getelementptr inbounds %struct.ehci_per_sched* %ps169, i32 0, i32 12
  store i8 %conv168, i8* %bw_period170, align 1
  %117 = load %struct.ehci_qh** %qh, align 8
  %ps171 = getelementptr inbounds %struct.ehci_qh* %117, i32 0, i32 7
  %bw_period172 = getelementptr inbounds %struct.ehci_per_sched* %ps171, i32 0, i32 12
  %118 = load i8* %bw_period172, align 1
  %conv173 = zext i8 %118 to i32
  %shl174 = shl i32 %conv173, 3
  %conv175 = trunc i32 %shl174 to i8
  %119 = load %struct.ehci_qh** %qh, align 8
  %ps176 = getelementptr inbounds %struct.ehci_qh* %119, i32 0, i32 7
  %bw_uperiod177 = getelementptr inbounds %struct.ehci_per_sched* %ps176, i32 0, i32 11
  store i8 %conv175, i8* %bw_uperiod177, align 1
  br label %if.end178

if.end178:                                        ; preds = %cond.end166, %cond.end72
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.end19
  %120 = load %struct.urb** %urb.addr, align 8
  %dev180 = getelementptr inbounds %struct.urb* %120, i32 0, i32 8
  %121 = load %struct.usb_device** %dev180, align 8
  %122 = load %struct.ehci_qh** %qh, align 8
  %ps181 = getelementptr inbounds %struct.ehci_qh* %122, i32 0, i32 7
  %udev = getelementptr inbounds %struct.ehci_per_sched* %ps181, i32 0, i32 0
  store %struct.usb_device* %121, %struct.usb_device** %udev, align 8
  %123 = load %struct.urb** %urb.addr, align 8
  %ep182 = getelementptr inbounds %struct.urb* %123, i32 0, i32 9
  %124 = load %struct.usb_host_endpoint** %ep182, align 8
  %125 = load %struct.ehci_qh** %qh, align 8
  %ps183 = getelementptr inbounds %struct.ehci_qh* %125, i32 0, i32 7
  %ep184 = getelementptr inbounds %struct.ehci_per_sched* %ps183, i32 0, i32 1
  store %struct.usb_host_endpoint* %124, %struct.usb_host_endpoint** %ep184, align 8
  %126 = load %struct.urb** %urb.addr, align 8
  %dev185 = getelementptr inbounds %struct.urb* %126, i32 0, i32 8
  %127 = load %struct.usb_device** %dev185, align 8
  %speed186 = getelementptr inbounds %struct.usb_device* %127, i32 0, i32 4
  %128 = load i32* %speed186, align 4
  switch i32 %128, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb188
    i32 3, label %sw.bb215
  ]

sw.bb:                                            ; preds = %if.end179
  %129 = load i32* %info1, align 4
  %or187 = or i32 %129, 4096
  store i32 %or187, i32* %info1, align 4
  br label %sw.bb188

sw.bb188:                                         ; preds = %if.end179, %sw.bb
  %130 = load i32* %type, align 4
  %cmp189 = icmp ne i32 %130, 1
  br i1 %cmp189, label %if.then191, label %if.end192

if.then191:                                       ; preds = %sw.bb188
  %131 = load i32* %info1, align 4
  store i32 %131, i32* %info1, align 4
  br label %if.end192

if.end192:                                        ; preds = %if.then191, %sw.bb188
  %132 = load i32* %type, align 4
  %cmp193 = icmp eq i32 %132, 2
  br i1 %cmp193, label %if.then195, label %if.end198

if.then195:                                       ; preds = %if.end192
  %133 = load i32* %info1, align 4
  %or196 = or i32 %133, 134217728
  store i32 %or196, i32* %info1, align 4
  %134 = load i32* %info1, align 4
  %or197 = or i32 %134, 16384
  store i32 %or197, i32* %info1, align 4
  br label %if.end198

if.end198:                                        ; preds = %if.then195, %if.end192
  %135 = load i32* %maxp, align 4
  %shl199 = shl i32 %135, 16
  %136 = load i32* %info1, align 4
  %or200 = or i32 %136, %shl199
  store i32 %or200, i32* %info1, align 4
  %137 = load i32* %info2, align 4
  %or201 = or i32 %137, 1073741824
  store i32 %or201, i32* %info2, align 4
  %138 = load %struct.urb** %urb.addr, align 8
  %dev202 = getelementptr inbounds %struct.urb* %138, i32 0, i32 8
  %139 = load %struct.usb_device** %dev202, align 8
  %ttport = getelementptr inbounds %struct.usb_device* %139, i32 0, i32 6
  %140 = load i32* %ttport, align 4
  %shl203 = shl i32 %140, 23
  %141 = load i32* %info2, align 4
  %or204 = or i32 %141, %shl203
  store i32 %or204, i32* %info2, align 4
  %142 = load %struct.usb_tt** %tt, align 8
  %tobool205 = icmp ne %struct.usb_tt* %142, null
  br i1 %tobool205, label %land.lhs.true206, label %if.end214

land.lhs.true206:                                 ; preds = %if.end198
  %143 = load %struct.usb_tt** %tt, align 8
  %hub = getelementptr inbounds %struct.usb_tt* %143, i32 0, i32 0
  %144 = load %struct.usb_device** %hub, align 8
  %145 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call207 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %145) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call207, i32 0, i32 0
  %root_hub = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 10
  %146 = load %struct.usb_device** %root_hub, align 8
  %cmp208 = icmp ne %struct.usb_device* %144, %146
  br i1 %cmp208, label %if.then210, label %if.end214

if.then210:                                       ; preds = %land.lhs.true206
  %147 = load %struct.usb_tt** %tt, align 8
  %hub211 = getelementptr inbounds %struct.usb_tt* %147, i32 0, i32 0
  %148 = load %struct.usb_device** %hub211, align 8
  %devnum = getelementptr inbounds %struct.usb_device* %148, i32 0, i32 0
  %149 = load i32* %devnum, align 4
  %shl212 = shl i32 %149, 16
  %150 = load i32* %info2, align 4
  %or213 = or i32 %150, %shl212
  store i32 %or213, i32* %info2, align 4
  br label %if.end214

if.end214:                                        ; preds = %if.then210, %land.lhs.true206, %if.end198
  br label %sw.epilog

sw.bb215:                                         ; preds = %if.end179
  %151 = load i32* %info1, align 4
  %or216 = or i32 %151, 8192
  store i32 %or216, i32* %info1, align 4
  %152 = load i32* %type, align 4
  %cmp217 = icmp eq i32 %152, 2
  br i1 %cmp217, label %if.then219, label %if.else224

if.then219:                                       ; preds = %sw.bb215
  %153 = load i32* %info1, align 4
  %or220 = or i32 %153, 1073741824
  store i32 %or220, i32* %info1, align 4
  %154 = load i32* %info1, align 4
  %or221 = or i32 %154, 4194304
  store i32 %or221, i32* %info1, align 4
  %155 = load i32* %info1, align 4
  %or222 = or i32 %155, 16384
  store i32 %or222, i32* %info1, align 4
  %156 = load i32* %info2, align 4
  %or223 = or i32 %156, 1073741824
  store i32 %or223, i32* %info2, align 4
  br label %if.end243

if.else224:                                       ; preds = %sw.bb215
  %157 = load i32* %type, align 4
  %cmp225 = icmp eq i32 %157, 3
  br i1 %cmp225, label %if.then227, label %if.else233

if.then227:                                       ; preds = %if.else224
  %158 = load i32* %info1, align 4
  %or228 = or i32 %158, 1073741824
  store i32 %or228, i32* %info1, align 4
  %159 = load i32* %maxp, align 4
  %and229 = and i32 %159, 2047
  %shl230 = shl i32 %and229, 16
  %160 = load i32* %info1, align 4
  %or231 = or i32 %160, %shl230
  store i32 %or231, i32* %info1, align 4
  %161 = load i32* %info2, align 4
  %or232 = or i32 %161, 1073741824
  store i32 %or232, i32* %info2, align 4
  br label %if.end242

if.else233:                                       ; preds = %if.else224
  %162 = load i32* %maxp, align 4
  %and234 = and i32 %162, 2047
  %shl235 = shl i32 %and234, 16
  %163 = load i32* %info1, align 4
  %or236 = or i32 %163, %shl235
  store i32 %or236, i32* %info1, align 4
  %164 = load i32* %maxp, align 4
  %shr237 = ashr i32 %164, 11
  %and238 = and i32 %shr237, 3
  %add239 = add i32 1, %and238
  %shl240 = shl i32 %add239, 30
  %165 = load i32* %info2, align 4
  %or241 = or i32 %165, %shl240
  store i32 %or241, i32* %info2, align 4
  br label %if.end242

if.end242:                                        ; preds = %if.else233, %if.then227
  br label %if.end243

if.end243:                                        ; preds = %if.end242, %if.then219
  br label %sw.epilog

sw.default:                                       ; preds = %if.end179
  br label %done

done:                                             ; preds = %sw.default, %if.then18
  %166 = load %struct.ehci_hcd** %ehci.addr, align 8
  %167 = load %struct.ehci_qh** %qh, align 8
  call void @qh_destroy(%struct.ehci_hcd* %166, %struct.ehci_qh* %167) noredzone
  store %struct.ehci_qh* null, %struct.ehci_qh** %retval
  br label %return

sw.epilog:                                        ; preds = %if.end243, %if.end214
  %168 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %168, i32 0, i32 9
  store i8 3, i8* %qh_state, align 1
  %169 = load %struct.ehci_qh** %qh, align 8
  %hw244 = getelementptr inbounds %struct.ehci_qh* %169, i32 0, i32 0
  %170 = load %struct.ehci_qh_hw** %hw244, align 8
  store %struct.ehci_qh_hw* %170, %struct.ehci_qh_hw** %hw, align 8
  %171 = load %struct.ehci_hcd** %ehci.addr, align 8
  %172 = load i32* %info1, align 4
  %call245 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %171, i32 %172) noredzone
  %173 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_info1 = getelementptr inbounds %struct.ehci_qh_hw* %173, i32 0, i32 1
  store i32 %call245, i32* %hw_info1, align 4
  %174 = load %struct.ehci_hcd** %ehci.addr, align 8
  %175 = load i32* %info2, align 4
  %call246 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %174, i32 %175) noredzone
  %176 = load %struct.ehci_qh_hw** %hw, align 8
  %hw_info2 = getelementptr inbounds %struct.ehci_qh_hw* %176, i32 0, i32 2
  store i32 %call246, i32* %hw_info2, align 4
  %177 = load i32* %is_input, align 4
  %tobool247 = icmp ne i32 %177, 0
  %lnot248 = xor i1 %tobool247, true
  %lnot.ext249 = zext i1 %lnot248 to i32
  %178 = load %struct.ehci_qh** %qh, align 8
  %bf.value = and i32 %lnot.ext249, 1
  %179 = bitcast %struct.ehci_qh* %178 to i8*
  %bf.field.offs = getelementptr i8* %179, i32 132
  %180 = bitcast i8* %bf.field.offs to i32*
  %181 = and i32 %bf.value, 1
  %182 = shl i32 %181, 24
  %183 = load i32* %180, align 4
  %184 = and i32 %183, -16777217
  %185 = or i32 %184, %182
  store i32 %185, i32* %180, align 4
  %186 = load i32* %is_input, align 4
  %tobool250 = icmp ne i32 %186, 0
  %lnot251 = xor i1 %tobool250, true
  %lnot.ext252 = zext i1 %lnot251 to i32
  %idxprom = sext i32 %lnot.ext252 to i64
  %187 = load %struct.urb** %urb.addr, align 8
  %dev253 = getelementptr inbounds %struct.urb* %187, i32 0, i32 8
  %188 = load %struct.usb_device** %dev253, align 8
  %toggle = getelementptr inbounds %struct.usb_device* %188, i32 0, i32 7
  %arrayidx = getelementptr [2 x i32]* %toggle, i32 0, i64 %idxprom
  %189 = load i32* %arrayidx, align 4
  %190 = load %struct.urb** %urb.addr, align 8
  %pipe254 = getelementptr inbounds %struct.urb* %190, i32 0, i32 10
  %191 = load i32* %pipe254, align 4
  %shr255 = lshr i32 %191, 15
  %and256 = and i32 %shr255, 15
  %shl257 = shl i32 1, %and256
  %neg = xor i32 %shl257, -1
  %and258 = and i32 %189, %neg
  %192 = load %struct.urb** %urb.addr, align 8
  %pipe259 = getelementptr inbounds %struct.urb* %192, i32 0, i32 10
  %193 = load i32* %pipe259, align 4
  %shr260 = lshr i32 %193, 15
  %and261 = and i32 %shr260, 15
  %shl262 = shl i32 1, %and261
  %or263 = or i32 %and258, %shl262
  %194 = load i32* %is_input, align 4
  %tobool264 = icmp ne i32 %194, 0
  %lnot265 = xor i1 %tobool264, true
  %lnot.ext266 = zext i1 %lnot265 to i32
  %idxprom267 = sext i32 %lnot.ext266 to i64
  %195 = load %struct.urb** %urb.addr, align 8
  %dev268 = getelementptr inbounds %struct.urb* %195, i32 0, i32 8
  %196 = load %struct.usb_device** %dev268, align 8
  %toggle269 = getelementptr inbounds %struct.usb_device* %196, i32 0, i32 7
  %arrayidx270 = getelementptr [2 x i32]* %toggle269, i32 0, i64 %idxprom267
  store i32 %or263, i32* %arrayidx270, align 4
  %197 = load %struct.ehci_qh** %qh, align 8
  store %struct.ehci_qh* %197, %struct.ehci_qh** %retval
  br label %return

return:                                           ; preds = %sw.epilog, %done, %if.then
  %198 = load %struct.ehci_qh** %retval
  ret %struct.ehci_qh* %198
}

define internal void @list_splice_tail(%struct.list_head* %list, %struct.list_head* %head) nounwind inlinehint noredzone {
entry:
  %list.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head** %list.addr, align 8
  %call = call i32 @list_empty(%struct.list_head* %0) noredzone
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.list_head** %list.addr, align 8
  %2 = load %struct.list_head** %head.addr, align 8
  %prev = getelementptr inbounds %struct.list_head* %2, i32 0, i32 1
  %3 = load %struct.list_head** %prev, align 8
  %4 = load %struct.list_head** %head.addr, align 8
  call void @__list_splice(%struct.list_head* %1, %struct.list_head* %3, %struct.list_head* %4) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define internal void @ehci_qtd_init(%struct.ehci_hcd* %ehci, %struct.ehci_qtd* %qtd, i64 %dma) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qtd.addr = alloca %struct.ehci_qtd*, align 8
  %dma.addr = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qtd* %qtd, %struct.ehci_qtd** %qtd.addr, align 8
  store i64 %dma, i64* %dma.addr, align 8
  %0 = load %struct.ehci_qtd** %qtd.addr, align 8
  %1 = bitcast %struct.ehci_qtd* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 96, i32 32, i1 false)
  %2 = load i64* %dma.addr, align 8
  %3 = load %struct.ehci_qtd** %qtd.addr, align 8
  %qtd_dma = getelementptr inbounds %struct.ehci_qtd* %3, i32 0, i32 5
  store i64 %2, i64* %qtd_dma, align 8
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %4, i32 64) noredzone
  %5 = load %struct.ehci_qtd** %qtd.addr, align 8
  %hw_token = getelementptr inbounds %struct.ehci_qtd* %5, i32 0, i32 2
  store i32 %call, i32* %hw_token, align 4
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call1 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %6, i32 1) noredzone
  %7 = load %struct.ehci_qtd** %qtd.addr, align 8
  %hw_next = getelementptr inbounds %struct.ehci_qtd* %7, i32 0, i32 0
  store i32 %call1, i32* %hw_next, align 4
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call2 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %8, i32 1) noredzone
  %9 = load %struct.ehci_qtd** %qtd.addr, align 8
  %hw_alt_next = getelementptr inbounds %struct.ehci_qtd* %9, i32 0, i32 1
  store i32 %call2, i32* %hw_alt_next, align 4
  %10 = load %struct.ehci_qtd** %qtd.addr, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qtd* %10, i32 0, i32 6
  call void @INIT_LIST_HEAD(%struct.list_head* %qtd_list) noredzone
  ret void
}

define internal %struct.ehci_qh* @ehci_qh_alloc(%struct.ehci_hcd* %ehci, i32 %flags) nounwind noredzone {
entry:
  %retval = alloca %struct.ehci_qh*, align 8
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %flags.addr = alloca i32, align 4
  %qh = alloca %struct.ehci_qh*, align 8
  %dma = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %call = call i8* @kzalloc(i64 136, i32 32) noredzone
  %0 = bitcast i8* %call to %struct.ehci_qh*
  store %struct.ehci_qh* %0, %struct.ehci_qh** %qh, align 8
  %1 = load %struct.ehci_qh** %qh, align 8
  %tobool = icmp ne %struct.ehci_qh* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %done

if.end:                                           ; preds = %entry
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_pool = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 48
  %3 = load %struct.dma_pool** %qh_pool, align 8
  %4 = load i32* %flags.addr, align 4
  %call1 = call i8* @dma_pool_alloc(%struct.dma_pool* %3, i32 %4, i64* %dma) noredzone
  %5 = bitcast i8* %call1 to %struct.ehci_qh_hw*
  %6 = load %struct.ehci_qh** %qh, align 8
  %hw = getelementptr inbounds %struct.ehci_qh* %6, i32 0, i32 0
  store %struct.ehci_qh_hw* %5, %struct.ehci_qh_hw** %hw, align 8
  %7 = load %struct.ehci_qh** %qh, align 8
  %hw2 = getelementptr inbounds %struct.ehci_qh* %7, i32 0, i32 0
  %8 = load %struct.ehci_qh_hw** %hw2, align 8
  %tobool3 = icmp ne %struct.ehci_qh_hw* %8, null
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  br label %fail

if.end5:                                          ; preds = %if.end
  %9 = load %struct.ehci_qh** %qh, align 8
  %hw6 = getelementptr inbounds %struct.ehci_qh* %9, i32 0, i32 0
  %10 = load %struct.ehci_qh_hw** %hw6, align 8
  %11 = bitcast %struct.ehci_qh_hw* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 96, i32 32, i1 false)
  %12 = load i64* %dma, align 8
  %13 = load %struct.ehci_qh** %qh, align 8
  %qh_dma = getelementptr inbounds %struct.ehci_qh* %13, i32 0, i32 1
  store i64 %12, i64* %qh_dma, align 8
  %14 = load %struct.ehci_qh** %qh, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %14, i32 0, i32 3
  call void @INIT_LIST_HEAD(%struct.list_head* %qtd_list) noredzone
  %15 = load %struct.ehci_qh** %qh, align 8
  %unlink_node = getelementptr inbounds %struct.ehci_qh* %15, i32 0, i32 6
  call void @INIT_LIST_HEAD(%struct.list_head* %unlink_node) noredzone
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %17 = load i32* %flags.addr, align 4
  %call7 = call %struct.ehci_qtd* @ehci_qtd_alloc(%struct.ehci_hcd* %16, i32 %17) noredzone
  %18 = load %struct.ehci_qh** %qh, align 8
  %dummy = getelementptr inbounds %struct.ehci_qh* %18, i32 0, i32 5
  store %struct.ehci_qtd* %call7, %struct.ehci_qtd** %dummy, align 8
  %19 = load %struct.ehci_qh** %qh, align 8
  %dummy8 = getelementptr inbounds %struct.ehci_qh* %19, i32 0, i32 5
  %20 = load %struct.ehci_qtd** %dummy8, align 8
  %cmp = icmp eq %struct.ehci_qtd* %20, null
  br i1 %cmp, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end5
  br label %fail1

if.end10:                                         ; preds = %if.end5
  br label %done

done:                                             ; preds = %if.end10, %if.then
  %21 = load %struct.ehci_qh** %qh, align 8
  store %struct.ehci_qh* %21, %struct.ehci_qh** %retval
  br label %return

fail1:                                            ; preds = %if.then9
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qh_pool11 = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 48
  %23 = load %struct.dma_pool** %qh_pool11, align 8
  %24 = load %struct.ehci_qh** %qh, align 8
  %hw12 = getelementptr inbounds %struct.ehci_qh* %24, i32 0, i32 0
  %25 = load %struct.ehci_qh_hw** %hw12, align 8
  %26 = bitcast %struct.ehci_qh_hw* %25 to i8*
  %27 = load %struct.ehci_qh** %qh, align 8
  %qh_dma13 = getelementptr inbounds %struct.ehci_qh* %27, i32 0, i32 1
  %28 = load i64* %qh_dma13, align 8
  call void @dma_pool_free(%struct.dma_pool* %23, i8* %26, i64 %28) noredzone
  br label %fail

fail:                                             ; preds = %fail1, %if.then4
  %29 = load %struct.ehci_qh** %qh, align 8
  %30 = bitcast %struct.ehci_qh* %29 to i8*
  call void @kfree(i8* %30) noredzone
  store %struct.ehci_qh* null, %struct.ehci_qh** %retval
  br label %return

return:                                           ; preds = %fail, %done
  %31 = load %struct.ehci_qh** %retval
  ret %struct.ehci_qh* %31
}

define internal zeroext i16 @usb_maxpacket(%struct.usb_device* %udev, i32 %pipe, i32 %is_out) nounwind inlinehint noredzone {
entry:
  %retval = alloca i16, align 2
  %udev.addr = alloca %struct.usb_device*, align 8
  %pipe.addr = alloca i32, align 4
  %is_out.addr = alloca i32, align 4
  %ep = alloca %struct.usb_host_endpoint*, align 8
  %epnum = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %__ret_warn_on18 = alloca i32, align 4
  store %struct.usb_device* %udev, %struct.usb_device** %udev.addr, align 8
  store i32 %pipe, i32* %pipe.addr, align 4
  store i32 %is_out, i32* %is_out.addr, align 4
  %0 = load i32* %pipe.addr, align 4
  %shr = ashr i32 %0, 15
  %and = and i32 %shr, 15
  store i32 %and, i32* %epnum, align 4
  %1 = load i32* %is_out.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32* %pipe.addr, align 4
  %and1 = and i32 %2, 128
  %tobool2 = icmp ne i32 %and1, 0
  %lnot = xor i1 %tobool2, true
  %lnot3 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot3 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %3 = load i32* %__ret_warn_on, align 4
  %tobool4 = icmp ne i32 %3, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv = sext i32 %lnot.ext8 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool9 = icmp ne i64 %expval, 0
  br i1 %tobool9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8]* @.str17, i32 0, i32 0), i32 1825) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then
  %4 = load i32* %__ret_warn_on, align 4
  %tobool11 = icmp ne i32 %4, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %expval17 = call i64 @llvm.expect.i64(i64 %conv16, i64 0)
  %5 = load i32* %epnum, align 4
  %idxprom = zext i32 %5 to i64
  %6 = load %struct.usb_device** %udev.addr, align 8
  %ep_out = getelementptr inbounds %struct.usb_device* %6, i32 0, i32 17
  %arrayidx = getelementptr [16 x %struct.usb_host_endpoint*]* %ep_out, i32 0, i64 %idxprom
  %7 = load %struct.usb_host_endpoint** %arrayidx, align 8
  store %struct.usb_host_endpoint* %7, %struct.usb_host_endpoint** %ep, align 8
  br label %if.end46

if.else:                                          ; preds = %entry
  %8 = load i32* %pipe.addr, align 4
  %and19 = and i32 %8, 128
  %tobool20 = icmp ne i32 %and19, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot25 = xor i1 %lnot23, true
  %lnot.ext26 = zext i1 %lnot25 to i32
  store i32 %lnot.ext26, i32* %__ret_warn_on18, align 4
  %9 = load i32* %__ret_warn_on18, align 4
  %tobool27 = icmp ne i32 %9, 0
  %lnot28 = xor i1 %tobool27, true
  %lnot30 = xor i1 %lnot28, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  %conv32 = sext i32 %lnot.ext31 to i64
  %expval33 = call i64 @llvm.expect.i64(i64 %conv32, i64 0)
  %tobool34 = icmp ne i64 %expval33, 0
  br i1 %tobool34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.else
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8]* @.str17, i32 0, i32 0), i32 1828) noredzone
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.else
  %10 = load i32* %__ret_warn_on18, align 4
  %tobool37 = icmp ne i32 %10, 0
  %lnot38 = xor i1 %tobool37, true
  %lnot40 = xor i1 %lnot38, true
  %lnot.ext41 = zext i1 %lnot40 to i32
  %conv42 = sext i32 %lnot.ext41 to i64
  %expval43 = call i64 @llvm.expect.i64(i64 %conv42, i64 0)
  %11 = load i32* %epnum, align 4
  %idxprom44 = zext i32 %11 to i64
  %12 = load %struct.usb_device** %udev.addr, align 8
  %ep_in = getelementptr inbounds %struct.usb_device* %12, i32 0, i32 16
  %arrayidx45 = getelementptr [16 x %struct.usb_host_endpoint*]* %ep_in, i32 0, i64 %idxprom44
  %13 = load %struct.usb_host_endpoint** %arrayidx45, align 8
  store %struct.usb_host_endpoint* %13, %struct.usb_host_endpoint** %ep, align 8
  br label %if.end46

if.end46:                                         ; preds = %if.end36, %if.end
  %14 = load %struct.usb_host_endpoint** %ep, align 8
  %tobool47 = icmp ne %struct.usb_host_endpoint* %14, null
  br i1 %tobool47, label %if.end49, label %if.then48

if.then48:                                        ; preds = %if.end46
  store i16 0, i16* %retval
  br label %return

if.end49:                                         ; preds = %if.end46
  %15 = load %struct.usb_host_endpoint** %ep, align 8
  %desc = getelementptr inbounds %struct.usb_host_endpoint* %15, i32 0, i32 0
  %call = call i32 @usb_endpoint_maxp(%struct.usb_endpoint_descriptor* %desc) noredzone
  %conv50 = trunc i32 %call to i16
  store i16 %conv50, i16* %retval
  br label %return

return:                                           ; preds = %if.end49, %if.then48
  %16 = load i16* %retval
  ret i16 %16
}

define internal i64 @__rounddown_pow_of_two(i64 %n) nounwind readnone inlinehint noredzone {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i64* %n.addr, align 8
  %call = call i32 @fls_long(i64 %0) noredzone
  %sub = sub i32 %call, 1
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 1, %sh_prom
  ret i64 %shl
}

define internal i32 @fls_long(i64 %l) nounwind inlinehint noredzone {
entry:
  %x.addr.i = alloca i64, align 8
  %bitpos.i = alloca i32, align 4
  %l.addr = alloca i64, align 8
  store i64 %l, i64* %l.addr, align 8
  %0 = load i64* %l.addr, align 8
  store i64 %0, i64* %x.addr.i, align 8
  store i32 -1, i32* %bitpos.i, align 4
  %1 = load i32* %bitpos.i, align 4
  %2 = load i64* %x.addr.i, align 8
  %3 = call i32 asm "bsrq $1,${0:q}", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %2, i32 %1) nounwind, !srcloc !19
  store i32 %3, i32* %bitpos.i, align 4
  %4 = load i32* %bitpos.i, align 4
  %add.i = add i32 %4, 1
  ret i32 %add.i
}

define internal %struct.ehci_qtd* @ehci_qtd_alloc(%struct.ehci_hcd* %ehci, i32 %flags) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %flags.addr = alloca i32, align 4
  %qtd = alloca %struct.ehci_qtd*, align 8
  %dma = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %qtd_pool = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 49
  %1 = load %struct.dma_pool** %qtd_pool, align 8
  %2 = load i32* %flags.addr, align 4
  %call = call i8* @dma_pool_alloc(%struct.dma_pool* %1, i32 %2, i64* %dma) noredzone
  %3 = bitcast i8* %call to %struct.ehci_qtd*
  store %struct.ehci_qtd* %3, %struct.ehci_qtd** %qtd, align 8
  %4 = load %struct.ehci_qtd** %qtd, align 8
  %cmp = icmp ne %struct.ehci_qtd* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %6 = load %struct.ehci_qtd** %qtd, align 8
  %7 = load i64* %dma, align 8
  call void @ehci_qtd_init(%struct.ehci_hcd* %5, %struct.ehci_qtd* %6, i64 %7) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.ehci_qtd** %qtd, align 8
  ret %struct.ehci_qtd* %8
}

define internal i32 @qtd_fill(%struct.ehci_hcd* %ehci, %struct.ehci_qtd* %qtd, i64 %buf, i64 %len, i32 %token, i32 %maxpacket) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qtd.addr = alloca %struct.ehci_qtd*, align 8
  %buf.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %token.addr = alloca i32, align 4
  %maxpacket.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %addr = alloca i64, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qtd* %qtd, %struct.ehci_qtd** %qtd.addr, align 8
  store i64 %buf, i64* %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %token, i32* %token.addr, align 4
  store i32 %maxpacket, i32* %maxpacket.addr, align 4
  %0 = load i64* %buf.addr, align 8
  store i64 %0, i64* %addr, align 8
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %2 = load i64* %addr, align 8
  %conv = trunc i64 %2 to i32
  %call = call i32 @cpu_to_hc32(%struct.ehci_hcd* %1, i32 %conv) noredzone
  %3 = load %struct.ehci_qtd** %qtd.addr, align 8
  %hw_buf = getelementptr inbounds %struct.ehci_qtd* %3, i32 0, i32 3
  %arrayidx = getelementptr [5 x i32]* %hw_buf, i32 0, i64 0
  store i32 %call, i32* %arrayidx, align 4
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load i64* %addr, align 8
  %shr = lshr i64 %5, 32
  %conv1 = trunc i64 %shr to i32
  %call2 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %4, i32 %conv1) noredzone
  %6 = load %struct.ehci_qtd** %qtd.addr, align 8
  %hw_buf_hi = getelementptr inbounds %struct.ehci_qtd* %6, i32 0, i32 4
  %arrayidx3 = getelementptr [5 x i32]* %hw_buf_hi, i32 0, i64 0
  store i32 %call2, i32* %arrayidx3, align 4
  %7 = load i64* %buf.addr, align 8
  %and = and i64 %7, 4095
  %sub = sub i64 4096, %and
  %conv4 = trunc i64 %sub to i32
  store i32 %conv4, i32* %count, align 4
  %8 = load i64* %len.addr, align 8
  %9 = load i32* %count, align 4
  %conv5 = sext i32 %9 to i64
  %cmp = icmp ult i64 %8, %conv5
  %lnot = xor i1 %cmp, true
  %lnot7 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot7 to i32
  %conv8 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv8, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load i64* %len.addr, align 8
  %conv9 = trunc i64 %10 to i32
  store i32 %conv9, i32* %count, align 4
  br label %if.end41

if.else:                                          ; preds = %entry
  %11 = load i64* %buf.addr, align 8
  %add = add i64 %11, 4096
  store i64 %add, i64* %buf.addr, align 8
  %12 = load i64* %buf.addr, align 8
  %and10 = and i64 %12, -4096
  store i64 %and10, i64* %buf.addr, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %13 = load i32* %count, align 4
  %conv11 = sext i32 %13 to i64
  %14 = load i64* %len.addr, align 8
  %cmp12 = icmp ult i64 %conv11, %14
  br i1 %cmp12, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %15 = load i32* %i, align 4
  %cmp14 = icmp slt i32 %15, 5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %16 = phi i1 [ false, %for.cond ], [ %cmp14, %land.rhs ]
  br i1 %16, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %17 = load i64* %buf.addr, align 8
  store i64 %17, i64* %addr, align 8
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  %19 = load i64* %addr, align 8
  %conv16 = trunc i64 %19 to i32
  %call17 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %18, i32 %conv16) noredzone
  %20 = load i32* %i, align 4
  %idxprom = sext i32 %20 to i64
  %21 = load %struct.ehci_qtd** %qtd.addr, align 8
  %hw_buf18 = getelementptr inbounds %struct.ehci_qtd* %21, i32 0, i32 3
  %arrayidx19 = getelementptr [5 x i32]* %hw_buf18, i32 0, i64 %idxprom
  store i32 %call17, i32* %arrayidx19, align 4
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %23 = load i64* %addr, align 8
  %shr20 = lshr i64 %23, 32
  %conv21 = trunc i64 %shr20 to i32
  %call22 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %22, i32 %conv21) noredzone
  %24 = load i32* %i, align 4
  %idxprom23 = sext i32 %24 to i64
  %25 = load %struct.ehci_qtd** %qtd.addr, align 8
  %hw_buf_hi24 = getelementptr inbounds %struct.ehci_qtd* %25, i32 0, i32 4
  %arrayidx25 = getelementptr [5 x i32]* %hw_buf_hi24, i32 0, i64 %idxprom23
  store i32 %call22, i32* %arrayidx25, align 4
  %26 = load i64* %buf.addr, align 8
  %add26 = add i64 %26, 4096
  store i64 %add26, i64* %buf.addr, align 8
  %27 = load i32* %count, align 4
  %add27 = add i32 %27, 4096
  %conv28 = sext i32 %add27 to i64
  %28 = load i64* %len.addr, align 8
  %cmp29 = icmp ult i64 %conv28, %28
  br i1 %cmp29, label %if.then31, label %if.else33

if.then31:                                        ; preds = %for.body
  %29 = load i32* %count, align 4
  %add32 = add i32 %29, 4096
  store i32 %add32, i32* %count, align 4
  br label %if.end

if.else33:                                        ; preds = %for.body
  %30 = load i64* %len.addr, align 8
  %conv34 = trunc i64 %30 to i32
  store i32 %conv34, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.else33, %if.then31
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %31 = load i32* %i, align 4
  %inc = add i32 %31, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %32 = load i32* %count, align 4
  %conv35 = sext i32 %32 to i64
  %33 = load i64* %len.addr, align 8
  %cmp36 = icmp ne i64 %conv35, %33
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %for.end
  %34 = load i32* %count, align 4
  %35 = load i32* %maxpacket.addr, align 4
  %rem = srem i32 %34, %35
  %36 = load i32* %count, align 4
  %sub39 = sub i32 %36, %rem
  store i32 %sub39, i32* %count, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %for.end
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then
  %37 = load %struct.ehci_hcd** %ehci.addr, align 8
  %38 = load i32* %count, align 4
  %shl = shl i32 %38, 16
  %39 = load i32* %token.addr, align 4
  %or = or i32 %shl, %39
  %call42 = call i32 @cpu_to_hc32(%struct.ehci_hcd* %37, i32 %or) noredzone
  %40 = load %struct.ehci_qtd** %qtd.addr, align 8
  %hw_token = getelementptr inbounds %struct.ehci_qtd* %40, i32 0, i32 2
  store i32 %call42, i32* %hw_token, align 4
  %41 = load i32* %count, align 4
  %conv43 = sext i32 %41 to i64
  %42 = load %struct.ehci_qtd** %qtd.addr, align 8
  %length = getelementptr inbounds %struct.ehci_qtd* %42, i32 0, i32 8
  store i64 %conv43, i64* %length, align 8
  %43 = load i32* %count, align 4
  ret i32 %43
}

declare %struct.scatterlist* @sg_next(%struct.scatterlist*) noredzone

define internal void @ehci_silence_controller(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call i32 @ehci_halt(%struct.ehci_hcd* %0) noredzone
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 11
  call void @spin_lock_irq(%struct.spinlock* %lock) noredzone
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %2, i32 0, i32 12
  store i32 0, i32* %rh_state, align 4
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_turn_off_all_ports(%struct.ehci_hcd* %3) noredzone
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 8
  %6 = load %struct.ehci_regs** %regs, align 8
  %configured_flag = getelementptr inbounds %struct.ehci_regs* %6, i32 0, i32 10
  call void @ehci_writel(%struct.ehci_hcd* %4, i32 0, i32* %configured_flag) noredzone
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs1 = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 8
  %9 = load %struct.ehci_regs** %regs1, align 8
  %configured_flag2 = getelementptr inbounds %struct.ehci_regs* %9, i32 0, i32 10
  %call3 = call i32 @ehci_readl(%struct.ehci_hcd* %7, i32* %configured_flag2) noredzone
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %lock4 = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 11
  call void @spin_unlock_irq(%struct.spinlock* %lock4) noredzone
  ret void
}

define internal void @ehci_turn_off_all_ports(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %port = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 10
  %1 = load i32* %hcs_params, align 4
  %shr = lshr i32 %1, 0
  %and = and i32 %shr, 15
  store i32 %and, i32* %port, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32* %port, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %port, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %4 = load i32* %port, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 8
  %6 = load %struct.ehci_regs** %regs, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %6, i32 0, i32 11
  %arrayidx = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom
  call void @ehci_writel(%struct.ehci_hcd* %3, i32 42, i32* %arrayidx) noredzone
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

define internal void @remove_sysfs_files(%struct.ehci_hcd* %ehci) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %controller = alloca %struct.device*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %0) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call, i32 0, i32 0
  %controller1 = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 0
  %1 = load %struct.device** %controller1, align 8
  store %struct.device* %1, %struct.device** %controller, align 8
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call2 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %2) noredzone
  %3 = bitcast %struct.usb_hcd* %call2 to i8*
  %bf.field.offs = getelementptr i8* %3, i32 352
  %4 = bitcast i8* %bf.field.offs to i32*
  %5 = load i32* %4, align 8
  %6 = lshr i32 %5, 7
  %bf.clear = and i32 %6, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %7 = load %struct.device** %controller, align 8
  call void @device_remove_file(%struct.device* %7, %struct.device_attribute* bitcast ({ { i8*, i16, [6 x i8] }, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }* @dev_attr_companion to %struct.device_attribute*)) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.device** %controller, align 8
  call void @device_remove_file(%struct.device* %8, %struct.device_attribute* bitcast ({ { i8*, i16, [6 x i8] }, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }* @dev_attr_uframe_periodic_max to %struct.device_attribute*)) noredzone
  ret void
}

define internal void @remove_debug_files(%struct.ehci_hcd* %bus) nounwind inlinehint noredzone {
entry:
  %bus.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %bus, %struct.ehci_hcd** %bus.addr, align 8
  ret void
}

declare void @usb_amd_dev_put() noredzone

define internal i32 @dbg_status_buf(i8* %buf, i32 %len, i8* %label, i32 %status) nounwind inlinehint noredzone {
entry:
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %status.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  store i32 %status, i32* %status.addr, align 4
  ret i32 0
}

declare void @device_remove_file(%struct.device*, %struct.device_attribute*) noredzone

define internal i64 @show_uframe_periodic_max(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) nounwind noredzone {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %attr.addr = alloca %struct.device_attribute*, align 8
  %buf.addr = alloca i8*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %n = alloca i32, align 4
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store %struct.device_attribute* %attr, %struct.device_attribute** %attr.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  %0 = load %struct.device** %dev.addr, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %0) noredzone
  %1 = bitcast i8* %call to %struct.usb_bus*
  %call1 = call %struct.usb_hcd* @bus_to_hcd(%struct.usb_bus* %1) noredzone
  %call2 = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %call1) noredzone
  store %struct.ehci_hcd* %call2, %struct.ehci_hcd** %ehci, align 8
  %2 = load i8** %buf.addr, align 8
  %3 = load %struct.ehci_hcd** %ehci, align 8
  %uframe_periodic_max = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 36
  %4 = load i32* %uframe_periodic_max, align 4
  %call3 = call i32 (i8*, i64, i8*, ...)* @scnprintf(i8* %2, i64 4096, i8* getelementptr inbounds ([4 x i8]* @.str24, i32 0, i32 0), i32 %4) noredzone
  store i32 %call3, i32* %n, align 4
  %5 = load i32* %n, align 4
  %conv = sext i32 %5 to i64
  ret i64 %conv
}

define internal i64 @store_uframe_periodic_max(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) nounwind noredzone {
entry:
  %retval = alloca i64, align 8
  %dev.addr = alloca %struct.device*, align 8
  %attr.addr = alloca %struct.device_attribute*, align 8
  %buf.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %uframe_periodic_max = alloca i32, align 4
  %uframe = alloca i32, align 4
  %flags = alloca i64, align 8
  %ret = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %allocated_max = alloca i8, align 1
  %_max1 = alloca i8, align 1
  %_max2 = alloca i8, align 1
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store %struct.device_attribute* %attr, %struct.device_attribute** %attr.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  %0 = load %struct.device** %dev.addr, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %0) noredzone
  %1 = bitcast i8* %call to %struct.usb_bus*
  %call1 = call %struct.usb_hcd* @bus_to_hcd(%struct.usb_bus* %1) noredzone
  %call2 = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %call1) noredzone
  store %struct.ehci_hcd* %call2, %struct.ehci_hcd** %ehci, align 8
  %2 = load i8** %buf.addr, align 8
  %call3 = call i32 @kstrtouint(i8* %2, i32 0, i32* %uframe_periodic_max) noredzone
  %cmp = icmp slt i32 %call3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 -22, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32* %uframe_periodic_max, align 4
  %cmp4 = icmp ult i32 %3, 100
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32* %uframe_periodic_max, align 4
  %cmp5 = icmp uge i32 %4, 125
  br i1 %cmp5, label %if.then6, label %if.end9

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  %5 = load %struct.ehci_hcd** %ehci, align 8
  %call7 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %5) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call7, i32 0, i32 0
  %controller = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 0
  %6 = load %struct.device** %controller, align 8
  %7 = load i32* %uframe_periodic_max, align 4
  %call8 = call i32 (%struct.device*, i8*, ...)* @_dev_info(%struct.device* %6, i8* getelementptr inbounds ([54 x i8]* @.str20, i32 0, i32 0), i32 %7) noredzone
  store i64 -22, i64* %retval
  br label %return

if.end9:                                          ; preds = %lor.lhs.false
  store i64 -22, i64* %ret, align 8
  br label %do.body

do.body:                                          ; preds = %if.end9
  br label %do.body10

do.body10:                                        ; preds = %do.body
  %cmp11 = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp11 to i32
  %8 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 11
  %call12 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call13 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call12) noredzone
  store i64 %call13, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body10
  br label %do.end14

do.end14:                                         ; preds = %do.end
  %9 = load i32* %uframe_periodic_max, align 4
  %10 = load %struct.ehci_hcd** %ehci, align 8
  %uframe_periodic_max15 = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 36
  %11 = load i32* %uframe_periodic_max15, align 4
  %cmp16 = icmp ult i32 %9, %11
  br i1 %cmp16, label %if.then18, label %if.end40

if.then18:                                        ; preds = %do.end14
  store i8 0, i8* %allocated_max, align 1
  store i32 0, i32* %uframe, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then18
  %12 = load i32* %uframe, align 4
  %cmp19 = icmp ult i32 %12, 64
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i8* %allocated_max, align 1
  store i8 %13, i8* %_max1, align 1
  %14 = load i32* %uframe, align 4
  %idxprom = zext i32 %14 to i64
  %15 = load %struct.ehci_hcd** %ehci, align 8
  %bandwidth = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 61
  %arrayidx = getelementptr [64 x i8]* %bandwidth, i32 0, i64 %idxprom
  %16 = load i8* %arrayidx, align 1
  store i8 %16, i8* %_max2, align 1
  %cmp21 = icmp eq i8* %_max1, %_max2
  %conv22 = zext i1 %cmp21 to i32
  %17 = load i8* %_max1, align 1
  %conv23 = zext i8 %17 to i32
  %18 = load i8* %_max2, align 1
  %conv24 = zext i8 %18 to i32
  %cmp25 = icmp sgt i32 %conv23, %conv24
  br i1 %cmp25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %19 = load i8* %_max1, align 1
  %conv27 = zext i8 %19 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %20 = load i8* %_max2, align 1
  %conv28 = zext i8 %20 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv27, %cond.true ], [ %conv28, %cond.false ]
  %conv29 = trunc i32 %cond to i8
  store i8 %conv29, i8* %allocated_max, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %21 = load i32* %uframe, align 4
  %inc = add i32 %21, 1
  store i32 %inc, i32* %uframe, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i8* %allocated_max, align 1
  %conv30 = zext i8 %22 to i32
  %23 = load i32* %uframe_periodic_max, align 4
  %cmp31 = icmp ugt i32 %conv30, %23
  br i1 %cmp31, label %if.then33, label %if.end39

if.then33:                                        ; preds = %for.end
  %24 = load %struct.ehci_hcd** %ehci, align 8
  %call34 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %24) noredzone
  %self35 = getelementptr inbounds %struct.usb_hcd* %call34, i32 0, i32 0
  %controller36 = getelementptr inbounds %struct.usb_bus* %self35, i32 0, i32 0
  %25 = load %struct.device** %controller36, align 8
  %26 = load i8* %allocated_max, align 1
  %conv37 = zext i8 %26 to i32
  %27 = load i32* %uframe_periodic_max, align 4
  %call38 = call i32 (%struct.device*, i8*, ...)* @_dev_info(%struct.device* %25, i8* getelementptr inbounds ([94 x i8]* @.str21, i32 0, i32 0), i32 %conv37, i32 %27) noredzone
  br label %out_unlock

if.end39:                                         ; preds = %for.end
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %do.end14
  %28 = load %struct.ehci_hcd** %ehci, align 8
  %call41 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %28) noredzone
  %self42 = getelementptr inbounds %struct.usb_hcd* %call41, i32 0, i32 0
  %controller43 = getelementptr inbounds %struct.usb_bus* %self42, i32 0, i32 0
  %29 = load %struct.device** %controller43, align 8
  %30 = load i32* %uframe_periodic_max, align 4
  %mul = mul i32 100, %30
  %div = udiv i32 %mul, 125
  %31 = load i32* %uframe_periodic_max, align 4
  %call44 = call i32 (%struct.device*, i8*, ...)* @_dev_info(%struct.device* %29, i8* getelementptr inbounds ([60 x i8]* @.str22, i32 0, i32 0), i32 %div, i32 %31) noredzone
  %32 = load i32* %uframe_periodic_max, align 4
  %cmp45 = icmp ne i32 %32, 100
  br i1 %cmp45, label %if.then47, label %if.end52

if.then47:                                        ; preds = %if.end40
  %33 = load %struct.ehci_hcd** %ehci, align 8
  %call48 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %33) noredzone
  %self49 = getelementptr inbounds %struct.usb_hcd* %call48, i32 0, i32 0
  %controller50 = getelementptr inbounds %struct.usb_bus* %self49, i32 0, i32 0
  %34 = load %struct.device** %controller50, align 8
  %call51 = call i32 (%struct.device*, i8*, ...)* @dev_warn(%struct.device* %34, i8* getelementptr inbounds ([44 x i8]* @.str23, i32 0, i32 0)) noredzone
  br label %if.end52

if.end52:                                         ; preds = %if.then47, %if.end40
  %35 = load i32* %uframe_periodic_max, align 4
  %36 = load %struct.ehci_hcd** %ehci, align 8
  %uframe_periodic_max53 = getelementptr inbounds %struct.ehci_hcd* %36, i32 0, i32 36
  store i32 %35, i32* %uframe_periodic_max53, align 4
  %37 = load i64* %count.addr, align 8
  store i64 %37, i64* %ret, align 8
  br label %out_unlock

out_unlock:                                       ; preds = %if.end52, %if.then33
  %38 = load %struct.ehci_hcd** %ehci, align 8
  %lock54 = getelementptr inbounds %struct.ehci_hcd* %38, i32 0, i32 11
  %39 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock54, i64 %39) noredzone
  %40 = load i64* %ret, align 8
  store i64 %40, i64* %retval
  br label %return

return:                                           ; preds = %out_unlock, %if.then6, %if.then
  %41 = load i64* %retval
  ret i64 %41
}

define internal i8* @dev_get_drvdata(%struct.device* %dev) nounwind inlinehint noredzone {
entry:
  %dev.addr = alloca %struct.device*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  %0 = load %struct.device** %dev.addr, align 8
  %driver_data = getelementptr inbounds %struct.device* %0, i32 0, i32 9
  %1 = load i8** %driver_data, align 8
  ret i8* %1
}

declare i32 @kstrtouint(i8*, i32, i32*) noredzone

declare i32 @_dev_info(%struct.device*, i8*, ...) noredzone

declare i32 @scnprintf(i8*, i64, i8*, ...) noredzone

define internal i64 @show_companion(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) nounwind noredzone {
entry:
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %dev.addr = alloca %struct.device*, align 8
  %attr.addr = alloca %struct.device_attribute*, align 8
  %buf.addr = alloca i8*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %nports = alloca i32, align 4
  %index = alloca i32, align 4
  %n = alloca i32, align 4
  %count = alloca i32, align 4
  %ptr = alloca i8*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store %struct.device_attribute* %attr, %struct.device_attribute** %attr.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i32 4096, i32* %count, align 4
  %0 = load i8** %buf.addr, align 8
  store i8* %0, i8** %ptr, align 8
  %1 = load %struct.device** %dev.addr, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %1) noredzone
  %2 = bitcast i8* %call to %struct.usb_bus*
  %call1 = call %struct.usb_hcd* @bus_to_hcd(%struct.usb_bus* %2) noredzone
  %call2 = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %call1) noredzone
  store %struct.ehci_hcd* %call2, %struct.ehci_hcd** %ehci, align 8
  %3 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 10
  %4 = load i32* %hcs_params, align 4
  %shr = lshr i32 %4, 0
  %and = and i32 %shr, 15
  store i32 %and, i32* %nports, align 4
  store i32 0, i32* %index, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32* %index, align 4
  %6 = load i32* %nports, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load i32* %index, align 4
  %conv = sext i32 %7 to i64
  %8 = load %struct.ehci_hcd** %ehci, align 8
  %companion_ports = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 43
  store i64 %conv, i64* %nr.addr.i, align 8
  store i64* %companion_ports, i64** %addr.addr.i, align 8
  %9 = load i64* %nr.addr.i, align 8
  %and.i = and i64 %9, 63
  %shl.i = shl i64 1, %and.i
  %10 = load i64* %nr.addr.i, align 8
  %shr.i = ashr i64 %10, 6
  %11 = load i64** %addr.addr.i, align 8
  %arrayidx.i = getelementptr i64* %11, i64 %shr.i
  %12 = load volatile i64* %arrayidx.i, align 8
  %and1.i = and i64 %shl.i, %12
  %cmp.i = icmp ne i64 %and1.i, 0
  %conv.i = zext i1 %cmp.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.then, label %if.end

cond.false:                                       ; preds = %for.body
  %13 = load i32* %index, align 4
  %conv4 = sext i32 %13 to i64
  %14 = load %struct.ehci_hcd** %ehci, align 8
  %companion_ports5 = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 43
  %call6 = call i32 @variable_test_bit(i64 %conv4, i64* %companion_ports5) noredzone
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %15 = load i8** %ptr, align 8
  %16 = load i32* %count, align 4
  %conv8 = sext i32 %16 to i64
  %17 = load i32* %index, align 4
  %add = add i32 %17, 1
  %call9 = call i32 (i8*, i64, i8*, ...)* @scnprintf(i8* %15, i64 %conv8, i8* getelementptr inbounds ([4 x i8]* @.str24, i32 0, i32 0), i32 %add) noredzone
  store i32 %call9, i32* %n, align 4
  %18 = load i32* %n, align 4
  %19 = load i8** %ptr, align 8
  %idx.ext = sext i32 %18 to i64
  %add.ptr = getelementptr i8* %19, i64 %idx.ext
  store i8* %add.ptr, i8** %ptr, align 8
  %20 = load i32* %n, align 4
  %21 = load i32* %count, align 4
  %sub = sub i32 %21, %20
  store i32 %sub, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %22 = load i32* %index, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %index, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i8** %ptr, align 8
  %24 = load i8** %buf.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

define internal i64 @store_companion(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) nounwind noredzone {
entry:
  %nr.addr.i15 = alloca i64, align 8
  %addr.addr.i16 = alloca i64*, align 8
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %retval = alloca i64, align 8
  %dev.addr = alloca %struct.device*, align 8
  %attr.addr = alloca %struct.device_attribute*, align 8
  %buf.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %portnum = alloca i32, align 4
  %new_owner = alloca i32, align 4
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store %struct.device_attribute* %attr, %struct.device_attribute** %attr.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  %0 = load %struct.device** %dev.addr, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %0) noredzone
  %1 = bitcast i8* %call to %struct.usb_bus*
  %call1 = call %struct.usb_hcd* @bus_to_hcd(%struct.usb_bus* %1) noredzone
  %call2 = call %struct.ehci_hcd* @hcd_to_ehci(%struct.usb_hcd* %call1) noredzone
  store %struct.ehci_hcd* %call2, %struct.ehci_hcd** %ehci, align 8
  store i32 8192, i32* %new_owner, align 4
  %2 = load i8** %buf.addr, align 8
  %call3 = call i32 (i8*, i8*, ...)* @sscanf(i8* %2, i8* getelementptr inbounds ([3 x i8]* @.str26, i32 0, i32 0), i32* %portnum) noredzone
  %cmp = icmp ne i32 %call3, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 -22, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32* %portnum, align 4
  %cmp4 = icmp slt i32 %3, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %4 = load i32* %portnum, align 4
  %sub = sub i32 0, %4
  store i32 %sub, i32* %portnum, align 4
  store i32 0, i32* %new_owner, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end
  %5 = load i32* %portnum, align 4
  %cmp7 = icmp sle i32 %5, 0
  br i1 %cmp7, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end6
  %6 = load i32* %portnum, align 4
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 10
  %8 = load i32* %hcs_params, align 4
  %shr = lshr i32 %8, 0
  %and = and i32 %shr, 15
  %cmp8 = icmp ugt i32 %6, %and
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false, %if.end6
  store i64 -2, i64* %retval
  br label %return

if.end10:                                         ; preds = %lor.lhs.false
  %9 = load i32* %portnum, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %portnum, align 4
  %10 = load i32* %new_owner, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end10
  %11 = load i32* %portnum, align 4
  %conv = sext i32 %11 to i64
  %12 = load %struct.ehci_hcd** %ehci, align 8
  %companion_ports = getelementptr inbounds %struct.ehci_hcd* %12, i32 0, i32 43
  store i64 %conv, i64* %nr.addr.i, align 8
  store i64* %companion_ports, i64** %addr.addr.i, align 8
  %13 = load i64** %addr.addr.i, align 8
  %14 = load i64* %nr.addr.i, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %13, i64 %14, i64* %13) nounwind, !srcloc !0
  br label %if.end14

if.else:                                          ; preds = %if.end10
  %15 = load i32* %portnum, align 4
  %conv12 = sext i32 %15 to i64
  %16 = load %struct.ehci_hcd** %ehci, align 8
  %companion_ports13 = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 43
  store i64 %conv12, i64* %nr.addr.i15, align 8
  store i64* %companion_ports13, i64** %addr.addr.i16, align 8
  %17 = load i64** %addr.addr.i16, align 8
  %18 = load i64* %nr.addr.i15, align 8
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %17, i64 %18, i64* %17) nounwind, !srcloc !1
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then11
  %19 = load %struct.ehci_hcd** %ehci, align 8
  %20 = load i32* %portnum, align 4
  %21 = load i32* %new_owner, align 4
  call void @set_owner(%struct.ehci_hcd* %19, i32 %20, i32 %21) noredzone
  %22 = load i64* %count.addr, align 8
  store i64 %22, i64* %retval
  br label %return

return:                                           ; preds = %if.end14, %if.then9, %if.then
  %23 = load i64* %retval
  ret i64 %23
}

declare i32 @sscanf(i8*, i8*, ...) noredzone

define internal i32 @dbg_command_buf(i8* %buf, i32 %len, i8* %label, i32 %command) nounwind inlinehint noredzone {
entry:
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %command.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  store i32 %command, i32* %command.addr, align 4
  ret i32 0
}

declare void @down_write(%struct.rw_semaphore*) noredzone

declare void @up_write(%struct.rw_semaphore*) noredzone

define internal i64 @ktime_get_real() nounwind inlinehint noredzone {
entry:
  %retval = alloca %union.ktime, align 8
  %call = call i64 @ktime_get_with_offset(i32 0) noredzone
  %coerce.dive = getelementptr %union.ktime* %retval, i32 0, i32 0
  store i64 %call, i64* %coerce.dive
  %coerce.dive1 = getelementptr %union.ktime* %retval, i32 0, i32 0
  %0 = load i64* %coerce.dive1
  ret i64 %0
}

define internal void @create_debug_files(%struct.ehci_hcd* %bus) nounwind inlinehint noredzone {
entry:
  %bus.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %bus, %struct.ehci_hcd** %bus.addr, align 8
  ret void
}

define internal i32 @create_sysfs_files(%struct.ehci_hcd* %ehci) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %controller = alloca %struct.device*, align 8
  %i = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %0) noredzone
  %self = getelementptr inbounds %struct.usb_hcd* %call, i32 0, i32 0
  %controller1 = getelementptr inbounds %struct.usb_bus* %self, i32 0, i32 0
  %1 = load %struct.device** %controller1, align 8
  store %struct.device* %1, %struct.device** %controller, align 8
  store i32 0, i32* %i, align 4
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %call2 = call %struct.usb_hcd* @ehci_to_hcd(%struct.ehci_hcd* %2) noredzone
  %3 = bitcast %struct.usb_hcd* %call2 to i8*
  %bf.field.offs = getelementptr i8* %3, i32 352
  %4 = bitcast i8* %bf.field.offs to i32*
  %5 = load i32* %4, align 8
  %6 = lshr i32 %5, 7
  %bf.clear = and i32 %6, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %7 = load %struct.device** %controller, align 8
  %call3 = call i32 @device_create_file(%struct.device* %7, %struct.device_attribute* bitcast ({ { i8*, i16, [6 x i8] }, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }* @dev_attr_companion to %struct.device_attribute*)) noredzone
  store i32 %call3, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32* %i, align 4
  %tobool4 = icmp ne i32 %8, 0
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  br label %out

if.end6:                                          ; preds = %if.end
  %9 = load %struct.device** %controller, align 8
  %call7 = call i32 @device_create_file(%struct.device* %9, %struct.device_attribute* bitcast ({ { i8*, i16, [6 x i8] }, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }* @dev_attr_uframe_periodic_max to %struct.device_attribute*)) noredzone
  store i32 %call7, i32* %i, align 4
  br label %out

out:                                              ; preds = %if.end6, %if.then5
  %10 = load i32* %i, align 4
  ret i32 %10
}

declare i32 @device_create_file(%struct.device*, %struct.device_attribute*) noredzone

declare i64 @ktime_get_with_offset(i32) noredzone

declare void @usb_hcd_resume_root_hub(%struct.usb_hcd*) noredzone

declare void @usb_hc_died(%struct.usb_hcd*) noredzone

declare void @usb_hcd_poll_rh_status(%struct.usb_hcd*) noredzone

define internal void @__raw_spin_unlock_irq(%struct.raw_spinlock* %lock) nounwind inlinehint noredzone {
entry:
  %lock.addr = alloca %struct.raw_spinlock*, align 8
  store %struct.raw_spinlock* %lock, %struct.raw_spinlock** %lock.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.end

do.end:                                           ; preds = %do.body
  %0 = load %struct.raw_spinlock** %lock.addr, align 8
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0) noredzone
  br label %do.body1

do.body1:                                         ; preds = %do.end
  br label %do.body2

do.body2:                                         ; preds = %do.body1
  br label %do.end3

do.end3:                                          ; preds = %do.body2
  call void @arch_local_irq_enable() noredzone
  br label %do.end4

do.end4:                                          ; preds = %do.end3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !20
  ret void
}

define internal void @do_raw_spin_unlock(%struct.raw_spinlock* %lock) nounwind inlinehint noredzone {
entry:
  %lock.addr.i = alloca %struct.arch_spinlock*, align 8
  %__ret.i = alloca i16, align 2
  %lock.addr = alloca %struct.raw_spinlock*, align 8
  store %struct.raw_spinlock* %lock, %struct.raw_spinlock** %lock.addr, align 8
  %0 = load %struct.raw_spinlock** %lock.addr, align 8
  %raw_lock = getelementptr inbounds %struct.raw_spinlock* %0, i32 0, i32 0
  store %struct.arch_spinlock* %raw_lock, %struct.arch_spinlock** %lock.addr.i, align 8
  store i16 1, i16* %__ret.i, align 2
  %1 = load %struct.arch_spinlock** %lock.addr.i, align 8
  %2 = getelementptr inbounds %struct.arch_spinlock* %1, i32 0, i32 0
  %tickets.i = bitcast %union.anon.11* %2 to %struct.__raw_tickets*
  %head.i = getelementptr inbounds %struct.__raw_tickets* %tickets.i, i32 0, i32 0
  call void asm sideeffect "addw ${1:w}, $0\0A", "=*m,ri,*m,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i16* %head.i, i16 1, i16* %head.i) nounwind, !srcloc !21
  %3 = load i16* %__ret.i, align 2
  ret void
}

define internal void @arch_local_irq_enable() nounwind inlinehint noredzone {
entry:
  call void @native_irq_enable() noredzone
  ret void
}

define internal void @native_irq_enable() nounwind inlinehint noredzone {
entry:
  call void asm sideeffect "sti", "~{memory},~{dirflag},~{fpsr},~{flags}"() nounwind, !srcloc !22
  ret void
}

declare void @_raw_spin_lock_irq(%struct.raw_spinlock*) noredzone section ".spinlock.text"

define internal i32 @ehci_port_change(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %retval = alloca i32, align 4
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %i = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %hcs_params = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 10
  %1 = load i32* %hcs_params, align 4
  %shr = lshr i32 %1, 0
  %and = and i32 %shr, 15
  store i32 %and, i32* %i, align 4
  %2 = load %struct.ehci_hcd** %ehci.addr, align 8
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %3, i32 0, i32 8
  %4 = load %struct.ehci_regs** %regs, align 8
  %status = getelementptr inbounds %struct.ehci_regs* %4, i32 0, i32 1
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %2, i32* %status) noredzone
  %and1 = and i32 %call, 4
  %tobool = icmp ne i32 %and1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end8, %if.end
  %5 = load i32* %i, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %i, align 4
  %tobool2 = icmp ne i32 %5, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %7 = load i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs3 = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 8
  %9 = load %struct.ehci_regs** %regs3, align 8
  %port_status = getelementptr inbounds %struct.ehci_regs* %9, i32 0, i32 11
  %arrayidx = getelementptr [0 x i32]* %port_status, i32 0, i64 %idxprom
  %call4 = call i32 @ehci_readl(%struct.ehci_hcd* %6, i32* %arrayidx) noredzone
  %and5 = and i32 %call4, 2
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.body
  store i32 1, i32* %retval
  br label %return

if.end8:                                          ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then7, %if.then
  %10 = load i32* %retval
  ret i32 %10
}

declare void @dma_pool_destroy(%struct.dma_pool*) noredzone

define internal void @dma_free_attrs(%struct.device* %dev, i64 %size, i8* %vaddr, i64 %bus, %struct.dma_attrs* %attrs) nounwind inlinehint noredzone {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %size.addr = alloca i64, align 8
  %vaddr.addr = alloca i8*, align 8
  %bus.addr = alloca i64, align 8
  %attrs.addr = alloca %struct.dma_attrs*, align 8
  %ops = alloca %struct.dma_map_ops*, align 8
  %__ret_warn_on = alloca i32, align 4
  %_flags = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy3 = alloca i64, align 8
  %__dummy24 = alloca i64, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8* %vaddr, i8** %vaddr.addr, align 8
  store i64 %bus, i64* %bus.addr, align 8
  store %struct.dma_attrs* %attrs, %struct.dma_attrs** %attrs.addr, align 8
  %0 = load %struct.device** %dev.addr, align 8
  %call = call %struct.dma_map_ops* @get_dma_ops(%struct.device* %0) noredzone
  store %struct.dma_map_ops* %call, %struct.dma_map_ops** %ops, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %call1 = call i64 @arch_local_save_flags() noredzone
  store i64 %call1, i64* %_flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %cmp5 = icmp eq i64* %__dummy3, %__dummy24
  %conv6 = zext i1 %cmp5 to i32
  %1 = load i64* %_flags, align 8
  %call7 = call i32 @arch_irqs_disabled_flags(i64 %1) noredzone
  %tobool = icmp ne i32 %call7, 0
  %lnot = xor i1 %tobool, true
  %lnot8 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot8 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %2 = load i32* %__ret_warn_on, align 4
  %tobool9 = icmp ne i32 %2, 0
  %lnot10 = xor i1 %tobool9, true
  %lnot12 = xor i1 %lnot10, true
  %lnot.ext13 = zext i1 %lnot12 to i32
  %conv14 = sext i32 %lnot.ext13 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv14, i64 0)
  %tobool15 = icmp ne i64 %expval, 0
  br i1 %tobool15, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([37 x i8]* @.str32, i32 0, i32 0), i32 166) noredzone
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end
  %3 = load i32* %__ret_warn_on, align 4
  %tobool16 = icmp ne i32 %3, 0
  %lnot17 = xor i1 %tobool16, true
  %lnot19 = xor i1 %lnot17, true
  %lnot.ext20 = zext i1 %lnot19 to i32
  %conv21 = sext i32 %lnot.ext20 to i64
  %expval22 = call i64 @llvm.expect.i64(i64 %conv21, i64 0)
  %4 = load %struct.device** %dev.addr, align 8
  %5 = load i64* %size.addr, align 8
  %6 = load i8** %vaddr.addr, align 8
  %7 = load i64* %bus.addr, align 8
  call void @debug_dma_free_coherent(%struct.device* %4, i64 %5, i8* %6, i64 %7) noredzone
  %8 = load %struct.dma_map_ops** %ops, align 8
  %free = getelementptr inbounds %struct.dma_map_ops* %8, i32 0, i32 1
  %9 = load void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)** %free, align 8
  %tobool23 = icmp ne void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)* %9, null
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end
  %10 = load %struct.dma_map_ops** %ops, align 8
  %free25 = getelementptr inbounds %struct.dma_map_ops* %10, i32 0, i32 1
  %11 = load void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)** %free25, align 8
  %12 = load %struct.device** %dev.addr, align 8
  %13 = load i64* %size.addr, align 8
  %14 = load i8** %vaddr.addr, align 8
  %15 = load i64* %bus.addr, align 8
  %16 = load %struct.dma_attrs** %attrs.addr, align 8
  call void %11(%struct.device* %12, i64 %13, i8* %14, i64 %15, %struct.dma_attrs* %16) noredzone
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.end
  ret void
}

define internal %struct.dma_map_ops* @get_dma_ops(%struct.device* %dev) nounwind inlinehint noredzone {
entry:
  %retval = alloca %struct.dma_map_ops*, align 8
  %dev.addr = alloca %struct.device*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  %0 = load %struct.device** %dev.addr, align 8
  %tobool = icmp ne %struct.device* %0, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.device** %dev.addr, align 8
  %archdata = getelementptr inbounds %struct.device* %1, i32 0, i32 19
  %dma_ops = getelementptr inbounds %struct.dev_archdata* %archdata, i32 0, i32 0
  %2 = load %struct.dma_map_ops** %dma_ops, align 8
  %tobool4 = icmp ne %struct.dma_map_ops* %2, null
  br i1 %tobool4, label %if.else, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.dma_map_ops** @dma_ops, align 8
  store %struct.dma_map_ops* %3, %struct.dma_map_ops** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %struct.device** %dev.addr, align 8
  %archdata5 = getelementptr inbounds %struct.device* %4, i32 0, i32 19
  %dma_ops6 = getelementptr inbounds %struct.dev_archdata* %archdata5, i32 0, i32 0
  %5 = load %struct.dma_map_ops** %dma_ops6, align 8
  store %struct.dma_map_ops* %5, %struct.dma_map_ops** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %6 = load %struct.dma_map_ops** %retval
  ret %struct.dma_map_ops* %6
}

define internal i64 @arch_local_save_flags() nounwind inlinehint noredzone {
entry:
  %call = call i64 @native_save_fl() noredzone
  ret i64 %call
}

define internal i32 @arch_irqs_disabled_flags(i64 %flags) nounwind inlinehint noredzone {
entry:
  %flags.addr = alloca i64, align 8
  store i64 %flags, i64* %flags.addr, align 8
  %0 = load i64* %flags.addr, align 8
  %and = and i64 %0, 512
  %tobool = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

define internal void @debug_dma_free_coherent(%struct.device* %dev, i64 %size, i8* %virt, i64 %addr) nounwind inlinehint noredzone {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %size.addr = alloca i64, align 8
  %virt.addr = alloca i8*, align 8
  %addr.addr = alloca i64, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8* %virt, i8** %virt.addr, align 8
  store i64 %addr, i64* %addr.addr, align 8
  ret void
}

define internal i64 @native_save_fl() nounwind inlinehint noredzone {
entry:
  %flags = alloca i64, align 8
  call void asm sideeffect "# __raw_save_flags\0A\09pushf ; pop $0", "=*rm,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %flags) nounwind, !srcloc !23
  %0 = load i64* %flags, align 8
  ret i64 %0
}

define internal void @tdi_reset(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %tmp = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 8
  %2 = load %struct.ehci_regs** %regs, align 8
  %usbmode = getelementptr inbounds %struct.ehci_regs* %2, i32 0, i32 13
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %0, i32* %usbmode) noredzone
  store i32 %call, i32* %tmp, align 4
  %3 = load i32* %tmp, align 4
  %or = or i32 %3, 3
  store i32 %or, i32* %tmp, align 4
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %5 = load i32* %tmp, align 4
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs1 = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 8
  %7 = load %struct.ehci_regs** %regs1, align 8
  %usbmode2 = getelementptr inbounds %struct.ehci_regs* %7, i32 0, i32 13
  call void @ehci_writel(%struct.ehci_hcd* %4, i32 %5, i32* %usbmode2) noredzone
  ret void
}

declare void @hrtimer_init(%struct.hrtimer*, i32, i32) noredzone

define internal i32 @ehci_hrtimer_func(%struct.hrtimer* %t) nounwind noredzone {
entry:
  %t.addr = alloca %struct.hrtimer*, align 8
  %ehci = alloca %struct.ehci_hcd*, align 8
  %__mptr = alloca %struct.hrtimer*, align 8
  %now = alloca %union.ktime, align 8
  %events = alloca i64, align 8
  %flags = alloca i64, align 8
  %e = alloca i32, align 4
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %coerce = alloca %union.ktime, align 8
  store %struct.hrtimer* %t, %struct.hrtimer** %t.addr, align 8
  %0 = load %struct.hrtimer** %t.addr, align 8
  store %struct.hrtimer* %0, %struct.hrtimer** %__mptr, align 8
  %1 = load %struct.hrtimer** %__mptr, align 8
  %2 = bitcast %struct.hrtimer* %1 to i8*
  %add.ptr = getelementptr i8* %2, i64 -96
  %3 = bitcast i8* %add.ptr to %struct.ehci_hcd*
  store %struct.ehci_hcd* %3, %struct.ehci_hcd** %ehci, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %4 = load %struct.ehci_hcd** %ehci, align 8
  %lock = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 11
  %call = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) noredzone
  %call2 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call) noredzone
  store i64 %call2, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.end3

do.end3:                                          ; preds = %do.end
  %5 = load %struct.ehci_hcd** %ehci, align 8
  %enabled_hrtimer_events = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 1
  %6 = load i32* %enabled_hrtimer_events, align 4
  %conv4 = zext i32 %6 to i64
  store i64 %conv4, i64* %events, align 8
  %7 = load %struct.ehci_hcd** %ehci, align 8
  %enabled_hrtimer_events5 = getelementptr inbounds %struct.ehci_hcd* %7, i32 0, i32 1
  store i32 0, i32* %enabled_hrtimer_events5, align 4
  %8 = load %struct.ehci_hcd** %ehci, align 8
  %next_hrtimer_event = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 0
  store i32 99, i32* %next_hrtimer_event, align 4
  %call6 = call i64 @ktime_get() noredzone
  %coerce.dive = getelementptr %union.ktime* %coerce, i32 0, i32 0
  store i64 %call6, i64* %coerce.dive
  %9 = bitcast %union.ktime* %now to i8*
  %10 = bitcast %union.ktime* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %call7 = call i64 @find_first_bit(i64* %events, i64 11) noredzone
  %conv8 = trunc i64 %call7 to i32
  store i32 %conv8, i32* %e, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end3
  %11 = load i32* %e, align 4
  %cmp9 = icmp ult i32 %11, 11
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %tv64 = bitcast %union.ktime* %now to i64*
  %12 = load i64* %tv64, align 8
  %13 = load i32* %e, align 4
  %idxprom = zext i32 %13 to i64
  %14 = load %struct.ehci_hcd** %ehci, align 8
  %hr_timeouts = getelementptr inbounds %struct.ehci_hcd* %14, i32 0, i32 2
  %arrayidx = getelementptr [11 x %union.ktime]* %hr_timeouts, i32 0, i64 %idxprom
  %tv6411 = bitcast %union.ktime* %arrayidx to i64*
  %15 = load i64* %tv6411, align 8
  %cmp12 = icmp sge i64 %12, %15
  br i1 %cmp12, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %16 = load i32* %e, align 4
  %idxprom14 = zext i32 %16 to i64
  %arrayidx15 = getelementptr [11 x void (%struct.ehci_hcd*)*]* @event_handlers, i32 0, i64 %idxprom14
  %17 = load void (%struct.ehci_hcd*)** %arrayidx15, align 8
  %18 = load %struct.ehci_hcd** %ehci, align 8
  call void %17(%struct.ehci_hcd* %18) noredzone
  br label %if.end

if.else:                                          ; preds = %for.body
  %19 = load %struct.ehci_hcd** %ehci, align 8
  %20 = load i32* %e, align 4
  call void @ehci_enable_event(%struct.ehci_hcd* %19, i32 %20, i1 zeroext false) noredzone
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %21 = load i32* %e, align 4
  %add = add i32 %21, 1
  %conv16 = zext i32 %add to i64
  %call17 = call i64 @find_next_bit(i64* %events, i64 11, i64 %conv16) noredzone
  %conv18 = trunc i64 %call17 to i32
  store i32 %conv18, i32* %e, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load %struct.ehci_hcd** %ehci, align 8
  %lock19 = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 11
  %23 = load i64* %flags, align 8
  call void @spin_unlock_irqrestore(%struct.spinlock* %lock19, i64 %23) noredzone
  ret i32 0
}

declare i64 @find_first_bit(i64*, i64) noredzone

declare i64 @find_next_bit(i64*, i64, i64) noredzone

define internal void @unlink_empty_async(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %qh = alloca %struct.ehci_qh*, align 8
  %qh_to_unlink = alloca %struct.ehci_qh*, align 8
  %count = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store %struct.ehci_qh* null, %struct.ehci_qh** %qh_to_unlink, align 8
  store i32 0, i32* %count, align 4
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async = getelementptr inbounds %struct.ehci_hcd* %0, i32 0, i32 15
  %1 = load %struct.ehci_qh** %async, align 8
  %qh_next = getelementptr inbounds %struct.ehci_qh* %1, i32 0, i32 2
  %qh1 = bitcast %union.ehci_shadow* %qh_next to %struct.ehci_qh**
  %2 = load %struct.ehci_qh** %qh1, align 8
  store %struct.ehci_qh* %2, %struct.ehci_qh** %qh, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.ehci_qh** %qh, align 8
  %tobool = icmp ne %struct.ehci_qh* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ehci_qh** %qh, align 8
  %qtd_list = getelementptr inbounds %struct.ehci_qh* %4, i32 0, i32 3
  %call = call i32 @list_empty(%struct.list_head* %qtd_list) noredzone
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.ehci_qh** %qh, align 8
  %qh_state = getelementptr inbounds %struct.ehci_qh* %5, i32 0, i32 9
  %6 = load i8* %qh_state, align 1
  %conv = zext i8 %6 to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %land.lhs.true
  %7 = load i32* %count, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %count, align 4
  %8 = load %struct.ehci_qh** %qh, align 8
  %unlink_cycle = getelementptr inbounds %struct.ehci_qh* %8, i32 0, i32 8
  %9 = load i32* %unlink_cycle, align 4
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink_cycle = getelementptr inbounds %struct.ehci_hcd* %10, i32 0, i32 19
  %11 = load i32* %async_unlink_cycle, align 4
  %cmp4 = icmp ne i32 %9, %11
  br i1 %cmp4, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then
  %12 = load %struct.ehci_qh** %qh, align 8
  store %struct.ehci_qh* %12, %struct.ehci_qh** %qh_to_unlink, align 8
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.then
  br label %if.end7

if.end7:                                          ; preds = %if.end, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end7
  %13 = load %struct.ehci_qh** %qh, align 8
  %qh_next8 = getelementptr inbounds %struct.ehci_qh* %13, i32 0, i32 2
  %qh9 = bitcast %union.ehci_shadow* %qh_next8 to %struct.ehci_qh**
  %14 = load %struct.ehci_qh** %qh9, align 8
  store %struct.ehci_qh* %14, %struct.ehci_qh** %qh, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink = getelementptr inbounds %struct.ehci_hcd* %15, i32 0, i32 17
  %call10 = call i32 @list_empty(%struct.list_head* %async_unlink) noredzone
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %land.lhs.true12, label %if.end15

land.lhs.true12:                                  ; preds = %for.end
  %16 = load %struct.ehci_qh** %qh_to_unlink, align 8
  %tobool13 = icmp ne %struct.ehci_qh* %16, null
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %land.lhs.true12
  %17 = load %struct.ehci_hcd** %ehci.addr, align 8
  %18 = load %struct.ehci_qh** %qh_to_unlink, align 8
  call void @start_unlink_async(%struct.ehci_hcd* %17, %struct.ehci_qh* %18) noredzone
  %19 = load i32* %count, align 4
  %dec = add i32 %19, -1
  store i32 %dec, i32* %count, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %land.lhs.true12, %for.end
  %20 = load i32* %count, align 4
  %cmp16 = icmp sgt i32 %20, 0
  br i1 %cmp16, label %if.then18, label %if.end21

if.then18:                                        ; preds = %if.end15
  %21 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_enable_event(%struct.ehci_hcd* %21, i32 6, i1 zeroext true) noredzone
  %22 = load %struct.ehci_hcd** %ehci.addr, align 8
  %async_unlink_cycle19 = getelementptr inbounds %struct.ehci_hcd* %22, i32 0, i32 19
  %23 = load i32* %async_unlink_cycle19, align 4
  %inc20 = add i32 %23, 1
  store i32 %inc20, i32* %async_unlink_cycle19, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.end15
  ret void
}

define internal void @ehci_iaa_watchdog(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %cmd = alloca i32, align 4
  %status = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = bitcast %struct.ehci_hcd* %0 to i8*
  %bf.field.offs = getelementptr i8* %1, i32 244
  %2 = load i8* %bf.field.offs, align 4
  %3 = lshr i8 %2, 3
  %bf.clear = and i8 %3, 1
  %4 = trunc i8 %bf.clear to i1
  br i1 %4, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.ehci_hcd** %ehci.addr, align 8
  %rh_state = getelementptr inbounds %struct.ehci_hcd* %5, i32 0, i32 12
  %6 = load i32* %rh_state, align 4
  %cmp = icmp ne i32 %6, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %struct.ehci_hcd** %ehci.addr, align 8
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %8, i32 0, i32 8
  %9 = load %struct.ehci_regs** %regs, align 8
  %command = getelementptr inbounds %struct.ehci_regs* %9, i32 0, i32 0
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %7, i32* %command) noredzone
  store i32 %call, i32* %cmd, align 4
  %10 = load %struct.ehci_hcd** %ehci.addr, align 8
  %11 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs1 = getelementptr inbounds %struct.ehci_hcd* %11, i32 0, i32 8
  %12 = load %struct.ehci_regs** %regs1, align 8
  %status2 = getelementptr inbounds %struct.ehci_regs* %12, i32 0, i32 1
  %call3 = call i32 @ehci_readl(%struct.ehci_hcd* %10, i32* %status2) noredzone
  store i32 %call3, i32* %status, align 4
  %13 = load i32* %status, align 4
  %and = and i32 %13, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then7, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.end
  %14 = load i32* %cmd, align 4
  %and5 = and i32 %14, 64
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end10, label %if.then7

if.then7:                                         ; preds = %lor.lhs.false4, %if.end
  br label %do.body

do.body:                                          ; preds = %if.then7
  br label %do.end

do.end:                                           ; preds = %do.body
  %15 = load %struct.ehci_hcd** %ehci.addr, align 8
  %16 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs8 = getelementptr inbounds %struct.ehci_hcd* %16, i32 0, i32 8
  %17 = load %struct.ehci_regs** %regs8, align 8
  %status9 = getelementptr inbounds %struct.ehci_regs* %17, i32 0, i32 1
  call void @ehci_writel(%struct.ehci_hcd* %15, i32 32, i32* %status9) noredzone
  br label %if.end10

if.end10:                                         ; preds = %do.end, %lor.lhs.false4
  %18 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @end_unlink_async(%struct.ehci_hcd* %18) noredzone
  br label %return

return:                                           ; preds = %if.end10, %if.then
  ret void
}

define internal void @ehci_disable_PSE(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_clear_command_bit(%struct.ehci_hcd* %0, i32 16) noredzone
  ret void
}

define internal void @ehci_disable_ASE(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  call void @ehci_clear_command_bit(%struct.ehci_hcd* %0, i32 32) noredzone
  ret void
}

define internal void @ehci_clear_command_bit(%struct.ehci_hcd* %ehci, i32 %bit) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %bit.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %bit, i32* %bit.addr, align 4
  %0 = load i32* %bit.addr, align 4
  %neg = xor i32 %0, -1
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 55
  %2 = load i32* %command, align 4
  %and = and i32 %2, %neg
  store i32 %and, i32* %command, align 4
  %3 = load %struct.ehci_hcd** %ehci.addr, align 8
  %4 = load %struct.ehci_hcd** %ehci.addr, align 8
  %command1 = getelementptr inbounds %struct.ehci_hcd* %4, i32 0, i32 55
  %5 = load i32* %command1, align 4
  %6 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %6, i32 0, i32 8
  %7 = load %struct.ehci_regs** %regs, align 8
  %command2 = getelementptr inbounds %struct.ehci_regs* %7, i32 0, i32 0
  call void @ehci_writel(%struct.ehci_hcd* %3, i32 %5, i32* %command2) noredzone
  %8 = load %struct.ehci_hcd** %ehci.addr, align 8
  %9 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs3 = getelementptr inbounds %struct.ehci_hcd* %9, i32 0, i32 8
  %10 = load %struct.ehci_regs** %regs3, align 8
  %command4 = getelementptr inbounds %struct.ehci_regs* %10, i32 0, i32 0
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %8, i32* %command4) noredzone
  ret void
}

declare %struct.dma_pool* @dma_pool_create(i8*, %struct.device*, i64, i64, i64) noredzone

define internal i8* @dma_alloc_attrs(%struct.device* %dev, i64 %size, i64* %dma_handle, i32 %gfp, %struct.dma_attrs* %attrs) nounwind inlinehint noredzone {
entry:
  %retval = alloca i8*, align 8
  %dev.addr = alloca %struct.device*, align 8
  %size.addr = alloca i64, align 8
  %dma_handle.addr = alloca i64*, align 8
  %gfp.addr = alloca i32, align 4
  %attrs.addr = alloca %struct.dma_attrs*, align 8
  %ops = alloca %struct.dma_map_ops*, align 8
  %memory = alloca i8*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64* %dma_handle, i64** %dma_handle.addr, align 8
  store i32 %gfp, i32* %gfp.addr, align 4
  store %struct.dma_attrs* %attrs, %struct.dma_attrs** %attrs.addr, align 8
  %0 = load %struct.device** %dev.addr, align 8
  %call = call %struct.dma_map_ops* @get_dma_ops(%struct.device* %0) noredzone
  store %struct.dma_map_ops* %call, %struct.dma_map_ops** %ops, align 8
  %1 = load i32* %gfp.addr, align 4
  %and = and i32 %1, -8
  store i32 %and, i32* %gfp.addr, align 4
  %2 = load %struct.device** %dev.addr, align 8
  %tobool = icmp ne %struct.device* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.device* @x86_dma_fallback_dev, %struct.device** %dev.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.device** %dev.addr, align 8
  %call1 = call i32 @is_device_dma_capable(%struct.device* %3) noredzone
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  store i8* null, i8** %retval
  br label %return

if.end4:                                          ; preds = %if.end
  %4 = load %struct.dma_map_ops** %ops, align 8
  %alloc = getelementptr inbounds %struct.dma_map_ops* %4, i32 0, i32 0
  %5 = load i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)** %alloc, align 8
  %tobool5 = icmp ne i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)* %5, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  store i8* null, i8** %retval
  br label %return

if.end7:                                          ; preds = %if.end4
  %6 = load %struct.dma_map_ops** %ops, align 8
  %alloc8 = getelementptr inbounds %struct.dma_map_ops* %6, i32 0, i32 0
  %7 = load i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)** %alloc8, align 8
  %8 = load %struct.device** %dev.addr, align 8
  %9 = load i64* %size.addr, align 8
  %10 = load i64** %dma_handle.addr, align 8
  %11 = load %struct.device** %dev.addr, align 8
  %12 = load i32* %gfp.addr, align 4
  %call9 = call i32 @dma_alloc_coherent_gfp_flags(%struct.device* %11, i32 %12) noredzone
  %13 = load %struct.dma_attrs** %attrs.addr, align 8
  %call10 = call i8* %7(%struct.device* %8, i64 %9, i64* %10, i32 %call9, %struct.dma_attrs* %13) noredzone
  store i8* %call10, i8** %memory, align 8
  %14 = load %struct.device** %dev.addr, align 8
  %15 = load i64* %size.addr, align 8
  %16 = load i64** %dma_handle.addr, align 8
  %17 = load i64* %16, align 8
  %18 = load i8** %memory, align 8
  call void @debug_dma_alloc_coherent(%struct.device* %14, i64 %15, i64 %17, i8* %18) noredzone
  %19 = load i8** %memory, align 8
  store i8* %19, i8** %retval
  br label %return

return:                                           ; preds = %if.end7, %if.then6, %if.then3
  %20 = load i8** %retval
  ret i8* %20
}

define internal i8* @kcalloc(i64 %n, i64 %size, i32 %flags) nounwind inlinehint noredzone {
entry:
  %n.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %n, i64* %n.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64* %n.addr, align 8
  %1 = load i64* %size.addr, align 8
  %2 = load i32* %flags.addr, align 4
  %or = or i32 %2, 32768
  %call = call i8* @kmalloc_array(i64 %0, i64 %1, i32 %or) noredzone
  ret i8* %call
}

define internal i8* @kmalloc_array(i64 %n, i64 %size, i32 %flags) nounwind inlinehint noredzone {
entry:
  %retval = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %n, i64* %n.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64* %size.addr, align 8
  %cmp = icmp ne i64 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %n.addr, align 8
  %2 = load i64* %size.addr, align 8
  %div = udiv i64 -1, %2
  %cmp1 = icmp ugt i64 %1, %div
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i64* %n.addr, align 8
  %4 = load i64* %size.addr, align 8
  %mul = mul i64 %3, %4
  %5 = load i32* %flags.addr, align 4
  %call = call i8* @__kmalloc(i64 %mul, i32 %5) noredzone
  store i8* %call, i8** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8** %retval
  ret i8* %6
}

define internal i32 @is_device_dma_capable(%struct.device* %dev) nounwind inlinehint noredzone {
entry:
  %dev.addr = alloca %struct.device*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  %0 = load %struct.device** %dev.addr, align 8
  %dma_mask = getelementptr inbounds %struct.device* %0, i32 0, i32 13
  %1 = load i64** %dma_mask, align 8
  %cmp = icmp ne i64* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.device** %dev.addr, align 8
  %dma_mask1 = getelementptr inbounds %struct.device* %2, i32 0, i32 13
  %3 = load i64** %dma_mask1, align 8
  %4 = load i64* %3, align 8
  %cmp2 = icmp ne i64 %4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
}

define internal i32 @dma_alloc_coherent_gfp_flags(%struct.device* %dev, i32 %gfp) nounwind inlinehint noredzone {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %gfp.addr = alloca i32, align 4
  %dma_mask = alloca i64, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store i32 %gfp, i32* %gfp.addr, align 4
  %0 = load %struct.device** %dev.addr, align 8
  %1 = load i32* %gfp.addr, align 4
  %call = call i64 @dma_alloc_coherent_mask(%struct.device* %0, i32 %1) noredzone
  store i64 %call, i64* %dma_mask, align 8
  %2 = load i64* %dma_mask, align 8
  %cmp = icmp ule i64 %2, 16777215
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32* %gfp.addr, align 4
  %or = or i32 %3, 1
  store i32 %or, i32* %gfp.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64* %dma_mask, align 8
  %cmp1 = icmp ule i64 %4, 4294967295
  br i1 %cmp1, label %land.lhs.true, label %if.end4

land.lhs.true:                                    ; preds = %if.end
  %5 = load i32* %gfp.addr, align 4
  %and = and i32 %5, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end4, label %if.then2

if.then2:                                         ; preds = %land.lhs.true
  %6 = load i32* %gfp.addr, align 4
  %or3 = or i32 %6, 4
  store i32 %or3, i32* %gfp.addr, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %land.lhs.true, %if.end
  %7 = load i32* %gfp.addr, align 4
  ret i32 %7
}

define internal void @debug_dma_alloc_coherent(%struct.device* %dev, i64 %size, i64 %dma_addr, i8* %virt) nounwind inlinehint noredzone {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %size.addr = alloca i64, align 8
  %dma_addr.addr = alloca i64, align 8
  %virt.addr = alloca i8*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 %dma_addr, i64* %dma_addr.addr, align 8
  store i8* %virt, i8** %virt.addr, align 8
  ret void
}

define internal i64 @dma_alloc_coherent_mask(%struct.device* %dev, i32 %gfp) nounwind inlinehint noredzone {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %gfp.addr = alloca i32, align 4
  %dma_mask = alloca i64, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store i32 %gfp, i32* %gfp.addr, align 4
  store i64 0, i64* %dma_mask, align 8
  %0 = load %struct.device** %dev.addr, align 8
  %coherent_dma_mask = getelementptr inbounds %struct.device* %0, i32 0, i32 14
  %1 = load i64* %coherent_dma_mask, align 8
  store i64 %1, i64* %dma_mask, align 8
  %2 = load i64* %dma_mask, align 8
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i32* %gfp.addr, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  %cond = select i1 %tobool1, i64 16777215, i64 4294967295
  store i64 %cond, i64* %dma_mask, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64* %dma_mask, align 8
  ret i64 %4
}

define internal i32 @tdi_in_host_mode(%struct.ehci_hcd* %ehci) nounwind noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %tmp = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  %0 = load %struct.ehci_hcd** %ehci.addr, align 8
  %1 = load %struct.ehci_hcd** %ehci.addr, align 8
  %regs = getelementptr inbounds %struct.ehci_hcd* %1, i32 0, i32 8
  %2 = load %struct.ehci_regs** %regs, align 8
  %usbmode = getelementptr inbounds %struct.ehci_regs* %2, i32 0, i32 13
  %call = call i32 @ehci_readl(%struct.ehci_hcd* %0, i32* %usbmode) noredzone
  store i32 %call, i32* %tmp, align 4
  %3 = load i32* %tmp, align 4
  %and = and i32 %3, 3
  %cmp = icmp eq i32 %and, 3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define internal void @set_ohci_hcfs(%struct.ehci_hcd* %ehci, i32 %operational) nounwind inlinehint noredzone {
entry:
  %ehci.addr = alloca %struct.ehci_hcd*, align 8
  %operational.addr = alloca i32, align 4
  store %struct.ehci_hcd* %ehci, %struct.ehci_hcd** %ehci.addr, align 8
  store i32 %operational, i32* %operational.addr, align 4
  ret void
}

declare void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock*, i64) noredzone section ".spinlock.text"

define internal void @imx28_ehci_writel(i32 %val, i32* %addr) nounwind inlinehint noredzone {
entry:
  %val.addr = alloca i32, align 4
  %addr.addr = alloca i32*, align 8
  store i32 %val, i32* %val.addr, align 4
  store i32* %addr, i32** %addr.addr, align 8
  ret void
}

define internal void @writel(i32 %val, i8* %addr) nounwind inlinehint noredzone {
entry:
  %val.addr = alloca i32, align 4
  %addr.addr = alloca i8*, align 8
  store i32 %val, i32* %val.addr, align 4
  store i8* %addr, i8** %addr.addr, align 8
  %0 = load i32* %val.addr, align 4
  %1 = load i8** %addr.addr, align 8
  %2 = bitcast i8* %1 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %0, i32* %2) nounwind, !srcloc !24
  ret void
}

!0 = metadata !{i32 -2146991575, i32 -2146991536, i32 -2146991515, i32 -2146991478, i32 -2146991455, i32 -2146991585} 
!1 = metadata !{i32 -2146990836, i32 -2146990797, i32 -2146990776, i32 -2146990739, i32 -2146990716, i32 -2146990846} 
!2 = metadata !{i32 397574, i32 397585}
!3 = metadata !{i32 -2145896381}                  
!4 = metadata !{i32 -2143521632}                  
!5 = metadata !{i32 -2143534530}                  
!6 = metadata !{i32 -2143533230}                  
!7 = metadata !{i32 -2143448121}                  
!8 = metadata !{i32 -2143447278}                  
!9 = metadata !{i32 -2143519391}                  
!10 = metadata !{i32 -2143426803}                 
!11 = metadata !{i32 -2143426582}                 
!12 = metadata !{i32 -2143426348}                 
!13 = metadata !{i32 -2143582091, i32 -2143582066, i32 -2143581796, i32 -2143581999, i32 -2143581968, i32 -2143581938} 
!14 = metadata !{i32 -2143445917, i32 -2143445892, i32 -2143445622, i32 -2143445825, i32 -2143445794, i32 -2143445764} 
!15 = metadata !{i32 -2143429789, i32 -2143429764, i32 -2143429494, i32 -2143429697, i32 -2143429666, i32 -2143429636} 
!16 = metadata !{i32 -2143429997}                 
!17 = metadata !{i32 -2143434638}                 
!18 = metadata !{i32 -2143520371}                 
!19 = metadata !{i32 401793}
!20 = metadata !{i32 -2146450836}                 
!21 = metadata !{i32 -2146473107}                 
!22 = metadata !{i32 848236}                      
!23 = metadata !{i32 847794, i32 847815}          
!24 = metadata !{i32 -2145894642}                 
