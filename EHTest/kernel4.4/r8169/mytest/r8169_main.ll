; ModuleID = '/home/chenql/code/EHTest/kernel4.4/r8169/r8169_main.c'
source_filename = "/home/chenql/code/EHTest/kernel4.4/r8169/r8169_main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pci_device_id = type { i32, i32, i32, i32, i32, i32, i64 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.kernel_symbol*, i64*, i8, i8, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, [56 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, i32, i64*, i8, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.8 }
%union.anon.8 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type { %struct.sock_common, %struct.socket_lock_t, %struct.sk_buff_head, %struct.anon.87, i32, i32, i32, i32, %struct.atomic_t, i32, %struct.sk_filter*, %union.anon.89, [2 x %struct.xfrm_policy*], %struct.dst_entry*, %struct.dst_entry*, %struct.atomic_t, %struct.atomic_t, i32, %struct.sk_buff_head, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i16, i32, i64, %struct.sk_buff_head, %struct.proto*, %struct.rwlock_t, i32, i32, i32, i32, i32, i32, %struct.pid*, %struct.cred*, i64, i64, %struct.timer_list, %union.ktime, i16, i32, %struct.socket*, i8*, %struct.page_frag, %struct.sk_buff*, i32, i32, i8*, i32, i32, %struct.cg_proto*, void (%struct.sock*)*, void (%struct.sock*)*, void (%struct.sock*)*, void (%struct.sock*)*, i32 (%struct.sock*, %struct.sk_buff*)*, void (%struct.sock*)* }
%struct.sock_common = type { %union.anon, %union.anon.0, %union.anon.1, i16, i8, i8, i32, %union.anon.3, %struct.proto*, %struct.possible_net_t, %struct.in6_addr, %struct.in6_addr, %struct.atomic64_t, %union.anon.83, [0 x i32], %union.anon.84, i32, %union.anon.85, %struct.atomic_t, [0 x i32], %union.anon.86 }
%union.anon = type { i64 }
%union.anon.0 = type { i32 }
%union.anon.1 = type { i32 }
%union.anon.3 = type { %struct.hlist_node }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.possible_net_t = type { %struct.net* }
%struct.net = type { %struct.atomic_t, %struct.atomic_t, %struct.spinlock, %struct.atomic64_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.user_namespace*, %struct.spinlock, %struct.idr, %struct.ns_common, %struct.proc_dir_entry*, %struct.proc_dir_entry*, %struct.ctl_table_set, %struct.sock*, %struct.sock*, %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, i32, i32, i32, %struct.list_head, %struct.net_device*, %struct.netns_core, %struct.netns_mib, %struct.netns_packet, %struct.netns_unix, [32 x i8], %struct.netns_ipv4, %struct.netns_ipv6, %struct.netns_ieee802154_lowpan, %struct.netns_sctp, %struct.netns_dccp, %struct.netns_nf, %struct.netns_xt, %struct.netns_ct, %struct.netns_nftables, %struct.netns_nf_frag, %struct.sock*, %struct.sock*, %struct.list_head, %struct.sk_buff_head, %struct.net_generic*, %struct.netns_xfrm, %struct.netns_ipvs*, %struct.netns_mpls, %struct.sock*, %struct.atomic_t, [20 x i8] }
%struct.user_namespace = type { %struct.uid_gid_map, %struct.uid_gid_map, %struct.uid_gid_map, %struct.atomic_t, %struct.user_namespace*, i32, %struct.kuid_t, %struct.kgid_t, %struct.ns_common, i64, %struct.key*, %struct.rw_semaphore }
%struct.uid_gid_map = type { i32, [5 x %struct.uid_gid_extent] }
%struct.uid_gid_extent = type { i32, i32, i32 }
%struct.kuid_t = type { i32 }
%struct.kgid_t = type { i32 }
%struct.key = type { %struct.atomic_t, i32, %union.anon.100, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.101, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i16, i64, %union.anon.102, %union.anon.104 }
%union.anon.100 = type { %struct.rb_node }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.key_user = type opaque
%union.anon.101 = type { i64 }
%union.anon.102 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.104 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.rw_semaphore = type { i64, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, %struct.hlist_head, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, i32, [4 x %struct.vm_area_struct*], %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, i64, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, i64, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, i32, i32, i32, i32, i64, i64, i64, i64, %struct.callback_head, %struct.list_head, %struct.numa_group*, i64*, i64, [3 x i64], i64, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i32, %struct.ftrace_ret_stack*, i64, %struct.atomic_t, %struct.atomic_t, i64, i64, %struct.mem_cgroup*, i32, i32, i32, %struct.uprobe_task*, i32, i32, i32, [12 x i8], %struct.thread_struct }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, %union.ktime, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, %union.ktime, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.cpumask = type { [8 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.task_struct*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i64, i64, i32, i8, i8, %struct.uprobes_state, i8*, %struct.atomic64_t }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.9, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.9 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, %struct.pmd_t*, i32)*, void (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.pmd_t = type { i64 }
%struct.vm_fault = type { i32, i64, i8*, %struct.page*, %struct.page*, i64, %struct.pte_t* }
%struct.page = type { i64, %union.anon.5, %struct.anon.71, %union.anon.77, %union.anon.81, %struct.mem_cgroup* }
%union.anon.5 = type { %struct.address_space* }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, %struct.list_head, i8* }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.107, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, i64, %struct.hlist_node, %struct.list_head, %struct.bdi_writeback*, i32, i16, i16, %struct.list_head, %struct.list_head, %union.anon.108, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.109, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, i8**)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.inode*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [48 x i8] }
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.15 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.11, i8* }
%union.anon.11 = type { i64 }
%struct.lockref = type { %union.anon.13 }
%union.anon.13 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, %struct.inode* (%struct.dentry*, i32)*, %struct.dentry* (%struct.dentry*, %struct.inode*)*, [24 x i8] }
%struct.vfsmount = type opaque
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%union.anon.15 = type { %struct.hlist_node }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, %struct.kuid_t, %struct.kgid_t, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, [32 x i8], %struct.list_lru, [40 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [12 x i8], %struct.spinlock, %struct.list_head, [40 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)*, %struct.file* (%struct.file*)* }
%struct.writeback_control = type { i64, i64, i64, i64, i32, i8, %struct.bdi_writeback*, %struct.inode*, i32, i32, i32, i64, i64, i64 }
%struct.kstatfs = type opaque
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.106, i32 }
%union.anon.106 = type { %struct.kuid_t }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.atomic_t, %struct.__wait_queue_head }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.list_lru = type { %struct.list_lru_node*, %struct.list_head }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, %struct.list_lru_memcg*, i64, [16 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.list_lru_memcg = type { [0 x %struct.list_lru_one*] }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.107 = type { i32 }
%struct.timespec = type { i64, i64 }
%struct.bdi_writeback = type { %struct.backing_dev_info*, i64, i64, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.spinlock, [4 x %struct.percpu_counter], %struct.bdi_writeback_congested*, i64, i64, i64, i64, i64, i64, i64, %struct.fprop_local_percpu, i32, %struct.spinlock, %struct.list_head, %struct.delayed_work, %struct.list_head, %struct.percpu_ref, %struct.fprop_local_percpu, %struct.cgroup_subsys_state*, %struct.cgroup_subsys_state*, %struct.list_head, %struct.list_head, %union.anon.49 }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.bdi_writeback_congested = type { i64, %struct.atomic_t, %struct.backing_dev_info*, i32, %struct.rb_node }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.percpu_ref = type { %struct.atomic64_t, i64, void (%struct.percpu_ref*)*, void (%struct.percpu_ref*)*, i8, %struct.callback_head }
%struct.fprop_local_percpu = type { %struct.percpu_counter, i32, %struct.raw_spinlock }
%struct.cgroup_subsys_state = type { %struct.cgroup*, %struct.cgroup_subsys*, %struct.percpu_ref, %struct.cgroup_subsys_state*, %struct.list_head, %struct.list_head, i32, i32, i64, %struct.atomic_t, %struct.callback_head, %struct.work_struct }
%struct.cgroup = type { %struct.cgroup_subsys_state, i64, i32, i32, %struct.kernfs_node*, %struct.cgroup_file, %struct.cgroup_file, i32, i32, [12 x %struct.cgroup_subsys_state*], %struct.cgroup_root*, %struct.list_head, [12 x %struct.list_head], %struct.list_head, %struct.mutex, %struct.__wait_queue_head, %struct.work_struct }
%struct.cgroup_file = type { %struct.kernfs_node* }
%struct.cgroup_root = type { %struct.kernfs_root*, i32, i32, %struct.cgroup, %struct.atomic_t, %struct.list_head, i32, %struct.idr, [4096 x i8], [64 x i8] }
%struct.kernfs_root = type { %struct.kernfs_node*, i32, %struct.ida, %struct.kernfs_syscall_ops*, %struct.list_head, %struct.__wait_queue_head }
%struct.ida = type { %struct.idr, %struct.ida_bitmap* }
%struct.ida_bitmap = type { i64, [15 x i64] }
%struct.kernfs_syscall_ops = type { i32 (%struct.kernfs_root*, i32*, i8*)*, i32 (%struct.seq_file*, %struct.kernfs_root*)*, i32 (%struct.kernfs_node*, i8*, i16)*, i32 (%struct.kernfs_node*)*, i32 (%struct.kernfs_node*, %struct.kernfs_node*, i8*)*, i32 (%struct.seq_file*, %struct.kernfs_node*, %struct.kernfs_root*)* }
%struct.cgroup_subsys = type { %struct.cgroup_subsys_state* (%struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void ()*, i32 (%struct.task_struct*, i8**)*, void (%struct.task_struct*, i8*)*, void (%struct.task_struct*, i8*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.cgroup_subsys_state*)*, i32, i8, i8, i32, i8*, i8*, %struct.cgroup_root*, %struct.idr, %struct.list_head, %struct.cftype*, %struct.cftype*, i32 }
%struct.cgroup_taskset = type opaque
%struct.cftype = type { [64 x i8], i64, i64, i32, i32, %struct.cgroup_subsys*, %struct.list_head, %struct.kernfs_ops*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)* }
%struct.kernfs_ops = type { i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, i8*, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%union.anon.49 = type { %struct.work_struct }
%union.anon.108 = type { %struct.callback_head }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.iov_iter = type { i32, i64, i64, %union.anon.4, i64 }
%union.anon.4 = type { %struct.iovec* }
%struct.iovec = type { i8*, i64 }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.16 }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.16 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%union.anon.109 = type { %struct.pipe_inode_info* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i32, i32, %union.anon.6, %struct.list_head, [64 x i8*], [3 x [1 x i64]] }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { %struct.radix_tree_node*, i8* }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*, i64)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.swap_info_struct = type opaque
%struct.anon.71 = type { %union.anon.72, %union.anon.73 }
%union.anon.72 = type { i64 }
%union.anon.73 = type { i64 }
%union.anon.77 = type { %struct.list_head }
%union.anon.81 = type { i64 }
%struct.pte_t = type { i64 }
%struct.vm_userfaultfd_ctx = type { %struct.userfaultfd_ctx* }
%struct.userfaultfd_ctx = type opaque
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.atomic_t }
%struct.ldt_struct = type opaque
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.file = type { %union.anon.10, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.10 = type { %struct.callback_head }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type { %struct.xol_area* }
%struct.xol_area = type opaque
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.18 }
%union.anon.18 = type { %struct.anon.19 }
%struct.anon.19 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type { %struct.atomic_t, %struct.uts_namespace*, %struct.ipc_namespace*, %struct.mnt_namespace*, %struct.pid_namespace*, %struct.net*, %struct.cgroup_namespace* }
%struct.uts_namespace = type opaque
%struct.ipc_namespace = type opaque
%struct.mnt_namespace = type opaque
%struct.pid_namespace = type opaque
%struct.cgroup_namespace = type { %struct.atomic_t, %struct.ns_common, %struct.user_namespace*, %struct.css_set* }
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.list_head, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, %struct.autogroup*, %struct.seqlock_t, i64, i64, i64, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, i32, i16, i16, %struct.mutex }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime_atomic, i8, i8 }
%struct.task_cputime_atomic = type { %struct.atomic64_t, %struct.atomic64_t, %struct.atomic64_t }
%struct.tty_struct = type opaque
%struct.autogroup = type opaque
%struct.seqlock_t = type { %struct.seqcount, %struct.spinlock }
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type { i16, i32, i8, i8, i64, i64, i64, i64, i64, i64, i64, i64, [32 x i8], i8, [3 x i8], [4 x i8], i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type { %struct.bio*, %struct.bio* }
%struct.bio = type { %struct.bio*, %struct.block_device*, i32, i32, i64, %struct.bvec_iter, i32, i32, i32, %struct.atomic_t, void (%struct.bio*)*, i8*, %struct.io_context*, %struct.cgroup_subsys_state*, %union.anon.91, i16, i16, %struct.atomic_t, %struct.bio_vec*, %struct.bio_set*, [0 x %struct.bio_vec] }
%struct.bvec_iter = type { i64, i32, i32, i32 }
%union.anon.91 = type { %struct.bio_integrity_payload* }
%struct.bio_integrity_payload = type { %struct.bio*, %struct.bvec_iter, void (%struct.bio*)*, i16, i16, i16, i16, %struct.work_struct, %struct.bio_vec*, [0 x %struct.bio_vec] }
%struct.bio_vec = type { %struct.page*, i32, i32 }
%struct.bio_set = type { %struct.kmem_cache*, i32, %struct.mempool_s*, %struct.mempool_s*, %struct.mempool_s*, %struct.mempool_s*, %struct.spinlock, %struct.bio_list, %struct.work_struct, %struct.workqueue_struct* }
%struct.kmem_cache = type opaque
%struct.mempool_s = type { %struct.spinlock, i32, i32, i8**, i8*, i8* (i32, i8*)*, void (i8*, i8*)*, %struct.__wait_queue_head }
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type { %struct.list_head, i64, i32, i32 (i8*, i32)*, i8*, i8*, %struct.kref, i32, i32, i32, %struct.atomic64_t, %struct.bdi_writeback, %struct.list_head, %struct.radix_tree_root, %struct.rb_root, %struct.__wait_queue_head, %struct.device*, %struct.device*, %struct.timer_list, %struct.dentry*, %struct.dentry* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.dev_pin_info*, %struct.list_head, i32, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64, i32, i32 }
%struct.driver_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i64, i8 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dev_pin_info = type { %struct.pinctrl*, %struct.pinctrl_state*, %struct.pinctrl_state*, %struct.pinctrl_state*, %struct.pinctrl_state* }
%struct.pinctrl = type opaque
%struct.pinctrl_state = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, %struct.dma_attrs*)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.dma_attrs = type { [1 x i64] }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_node = type { i8*, i8*, i32, i8*, %struct.fwnode_handle, %struct.property*, %struct.property*, %struct.device_node*, %struct.device_node*, %struct.device_node*, %struct.kobject, i64, i8* }
%struct.fwnode_handle = type { i32, %struct.fwnode_handle* }
%struct.property = type { i8*, i32, i8*, %struct.property*, i64, i32, %struct.bin_attribute }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.iommu_group = type opaque
%struct.io_context = type { %struct.atomic64_t, %struct.atomic_t, %struct.atomic_t, %struct.spinlock, i16, i32, i64, %struct.radix_tree_root, %struct.io_cq*, %struct.hlist_head, %struct.work_struct }
%struct.io_cq = type { %struct.request_queue*, %struct.io_context*, %union.anon.50, %union.anon.51, i32 }
%union.anon.50 = type { %struct.list_head }
%union.anon.51 = type { %struct.hlist_node }
%struct.siginfo = type { i32, i32, i32, %union.anon.52 }
%union.anon.52 = type { %struct.anon.56, [80 x i8] }
%struct.anon.56 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.seqcount = type { i32 }
%struct.css_set = type { %struct.atomic_t, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.cgroup*, [12 x %struct.cgroup_subsys_state*], %struct.list_head, %struct.list_head, %struct.cgroup*, %struct.css_set*, [12 x %struct.list_head], %struct.list_head, i8, %struct.callback_head }
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type { %struct.compat_robust_list, i32, i32 }
%struct.compat_robust_list = type { i32 }
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.numa_group = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type { %struct.mutex, %struct.__wait_queue_head, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.page*, %struct.fasync_struct*, %struct.fasync_struct*, %struct.pipe_buffer*, %struct.user_struct* }
%struct.pipe_buffer = type { %struct.page*, i32, i32, %struct.pipe_buf_operations*, i32, i64 }
%struct.pipe_buf_operations = type { i32, i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, void (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, void (%struct.pipe_inode_info*, %struct.pipe_buffer*)* }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, i64, %struct.atomic64_t, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.task_delay_info = type { %struct.spinlock, i32, i64, i64, i64, i32, i32, i64, i64, i32 }
%struct.ftrace_ret_stack = type opaque
%struct.mem_cgroup = type { %struct.cgroup_subsys_state, %struct.mem_cgroup_id, %struct.page_counter, %struct.page_counter, %struct.page_counter, i64, i64, i64, %struct.vmpressure, i32, i8, i8, i32, i32, i32, %struct.cgroup_file, %struct.mutex, %struct.mem_cgroup_thresholds, %struct.mem_cgroup_thresholds, %struct.list_head, i64, %struct.atomic_t, %struct.spinlock, %struct.task_struct*, i64, %struct.mem_cgroup_stat_cpu*, %struct.cg_proto, i32, i8, i8, i32, %struct.nodemask_t, %struct.atomic_t, %struct.atomic_t, %struct.list_head, %struct.wb_domain, %struct.list_head, %struct.spinlock, [0 x %struct.mem_cgroup_per_node*] }
%struct.mem_cgroup_id = type { i32, %struct.atomic_t }
%struct.page_counter = type { %struct.atomic64_t, i64, %struct.page_counter*, i64, i64 }
%struct.vmpressure = type { i64, i64, %struct.spinlock, %struct.list_head, %struct.mutex, %struct.work_struct }
%struct.mem_cgroup_thresholds = type { %struct.mem_cgroup_threshold_ary*, %struct.mem_cgroup_threshold_ary* }
%struct.mem_cgroup_threshold_ary = type { i32, i32, [0 x %struct.mem_cgroup_threshold] }
%struct.mem_cgroup_threshold = type { %struct.eventfd_ctx*, i64 }
%struct.eventfd_ctx = type opaque
%struct.mem_cgroup_stat_cpu = type { [7 x i64], [8 x i64], i64, [3 x i64] }
%struct.cg_proto = type { %struct.page_counter, %struct.percpu_counter, i32, [3 x i64], i64, %struct.mem_cgroup* }
%struct.wb_domain = type { %struct.spinlock, %struct.fprop_global, %struct.timer_list, i64, i64, i64 }
%struct.fprop_global = type { %struct.percpu_counter, i32, %struct.seqcount }
%struct.mem_cgroup_per_node = type { [5 x %struct.mem_cgroup_per_zone] }
%struct.mem_cgroup_per_zone = type { %struct.lruvec, [5 x i64], [13 x %struct.mem_cgroup_reclaim_iter], %struct.rb_node, i64, i8, %struct.mem_cgroup* }
%struct.lruvec = type { [5 x %struct.list_head], %struct.zone_reclaim_stat, %struct.zone* }
%struct.zone_reclaim_stat = type { [2 x i64], [2 x i64] }
%struct.zone = type { [3 x i64], i64, [5 x i64], i32, i32, %struct.pglist_data*, %struct.per_cpu_pageset*, i64, i64, i64, i64, i64, i64, i64, i8*, i64, %struct.seqlock_t, %struct.__wait_queue_head*, i64, i64, [56 x i8], %struct.zone_padding, [11 x %struct.free_area], i64, %struct.spinlock, [60 x i8], %struct.zone_padding, %struct.spinlock, %struct.lruvec, %struct.atomic64_t, i64, i64, [2 x i64], i32, i32, i32, i8, [11 x i8], %struct.zone_padding, [39 x %struct.atomic64_t], [8 x i8] }
%struct.pglist_data = type { [5 x %struct.zone], [2 x %struct.zonelist], i32, %struct.spinlock, i64, i64, i64, i32, %struct.__wait_queue_head, %struct.__wait_queue_head, %struct.task_struct*, i32, i32, %struct.spinlock, i64, i64, [32 x i8] }
%struct.zonelist = type { [321 x %struct.zoneref] }
%struct.zoneref = type { %struct.zone*, i32 }
%struct.per_cpu_pageset = type { %struct.per_cpu_pages, i8, i8, [39 x i8] }
%struct.per_cpu_pages = type { i32, i32, i32, [3 x %struct.list_head] }
%struct.free_area = type { [6 x %struct.list_head], i64 }
%struct.zone_padding = type { [0 x i8] }
%struct.mem_cgroup_reclaim_iter = type { %struct.mem_cgroup*, i32 }
%struct.uprobe_task = type { i32, %union.anon.61, %struct.uprobe*, i64, %struct.return_instance*, i32 }
%union.anon.61 = type { %struct.anon.62 }
%struct.anon.62 = type { %struct.arch_uprobe_task, i64 }
%struct.arch_uprobe_task = type { i64, i32, i32 }
%struct.uprobe = type opaque
%struct.return_instance = type { %struct.uprobe*, i64, i64, i64, i8, %struct.return_instance* }
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, [36 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.64 }
%union.anon.64 = type { %struct.anon.65 }
%struct.anon.65 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i8, i8, i8, [57 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.67, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.70 }
%union.anon.67 = type { %struct.anon.68 }
%struct.anon.68 = type { i64, i64 }
%union.anon.70 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.idr = type { %struct.idr_layer*, %struct.idr_layer*, i32, i32, %struct.spinlock, i32, %struct.idr_layer* }
%struct.idr_layer = type { i32, i32, [256 x %struct.idr_layer*], i32, %union.anon.22 }
%union.anon.22 = type { [4 x i64] }
%struct.ns_common = type { %struct.atomic64_t, %struct.proc_ns_operations*, i32 }
%struct.proc_ns_operations = type opaque
%struct.proc_dir_entry = type opaque
%struct.ctl_table_set = type { i32 (%struct.ctl_table_set*)*, %struct.ctl_dir }
%struct.ctl_dir = type { %struct.ctl_table_header, %struct.rb_root }
%struct.ctl_table_header = type { %union.anon.23, %struct.completion*, %struct.ctl_table*, %struct.ctl_table_root*, %struct.ctl_table_set*, %struct.ctl_dir*, %struct.ctl_node* }
%union.anon.23 = type { %struct.anon.24 }
%struct.anon.24 = type { %struct.ctl_table*, i32, i32, i32 }
%struct.ctl_table = type { i8*, i8*, i32, i16, %struct.ctl_table*, i32 (%struct.ctl_table*, i32, i8*, i64*, i64*)*, %struct.ctl_table_poll*, i8*, i8* }
%struct.ctl_table_poll = type { %struct.atomic_t, %struct.__wait_queue_head }
%struct.ctl_table_root = type { %struct.ctl_table_set, %struct.ctl_table_set* (%struct.ctl_table_root*, %struct.nsproxy*)*, i32 (%struct.ctl_table_header*, %struct.ctl_table*)* }
%struct.ctl_node = type { %struct.rb_node, %struct.ctl_table_header* }
%struct.net_device = type { [16 x i8], %struct.hlist_node, i8*, i64, i64, i64, i32, %struct.atomic_t, i64, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.anon.92, %struct.anon.93, i64, i64, i64, i64, i64, i64, i32, i32, %struct.net_device_stats, %struct.atomic64_t, %struct.atomic64_t, %struct.iw_handler_def*, %struct.iw_public_data*, %struct.net_device_ops*, %struct.ethtool_ops*, %struct.l3mdev_ops*, %struct.header_ops*, i32, i32, i16, i16, i8, i8, i8, i8, i32, i16, i16, i16, i16, i16, [32 x i8], i8, i8, i16, i16, i16, %struct.spinlock, i8, i8, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.kset*, i32, i32, %struct.vlan_info*, %struct.tipc_bearer*, i8*, %struct.in_device*, %struct.dn_dev*, %struct.inet6_dev*, i8*, %struct.wireless_dev*, %struct.wpan_dev*, %struct.mpls_dev*, i64, i8*, %struct.netdev_rx_queue*, i32, i32, i64, i32 (%struct.sk_buff**)*, i8*, %struct.tcf_proto*, %struct.netdev_queue*, %struct.list_head, [32 x i8], %struct.cpu_rmap*, %struct.hlist_node, [24 x i8], %struct.netdev_queue*, i32, i32, %struct.Qdisc*, i64, %struct.spinlock, i32, %struct.xps_dev_maps*, i64, %struct.timer_list, i32*, %struct.list_head, %struct.list_head, i8, i8, i16, void (%struct.net_device*)*, %struct.netpoll_info*, %struct.possible_net_t, %union.anon.99, %struct.garp_port*, %struct.mrp_port*, %struct.device, [4 x %struct.attribute_group*], %struct.attribute_group*, %struct.rtnl_link_ops*, i32, i16, i16, %struct.dcbnl_rtnl_ops*, i8, [16 x %struct.netdev_tc_txq], [16 x i8], i32, %struct.netprio_map*, %struct.phy_device*, %struct.lock_class_key*, i8, [15 x i8] }
%struct.anon.92 = type { %struct.list_head, %struct.list_head }
%struct.anon.93 = type { %struct.list_head, %struct.list_head }
%struct.net_device_stats = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.iw_handler_def = type opaque
%struct.iw_public_data = type opaque
%struct.net_device_ops = type { i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i16 (%struct.net_device*, %struct.sk_buff*, i8*, i16 (%struct.net_device*, %struct.sk_buff*)*)*, void (%struct.net_device*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ifreq*, i32)*, i32 (%struct.net_device*, %struct.ifmap*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.neigh_parms*)*, void (%struct.net_device*)*, %struct.rtnl_link_stats64* (%struct.net_device*, %struct.rtnl_link_stats64*)*, %struct.net_device_stats* (%struct.net_device*)*, i32 (%struct.net_device*, i16, i16)*, i32 (%struct.net_device*, i16, i16)*, void (%struct.net_device*)*, i32 (%struct.net_device*, %struct.netpoll_info*)*, void (%struct.net_device*)*, i32 (%struct.napi_struct*)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i16, i8)*, i32 (%struct.net_device*, i32, i32, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_info*)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_stats*)*, i32 (%struct.net_device*, i32, %struct.nlattr**)*, i32 (%struct.net_device*, i32, %struct.sk_buff*)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i16, %struct.tc_to_netdev*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i16, %struct.scatterlist*, i32)*, i32 (%struct.net_device*, i16)*, i32 (%struct.net_device*, i16, %struct.scatterlist*, i32)*, i32 (%struct.net_device*, %struct.netdev_fcoe_hbainfo*)*, i32 (%struct.net_device*, i64*, i32)*, i32 (%struct.net_device*, %struct.sk_buff*, i16, i32)*, i32 (%struct.net_device*, %struct.net_device*)*, i32 (%struct.net_device*, %struct.net_device*)*, i64 (%struct.net_device*, i64)*, i32 (%struct.net_device*, i64)*, i32 (%struct.neighbour*)*, void (%struct.neighbour*)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16, i16)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16)*, i32 (%struct.sk_buff*, %struct.netlink_callback*, %struct.net_device*, %struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)*, i32 (%struct.sk_buff*, i32, i32, %struct.net_device*, i32, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.netdev_phys_item_id*)*, i32 (%struct.net_device*, i8*, i64)*, void (%struct.net_device*, i16, i16)*, void (%struct.net_device*, i16, i16)*, void (%struct.net_device*, i16, i16)*, void (%struct.net_device*, i16, i16)*, i8* (%struct.net_device*, %struct.net_device*)*, void (%struct.net_device*, i8*)*, i32 (%struct.sk_buff*, %struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i64 (%struct.sk_buff*, %struct.net_device*, i64)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.sk_buff*)* }
%struct.ifreq = type { %union.anon.94, %union.anon.95 }
%union.anon.94 = type { [16 x i8] }
%union.anon.95 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.neigh_parms = type { %struct.possible_net_t, %struct.net_device*, %struct.list_head, i32 (%struct.neighbour*)*, void (%struct.neighbour*)*, %struct.neigh_table*, i8*, i32, %struct.atomic_t, %struct.callback_head, i32, [13 x i32], [1 x i64] }
%struct.neigh_table = type { i32, i32, i32, i16, i32 (i8*, %struct.net_device*, i32*)*, i1 (%struct.neighbour*, i8*)*, i32 (%struct.neighbour*)*, i32 (%struct.pneigh_entry*)*, void (%struct.pneigh_entry*)*, void (%struct.sk_buff*)*, i8*, %struct.neigh_parms, %struct.list_head, i32, i32, i32, i32, i64, %struct.delayed_work, %struct.timer_list, %struct.sk_buff_head, %struct.atomic_t, %struct.rwlock_t, i64, %struct.neigh_statistics*, %struct.neigh_hash_table*, %struct.pneigh_entry** }
%struct.neighbour = type { %struct.neighbour*, %struct.neigh_table*, %struct.neigh_parms*, i64, i64, %struct.rwlock_t, %struct.atomic_t, %struct.sk_buff_head, i32, %struct.timer_list, i64, %struct.atomic_t, i8, i8, i8, i8, %struct.seqlock_t, [32 x i8], %struct.hh_cache, i32 (%struct.neighbour*, %struct.sk_buff*)*, %struct.neigh_ops*, %struct.callback_head, %struct.net_device*, [0 x i8] }
%struct.hh_cache = type { i16, i16, %struct.seqlock_t, [16 x i64] }
%struct.neigh_ops = type { i32, void (%struct.neighbour*, %struct.sk_buff*)*, void (%struct.neighbour*, %struct.sk_buff*)*, i32 (%struct.neighbour*, %struct.sk_buff*)*, i32 (%struct.neighbour*, %struct.sk_buff*)* }
%struct.pneigh_entry = type { %struct.pneigh_entry*, %struct.possible_net_t, %struct.net_device*, i8, [0 x i8] }
%struct.neigh_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.neigh_hash_table = type { %struct.neighbour**, i32, [4 x i32], %struct.callback_head }
%struct.rtnl_link_stats64 = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.napi_struct = type { %struct.list_head, i64, i32, i32, i32 (%struct.napi_struct*, i32)*, %struct.spinlock, i32, %struct.net_device*, %struct.sk_buff*, %struct.sk_buff*, %struct.hrtimer, %struct.list_head, %struct.hlist_node, i32 }
%struct.ifla_vf_info = type { i32, [32 x i8], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ifla_vf_stats = type { i64, i64, i64, i64, i64, i64 }
%struct.nlattr = type { i16, i16 }
%struct.tc_to_netdev = type { i32, %union.anon.97 }
%union.anon.97 = type { %struct.tc_cls_u32_offload* }
%struct.tc_cls_u32_offload = type opaque
%struct.netdev_fcoe_hbainfo = type { [64 x i8], [64 x i8], [64 x i8], [64 x i8], [64 x i8], [64 x i8], [256 x i8], [256 x i8] }
%struct.ndmsg = type { i8, i8, i16, i32, i16, i8, i8 }
%struct.netlink_callback = type { %struct.sk_buff*, %struct.nlmsghdr*, i32 (%struct.sk_buff*, %struct.netlink_callback*)*, i32 (%struct.netlink_callback*)*, i8*, %struct.module*, i16, i16, i32, i32, [6 x i64] }
%struct.nlmsghdr = type { i32, i16, i16, i32, i32 }
%struct.netdev_phys_item_id = type { [32 x i8], i8 }
%struct.ethtool_ops = type { i32 (%struct.net_device*, %struct.ethtool_cmd*)*, i32 (%struct.net_device*, %struct.ethtool_cmd*)*, void (%struct.net_device*, %struct.ethtool_drvinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, %struct.ethtool_regs*, i8*)*, void (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, void (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_ringparam*)*, void (%struct.net_device*, %struct.ethtool_pauseparam*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, void (%struct.net_device*, %struct.ethtool_test*, i64*)*, void (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32)*, void (%struct.net_device*, %struct.ethtool_stats*, i64*)*, i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*, i32*)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*)*, i32 (%struct.net_device*, %struct.ethtool_flash*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32*, i8*, i8*)*, i32 (%struct.net_device*, i32*, i8*, i8)*, void (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_dump*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_ts_info*)*, i32 (%struct.net_device*, %struct.ethtool_modinfo*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)* }
%struct.ethtool_cmd = type { i32, i32, i32, i16, i8, i8, i8, i8, i8, i8, i32, i32, i16, i8, i8, i32, [2 x i32] }
%struct.ethtool_drvinfo = type { i32, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [12 x i8], i32, i32, i32, i32, i32 }
%struct.ethtool_regs = type { i32, i32, i32, [0 x i8] }
%struct.ethtool_wolinfo = type { i32, i32, i32, [6 x i8] }
%struct.ethtool_coalesce = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_ringparam = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_pauseparam = type { i32, i32, i32, i32 }
%struct.ethtool_test = type { i32, i32, i32, i32, [0 x i64] }
%struct.ethtool_stats = type { i32, i32, [0 x i64] }
%struct.ethtool_rxnfc = type { i32, i32, i64, %struct.ethtool_rx_flow_spec, i32, [0 x i32] }
%struct.ethtool_rx_flow_spec = type { i32, %union.ethtool_flow_union, %struct.ethtool_flow_ext, %union.ethtool_flow_union, %struct.ethtool_flow_ext, i64, i32 }
%union.ethtool_flow_union = type { %struct.ethtool_tcpip4_spec, [36 x i8] }
%struct.ethtool_tcpip4_spec = type { i32, i32, i16, i16, i8 }
%struct.ethtool_flow_ext = type { [2 x i8], [6 x i8], i16, i16, [2 x i32] }
%struct.ethtool_flash = type { i32, i32, [128 x i8] }
%struct.ethtool_channels = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_dump = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_ts_info = type { i32, i32, i32, i32, [3 x i32], i32, [3 x i32] }
%struct.ethtool_modinfo = type { i32, i32, i32, [8 x i32] }
%struct.ethtool_eeprom = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_eee = type { i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.ethtool_tunable = type { i32, i32, i32, i32, [0 x i8*] }
%struct.ethtool_link_ksettings = type { %struct.ethtool_link_settings, %struct.anon.98 }
%struct.ethtool_link_settings = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i32], [0 x i32] }
%struct.anon.98 = type { [1 x i64], [1 x i64], [1 x i64] }
%struct.l3mdev_ops = type { i32 (%struct.net_device*)*, %struct.rtable* (%struct.net_device*, %struct.flowi4*)*, i32 (%struct.net_device*, %struct.flowi4*)*, %struct.dst_entry* (%struct.net_device*, %struct.flowi6*)* }
%struct.rtable = type { %struct.dst_entry, i32, i32, i16, i8, i8, i32, i32, i32, i32, %struct.list_head, %struct.uncached_list* }
%struct.dst_entry = type { %struct.callback_head, %struct.dst_entry*, %struct.net_device*, %struct.dst_ops*, i64, i64, %struct.dst_entry*, %struct.dst_entry*, %struct.xfrm_state*, i32 (%struct.sk_buff*)*, i32 (%struct.net*, %struct.sock*, %struct.sk_buff*)*, i16, i16, i16, i16, i16, i16, i32, %struct.lwtunnel_state*, [1 x i64], %struct.atomic_t, i32, i64, %union.anon.47 }
%struct.dst_ops = type { i16, i32, i32 (%struct.dst_ops*)*, %struct.dst_entry* (%struct.dst_entry*, i32)*, i32 (%struct.dst_entry*)*, i32 (%struct.dst_entry*)*, i32* (%struct.dst_entry*, i64)*, void (%struct.dst_entry*)*, void (%struct.dst_entry*, %struct.net_device*, i32)*, %struct.dst_entry* (%struct.dst_entry*)*, void (%struct.sk_buff*)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*, i32)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*)*, i32 (%struct.net*, %struct.sock*, %struct.sk_buff*)*, %struct.neighbour* (%struct.dst_entry*, %struct.sk_buff*, i8*)*, void (%struct.dst_entry*, i8*)*, %struct.kmem_cache*, %struct.percpu_counter, [24 x i8] }
%struct.xfrm_state = type opaque
%struct.lwtunnel_state = type opaque
%union.anon.47 = type { %struct.dst_entry* }
%struct.uncached_list = type opaque
%struct.flowi4 = type { %struct.flowi_common, i32, i32, %union.flowi_uli }
%struct.flowi_common = type { i32, i32, i32, i8, i8, i8, i8, i32, %struct.flowi_tunnel }
%struct.flowi_tunnel = type { i64 }
%union.flowi_uli = type { i32 }
%struct.flowi6 = type { %struct.flowi_common, %struct.in6_addr, %struct.in6_addr, i32, %union.flowi_uli }
%struct.header_ops = type { i32 (%struct.sk_buff*, %struct.net_device*, i16, i8*, i8*, i32)*, i32 (%struct.sk_buff*, i8*)*, i32 (%struct.neighbour*, %struct.hh_cache*, i16)*, void (%struct.hh_cache*, %struct.net_device*, i8*)*, i1 (i8*, i32)* }
%struct.netdev_hw_addr_list = type { %struct.list_head, i32 }
%struct.vlan_info = type opaque
%struct.tipc_bearer = type opaque
%struct.in_device = type opaque
%struct.dn_dev = type opaque
%struct.inet6_dev = type { %struct.net_device*, %struct.list_head, %struct.ifmcaddr6*, %struct.ifmcaddr6*, %struct.spinlock, i8, i8, i8, i8, i64, i64, i64, i64, %struct.timer_list, %struct.timer_list, %struct.timer_list, %struct.ifacaddr6*, %struct.rwlock_t, %struct.atomic_t, i32, i32, [8 x i8], %struct.timer_list, %struct.list_head, %struct.in6_addr, %struct.neigh_parms*, %struct.ipv6_devconf, %struct.ipv6_devstat, %struct.timer_list, i8, i8, i64, %struct.callback_head }
%struct.ifmcaddr6 = type { %struct.in6_addr, %struct.inet6_dev*, %struct.ifmcaddr6*, %struct.ip6_sf_list*, %struct.ip6_sf_list*, i32, i8, [2 x i64], %struct.timer_list, i32, i32, %struct.atomic_t, %struct.spinlock, i64, i64 }
%struct.ip6_sf_list = type { %struct.ip6_sf_list*, %struct.in6_addr, [2 x i64], i8, i8, i8 }
%struct.ifacaddr6 = type { %struct.in6_addr, %struct.inet6_dev*, %struct.rt6_info*, %struct.ifacaddr6*, i32, %struct.atomic_t, i64, i64 }
%struct.rt6_info = type opaque
%struct.ipv6_devconf = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ipv6_stable_secret, i32, i8* }
%struct.ipv6_stable_secret = type { i8, %struct.in6_addr }
%struct.ipv6_devstat = type { %struct.proc_dir_entry*, %struct.ipstats_mib*, %struct.icmpv6_mib_device*, %struct.icmpv6msg_mib_device* }
%struct.ipstats_mib = type { [36 x i64], %struct.u64_stats_sync }
%struct.u64_stats_sync = type {}
%struct.icmpv6_mib_device = type { [6 x %struct.atomic64_t] }
%struct.icmpv6msg_mib_device = type { [512 x %struct.atomic64_t] }
%struct.wireless_dev = type opaque
%struct.wpan_dev = type opaque
%struct.mpls_dev = type opaque
%struct.netdev_rx_queue = type { %struct.rps_map*, %struct.rps_dev_flow_table*, %struct.kobject, %struct.net_device*, [40 x i8] }
%struct.rps_map = type { i32, %struct.callback_head, [0 x i16] }
%struct.rps_dev_flow_table = type { i32, %struct.callback_head, [0 x %struct.rps_dev_flow] }
%struct.rps_dev_flow = type { i16, i16, i32 }
%struct.tcf_proto = type { %struct.tcf_proto*, i8*, i32 (%struct.sk_buff*, %struct.tcf_proto*, %struct.tcf_result*)*, i16, i32, i32, %struct.Qdisc*, i8*, %struct.tcf_proto_ops*, %struct.callback_head }
%struct.tcf_result = type { i64, i32 }
%struct.tcf_proto_ops = type { %struct.list_head, [16 x i8], i32 (%struct.sk_buff*, %struct.tcf_proto*, %struct.tcf_result*)*, i32 (%struct.tcf_proto*)*, i1 (%struct.tcf_proto*, i1)*, i64 (%struct.tcf_proto*, i32)*, i32 (%struct.net*, %struct.sk_buff*, %struct.tcf_proto*, i64, i32, %struct.nlattr**, i64*, i1)*, i32 (%struct.tcf_proto*, i64)*, void (%struct.tcf_proto*, %struct.tcf_walker*)*, i32 (%struct.net*, %struct.tcf_proto*, i64, %struct.sk_buff*, %struct.tcmsg*)*, %struct.module* }
%struct.tcf_walker = type opaque
%struct.tcmsg = type { i8, i8, i16, i32, i32, i32, i32 }
%struct.cpu_rmap = type opaque
%struct.netdev_queue = type { %struct.net_device*, %struct.Qdisc*, %struct.Qdisc*, %struct.kobject, i32, [36 x i8], %struct.spinlock, i32, i64, i64, i64, [32 x i8], %struct.dql, i64, [56 x i8] }
%struct.dql = type { i32, i32, i32, [52 x i8], i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, [20 x i8] }
%struct.Qdisc = type { i32 (%struct.sk_buff*, %struct.Qdisc*)*, %struct.sk_buff* (%struct.Qdisc*)*, i32, i32, %struct.Qdisc_ops*, %struct.qdisc_size_table*, %struct.list_head, i32, i32, i32 (%struct.sk_buff*, %struct.Qdisc*)*, i8*, %struct.Qdisc*, %struct.netdev_queue*, %struct.gnet_stats_rate_est64, %struct.gnet_stats_basic_cpu*, %struct.gnet_stats_queue*, %struct.Qdisc*, %struct.sk_buff*, i64, %struct.sk_buff_head, %struct.gnet_stats_basic_packed, i32, %struct.gnet_stats_queue, %struct.callback_head, i32, %struct.atomic_t, [16 x i8], %struct.spinlock, [60 x i8] }
%struct.Qdisc_ops = type { %struct.Qdisc_ops*, %struct.Qdisc_class_ops*, [16 x i8], i32, i32 (%struct.sk_buff*, %struct.Qdisc*)*, %struct.sk_buff* (%struct.Qdisc*)*, %struct.sk_buff* (%struct.Qdisc*)*, i32 (%struct.Qdisc*)*, i32 (%struct.Qdisc*, %struct.nlattr*)*, void (%struct.Qdisc*)*, void (%struct.Qdisc*)*, i32 (%struct.Qdisc*, %struct.nlattr*)*, void (%struct.Qdisc*)*, i32 (%struct.Qdisc*, %struct.sk_buff*)*, i32 (%struct.Qdisc*, %struct.gnet_dump*)*, %struct.module* }
%struct.Qdisc_class_ops = type { %struct.netdev_queue* (%struct.Qdisc*, %struct.tcmsg*)*, i32 (%struct.Qdisc*, i64, %struct.Qdisc*, %struct.Qdisc**)*, %struct.Qdisc* (%struct.Qdisc*, i64)*, void (%struct.Qdisc*, i64)*, i64 (%struct.Qdisc*, i32)*, void (%struct.Qdisc*, i64)*, i32 (%struct.Qdisc*, i32, i32, %struct.nlattr**, i64*)*, i32 (%struct.Qdisc*, i64)*, void (%struct.Qdisc*, %struct.qdisc_walker*)*, %struct.tcf_proto** (%struct.Qdisc*, i64)*, i64 (%struct.Qdisc*, i64, i32)*, void (%struct.Qdisc*, i64)*, i32 (%struct.Qdisc*, i64, %struct.sk_buff*, %struct.tcmsg*)*, i32 (%struct.Qdisc*, i64, %struct.gnet_dump*)* }
%struct.qdisc_walker = type opaque
%struct.gnet_dump = type { %struct.spinlock*, %struct.sk_buff*, %struct.nlattr*, i32, i32, i8*, i32, %struct.tc_stats }
%struct.tc_stats = type { i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.qdisc_size_table = type { %struct.callback_head, %struct.list_head, %struct.tc_sizespec, i32, [0 x i16] }
%struct.tc_sizespec = type { i8, i8, i16, i32, i32, i32, i32, i32 }
%struct.gnet_stats_rate_est64 = type { i64, i64 }
%struct.gnet_stats_basic_cpu = type { %struct.gnet_stats_basic_packed, %struct.u64_stats_sync }
%struct.gnet_stats_basic_packed = type <{ i64, i32 }>
%struct.gnet_stats_queue = type { i32, i32, i32, i32, i32 }
%struct.xps_dev_maps = type { %struct.callback_head, [0 x %struct.xps_map*] }
%struct.xps_map = type { i32, i32, %struct.callback_head, [0 x i16] }
%struct.netpoll_info = type opaque
%union.anon.99 = type { i8* }
%struct.garp_port = type opaque
%struct.mrp_port = type opaque
%struct.rtnl_link_ops = type { %struct.list_head, i8*, i64, void (%struct.net_device*)*, i32, %struct.nla_policy*, i32 (%struct.nlattr**, %struct.nlattr**)*, i32 (%struct.net*, %struct.net_device*, %struct.nlattr**, %struct.nlattr**)*, i32 (%struct.net_device*, %struct.nlattr**, %struct.nlattr**)*, void (%struct.net_device*, %struct.list_head*)*, i64 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i64 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i32 ()*, i32 ()*, i32, %struct.nla_policy*, i32 (%struct.nlattr**, %struct.nlattr**)*, i32 (%struct.net_device*, %struct.net_device*, %struct.nlattr**, %struct.nlattr**)*, i64 (%struct.net_device*, %struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*, %struct.net_device*)*, %struct.net* (%struct.net_device*)* }
%struct.nla_policy = type { i16, i16 }
%struct.dcbnl_rtnl_ops = type { i32 (%struct.net_device*, %struct.ieee_ets*)*, i32 (%struct.net_device*, %struct.ieee_ets*)*, i32 (%struct.net_device*, %struct.ieee_maxrate*)*, i32 (%struct.net_device*, %struct.ieee_maxrate*)*, i32 (%struct.net_device*, %struct.ieee_qcn*)*, i32 (%struct.net_device*, %struct.ieee_qcn*)*, i32 (%struct.net_device*, %struct.ieee_qcn_stats*)*, i32 (%struct.net_device*, %struct.ieee_pfc*)*, i32 (%struct.net_device*, %struct.ieee_pfc*)*, i32 (%struct.net_device*, %struct.dcb_app*)*, i32 (%struct.net_device*, %struct.dcb_app*)*, i32 (%struct.net_device*, %struct.dcb_app*)*, i32 (%struct.net_device*, %struct.ieee_ets*)*, i32 (%struct.net_device*, %struct.ieee_pfc*)*, i8 (%struct.net_device*)*, i8 (%struct.net_device*, i8)*, void (%struct.net_device*, i8*)*, void (%struct.net_device*, i32, i8, i8, i8, i8)*, void (%struct.net_device*, i32, i8)*, void (%struct.net_device*, i32, i8, i8, i8, i8)*, void (%struct.net_device*, i32, i8)*, void (%struct.net_device*, i32, i8*, i8*, i8*, i8*)*, void (%struct.net_device*, i32, i8*)*, void (%struct.net_device*, i32, i8*, i8*, i8*, i8*)*, void (%struct.net_device*, i32, i8*)*, void (%struct.net_device*, i32, i8)*, void (%struct.net_device*, i32, i8*)*, i8 (%struct.net_device*)*, i8 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i8)*, i8 (%struct.net_device*)*, void (%struct.net_device*, i8)*, void (%struct.net_device*, i32, i32*)*, void (%struct.net_device*, i32, i32)*, void (%struct.net_device*, i32, i8*)*, void (%struct.net_device*, i32, i8)*, i32 (%struct.net_device*, i8, i16, i8)*, i32 (%struct.net_device*, i8, i16)*, i8 (%struct.net_device*, i32, i8*)*, i8 (%struct.net_device*, i32, i8)*, i8 (%struct.net_device*)*, i8 (%struct.net_device*, i8)*, i32 (%struct.net_device*, %struct.dcb_peer_app_info*, i16*)*, i32 (%struct.net_device*, %struct.dcb_app*)*, i32 (%struct.net_device*, %struct.cee_pg*)*, i32 (%struct.net_device*, %struct.cee_pfc*)* }
%struct.ieee_maxrate = type { [8 x i64] }
%struct.ieee_qcn = type { [8 x i8], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32] }
%struct.ieee_qcn_stats = type { [8 x i64], [8 x i32] }
%struct.ieee_ets = type { i8, i8, i8, [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8] }
%struct.ieee_pfc = type { i8, i8, i8, i16, [8 x i64], [8 x i64] }
%struct.dcb_peer_app_info = type { i8, i8 }
%struct.dcb_app = type { i8, i8, i16 }
%struct.cee_pg = type { i8, i8, i8, i8, [8 x i8], [8 x i8] }
%struct.cee_pfc = type { i8, i8, i8, i8 }
%struct.netdev_tc_txq = type { i16, i16 }
%struct.netprio_map = type { %struct.callback_head, i32, [0 x i32] }
%struct.phy_device = type { %struct.phy_driver*, %struct.mii_bus*, %struct.device, i32, %struct.phy_c45_device_ids, i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, %struct.work_struct, %struct.delayed_work, %struct.atomic_t, %struct.mutex, %struct.net_device*, i8, void (%struct.net_device*)* }
%struct.phy_driver = type { i32, i8*, i32, i32, i32, i8*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*)*, void (%struct.phy_device*)*, i32 (%struct.phy_device*)*, i32 (%struct.phy_device*, %struct.ethtool_ts_info*)*, i32 (%struct.phy_device*, %struct.ifreq*)*, i1 (%struct.phy_device*, %struct.sk_buff*, i32)*, void (%struct.phy_device*, %struct.sk_buff*, i32)*, i32 (%struct.phy_device*, %struct.ethtool_wolinfo*)*, void (%struct.phy_device*, %struct.ethtool_wolinfo*)*, void (%struct.phy_device*)*, i32 (%struct.phy_device*, i32, i32, i32)*, void (%struct.phy_device*, i32, i32, i32, i32)*, i32 (%struct.phy_device*, %struct.ethtool_modinfo*)*, i32 (%struct.phy_device*, %struct.ethtool_eeprom*, i8*)*, %struct.device_driver }
%struct.mii_bus = type { %struct.module*, i8*, [17 x i8], i8*, i32 (%struct.mii_bus*, i32, i32)*, i32 (%struct.mii_bus*, i32, i32, i16)*, i32 (%struct.mii_bus*)*, %struct.mutex, %struct.device*, i32, %struct.device, [32 x %struct.phy_device*], i32, i32, i32* }
%struct.phy_c45_device_ids = type { i32, [8 x i32] }
%struct.netns_core = type { %struct.ctl_table_header*, i32, %struct.prot_inuse* }
%struct.prot_inuse = type opaque
%struct.netns_mib = type { %struct.tcp_mib*, %struct.ipstats_mib*, %struct.linux_mib*, %struct.udp_mib*, %struct.udp_mib*, %struct.icmp_mib*, %struct.icmpmsg_mib*, %struct.proc_dir_entry*, %struct.udp_mib*, %struct.udp_mib*, %struct.ipstats_mib*, %struct.icmpv6_mib*, %struct.icmpv6msg_mib*, %struct.linux_xfrm_mib* }
%struct.tcp_mib = type { [16 x i64] }
%struct.linux_mib = type { [117 x i64] }
%struct.icmp_mib = type { [28 x i64] }
%struct.icmpmsg_mib = type { [512 x %struct.atomic64_t] }
%struct.udp_mib = type { [9 x i64] }
%struct.icmpv6_mib = type { [6 x i64] }
%struct.icmpv6msg_mib = type { [512 x %struct.atomic64_t] }
%struct.linux_xfrm_mib = type { [29 x i64] }
%struct.netns_packet = type { %struct.mutex, %struct.hlist_head }
%struct.netns_unix = type { i32, %struct.ctl_table_header* }
%struct.netns_ipv4 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ipv4_devconf*, %struct.ipv4_devconf*, %struct.fib_rules_ops*, i8, %struct.fib_table*, %struct.fib_table*, %struct.fib_table*, i32, %struct.hlist_head*, i8, %struct.sock*, %struct.sock**, %struct.sock*, %struct.inet_peer_base*, %struct.sock**, [32 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, i32, i32, i32, i32, i32, i32, %struct.local_ports, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ping_group_range, %struct.atomic_t, i64*, %struct.mr_table*, %struct.atomic_t, [12 x i8] }
%struct.ipv4_devconf = type opaque
%struct.fib_rules_ops = type { i32, %struct.list_head, i32, i32, i32, i32, i32 (%struct.fib_rule*, %struct.flowi*, i32, %struct.fib_lookup_arg*)*, i1 (%struct.fib_rule*, %struct.fib_lookup_arg*)*, i32 (%struct.fib_rule*, %struct.flowi*, i32)*, i32 (%struct.fib_rule*, %struct.sk_buff*, %struct.fib_rule_hdr*, %struct.nlattr**)*, i32 (%struct.fib_rule*)*, i32 (%struct.fib_rule*, %struct.fib_rule_hdr*, %struct.nlattr**)*, i32 (%struct.fib_rule*, %struct.sk_buff*, %struct.fib_rule_hdr*)*, i64 (%struct.fib_rule*)*, void (%struct.fib_rules_ops*)*, i32, %struct.nla_policy*, %struct.list_head, %struct.module*, %struct.net*, %struct.callback_head }
%struct.fib_rule = type { %struct.list_head, i32, i32, i32, i32, i32, i32, i8, i32, i64, %struct.fib_rule*, %struct.net*, %struct.atomic_t, i32, i32, i32, [16 x i8], [16 x i8], %struct.callback_head }
%struct.flowi = type { %union.anon.25 }
%union.anon.25 = type { %struct.flowi6 }
%struct.fib_lookup_arg = type { i8*, i8*, %struct.fib_rule*, i32 }
%struct.fib_rule_hdr = type { i8, i8, i8, i8, i8, i8, i8, i8, i32 }
%struct.fib_table = type { %struct.hlist_node, i32, i32, %struct.callback_head, i64*, [0 x i64] }
%struct.inet_peer_base = type { %struct.inet_peer*, %struct.seqlock_t, i32 }
%struct.inet_peer = type { %struct.inet_peer*, %struct.inet_peer*, %struct.inetpeer_addr, i32, [16 x i32], i32, i64, %union.anon.44, %union.anon.45, i32, %struct.atomic_t }
%struct.inetpeer_addr = type { %union.anon.43, i16 }
%union.anon.43 = type { %struct.in6_addr }
%union.anon.44 = type { %struct.list_head }
%union.anon.45 = type { %struct.callback_head }
%struct.netns_frags = type { %struct.atomic_t, i32, i32, i32, [48 x i8] }
%struct.xt_table = type opaque
%struct.local_ports = type { %struct.seqlock_t, [2 x i32], i8 }
%struct.ping_group_range = type { %struct.seqlock_t, [2 x %struct.kgid_t] }
%struct.mr_table = type opaque
%struct.netns_ipv6 = type { %struct.netns_sysctl_ipv6, %struct.ipv6_devconf*, %struct.ipv6_devconf*, %struct.inet_peer_base*, [56 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.rt6_info*, %struct.rt6_statistics*, %struct.timer_list, %struct.hlist_head*, %struct.fib6_table*, [40 x i8], %struct.dst_ops, i32, i64, %struct.rt6_info*, %struct.rt6_info*, %struct.fib6_table*, %struct.fib_rules_ops*, %struct.sock**, %struct.sock*, %struct.sock*, %struct.sock*, %struct.sock*, %struct.list_head, %struct.fib_rules_ops*, %struct.atomic_t, %struct.atomic_t, [8 x i8] }
%struct.netns_sysctl_ipv6 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.rt6_statistics = type opaque
%struct.fib6_table = type opaque
%struct.netns_ieee802154_lowpan = type { %struct.netns_sysctl_lowpan, [56 x i8], %struct.netns_frags }
%struct.netns_sysctl_lowpan = type { %struct.ctl_table_header* }
%struct.netns_sctp = type { %struct.sctp_mib*, %struct.proc_dir_entry*, %struct.ctl_table_header*, %struct.sock*, %struct.list_head, %struct.list_head, %struct.timer_list, %struct.list_head, %struct.spinlock, %struct.spinlock, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.sctp_mib = type opaque
%struct.netns_dccp = type { %struct.sock*, %struct.sock* }
%struct.netns_nf = type { %struct.proc_dir_entry*, [13 x %struct.nf_logger*], %struct.ctl_table_header*, [13 x [8 x %struct.list_head]] }
%struct.nf_logger = type opaque
%struct.netns_xt = type { [13 x %struct.list_head], i8, i8, %struct.ebt_table*, %struct.ebt_table*, %struct.ebt_table* }
%struct.ebt_table = type opaque
%struct.netns_ct = type { %struct.atomic_t, i32, %struct.delayed_work, i8, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i8*, i32, i32, i32, i32, i8, i32, i32, i32, %struct.seqcount, %struct.kmem_cache*, %struct.hlist_nulls_head*, %struct.hlist_head*, %struct.ct_pcpu*, %struct.ip_conntrack_stat*, %struct.nf_ct_event_notifier*, %struct.nf_exp_event_notifier*, %struct.nf_ip_net, i32, i8, %struct.hlist_head*, i32 }
%struct.hlist_nulls_head = type { %struct.hlist_nulls_node* }
%struct.hlist_nulls_node = type { %struct.hlist_nulls_node*, %struct.hlist_nulls_node** }
%struct.ct_pcpu = type { %struct.spinlock, %struct.hlist_nulls_head, %struct.hlist_nulls_head }
%struct.ip_conntrack_stat = type opaque
%struct.nf_ct_event_notifier = type opaque
%struct.nf_exp_event_notifier = type opaque
%struct.nf_ip_net = type { %struct.nf_generic_net, %struct.nf_tcp_net, %struct.nf_udp_net, %struct.nf_icmp_net, %struct.nf_icmp_net }
%struct.nf_generic_net = type { %struct.nf_proto_net, i32 }
%struct.nf_proto_net = type { %struct.ctl_table_header*, %struct.ctl_table*, i32 }
%struct.nf_tcp_net = type { %struct.nf_proto_net, [14 x i32], i32, i32, i32 }
%struct.nf_udp_net = type { %struct.nf_proto_net, [2 x i32] }
%struct.nf_icmp_net = type { %struct.nf_proto_net, i32 }
%struct.netns_nftables = type { %struct.list_head, %struct.list_head, %struct.nft_af_info*, %struct.nft_af_info*, %struct.nft_af_info*, %struct.nft_af_info*, %struct.nft_af_info*, %struct.nft_af_info*, i32, i8 }
%struct.nft_af_info = type opaque
%struct.netns_nf_frag = type { %struct.netns_sysctl_ipv6, [16 x i8], %struct.netns_frags }
%struct.net_generic = type opaque
%struct.netns_xfrm = type { %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.work_struct, %struct.hlist_head, %struct.work_struct, %struct.list_head, %struct.hlist_head*, i32, [3 x %struct.hlist_head], [3 x %struct.xfrm_policy_hash], [6 x i32], %struct.work_struct, %struct.xfrm_policy_hthresh, %struct.sock*, %struct.sock*, i32, i32, i32, i32, %struct.ctl_table_header*, [16 x i8], %struct.dst_ops, %struct.dst_ops, %struct.spinlock, %struct.rwlock_t, %struct.mutex, %struct.flow_cache, %struct.atomic_t, %struct.list_head, %struct.spinlock, %struct.work_struct, %struct.work_struct, %struct.mutex }
%struct.xfrm_policy_hash = type { %struct.hlist_head*, i32, i8, i8, i8, i8 }
%struct.xfrm_policy_hthresh = type { %struct.work_struct, %struct.seqlock_t, i8, i8, i8, i8 }
%struct.flow_cache = type { i32, %struct.flow_cache_percpu*, %struct.notifier_block, i32, i32, %struct.timer_list }
%struct.flow_cache_percpu = type { %struct.hlist_head*, i32, i32, i32, %struct.tasklet_struct }
%struct.tasklet_struct = type { %struct.tasklet_struct*, i64, %struct.atomic_t, void (i64)*, i64 }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.netns_ipvs = type opaque
%struct.netns_mpls = type { i64, %struct.mpls_route**, %struct.ctl_table_header* }
%struct.mpls_route = type opaque
%struct.in6_addr = type { %union.anon.30 }
%union.anon.30 = type { [4 x i32] }
%struct.atomic64_t = type { i64 }
%union.anon.83 = type { i64 }
%union.anon.84 = type { %struct.hlist_node }
%union.anon.85 = type { i32 }
%union.anon.86 = type { i32 }
%struct.socket_lock_t = type { %struct.spinlock, i32, %struct.__wait_queue_head }
%struct.anon.87 = type { %struct.atomic_t, i32, %struct.sk_buff*, %struct.sk_buff* }
%struct.sk_filter = type { %struct.atomic_t, %struct.callback_head, %struct.bpf_prog* }
%struct.bpf_prog = type { i16, i8, i32, i32, %struct.bpf_prog_aux*, %struct.sock_fprog_kern*, i32 (%struct.sk_buff*, %struct.bpf_insn*)*, %union.anon.88 }
%struct.bpf_prog_aux = type opaque
%struct.sock_fprog_kern = type { i16, %struct.sock_filter* }
%struct.sock_filter = type { i16, i8, i8, i32 }
%struct.bpf_insn = type { i8, i8, i16, i32 }
%union.anon.88 = type { [0 x %struct.sock_filter] }
%union.anon.89 = type { %struct.socket_wq* }
%struct.socket_wq = type { %struct.__wait_queue_head, %struct.fasync_struct*, i64, %struct.callback_head, [8 x i8] }
%struct.xfrm_policy = type opaque
%struct.sk_buff_head = type { %struct.sk_buff*, %struct.sk_buff*, i32, %struct.spinlock }
%struct.proto = type { void (%struct.sock*, i64)*, i32 (%struct.sock*, %struct.sockaddr*, i32)*, i32 (%struct.sock*, i32)*, %struct.sock* (%struct.sock*, i32, i32*)*, i32 (%struct.sock*, i32, i64)*, i32 (%struct.sock*)*, void (%struct.sock*)*, void (%struct.sock*, i32)*, i32 (%struct.sock*, i32, i32, i8*, i32)*, i32 (%struct.sock*, i32, i32, i8*, i32*)*, i32 (%struct.sock*, i32, i32, i8*, i32)*, i32 (%struct.sock*, i32, i32, i8*, i32*)*, i32 (%struct.sock*, i32, i64)*, i32 (%struct.sock*, %struct.msghdr*, i64)*, i32 (%struct.sock*, %struct.msghdr*, i64, i32, i32, i32*)*, i32 (%struct.sock*, %struct.page*, i32, i64, i32)*, i32 (%struct.sock*, %struct.sockaddr*, i32)*, i32 (%struct.sock*, %struct.sk_buff*)*, void (%struct.sock*)*, void (%struct.sock*)*, void (%struct.sock*)*, void (%struct.sock*)*, i32 (%struct.sock*, i16)*, void (%struct.sock*, i32)*, i32, i1 (%struct.sock*)*, void (%struct.sock*)*, %struct.atomic64_t*, %struct.percpu_counter*, i32*, i64*, i32*, i32*, i32, i8, %struct.kmem_cache*, i32, i32, %struct.percpu_counter*, %struct.request_sock_ops*, %struct.timewait_sock_ops*, %union.anon.82, %struct.module*, [32 x i8], %struct.list_head, i32 (%struct.mem_cgroup*, %struct.cgroup_subsys*)*, void (%struct.mem_cgroup*)*, %struct.cg_proto* (%struct.mem_cgroup*)* }
%struct.msghdr = type { i8*, i32, %struct.iov_iter, i8*, i64, i32, %struct.kiocb* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.request_sock_ops = type { i32, i32, %struct.kmem_cache*, i8*, i32 (%struct.sock*, %struct.request_sock*)*, void (%struct.sock*, %struct.sk_buff*, %struct.request_sock*)*, void (%struct.sock*, %struct.sk_buff*)*, void (%struct.request_sock*)*, void (%struct.request_sock*)* }
%struct.request_sock = type { %struct.sock_common, %struct.request_sock*, i16, i8, i8, i32, %struct.timer_list, %struct.request_sock_ops*, %struct.sock*, i32*, i32, i32 }
%struct.timewait_sock_ops = type { %struct.kmem_cache*, i8*, i32, i32 (%struct.sock*, %struct.sock*, i8*)*, void (%struct.sock*)* }
%union.anon.82 = type { %struct.inet_hashinfo* }
%struct.inet_hashinfo = type opaque
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x %struct.kgid_t], [0 x %struct.kgid_t*] }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32, i32, i32, i8*, [16 x i8] }
%union.ktime = type { i64 }
%struct.socket = type { i32, i16, i64, %struct.socket_wq*, %struct.file*, %struct.sock*, %struct.proto_ops* }
%struct.proto_ops = type { i32, %struct.module*, i32 (%struct.socket*)*, i32 (%struct.socket*, %struct.sockaddr*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32, i32)*, i32 (%struct.socket*, %struct.socket*)*, i32 (%struct.socket*, %struct.socket*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32*, i32)*, i32 (%struct.file*, %struct.socket*, %struct.poll_table_struct*)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, %struct.msghdr*, i64)*, i32 (%struct.socket*, %struct.msghdr*, i64, i32)*, i32 (%struct.file*, %struct.socket*, %struct.vm_area_struct*)*, i64 (%struct.socket*, %struct.page*, i32, i64, i32)*, i64 (%struct.socket*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.sock*, i32)* }
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.sk_buff = type { %union.anon.31, %struct.sock*, %struct.net_device*, [48 x i8], i64, void (%struct.sk_buff*)*, %struct.sec_path*, %struct.nf_conntrack*, %struct.nf_bridge_info*, i32, i32, i16, i16, i16, i8, [0 x i32], [0 x i8], i32, i16, i16, %union.anon.37, i32, i32, i32, i16, i16, %union.anon.39, %union.anon.40, %union.anon.41, %union.anon.42, i16, i16, i16, i16, i16, i16, i16, [0 x i32], i32, i32, i8*, i8*, i32, %struct.atomic_t }
%union.anon.31 = type { %struct.anon.32 }
%struct.anon.32 = type { %struct.sk_buff*, %struct.sk_buff*, %union.anon.33 }
%union.anon.33 = type { %union.ktime }
%struct.sec_path = type opaque
%struct.nf_conntrack = type { %struct.atomic_t }
%struct.nf_bridge_info = type { %struct.atomic_t, i16, i16, %struct.net_device*, %struct.net_device*, %union.anon.36 }
%union.anon.36 = type { %struct.in6_addr }
%union.anon.37 = type { i32 }
%union.anon.39 = type { i32 }
%union.anon.40 = type { i32 }
%union.anon.41 = type { i32 }
%union.anon.42 = type { i16 }
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon.48, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%union.anon.48 = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, %struct.optimistic_spin_queue }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.90 }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%union.anon.90 = type { i8* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type opaque
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%struct.anon.110 = type { i32 }
%struct.pci_driver = type { %struct.list_head, i8*, %struct.pci_device_id*, i32 (%struct.pci_dev*, %struct.pci_device_id*)*, void (%struct.pci_dev*)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, void (%struct.pci_dev*)*, i32 (%struct.pci_dev*, i32)*, %struct.pci_error_handlers*, %struct.device_driver, %struct.pci_dynids }
%struct.pci_dev = type <{ %struct.list_head, %struct.pci_bus*, %struct.pci_bus*, i8*, %struct.proc_dir_entry*, %struct.pci_slot*, i32, i16, i16, i16, i16, i32, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, [5 x i8], %struct.pci_driver*, i64, %struct.device_dma_parameters, i32, i8, i16, i8, i32, i32, %struct.pcie_link_state*, i32, [4 x i8], %struct.device, i32, i32, [17 x %struct.resource], i8, i32, i8, i16, %struct.atomic_t, [16 x i32], [4 x i8], %struct.hlist_head, %struct.bin_attribute*, i32, [4 x i8], [17 x %struct.bin_attribute*], [17 x %struct.bin_attribute*], %struct.attribute_group**, %struct.pci_vpd*, %union.anon.111, i16, i8, i8, %struct.atomic_t, i64, i64, i8* }>
%struct.pci_bus = type { %struct.list_head, %struct.pci_bus*, %struct.list_head, %struct.list_head, %struct.pci_dev*, %struct.list_head, [4 x %struct.resource*], %struct.list_head, %struct.resource, %struct.pci_ops*, %struct.msi_controller*, i8*, %struct.proc_dir_entry*, i8, i8, i8, i8, [48 x i8], i16, i16, %struct.device*, %struct.device, %struct.bin_attribute*, %struct.bin_attribute*, i8 }
%struct.resource = type { i64, i64, i8*, i64, %struct.resource*, %struct.resource*, %struct.resource* }
%struct.pci_ops = type { i8* (%struct.pci_bus*, i32, i32)*, i32 (%struct.pci_bus*, i32, i32, i32, i32*)*, i32 (%struct.pci_bus*, i32, i32, i32, i32)* }
%struct.msi_controller = type opaque
%struct.pci_slot = type { %struct.pci_bus*, %struct.list_head, %struct.hotplug_slot*, i8, %struct.kobject }
%struct.hotplug_slot = type opaque
%struct.pcie_link_state = type opaque
%struct.pci_vpd = type opaque
%union.anon.111 = type { %struct.pci_sriov* }
%struct.pci_sriov = type opaque
%struct.pci_error_handlers = type { i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, void (%struct.pci_dev*, i1)*, void (%struct.pci_dev*)* }
%struct.pci_dynids = type { %struct.spinlock, %struct.list_head }
%struct.rtl_cfg_info = type { void (%struct.net_device*)*, i32, i32, i16, i32, i8 }
%struct.anon.113 = type { i8*, i32, i8*, i16, i8 }
%struct.rtl_cfg2_info = type { i32, i32, i32 }
%struct.ephy_info = type { i32, i16, i16 }
%struct.phy_reg = type { i16, i16 }
%struct.rtl_mac_info = type { i32, i32, i32 }
%struct.anon.116 = type { i32, i16, i8 }
%struct.rtl_cond = type { i1 (%struct.rtl8169_private*)*, i8* }
%struct.rtl8169_private = type { i8*, %struct.pci_dev*, %struct.net_device*, %struct.napi_struct, i32, i16, i16, i32, i32, i32, %struct.rtl8169_stats, %struct.rtl8169_stats, %struct.TxDesc*, %struct.RxDesc*, i64, i64, [256 x i8*], [64 x %struct.ring_info], %struct.timer_list, i16, i16, %struct.mdio_ops, %struct.pll_power_ops, %struct.jumbo_ops, %struct.csi_ops, i32 (%struct.net_device*, i8, i16, i8, i32)*, i32 (%struct.net_device*, %struct.ethtool_cmd*)*, void (%struct.rtl8169_private*)*, void (%struct.net_device*)*, i32 (%struct.rtl8169_private*)*, i32 (i8*)*, i32 (%struct.rtl8169_private*, %struct.mii_ioctl_data*, i32)*, i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)*, %struct.anon.112, i32, %struct.mii_if_info, i64, %struct.rtl8169_counters*, %struct.rtl8169_tc_offsets, i32, i32, %struct.rtl_fw*, i32 }
%struct.rtl8169_stats = type { i64, i64, %struct.u64_stats_sync }
%struct.TxDesc = type { i32, i32, i64 }
%struct.RxDesc = type { i32, i32, i64 }
%struct.ring_info = type { %struct.sk_buff*, i32, [4 x i8] }
%struct.mdio_ops = type { void (%struct.rtl8169_private*, i32, i32)*, i32 (%struct.rtl8169_private*, i32)* }
%struct.pll_power_ops = type { void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)* }
%struct.jumbo_ops = type { void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)* }
%struct.csi_ops = type { void (%struct.rtl8169_private*, i32, i32)*, i32 (%struct.rtl8169_private*, i32)* }
%struct.mii_ioctl_data = type { i16, i16, i16, i16 }
%struct.anon.112 = type { [1 x i64], %struct.mutex, %struct.work_struct }
%struct.mii_if_info = type { i32, i32, i32, i32, i8, %struct.net_device*, i32 (%struct.net_device*, i32, i32)*, void (%struct.net_device*, i32, i32, i32)* }
%struct.rtl8169_counters = type { i64, i64, i64, i32, i16, i16, i32, i32, i64, i64, i32, i16, i16 }
%struct.rtl8169_tc_offsets = type { i8, i64, i32, i16 }
%struct.rtl_fw = type { %struct.firmware*, [32 x i8], %struct.rtl_fw_phy_action }
%struct.firmware = type { i64, i8*, %struct.page**, i8* }
%struct.rtl_fw_phy_action = type { i32*, i64 }
%struct.pv_irq_ops = type { %struct.paravirt_callee_save, %struct.paravirt_callee_save, %struct.paravirt_callee_save, %struct.paravirt_callee_save, void ()*, void ()*, void ()* }
%struct.paravirt_callee_save = type { i8* }
%struct.netdev_hw_addr = type { %struct.list_head, [32 x i8], i8, i8, i32, i32, i32, %struct.callback_head }
%struct.fw_info = type <{ i32, [32 x i8], i32, i32, i8 }>
%struct.skb_frag_struct = type { %struct.anon.115, i32, i32 }
%struct.anon.115 = type { %struct.page* }
%struct.skb_shared_hwtstamps = type { %union.ktime }
%struct._ddebug = type { i8*, i8*, i8*, i8*, i32 }
%struct.exgmac_reg = type { i16, i16, i32 }

@rtl8169_pci_tbl = internal constant [14 x %struct.pci_device_id] [%struct.pci_device_id { i32 4332, i32 33065, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4332, i32 33078, i32 -1, i32 -1, i32 0, i32 0, i64 2 }, %struct.pci_device_id { i32 4332, i32 33121, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 4332, i32 33127, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4332, i32 33128, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 4332, i32 33129, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4486, i32 17152, i32 4486, i32 19216, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 4486, i32 17152, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4486, i32 17154, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4697, i32 49415, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 5868, i32 278, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 5943, i32 4146, i32 -1, i32 36, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 1, i32 33128, i32 -1, i32 9232, i32 0, i32 0, i64 2 }, %struct.pci_device_id zeroinitializer], align 16
@__UNIQUE_ID_author860 = internal constant [65 x i8] c"author=Realtek and the Linux r8169 crew <netdev@vger.kernel.org>\00", section ".modinfo", align 1
@__UNIQUE_ID_description861 = internal constant [53 x i8] c"description=RealTek RTL-8169 Gigabit Ethernet driver\00", section ".modinfo", align 1
@__param_str_use_dac = internal constant [8 x i8] c"use_dac\00", align 1
@__this_module = external global %struct.module, align 64
@param_ops_int = external constant %struct.kernel_param_ops, align 8
@use_dac = internal global i32 0, align 4
@__param_use_dac = internal constant %struct.kernel_param { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__param_str_use_dac, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.90 { i8* bitcast (i32* @use_dac to i8*) } }, section "__param", align 8
@__UNIQUE_ID_use_dactype862 = internal constant [21 x i8] c"parmtype=use_dac:int\00", section ".modinfo", align 1
@__UNIQUE_ID_use_dac863 = internal constant [56 x i8] c"parm=use_dac:Enable PCI DAC. Unsafe on 32 bit PCI slot.\00", section ".modinfo", align 1
@__param_str_debug = internal constant [6 x i8] c"debug\00", align 1
@debug = internal global %struct.anon.110 { i32 -1 }, align 4
@__param_debug = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_debug, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.90 { i8* bitcast (%struct.anon.110* @debug to i8*) } }, section "__param", align 8
@__UNIQUE_ID_debugtype864 = internal constant [19 x i8] c"parmtype=debug:int\00", section ".modinfo", align 1
@__UNIQUE_ID_debug865 = internal constant [55 x i8] c"parm=debug:Debug verbosity level (0=none, ..., 16=all)\00", section ".modinfo", align 1
@__UNIQUE_ID_license866 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@__UNIQUE_ID_version867 = internal constant [19 x i8] c"version=2.3LK-NAPI\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware868 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168d-1.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware869 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168d-2.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware870 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168e-1.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware871 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168e-2.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware872 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168e-3.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware873 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8105e-1.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware874 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168f-1.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware875 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168f-2.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware876 = internal constant [30 x i8] c"firmware=rtl_nic/rtl8402-1.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware877 = internal constant [30 x i8] c"firmware=rtl_nic/rtl8411-1.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware878 = internal constant [30 x i8] c"firmware=rtl_nic/rtl8411-2.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware879 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8106e-1.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware880 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8106e-2.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware881 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168g-2.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware882 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168g-3.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware883 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168h-1.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware884 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8168h-2.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware885 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8107e-1.fw\00", section ".modinfo", align 1
@__UNIQUE_ID_firmware886 = internal constant [31 x i8] c"firmware=rtl_nic/rtl8107e-2.fw\00", section ".modinfo", align 1
@rtl8169_pci_driver = internal global %struct.pci_driver { %struct.list_head zeroinitializer, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), %struct.pci_device_id* getelementptr inbounds ([14 x %struct.pci_device_id], [14 x %struct.pci_device_id]* @rtl8169_pci_tbl, i32 0, i32 0), i32 (%struct.pci_dev*, %struct.pci_device_id*)* @rtl_init_one, void (%struct.pci_dev*)* @rtl_remove_one, i32 (%struct.pci_dev*, i32)* null, i32 (%struct.pci_dev*, i32)* null, i32 (%struct.pci_dev*)* null, i32 (%struct.pci_dev*)* null, void (%struct.pci_dev*)* @rtl_shutdown, i32 (%struct.pci_dev*, i32)* null, %struct.pci_error_handlers* null, %struct.device_driver { i8* null, %struct.bus_type* null, %struct.module* null, i8* null, i8 0, i32 0, %struct.of_device_id* null, %struct.acpi_device_id* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*, i32)* null, i32 (%struct.device*)* null, %struct.attribute_group** null, %struct.dev_pm_ops* @rtl8169_pm_ops, %struct.driver_private* null }, %struct.pci_dynids zeroinitializer }, align 8
@.str = private unnamed_addr constant [6 x i8] c"r8169\00", align 1
@rtl8169_pm_ops = internal constant %struct.dev_pm_ops { i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*)* @rtl8169_suspend, i32 (%struct.device*)* @rtl8169_resume, i32 (%struct.device*)* @rtl8169_suspend, i32 (%struct.device*)* @rtl8169_resume, i32 (%struct.device*)* @rtl8169_suspend, i32 (%struct.device*)* @rtl8169_resume, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* @rtl8169_runtime_suspend, i32 (%struct.device*)* @rtl8169_runtime_resume, i32 (%struct.device*)* @rtl8169_runtime_idle }, align 8
@rtl_cfg_infos = internal constant [3 x %struct.rtl_cfg_info] [%struct.rtl_cfg_info { void (%struct.net_device*)* @rtl_hw_start_8169, i32 1, i32 0, i16 -32656, i32 4, i8 0 }, %struct.rtl_cfg_info { void (%struct.net_device*)* @rtl_hw_start_8168, i32 2, i32 8, i16 -32720, i32 6, i8 10 }, %struct.rtl_cfg_info { void (%struct.net_device*)* @rtl_hw_start_8101, i32 2, i32 8, i16 -16272, i32 2, i8 12 }], align 16
@.str.1 = private unnamed_addr constant [40 x i8] c"\016%s Gigabit Ethernet driver %s loaded\0A\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"2.3LK-NAPI\00", align 1
@rtl_netdev_ops = internal constant %struct.net_device_ops { i32 (%struct.net_device*)* null, void (%struct.net_device*)* null, i32 (%struct.net_device*)* @rtl_open, i32 (%struct.net_device*)* @rtl8169_close, i32 (%struct.sk_buff*, %struct.net_device*)* @rtl8169_start_xmit, i16 (%struct.net_device*, %struct.sk_buff*, i8*, i16 (%struct.net_device*, %struct.sk_buff*)*)* null, void (%struct.net_device*, i32)* null, void (%struct.net_device*)* @rtl_set_rx_mode, i32 (%struct.net_device*, i8*)* @rtl_set_mac_address, i32 (%struct.net_device*)* @eth_validate_addr, i32 (%struct.net_device*, %struct.ifreq*, i32)* @rtl8169_ioctl, i32 (%struct.net_device*, %struct.ifmap*)* null, i32 (%struct.net_device*, i32)* @rtl8169_change_mtu, i32 (%struct.net_device*, %struct.neigh_parms*)* null, void (%struct.net_device*)* @rtl8169_tx_timeout, %struct.rtnl_link_stats64* (%struct.net_device*, %struct.rtnl_link_stats64*)* @rtl8169_get_stats64, %struct.net_device_stats* (%struct.net_device*)* null, i32 (%struct.net_device*, i16, i16)* null, i32 (%struct.net_device*, i16, i16)* null, void (%struct.net_device*)* @rtl8169_netpoll, i32 (%struct.net_device*, %struct.netpoll_info*)* null, void (%struct.net_device*)* null, i32 (%struct.napi_struct*)* null, i32 (%struct.net_device*, i32, i8*)* null, i32 (%struct.net_device*, i32, i16, i8)* null, i32 (%struct.net_device*, i32, i32, i32)* null, i32 (%struct.net_device*, i32, i1)* null, i32 (%struct.net_device*, i32, i1)* null, i32 (%struct.net_device*, i32, %struct.ifla_vf_info*)* null, i32 (%struct.net_device*, i32, i32)* null, i32 (%struct.net_device*, i32, %struct.ifla_vf_stats*)* null, i32 (%struct.net_device*, i32, %struct.nlattr**)* null, i32 (%struct.net_device*, i32, %struct.sk_buff*)* null, i32 (%struct.net_device*, i32, i1)* null, i32 (%struct.net_device*, i32, i16, %struct.tc_to_netdev*)* null, i32 (%struct.net_device*)* null, i32 (%struct.net_device*)* null, i32 (%struct.net_device*, i16, %struct.scatterlist*, i32)* null, i32 (%struct.net_device*, i16)* null, i32 (%struct.net_device*, i16, %struct.scatterlist*, i32)* null, i32 (%struct.net_device*, %struct.netdev_fcoe_hbainfo*)* null, i32 (%struct.net_device*, i64*, i32)* null, i32 (%struct.net_device*, %struct.sk_buff*, i16, i32)* null, i32 (%struct.net_device*, %struct.net_device*)* null, i32 (%struct.net_device*, %struct.net_device*)* null, i64 (%struct.net_device*, i64)* @rtl8169_fix_features, i32 (%struct.net_device*, i64)* @rtl8169_set_features, i32 (%struct.neighbour*)* null, void (%struct.neighbour*)* null, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16, i16)* null, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16)* null, i32 (%struct.sk_buff*, %struct.netlink_callback*, %struct.net_device*, %struct.net_device*, i32)* null, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)* null, i32 (%struct.sk_buff*, i32, i32, %struct.net_device*, i32, i32)* null, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)* null, i32 (%struct.net_device*, i1)* null, i32 (%struct.net_device*, %struct.netdev_phys_item_id*)* null, i32 (%struct.net_device*, i8*, i64)* null, void (%struct.net_device*, i16, i16)* null, void (%struct.net_device*, i16, i16)* null, void (%struct.net_device*, i16, i16)* null, void (%struct.net_device*, i16, i16)* null, i8* (%struct.net_device*, %struct.net_device*)* null, void (%struct.net_device*, i8*)* null, i32 (%struct.sk_buff*, %struct.net_device*, i8*)* null, i32 (%struct.net_device*)* null, i64 (%struct.sk_buff*, %struct.net_device*, i64)* null, i32 (%struct.net_device*, i32, i32)* null, i32 (%struct.net_device*)* null, i32 (%struct.net_device*, i1)* null, i32 (%struct.net_device*, %struct.sk_buff*)* null }, align 8
@.str.3 = private unnamed_addr constant [16 x i8] c"enable failure\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"Mem-Wr-Inval unavailable\0A\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"region #%d not an MMIO resource, aborting\0A\00", align 1
@.str.6 = private unnamed_addr constant [38 x i8] c"Invalid PCI region size(s), aborting\0A\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"could not request regions\0A\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"DMA configuration failed\0A\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"cannot remap MMIO, aborting\0A\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"not PCI Express\0A\00", align 1
@rtl_chip_infos = internal unnamed_addr constant [51 x %struct.anon.113] [%struct.anon.113 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57, i32 0, i32 0), i32 0, i8* null, i16 7152, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.58, i32 0, i32 0), i32 0, i8* null, i16 7152, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.59, i32 0, i32 0), i32 0, i8* null, i16 7152, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.60, i32 0, i32 0), i32 0, i8* null, i16 7152, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.61, i32 0, i32 0), i32 0, i8* null, i16 7152, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.61, i32 0, i32 0), i32 0, i8* null, i16 7152, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i32 0, i32 0), i32 1, i8* null, i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i32 0, i32 0), i32 1, i8* null, i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i32 0, i32 0), i32 1, i8* null, i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63, i32 0, i32 0), i32 0, i8* null, i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.64, i32 0, i32 0), i32 0, i8* null, i16 4080, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.64, i32 0, i32 0), i32 0, i8* null, i16 4080, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63, i32 0, i32 0), i32 0, i8* null, i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65, i32 0, i32 0), i32 0, i8* null, i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65, i32 0, i32 0), i32 0, i8* null, i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63, i32 0, i32 0), i32 0, i8* null, i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.64, i32 0, i32 0), i32 0, i8* null, i16 4080, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.66, i32 0, i32 0), i32 1, i8* null, i16 6128, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.67, i32 0, i32 0), i32 1, i8* null, i16 6128, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.67, i32 0, i32 0), i32 1, i8* null, i16 6128, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.67, i32 0, i32 0), i32 1, i8* null, i16 6128, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.67, i32 0, i32 0), i32 1, i8* null, i16 6128, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.66, i32 0, i32 0), i32 1, i8* null, i16 6128, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.66, i32 0, i32 0), i32 1, i8* null, i16 6128, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.68, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.69, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.68, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.70, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.71, i32 0, i32 0), i32 1, i8* null, i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.71, i32 0, i32 0), i32 1, i8* null, i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.72, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.73, i32 0, i32 0), i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.72, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.73, i32 0, i32 0), i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.71, i32 0, i32 0), i32 1, i8* null, i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.74, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.75, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.74, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.76, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.77, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.78, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.79, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.80, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.79, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.81, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.82, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.83, i32 0, i32 0), i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.84, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.85, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.87, i32 0, i32 0), i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.88, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.89, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.88, i32 0, i32 0), i32 1, i8* null, i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.88, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.90, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.91, i32 0, i32 0), i16 1500, i8 1 }, %struct.anon.113 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.84, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.92, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.93, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.94, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.93, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.95, i32 0, i32 0), i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.97, i32 0, i32 0), i16 1500, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.98, i32 0, i32 0), i16 1500, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.99, i32 0, i32 0), i32 1, i8* null, i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.99, i32 0, i32 0), i32 1, i8* null, i16 9200, i8 0 }, %struct.anon.113 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.99, i32 0, i32 0), i32 1, i8* null, i16 9200, i8 0 }], align 16
@rtl_init_one.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"&tp->wk.mutex\00", align 1
@rtl8169_ethtool_ops = internal constant %struct.ethtool_ops { i32 (%struct.net_device*, %struct.ethtool_cmd*)* @rtl8169_get_settings, i32 (%struct.net_device*, %struct.ethtool_cmd*)* @rtl8169_set_settings, void (%struct.net_device*, %struct.ethtool_drvinfo*)* @rtl8169_get_drvinfo, i32 (%struct.net_device*)* @rtl8169_get_regs_len, void (%struct.net_device*, %struct.ethtool_regs*, i8*)* @rtl8169_get_regs, void (%struct.net_device*, %struct.ethtool_wolinfo*)* @rtl8169_get_wol, i32 (%struct.net_device*, %struct.ethtool_wolinfo*)* @rtl8169_set_wol, i32 (%struct.net_device*)* @rtl8169_get_msglevel, void (%struct.net_device*, i32)* @rtl8169_set_msglevel, i32 (%struct.net_device*)* null, i32 (%struct.net_device*)* @ethtool_op_get_link, i32 (%struct.net_device*)* null, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)* null, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)* null, i32 (%struct.net_device*, %struct.ethtool_coalesce*)* null, i32 (%struct.net_device*, %struct.ethtool_coalesce*)* null, void (%struct.net_device*, %struct.ethtool_ringparam*)* null, i32 (%struct.net_device*, %struct.ethtool_ringparam*)* null, void (%struct.net_device*, %struct.ethtool_pauseparam*)* null, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)* null, void (%struct.net_device*, %struct.ethtool_test*, i64*)* null, void (%struct.net_device*, i32, i8*)* @rtl8169_get_strings, i32 (%struct.net_device*, i32)* null, void (%struct.net_device*, %struct.ethtool_stats*, i64*)* @rtl8169_get_ethtool_stats, i32 (%struct.net_device*)* null, void (%struct.net_device*)* null, i32 (%struct.net_device*)* null, i32 (%struct.net_device*, i32)* null, i32 (%struct.net_device*, i32)* @rtl8169_get_sset_count, i32 (%struct.net_device*, %struct.ethtool_rxnfc*, i32*)* null, i32 (%struct.net_device*, %struct.ethtool_rxnfc*)* null, i32 (%struct.net_device*, %struct.ethtool_flash*)* null, i32 (%struct.net_device*, i32*)* null, i32 (%struct.net_device*)* null, i32 (%struct.net_device*)* null, i32 (%struct.net_device*, i32*, i8*, i8*)* null, i32 (%struct.net_device*, i32*, i8*, i8)* null, void (%struct.net_device*, %struct.ethtool_channels*)* null, i32 (%struct.net_device*, %struct.ethtool_channels*)* null, i32 (%struct.net_device*, %struct.ethtool_dump*)* null, i32 (%struct.net_device*, %struct.ethtool_dump*, i8*)* null, i32 (%struct.net_device*, %struct.ethtool_dump*)* null, i32 (%struct.net_device*, %struct.ethtool_ts_info*)* @ethtool_op_get_ts_info, i32 (%struct.net_device*, %struct.ethtool_modinfo*)* null, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)* null, i32 (%struct.net_device*, %struct.ethtool_eee*)* null, i32 (%struct.net_device*, %struct.ethtool_eee*)* null, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)* null, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)* null, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)* null, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)* null }, align 8
@rtl_init_one.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.12 = private unnamed_addr constant [54 x i8] c"/home/chenql/code/EHTest/kernel4.4/r8169/r8169_main.c\00", align 1
@.str.13 = private unnamed_addr constant [34 x i8] c"%s at 0x%p, %pM, XID %08x IRQ %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [56 x i8] c"jumbo features [frames: %d bytes, tx checksumming: %s]\0A\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"ok\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"ko\00", align 1
@rtl8169_set_magic_reg.cfg2_info = internal unnamed_addr constant [4 x %struct.rtl_cfg2_info] [%struct.rtl_cfg2_info { i32 4, i32 0, i32 1048320 }, %struct.rtl_cfg2_info { i32 4, i32 1, i32 1048575 }, %struct.rtl_cfg2_info { i32 5, i32 0, i32 16776960 }, %struct.rtl_cfg2_info { i32 5, i32 1, i32 16777215 }], align 16
@.str.17 = private unnamed_addr constant [26 x i8] c"Promiscuous mode enabled\0A\00", align 1
@byte_rev_table = external local_unnamed_addr constant [256 x i8], align 16
@.str.18 = private unnamed_addr constant [50 x i8] c"\013r8169: %s: unknown chipset (mac_version = %d).\0A\00", align 1
@rtl_hw_start_8168cp_1.e_info_8168cp = internal constant [5 x %struct.ephy_info] [%struct.ephy_info { i32 1, i16 0, i16 1 }, %struct.ephy_info { i32 2, i16 2048, i16 4096 }, %struct.ephy_info { i32 3, i16 0, i16 66 }, %struct.ephy_info { i32 6, i16 128, i16 0 }, %struct.ephy_info { i32 7, i16 0, i16 8192 }], align 16
@.str.19 = private unnamed_addr constant [33 x i8] c"%s == %d (loop: %d, delay: %d).\0A\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"rtl_ephyar_cond\00", align 1
@rtl_hw_start_8168c_1.e_info_8168c_1 = internal constant [3 x %struct.ephy_info] [%struct.ephy_info { i32 2, i16 2048, i16 4096 }, %struct.ephy_info { i32 3, i16 0, i16 2 }, %struct.ephy_info { i32 6, i16 128, i16 0 }], align 16
@rtl_hw_start_8168d_4.e_info_8168d_4 = internal unnamed_addr constant [3 x %struct.ephy_info] [%struct.ephy_info { i32 11, i16 -1, i16 72 }, %struct.ephy_info { i32 25, i16 32, i16 80 }, %struct.ephy_info { i32 12, i16 -1, i16 32 }], align 16
@rtl_hw_start_8168e_1.e_info_8168e_1 = internal constant [13 x %struct.ephy_info] [%struct.ephy_info { i32 0, i16 512, i16 256 }, %struct.ephy_info { i32 0, i16 0, i16 4 }, %struct.ephy_info { i32 6, i16 2, i16 1 }, %struct.ephy_info { i32 6, i16 0, i16 48 }, %struct.ephy_info { i32 7, i16 0, i16 8192 }, %struct.ephy_info { i32 0, i16 0, i16 32 }, %struct.ephy_info { i32 3, i16 22528, i16 8192 }, %struct.ephy_info { i32 3, i16 0, i16 1 }, %struct.ephy_info { i32 1, i16 2048, i16 4096 }, %struct.ephy_info { i32 7, i16 0, i16 16384 }, %struct.ephy_info { i32 30, i16 0, i16 8192 }, %struct.ephy_info { i32 25, i16 -1, i16 -404 }, %struct.ephy_info { i32 10, i16 0, i16 64 }], align 16
@rtl_hw_start_8168e_2.e_info_8168e_2 = internal constant [2 x %struct.ephy_info] [%struct.ephy_info { i32 9, i16 0, i16 128 }, %struct.ephy_info { i32 25, i16 0, i16 548 }], align 16
@.str.21 = private unnamed_addr constant [15 x i8] c"rtl_eriar_cond\00", align 1
@rtl_hw_start_8168f_1.e_info_8168f_1 = internal constant [4 x %struct.ephy_info] [%struct.ephy_info { i32 6, i16 192, i16 32 }, %struct.ephy_info { i32 8, i16 1, i16 2 }, %struct.ephy_info { i32 9, i16 0, i16 128 }, %struct.ephy_info { i32 25, i16 0, i16 548 }], align 16
@rtl_hw_start_8411.e_info_8168f_1 = internal constant [4 x %struct.ephy_info] [%struct.ephy_info { i32 6, i16 192, i16 32 }, %struct.ephy_info { i32 15, i16 -1, i16 20992 }, %struct.ephy_info { i32 30, i16 0, i16 16384 }, %struct.ephy_info { i32 25, i16 0, i16 548 }], align 16
@rtl_hw_start_8168g_1.e_info_8168g_1 = internal constant [4 x %struct.ephy_info] [%struct.ephy_info { i32 0, i16 0, i16 8 }, %struct.ephy_info { i32 12, i16 14288, i16 2080 }, %struct.ephy_info { i32 30, i16 0, i16 1 }, %struct.ephy_info { i32 25, i16 -32768, i16 0 }], align 16
@rtl_hw_start_8411_2.e_info_8411_2 = internal constant [5 x %struct.ephy_info] [%struct.ephy_info { i32 0, i16 0, i16 8 }, %struct.ephy_info { i32 12, i16 15856, i16 512 }, %struct.ephy_info { i32 15, i16 -1, i16 20992 }, %struct.ephy_info { i32 25, i16 32, i16 0 }, %struct.ephy_info { i32 30, i16 0, i16 8192 }], align 16
@rtl_hw_start_8168h_1.e_info_8168h_1 = internal constant [6 x %struct.ephy_info] [%struct.ephy_info { i32 30, i16 2048, i16 1 }, %struct.ephy_info { i32 29, i16 0, i16 2048 }, %struct.ephy_info { i32 5, i16 -1, i16 8329 }, %struct.ephy_info { i32 6, i16 -1, i16 22657 }, %struct.ephy_info { i32 4, i16 -1, i16 5450 }, %struct.ephy_info { i32 1, i16 -1, i16 1675 }], align 16
@.str.22 = private unnamed_addr constant [21 x i8] c"Invalid ocp reg %x!\0A\00", align 1
@rtl_hw_start_8168ep_1.e_info_8168ep_1 = internal constant [5 x %struct.ephy_info] [%struct.ephy_info { i32 0, i16 -1, i16 4267 }, %struct.ephy_info { i32 6, i16 -1, i16 -4048 }, %struct.ephy_info { i32 8, i16 -1, i16 8198 }, %struct.ephy_info { i32 13, i16 -1, i16 5734 }, %struct.ephy_info { i32 12, i16 16368, i16 0 }], align 16
@.str.23 = private unnamed_addr constant [16 x i8] c"rtl_ocp_tx_cond\00", align 1
@rtl_hw_start_8168ep_2.e_info_8168ep_2 = internal constant [3 x %struct.ephy_info] [%struct.ephy_info { i32 0, i16 -1, i16 4259 }, %struct.ephy_info { i32 25, i16 -1, i16 -1024 }, %struct.ephy_info { i32 30, i16 -1, i16 8426 }], align 16
@rtl_hw_start_8168ep_3.e_info_8168ep_3 = internal constant [4 x %struct.ephy_info] [%struct.ephy_info { i32 0, i16 -1, i16 4259 }, %struct.ephy_info { i32 25, i16 -1, i16 31744 }, %struct.ephy_info { i32 30, i16 -1, i16 8427 }, %struct.ephy_info { i32 13, i16 -1, i16 5734 }], align 16
@rtl_hw_start_8102e_1.e_info_8102e_1 = internal constant [8 x %struct.ephy_info] [%struct.ephy_info { i32 1, i16 0, i16 28261 }, %struct.ephy_info { i32 2, i16 0, i16 2335 }, %struct.ephy_info { i32 3, i16 0, i16 -15623 }, %struct.ephy_info { i32 6, i16 0, i16 -20555 }, %struct.ephy_info { i32 7, i16 0, i16 3584 }, %struct.ephy_info { i32 25, i16 0, i16 -4992 }, %struct.ephy_info { i32 1, i16 0, i16 11877 }, %struct.ephy_info { i32 1, i16 0, i16 28261 }], align 16
@rtl_hw_start_8105e_1.e_info_8105e_1 = internal constant [8 x %struct.ephy_info] [%struct.ephy_info { i32 7, i16 0, i16 16384 }, %struct.ephy_info { i32 25, i16 0, i16 512 }, %struct.ephy_info { i32 25, i16 0, i16 32 }, %struct.ephy_info { i32 30, i16 0, i16 8192 }, %struct.ephy_info { i32 3, i16 0, i16 1 }, %struct.ephy_info { i32 25, i16 0, i16 256 }, %struct.ephy_info { i32 25, i16 0, i16 4 }, %struct.ephy_info { i32 10, i16 0, i16 32 }], align 16
@rtl_hw_start_8402.e_info_8402 = internal constant [2 x %struct.ephy_info] [%struct.ephy_info { i32 25, i16 -1, i16 -156 }, %struct.ephy_info { i32 30, i16 0, i16 16384 }], align 16
@.str.24 = private unnamed_addr constant [29 x i8] c"counter reset/update failed\0A\00", align 1
@.str.25 = private unnamed_addr constant [23 x i8] c"Failed to map RX DMA!\0A\00", align 1
@.str.26 = private unnamed_addr constant [41 x i8] c"include/asm-generic/dma-mapping-common.h\00", align 1
@dma_ops = external local_unnamed_addr global %struct.dma_map_ops*, align 8
@phys_base = external local_unnamed_addr global i64, align 8
@.str.27 = private unnamed_addr constant [43 x i8] c"PCI error (cmd = 0x%04x, status = 0x%04x)\0A\00", align 1
@.str.28 = private unnamed_addr constant [19 x i8] c"disabling PCI DAC\0A\00", align 1
@.str.29 = private unnamed_addr constant [13 x i8] c"rtl_npq_cond\00", align 1
@.str.30 = private unnamed_addr constant [21 x i8] c"rtl_txcfg_empty_cond\00", align 1
@system_wq = external local_unnamed_addr global %struct.workqueue_struct*, align 8
@.str.31 = private unnamed_addr constant [9 x i8] c"link up\0A\00", align 1
@.str.32 = private unnamed_addr constant [11 x i8] c"link down\0A\00", align 1
@rtl_phy_work.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__func__.rtl_phy_work, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.33, i32 0, i32 0), i8 -4, i8 16, i8 0, i8 0 }, section "__verbose", align 8
@__func__.rtl_phy_work = private unnamed_addr constant [13 x i8] c"rtl_phy_work\00", align 1
@.str.33 = private unnamed_addr constant [25 x i8] c"PHY reset until link up\0A\00", align 1
@jiffies = external global i64, align 8
@.str.34 = private unnamed_addr constant [39 x i8] c"unable to load firmware patch %s (%d)\0A\00", align 1
@.str.35 = private unnamed_addr constant [18 x i8] c"invalid firmware\0A\00", align 1
@.str.36 = private unnamed_addr constant [26 x i8] c"Out of range of firmware\0A\00", align 1
@.str.37 = private unnamed_addr constant [23 x i8] c"Invalid action 0x%08x\0A\00", align 1
@.str.38 = private unnamed_addr constant [26 x i8] c"include/linux/netdevice.h\00", align 1
@.str.39 = private unnamed_addr constant [22 x i8] c"TBI auto-negotiating\0A\00", align 1
@rtl8169s_hw_phy_config.phy_reg_init = internal constant [51 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 6, i16 110 }, %struct.phy_reg { i16 8, i16 1800 }, %struct.phy_reg { i16 21, i16 16384 }, %struct.phy_reg { i16 24, i16 26055 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 3, i16 161 }, %struct.phy_reg { i16 2, i16 8 }, %struct.phy_reg { i16 1, i16 288 }, %struct.phy_reg { i16 0, i16 4096 }, %struct.phy_reg { i16 4, i16 2048 }, %struct.phy_reg { i16 4, i16 0 }, %struct.phy_reg { i16 3, i16 -191 }, %struct.phy_reg { i16 2, i16 -8352 }, %struct.phy_reg { i16 1, i16 320 }, %struct.phy_reg { i16 0, i16 119 }, %struct.phy_reg { i16 4, i16 30720 }, %struct.phy_reg { i16 4, i16 28672 }, %struct.phy_reg { i16 3, i16 -32721 }, %struct.phy_reg { i16 2, i16 20226 }, %struct.phy_reg { i16 1, i16 1033 }, %struct.phy_reg { i16 0, i16 -3847 }, %struct.phy_reg { i16 4, i16 -26624 }, %struct.phy_reg { i16 4, i16 -28672 }, %struct.phy_reg { i16 3, i16 -8447 }, %struct.phy_reg { i16 2, i16 -8416 }, %struct.phy_reg { i16 1, i16 -107 }, %struct.phy_reg { i16 0, i16 -17920 }, %struct.phy_reg { i16 4, i16 -22528 }, %struct.phy_reg { i16 4, i16 -24576 }, %struct.phy_reg { i16 3, i16 -191 }, %struct.phy_reg { i16 2, i16 -8416 }, %struct.phy_reg { i16 1, i16 320 }, %struct.phy_reg { i16 0, i16 187 }, %struct.phy_reg { i16 4, i16 -18432 }, %struct.phy_reg { i16 4, i16 -20480 }, %struct.phy_reg { i16 3, i16 -8383 }, %struct.phy_reg { i16 2, i16 -9120 }, %struct.phy_reg { i16 1, i16 25408 }, %struct.phy_reg { i16 0, i16 125 }, %struct.phy_reg { i16 4, i16 -10240 }, %struct.phy_reg { i16 4, i16 -12288 }, %struct.phy_reg { i16 3, i16 -8447 }, %struct.phy_reg { i16 2, i16 -8416 }, %struct.phy_reg { i16 1, i16 4106 }, %struct.phy_reg { i16 0, i16 -24321 }, %struct.phy_reg { i16 4, i16 -2048 }, %struct.phy_reg { i16 4, i16 -4096 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 11, i16 0 }, %struct.phy_reg { i16 0, i16 -28160 }], align 16
@rtl8169scd_hw_phy_config.phy_reg_init = internal constant [35 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 4, i16 0 }, %struct.phy_reg { i16 3, i16 161 }, %struct.phy_reg { i16 2, i16 8 }, %struct.phy_reg { i16 1, i16 288 }, %struct.phy_reg { i16 0, i16 4096 }, %struct.phy_reg { i16 4, i16 2048 }, %struct.phy_reg { i16 4, i16 -28672 }, %struct.phy_reg { i16 3, i16 -32721 }, %struct.phy_reg { i16 2, i16 20226 }, %struct.phy_reg { i16 1, i16 1033 }, %struct.phy_reg { i16 0, i16 -3943 }, %struct.phy_reg { i16 4, i16 -26624 }, %struct.phy_reg { i16 4, i16 -24576 }, %struct.phy_reg { i16 3, i16 -8447 }, %struct.phy_reg { i16 2, i16 -8416 }, %struct.phy_reg { i16 1, i16 -107 }, %struct.phy_reg { i16 0, i16 -17920 }, %struct.phy_reg { i16 4, i16 -22528 }, %struct.phy_reg { i16 4, i16 -4096 }, %struct.phy_reg { i16 3, i16 -8447 }, %struct.phy_reg { i16 2, i16 -8416 }, %struct.phy_reg { i16 1, i16 4122 }, %struct.phy_reg { i16 0, i16 -24321 }, %struct.phy_reg { i16 4, i16 -2048 }, %struct.phy_reg { i16 4, i16 0 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 16, i16 -3045 }, %struct.phy_reg { i16 20, i16 -1196 }, %struct.phy_reg { i16 24, i16 -2617 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 23, i16 3264 }, %struct.phy_reg { i16 31, i16 0 }], align 16
@rtl8169sce_hw_phy_config.phy_reg_init = internal constant [42 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 4, i16 0 }, %struct.phy_reg { i16 3, i16 161 }, %struct.phy_reg { i16 2, i16 8 }, %struct.phy_reg { i16 1, i16 288 }, %struct.phy_reg { i16 0, i16 4096 }, %struct.phy_reg { i16 4, i16 2048 }, %struct.phy_reg { i16 4, i16 -28672 }, %struct.phy_reg { i16 3, i16 -32721 }, %struct.phy_reg { i16 2, i16 20226 }, %struct.phy_reg { i16 1, i16 1033 }, %struct.phy_reg { i16 0, i16 -3943 }, %struct.phy_reg { i16 4, i16 -26624 }, %struct.phy_reg { i16 4, i16 -24576 }, %struct.phy_reg { i16 3, i16 -8447 }, %struct.phy_reg { i16 2, i16 -8416 }, %struct.phy_reg { i16 1, i16 -107 }, %struct.phy_reg { i16 0, i16 -17920 }, %struct.phy_reg { i16 4, i16 -22528 }, %struct.phy_reg { i16 4, i16 -4096 }, %struct.phy_reg { i16 3, i16 -8447 }, %struct.phy_reg { i16 2, i16 -8416 }, %struct.phy_reg { i16 1, i16 4122 }, %struct.phy_reg { i16 0, i16 -24321 }, %struct.phy_reg { i16 4, i16 -2048 }, %struct.phy_reg { i16 4, i16 0 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 11, i16 -31616 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 24, i16 26567 }, %struct.phy_reg { i16 4, i16 8192 }, %struct.phy_reg { i16 3, i16 47 }, %struct.phy_reg { i16 2, i16 17248 }, %struct.phy_reg { i16 1, i16 265 }, %struct.phy_reg { i16 0, i16 12322 }, %struct.phy_reg { i16 4, i16 10240 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 23, i16 3264 }, %struct.phy_reg { i16 31, i16 0 }], align 16
@rtl8168d_1_hw_phy_config.phy_reg_init_0 = internal constant [26 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 6, i16 16484 }, %struct.phy_reg { i16 7, i16 10339 }, %struct.phy_reg { i16 8, i16 1436 }, %struct.phy_reg { i16 9, i16 9908 }, %struct.phy_reg { i16 10, i16 27161 }, %struct.phy_reg { i16 11, i16 -9016 }, %struct.phy_reg { i16 16, i16 -3987 }, %struct.phy_reg { i16 20, i16 32616 }, %struct.phy_reg { i16 24, i16 32729 }, %struct.phy_reg { i16 28, i16 -3841 }, %struct.phy_reg { i16 29, i16 15772 }, %struct.phy_reg { i16 31, i16 3 }, %struct.phy_reg { i16 18, i16 -2913 }, %struct.phy_reg { i16 19, i16 1803 }, %struct.phy_reg { i16 26, i16 1453 }, %struct.phy_reg { i16 20, i16 -27456 }, %struct.phy_reg { i16 31, i16 2 }, %struct.phy_reg { i16 6, i16 21857 }, %struct.phy_reg { i16 31, i16 5 }, %struct.phy_reg { i16 5, i16 -31950 }, %struct.phy_reg { i16 6, i16 21857 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 23, i16 3264 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 13, i16 -1920 }], align 16
@.str.41 = private unnamed_addr constant [17 x i8] c"rtl_efusear_cond\00", align 1
@.str.42 = private unnamed_addr constant [32 x i8] c"chipset not ready for firmware\0A\00", align 1
@rtl8168d_2_hw_phy_config.phy_reg_init_0 = internal constant [26 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 6, i16 16484 }, %struct.phy_reg { i16 7, i16 10339 }, %struct.phy_reg { i16 8, i16 1436 }, %struct.phy_reg { i16 9, i16 9908 }, %struct.phy_reg { i16 10, i16 27161 }, %struct.phy_reg { i16 11, i16 -9016 }, %struct.phy_reg { i16 16, i16 -3987 }, %struct.phy_reg { i16 20, i16 32616 }, %struct.phy_reg { i16 24, i16 32729 }, %struct.phy_reg { i16 28, i16 -3841 }, %struct.phy_reg { i16 29, i16 15772 }, %struct.phy_reg { i16 31, i16 3 }, %struct.phy_reg { i16 18, i16 -2913 }, %struct.phy_reg { i16 19, i16 1803 }, %struct.phy_reg { i16 26, i16 1453 }, %struct.phy_reg { i16 20, i16 -27456 }, %struct.phy_reg { i16 31, i16 2 }, %struct.phy_reg { i16 6, i16 21857 }, %struct.phy_reg { i16 31, i16 5 }, %struct.phy_reg { i16 5, i16 -31950 }, %struct.phy_reg { i16 6, i16 21857 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 23, i16 3264 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 13, i16 -1920 }], align 16
@rtl8168d_3_hw_phy_config.phy_reg_init = internal constant [48 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 2 }, %struct.phy_reg { i16 16, i16 8 }, %struct.phy_reg { i16 13, i16 108 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 13, i16 -1920 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 23, i16 3264 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 11, i16 -23336 }, %struct.phy_reg { i16 9, i16 10268 }, %struct.phy_reg { i16 7, i16 10371 }, %struct.phy_reg { i16 10, i16 27445 }, %struct.phy_reg { i16 29, i16 15780 }, %struct.phy_reg { i16 28, i16 -4099 }, %struct.phy_reg { i16 20, i16 32594 }, %struct.phy_reg { i16 24, i16 32710 }, %struct.phy_reg { i16 8, i16 1537 }, %struct.phy_reg { i16 6, i16 16483 }, %struct.phy_reg { i16 16, i16 -3980 }, %struct.phy_reg { i16 31, i16 3 }, %struct.phy_reg { i16 19, i16 1929 }, %struct.phy_reg { i16 18, i16 -2883 }, %struct.phy_reg { i16 26, i16 1277 }, %struct.phy_reg { i16 20, i16 -31568 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 0, i16 -28160 }, %struct.phy_reg { i16 31, i16 5 }, %struct.phy_reg { i16 1, i16 832 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 4, i16 16384 }, %struct.phy_reg { i16 3, i16 7457 }, %struct.phy_reg { i16 2, i16 3122 }, %struct.phy_reg { i16 1, i16 512 }, %struct.phy_reg { i16 0, i16 21844 }, %struct.phy_reg { i16 4, i16 18432 }, %struct.phy_reg { i16 4, i16 16384 }, %struct.phy_reg { i16 4, i16 -4096 }, %struct.phy_reg { i16 3, i16 -8447 }, %struct.phy_reg { i16 2, i16 -8416 }, %struct.phy_reg { i16 1, i16 4122 }, %struct.phy_reg { i16 0, i16 -24321 }, %struct.phy_reg { i16 4, i16 -2048 }, %struct.phy_reg { i16 4, i16 -4096 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 7 }, %struct.phy_reg { i16 30, i16 35 }, %struct.phy_reg { i16 22, i16 0 }, %struct.phy_reg { i16 31, i16 0 }], align 16
@rtl8168e_1_hw_phy_config.phy_reg_init = internal constant [19 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 5 }, %struct.phy_reg { i16 5, i16 -29824 }, %struct.phy_reg { i16 6, i16 -14186 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 1 }, %struct.phy_reg { i16 11, i16 27680 }, %struct.phy_reg { i16 7, i16 10354 }, %struct.phy_reg { i16 28, i16 -4097 }, %struct.phy_reg { i16 31, i16 3 }, %struct.phy_reg { i16 20, i16 25632 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 7 }, %struct.phy_reg { i16 30, i16 47 }, %struct.phy_reg { i16 21, i16 6425 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 7 }, %struct.phy_reg { i16 30, i16 172 }, %struct.phy_reg { i16 24, i16 6 }, %struct.phy_reg { i16 31, i16 0 }], align 16
@rtl8168e_2_hw_phy_config.phy_reg_init = internal constant [19 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 4 }, %struct.phy_reg { i16 31, i16 7 }, %struct.phy_reg { i16 30, i16 172 }, %struct.phy_reg { i16 24, i16 6 }, %struct.phy_reg { i16 31, i16 2 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 3 }, %struct.phy_reg { i16 9, i16 -24049 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 5 }, %struct.phy_reg { i16 5, i16 -29861 }, %struct.phy_reg { i16 6, i16 -28126 }, %struct.phy_reg { i16 5, i16 -29843 }, %struct.phy_reg { i16 6, i16 -32768 }, %struct.phy_reg { i16 5, i16 -29834 }, %struct.phy_reg { i16 6, i16 -32768 }, %struct.phy_reg { i16 31, i16 0 }], align 16
@rtl8168f_1_hw_phy_config.phy_reg_init = internal constant [25 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 3 }, %struct.phy_reg { i16 9, i16 -24049 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 5 }, %struct.phy_reg { i16 5, i16 -29867 }, %struct.phy_reg { i16 6, i16 0 }, %struct.phy_reg { i16 5, i16 -29858 }, %struct.phy_reg { i16 6, i16 0 }, %struct.phy_reg { i16 5, i16 -29849 }, %struct.phy_reg { i16 6, i16 0 }, %struct.phy_reg { i16 5, i16 -29840 }, %struct.phy_reg { i16 6, i16 0 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 7 }, %struct.phy_reg { i16 30, i16 120 }, %struct.phy_reg { i16 23, i16 0 }, %struct.phy_reg { i16 25, i16 251 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 5 }, %struct.phy_reg { i16 5, i16 -29831 }, %struct.phy_reg { i16 6, i16 -22016 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 3 }, %struct.phy_reg { i16 1, i16 12938 }, %struct.phy_reg { i16 31, i16 0 }], align 16
@rtl8411_hw_phy_config.phy_reg_init = internal constant [25 x %struct.phy_reg] [%struct.phy_reg { i16 31, i16 3 }, %struct.phy_reg { i16 9, i16 -24049 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 5 }, %struct.phy_reg { i16 5, i16 -29867 }, %struct.phy_reg { i16 6, i16 0 }, %struct.phy_reg { i16 5, i16 -29858 }, %struct.phy_reg { i16 6, i16 0 }, %struct.phy_reg { i16 5, i16 -29849 }, %struct.phy_reg { i16 6, i16 0 }, %struct.phy_reg { i16 5, i16 -29840 }, %struct.phy_reg { i16 6, i16 0 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 7 }, %struct.phy_reg { i16 30, i16 120 }, %struct.phy_reg { i16 23, i16 0 }, %struct.phy_reg { i16 25, i16 170 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 5 }, %struct.phy_reg { i16 5, i16 -29831 }, %struct.phy_reg { i16 6, i16 -22016 }, %struct.phy_reg { i16 31, i16 0 }, %struct.phy_reg { i16 31, i16 3 }, %struct.phy_reg { i16 1, i16 12938 }, %struct.phy_reg { i16 31, i16 0 }], align 16
@.str.44 = private unnamed_addr constant [19 x i8] c"rtl_phy_reset_cond\00", align 1
@.str.45 = private unnamed_addr constant [18 x i8] c"rtl_counters_cond\00", align 1
@.str.46 = private unnamed_addr constant [37 x i8] c"BUG! Tx Ring full when queue awake!\0A\00", align 1
@.str.47 = private unnamed_addr constant [23 x i8] c"Failed to map TX DMA!\0A\00", align 1
@.str.48 = private unnamed_addr constant [33 x i8] c"Failed to map TX fragments DMA!\0A\00", align 1
@rtl8169_get_mac_version.mac_info = internal unnamed_addr constant [63 x %struct.rtl_mac_info] [%struct.rtl_mac_info { i32 2096103424, i32 1344274432, i32 50 }, %struct.rtl_mac_info { i32 2096103424, i32 1343225856, i32 49 }, %struct.rtl_mac_info { i32 2096103424, i32 1342177280, i32 48 }, %struct.rtl_mac_info { i32 2096103424, i32 1410334720, i32 45 }, %struct.rtl_mac_info { i32 2096103424, i32 1409286144, i32 44 }, %struct.rtl_mac_info { i32 2096103424, i32 1551892480, i32 43 }, %struct.rtl_mac_info { i32 2096103424, i32 1351614464, i32 41 }, %struct.rtl_mac_info { i32 2096103424, i32 1276116992, i32 40 }, %struct.rtl_mac_info { i32 2096103424, i32 1275068416, i32 39 }, %struct.rtl_mac_info { i32 2088763392, i32 1216348160, i32 37 }, %struct.rtl_mac_info { i32 2096103424, i32 1209008128, i32 35 }, %struct.rtl_mac_info { i32 2096103424, i32 1207959552, i32 34 }, %struct.rtl_mac_info { i32 2088763392, i32 746586112, i32 33 }, %struct.rtl_mac_info { i32 2096103424, i32 740294656, i32 32 }, %struct.rtl_mac_info { i32 2096103424, i32 739246080, i32 31 }, %struct.rtl_mac_info { i32 2088763392, i32 738197504, i32 32 }, %struct.rtl_mac_info { i32 2096103424, i32 674234368, i32 25 }, %struct.rtl_mac_info { i32 2096103424, i32 672137216, i32 24 }, %struct.rtl_mac_info { i32 2088763392, i32 671088640, i32 25 }, %struct.rtl_mac_info { i32 2096103424, i32 679477248, i32 26 }, %struct.rtl_mac_info { i32 2096103424, i32 681574400, i32 27 }, %struct.rtl_mac_info { i32 2096103424, i32 682622976, i32 30 }, %struct.rtl_mac_info { i32 2096103424, i32 1018167296, i32 23 }, %struct.rtl_mac_info { i32 2096103424, i32 1016070144, i32 22 }, %struct.rtl_mac_info { i32 2096103424, i32 1015021568, i32 17 }, %struct.rtl_mac_info { i32 2088763392, i32 1015021568, i32 23 }, %struct.rtl_mac_info { i32 2096103424, i32 1006632960, i32 18 }, %struct.rtl_mac_info { i32 2096103424, i32 1008730112, i32 19 }, %struct.rtl_mac_info { i32 2096103424, i32 1009778688, i32 20 }, %struct.rtl_mac_info { i32 2096103424, i32 1010827264, i32 21 }, %struct.rtl_mac_info { i32 2088763392, i32 1006632960, i32 21 }, %struct.rtl_mac_info { i32 2096103424, i32 939524096, i32 11 }, %struct.rtl_mac_info { i32 2096103424, i32 944766976, i32 16 }, %struct.rtl_mac_info { i32 2088763392, i32 939524096, i32 16 }, %struct.rtl_mac_info { i32 2088763392, i32 805306368, i32 10 }, %struct.rtl_mac_info { i32 2096103424, i32 1150287872, i32 38 }, %struct.rtl_mac_info { i32 2088763392, i32 1149239296, i32 38 }, %struct.rtl_mac_info { i32 2088763392, i32 1140850688, i32 36 }, %struct.rtl_mac_info { i32 2096103424, i32 1085276160, i32 29 }, %struct.rtl_mac_info { i32 2096103424, i32 1084227584, i32 29 }, %struct.rtl_mac_info { i32 2096103424, i32 1083179008, i32 28 }, %struct.rtl_mac_info { i32 2088763392, i32 1082130432, i32 29 }, %struct.rtl_mac_info { i32 2096103424, i32 882900992, i32 8 }, %struct.rtl_mac_info { i32 2096103424, i32 614465536, i32 8 }, %struct.rtl_mac_info { i32 2096103424, i32 881852416, i32 7 }, %struct.rtl_mac_info { i32 2096103424, i32 613416960, i32 7 }, %struct.rtl_mac_info { i32 2096103424, i32 880803840, i32 6 }, %struct.rtl_mac_info { i32 2096103424, i32 612368384, i32 6 }, %struct.rtl_mac_info { i32 2096103424, i32 872415232, i32 12 }, %struct.rtl_mac_info { i32 2096103424, i32 875560960, i32 9 }, %struct.rtl_mac_info { i32 2096103424, i32 874512384, i32 15 }, %struct.rtl_mac_info { i32 2088763392, i32 880803840, i32 8 }, %struct.rtl_mac_info { i32 2088763392, i32 612368384, i32 8 }, %struct.rtl_mac_info { i32 2088763392, i32 872415232, i32 15 }, %struct.rtl_mac_info { i32 -58720256, i32 947912704, i32 14 }, %struct.rtl_mac_info { i32 -58720256, i32 813694976, i32 13 }, %struct.rtl_mac_info { i32 -58720256, i32 -1744830464, i32 5 }, %struct.rtl_mac_info { i32 -58720256, i32 402653184, i32 4 }, %struct.rtl_mac_info { i32 -58720256, i32 268435456, i32 3 }, %struct.rtl_mac_info { i32 -58720256, i32 67108864, i32 2 }, %struct.rtl_mac_info { i32 -58720256, i32 8388608, i32 1 }, %struct.rtl_mac_info { i32 -58720256, i32 0, i32 0 }, %struct.rtl_mac_info { i32 0, i32 0, i32 255 }], align 16
@.str.49 = private unnamed_addr constant [35 x i8] c"unknown MAC, using family default\0A\00", align 1
@.str.50 = private unnamed_addr constant [20 x i8] c"rtl_rxtx_empty_cond\00", align 1
@.str.51 = private unnamed_addr constant [25 x i8] c"rtl_link_list_ready_cond\00", align 1
@.str.52 = private unnamed_addr constant [17 x i8] c"rtl_chipcmd_cond\00", align 1
@.str.53 = private unnamed_addr constant [15 x i8] c"rtl_ocpar_cond\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"rtl_ocp_gphy_cond\00", align 1
@.str.55 = private unnamed_addr constant [15 x i8] c"rtl_phyar_cond\00", align 1
@.str.56 = private unnamed_addr constant [15 x i8] c"rtl_csiar_cond\00", align 1
@.str.57 = private unnamed_addr constant [8 x i8] c"RTL8169\00", align 1
@.str.58 = private unnamed_addr constant [9 x i8] c"RTL8169s\00", align 1
@.str.59 = private unnamed_addr constant [9 x i8] c"RTL8110s\00", align 1
@.str.60 = private unnamed_addr constant [17 x i8] c"RTL8169sb/8110sb\00", align 1
@.str.61 = private unnamed_addr constant [17 x i8] c"RTL8169sc/8110sc\00", align 1
@.str.62 = private unnamed_addr constant [9 x i8] c"RTL8102e\00", align 1
@.str.63 = private unnamed_addr constant [9 x i8] c"RTL8101e\00", align 1
@.str.64 = private unnamed_addr constant [15 x i8] c"RTL8168b/8111b\00", align 1
@.str.65 = private unnamed_addr constant [9 x i8] c"RTL8100e\00", align 1
@.str.66 = private unnamed_addr constant [17 x i8] c"RTL8168cp/8111cp\00", align 1
@.str.67 = private unnamed_addr constant [15 x i8] c"RTL8168c/8111c\00", align 1
@.str.68 = private unnamed_addr constant [15 x i8] c"RTL8168d/8111d\00", align 1
@.str.69 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168d-1.fw\00", align 1
@.str.70 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168d-2.fw\00", align 1
@.str.71 = private unnamed_addr constant [17 x i8] c"RTL8168dp/8111dp\00", align 1
@.str.72 = private unnamed_addr constant [9 x i8] c"RTL8105e\00", align 1
@.str.73 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8105e-1.fw\00", align 1
@.str.74 = private unnamed_addr constant [15 x i8] c"RTL8168e/8111e\00", align 1
@.str.75 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168e-1.fw\00", align 1
@.str.76 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168e-2.fw\00", align 1
@.str.77 = private unnamed_addr constant [19 x i8] c"RTL8168evl/8111evl\00", align 1
@.str.78 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168e-3.fw\00", align 1
@.str.79 = private unnamed_addr constant [15 x i8] c"RTL8168f/8111f\00", align 1
@.str.80 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168f-1.fw\00", align 1
@.str.81 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168f-2.fw\00", align 1
@.str.82 = private unnamed_addr constant [8 x i8] c"RTL8402\00", align 1
@.str.83 = private unnamed_addr constant [21 x i8] c"rtl_nic/rtl8402-1.fw\00", align 1
@.str.84 = private unnamed_addr constant [8 x i8] c"RTL8411\00", align 1
@.str.85 = private unnamed_addr constant [21 x i8] c"rtl_nic/rtl8411-1.fw\00", align 1
@.str.86 = private unnamed_addr constant [9 x i8] c"RTL8106e\00", align 1
@.str.87 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8106e-1.fw\00", align 1
@.str.88 = private unnamed_addr constant [15 x i8] c"RTL8168g/8111g\00", align 1
@.str.89 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168g-2.fw\00", align 1
@.str.90 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168g-3.fw\00", align 1
@.str.91 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8106e-2.fw\00", align 1
@.str.92 = private unnamed_addr constant [21 x i8] c"rtl_nic/rtl8411-2.fw\00", align 1
@.str.93 = private unnamed_addr constant [15 x i8] c"RTL8168h/8111h\00", align 1
@.str.94 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168h-1.fw\00", align 1
@.str.95 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8168h-2.fw\00", align 1
@.str.96 = private unnamed_addr constant [9 x i8] c"RTL8107e\00", align 1
@.str.97 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8107e-1.fw\00", align 1
@.str.98 = private unnamed_addr constant [22 x i8] c"rtl_nic/rtl8107e-2.fw\00", align 1
@.str.99 = private unnamed_addr constant [17 x i8] c"RTL8168ep/8111ep\00", align 1
@.str.100 = private unnamed_addr constant [23 x i8] c"no MSI. Back to INTx.\0A\00", align 1
@.str.101 = private unnamed_addr constant [45 x i8] c"incorrect speed setting refused in TBI mode\0A\00", align 1
@.str.102 = private unnamed_addr constant [31 x i8] c"PHY does not support 1000Mbps\0A\00", align 1
@__rtl8169_set_wol.cfg = internal unnamed_addr constant [6 x %struct.anon.116] [%struct.anon.116 { i32 1, i16 84, i8 16 }, %struct.anon.116 { i32 2, i16 86, i8 16 }, %struct.anon.116 { i32 8, i16 86, i8 64 }, %struct.anon.116 { i32 4, i16 86, i8 32 }, %struct.anon.116 { i32 47, i16 86, i8 2 }, %struct.anon.116 { i32 32, i16 84, i8 32 }], align 16
@rtl8169_gstrings = internal constant [13 x [32 x i8]] [[32 x i8] c"tx_packets\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"rx_packets\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"tx_errors\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"rx_errors\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"rx_missed\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"align_errors\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"tx_single_collisions\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"tx_multi_collisions\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"unicast\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"broadcast\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"multicast\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"tx_aborted\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [32 x i8] c"tx_underrun\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"], align 16
@.str.103 = private unnamed_addr constant [37 x i8] c"\013RTNL: assertion failed at %s (%d)\0A\00", align 1
@.str.104 = private unnamed_addr constant [25 x i8] c"Rx ERROR. status = %08x\0A\00", align 1
@rtl8169_tso_csum_v1.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.105 = private unnamed_addr constant [39 x i8] c"Invalid transport offset 0x%x for TSO\0A\00", align 1
@rtl8169_tso_csum_v2.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.106 = private unnamed_addr constant [31 x i8] c"Invalid transport offset 0x%x\0A\00", align 1
@rtl8169_tso_csum_v2.__warned.107 = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.108 = private unnamed_addr constant [23 x i8] c"include/linux/skbuff.h\00", align 1
@rtl_ocp_read_cond = internal constant %struct.rtl_cond { i1 (%struct.rtl8169_private*)* @rtl_ocp_read_cond_check, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.109, i32 0, i32 0) }, align 8
@.str.109 = private unnamed_addr constant [18 x i8] c"rtl_ocp_read_cond\00", align 1
@rtl_ep_ocp_read_cond = internal constant %struct.rtl_cond { i1 (%struct.rtl8169_private*)* @rtl_ep_ocp_read_cond_check, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.110, i32 0, i32 0) }, align 8
@.str.110 = private unnamed_addr constant [21 x i8] c"rtl_ep_ocp_read_cond\00", align 1
@pv_irq_ops = external global %struct.pv_irq_ops, align 8
@system_state = external local_unnamed_addr global i32, align 4
@llvm.used = appending global [29 x i8*] [i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__UNIQUE_ID_author860, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @__UNIQUE_ID_debug865, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_debugtype864, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__UNIQUE_ID_description861, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware868, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware869, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware870, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware871, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware872, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware873, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware874, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware875, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__UNIQUE_ID_firmware876, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__UNIQUE_ID_firmware877, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__UNIQUE_ID_firmware878, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware879, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware880, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware881, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware882, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware883, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware884, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware885, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__UNIQUE_ID_firmware886, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__UNIQUE_ID_license866, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__UNIQUE_ID_use_dac863, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__UNIQUE_ID_use_dactype862, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_version867, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_debug to i8*), i8* bitcast (%struct.kernel_param* @__param_use_dac to i8*)], section "llvm.metadata"
@switch.table.rtl_init_one = private unnamed_addr constant [45 x void (%struct.rtl8169_private*)*] [void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* null, void (%struct.rtl8169_private*)* null, void (%struct.rtl8169_private*)* null, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* null, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r810x_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)* @r8168_pll_power_down]
@switch.table.rtl_init_one.111 = private unnamed_addr constant [45 x void (%struct.rtl8169_private*)*] [void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* null, void (%struct.rtl8169_private*)* null, void (%struct.rtl8169_private*)* null, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* null, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r810x_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)* @r8168_pll_power_up]

@__mod_pci__rtl8169_pci_tbl_device_table = alias [14 x %struct.pci_device_id], [14 x %struct.pci_device_id]* @rtl8169_pci_tbl

; Function Attrs: noredzone nounwind sspstrong
define i32 @init_module() local_unnamed_addr #0 section ".init.text" {
entry:
  %call = call i32 @__pci_register_driver(%struct.pci_driver* nonnull @rtl8169_pci_driver, %struct.module* nonnull @__this_module, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #9
  ret i32 %call
}

; Function Attrs: noredzone nounwind sspstrong
define void @cleanup_module() local_unnamed_addr #0 section ".exit.text" {
entry:
  call void @pci_unregister_driver(%struct.pci_driver* nonnull @rtl8169_pci_driver) #9
  ret void
}

; Function Attrs: noredzone
declare i32 @__pci_register_driver(%struct.pci_driver*, %struct.module*, i8*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl_init_one(%struct.pci_dev* %pdev, %struct.pci_device_id* nocapture readonly %ent) #0 {
entry:
  %dev.addr.i.i = alloca %struct.device*, align 8
  %flag.addr.i.i = alloca i32, align 4
  %mac_addr = alloca [3 x i16], align 4
  %driver_data = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %ent, i64 0, i32 6
  %0 = load i64, i64* %driver_data, align 8
  %add.ptr = getelementptr [3 x %struct.rtl_cfg_info], [3 x %struct.rtl_cfg_info]* @rtl_cfg_infos, i64 0, i64 %0
  %region1 = getelementptr [3 x %struct.rtl_cfg_info], [3 x %struct.rtl_cfg_info]* @rtl_cfg_infos, i64 0, i64 %0, i32 1
  %1 = load i32, i32* %region1, align 8
  %2 = load i32, i32* getelementptr inbounds (%struct.anon.110, %struct.anon.110* @debug, i64 0, i32 0), align 4
  %and = and i32 %2, 1
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #9
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %call2 = call %struct.net_device* @alloc_etherdev_mqs(i32 3800, i32 1, i32 1) #9
  %tobool3 = icmp eq %struct.net_device* %call2, null
  br i1 %tobool3, label %out, label %if.end5

if.end5:                                          ; preds = %if.end
  %dev6 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35
  %parent = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 110, i32 0
  store %struct.device* %dev6, %struct.device** %parent, align 8
  %netdev_ops = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 30
  store %struct.net_device_ops* @rtl_netdev_ops, %struct.net_device_ops** %netdev_ops, align 64
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 2112
  %3 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %dev9 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 2128
  %4 = bitcast i8* %dev9 to %struct.net_device**
  store %struct.net_device* %call2, %struct.net_device** %4, align 8
  %pci_dev = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 2120
  %5 = bitcast i8* %pci_dev to %struct.pci_dev**
  store %struct.pci_dev* %pdev, %struct.pci_dev** %5, align 8
  %6 = load i32, i32* getelementptr inbounds (%struct.anon.110, %struct.anon.110* @debug, i64 0, i32 0), align 4
  %cmp1.i = icmp ugt i32 %6, 31
  br i1 %cmp1.i, label %netif_msg_init.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end5
  %cmp3.i = icmp eq i32 %6, 0
  br i1 %cmp3.i, label %netif_msg_init.exit, label %if.end6.i

if.end6.i:                                        ; preds = %if.end.i
  %shl.i = shl i32 1, %6
  %sub.i = add i32 %shl.i, -1
  br label %netif_msg_init.exit

netif_msg_init.exit:                              ; preds = %if.end5, %if.end.i, %if.end6.i
  %retval.0.i = phi i32 [ %sub.i, %if.end6.i ], [ 51, %if.end5 ], [ 0, %if.end.i ]
  %msg_enable = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 2336
  %7 = bitcast i8* %msg_enable to i32*
  store i32 %retval.0.i, i32* %7, align 8
  %dev12 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5824
  %8 = bitcast i8* %dev12 to %struct.net_device**
  store %struct.net_device* %call2, %struct.net_device** %8, align 8
  %mdio_read = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5832
  %9 = bitcast i8* %mdio_read to i32 (%struct.net_device*, i32, i32)**
  store i32 (%struct.net_device*, i32, i32)* @rtl_mdio_read, i32 (%struct.net_device*, i32, i32)** %9, align 8
  %mdio_write = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5840
  %10 = bitcast i8* %mdio_write to void (%struct.net_device*, i32, i32, i32)**
  store void (%struct.net_device*, i32, i32, i32)* @rtl_mdio_write, void (%struct.net_device*, i32, i32, i32)** %10, align 8
  %phy_id_mask = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5808
  %11 = bitcast i8* %phy_id_mask to i32*
  store i32 31, i32* %11, align 8
  %reg_num_mask = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5812
  %12 = bitcast i8* %reg_num_mask to i32*
  store i32 31, i32* %12, align 4
  %13 = icmp ult i64 %0, 2
  %14 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5816
  %15 = zext i1 %13 to i8
  %bf.load = load i8, i8* %14, align 8
  %bf.shl = shl nuw nsw i8 %15, 2
  %bf.clear = and i8 %bf.load, -5
  %bf.set = or i8 %bf.clear, %bf.shl
  store i8 %bf.set, i8* %14, align 8
  call void @pci_disable_link_state(%struct.pci_dev* %pdev, i32 7) #9
  %call16 = call i32 @pci_enable_device(%struct.pci_dev* %pdev) #9
  %cmp = icmp slt i32 %call16, 0
  br i1 %cmp, label %do.body, label %if.end23

do.body:                                          ; preds = %netif_msg_init.exit
  %16 = load i32, i32* %7, align 8
  %and19 = and i32 %16, 2
  %tobool20 = icmp eq i32 %and19, 0
  br i1 %tobool20, label %err_out_free_dev_1, label %if.then21

if.then21:                                        ; preds = %do.body
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0)) #9
  br label %err_out_free_dev_1

if.end23:                                         ; preds = %netif_msg_init.exit
  %call24 = call i32 @pci_set_mwi(%struct.pci_dev* %pdev) #9
  %cmp25 = icmp slt i32 %call24, 0
  br i1 %cmp25, label %do.body27, label %if.end35

do.body27:                                        ; preds = %if.end23
  %17 = load i32, i32* %7, align 8
  %and29 = and i32 %17, 2
  %tobool30 = icmp eq i32 %and29, 0
  br i1 %tobool30, label %if.end35, label %if.then31

if.then31:                                        ; preds = %do.body27
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0)) #9
  br label %if.end35

if.end35:                                         ; preds = %do.body27, %if.then31, %if.end23
  %idxprom = zext i32 %1 to i64
  %flags = getelementptr %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 38, i64 %idxprom, i32 3
  %18 = load i64, i64* %flags, align 8
  %and36 = and i64 %18, 512
  %tobool37 = icmp eq i64 %and36, 0
  br i1 %tobool37, label %do.body39, label %if.end47

do.body39:                                        ; preds = %if.end35
  %19 = load i32, i32* %7, align 8
  %and41 = and i32 %19, 2
  %tobool42 = icmp eq i32 %and41, 0
  br i1 %tobool42, label %err_out_mwi_2, label %if.then43

if.then43:                                        ; preds = %do.body39
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0), i32 %1) #9
  br label %err_out_mwi_2

if.end47:                                         ; preds = %if.end35
  %start = getelementptr %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 38, i64 %idxprom, i32 0
  %20 = load i64, i64* %start, align 8
  %end = getelementptr %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 38, i64 %idxprom, i32 1
  %21 = load i64, i64* %end, align 8
  %22 = or i64 %20, %21
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %do.body70, label %cond.end

cond.end:                                         ; preds = %if.end47
  %sub = sub i64 1, %20
  %add = add i64 %sub, %21
  %cmp68 = icmp ult i64 %add, 256
  br i1 %cmp68, label %do.body70, label %if.end78

do.body70:                                        ; preds = %if.end47, %cond.end
  %24 = load i32, i32* %7, align 8
  %and72 = and i32 %24, 2
  %tobool73 = icmp eq i32 %and72, 0
  br i1 %tobool73, label %err_out_mwi_2, label %if.then74

if.then74:                                        ; preds = %do.body70
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6, i64 0, i64 0)) #9
  br label %err_out_mwi_2

if.end78:                                         ; preds = %cond.end
  %call79 = call i32 @pci_request_regions(%struct.pci_dev* nonnull %pdev, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #9
  %cmp80 = icmp slt i32 %call79, 0
  br i1 %cmp80, label %do.body82, label %if.end90

do.body82:                                        ; preds = %if.end78
  %25 = load i32, i32* %7, align 8
  %and84 = and i32 %25, 2
  %tobool85 = icmp eq i32 %and84, 0
  br i1 %tobool85, label %err_out_mwi_2, label %if.then86

if.then86:                                        ; preds = %do.body82
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0)) #9
  br label %err_out_mwi_2

if.end90:                                         ; preds = %if.end78
  %cp_cmd = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5576
  %26 = bitcast i8* %cp_cmd to i16*
  store i16 0, i16* %26, align 8
  %dma_ops.i.i.i713 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35, i32 22, i32 0
  %27 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i713, align 8
  %tobool4.i.i.i714 = icmp eq %struct.dma_map_ops* %27, null
  %28 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i = select i1 %tobool4.i.i.i714, %struct.dma_map_ops* %28, %struct.dma_map_ops* %27
  %set_dma_mask.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i, i64 0, i32 14
  %29 = load i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)** %set_dma_mask.i.i, align 8
  %tobool.i.i715 = icmp eq i32 (%struct.device*, i64)* %29, null
  br i1 %tobool.i.i715, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end90
  %call2.i.i = call i32 %29(%struct.device* nonnull %dev6, i64 -1) #9
  br label %pci_set_dma_mask.exit

if.end.i.i:                                       ; preds = %if.end90
  %dma_mask.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35, i32 16
  %30 = load i64*, i64** %dma_mask.i.i, align 8
  %tobool3.i.i = icmp eq i64* %30, null
  br i1 %tobool3.i.i, label %if.else, label %lor.lhs.false.i.i

lor.lhs.false.i.i:                                ; preds = %if.end.i.i
  %call4.i.i = call i32 @dma_supported(%struct.device* nonnull %dev6, i64 -1) #9
  %tobool5.i.i = icmp eq i32 %call4.i.i, 0
  br i1 %tobool5.i.i, label %if.else, label %if.end7.i.i

if.end7.i.i:                                      ; preds = %lor.lhs.false.i.i
  %31 = load i64*, i64** %dma_mask.i.i, align 8
  store i64 -1, i64* %31, align 8
  br label %pci_set_dma_mask.exit

pci_set_dma_mask.exit:                            ; preds = %if.then.i.i, %if.end7.i.i
  %retval.0.i.i = phi i32 [ %call2.i.i, %if.then.i.i ], [ 0, %if.end7.i.i ]
  %tobool92 = icmp eq i32 %retval.0.i.i, 0
  %32 = load i32, i32* @use_dac, align 4
  %tobool94 = icmp ne i32 %32, 0
  %or.cond = and i1 %tobool92, %tobool94
  br i1 %or.cond, label %if.then95, label %if.else

if.then95:                                        ; preds = %pci_set_dma_mask.exit
  %33 = load i16, i16* %26, align 8
  %34 = or i16 %33, 16
  store i16 %34, i16* %26, align 8
  %features98 = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 17
  %35 = load i64, i64* %features98, align 16
  %or99 = or i64 %35, 32
  store i64 %or99, i64* %features98, align 16
  br label %if.end113

if.else:                                          ; preds = %if.end.i.i, %lor.lhs.false.i.i, %pci_set_dma_mask.exit
  %36 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i713, align 8
  %tobool4.i.i.i718 = icmp eq %struct.dma_map_ops* %36, null
  %37 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i719 = select i1 %tobool4.i.i.i718, %struct.dma_map_ops* %37, %struct.dma_map_ops* %36
  %set_dma_mask.i.i720 = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i719, i64 0, i32 14
  %38 = load i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)** %set_dma_mask.i.i720, align 8
  %tobool.i.i721 = icmp eq i32 (%struct.device*, i64)* %38, null
  br i1 %tobool.i.i721, label %if.end.i.i726, label %pci_set_dma_mask.exit732

if.end.i.i726:                                    ; preds = %if.else
  %dma_mask.i.i724 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35, i32 16
  %39 = load i64*, i64** %dma_mask.i.i724, align 8
  %tobool3.i.i725 = icmp eq i64* %39, null
  br i1 %tobool3.i.i725, label %do.body104, label %lor.lhs.false.i.i729

lor.lhs.false.i.i729:                             ; preds = %if.end.i.i726
  %call4.i.i727 = call i32 @dma_supported(%struct.device* nonnull %dev6, i64 4294967295) #9
  %tobool5.i.i728 = icmp eq i32 %call4.i.i727, 0
  br i1 %tobool5.i.i728, label %do.body104, label %pci_set_dma_mask.exit732.thread864

pci_set_dma_mask.exit732.thread864:               ; preds = %lor.lhs.false.i.i729
  %40 = load i64*, i64** %dma_mask.i.i724, align 8
  store i64 4294967295, i64* %40, align 8
  br label %if.end113

pci_set_dma_mask.exit732:                         ; preds = %if.else
  %call2.i.i722 = call i32 %38(%struct.device* nonnull %dev6, i64 4294967295) #9
  %cmp101 = icmp slt i32 %call2.i.i722, 0
  br i1 %cmp101, label %do.body104, label %if.end113

do.body104:                                       ; preds = %if.end.i.i726, %lor.lhs.false.i.i729, %pci_set_dma_mask.exit732
  %retval.0.i.i731863 = phi i32 [ %call2.i.i722, %pci_set_dma_mask.exit732 ], [ -5, %lor.lhs.false.i.i729 ], [ -5, %if.end.i.i726 ]
  %41 = load i32, i32* %7, align 8
  %and106 = and i32 %41, 2
  %tobool107 = icmp eq i32 %and106, 0
  br i1 %tobool107, label %err_out_free_res_3, label %if.then108

if.then108:                                       ; preds = %do.body104
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0)) #9
  br label %err_out_free_res_3

if.end113:                                        ; preds = %pci_set_dma_mask.exit732.thread864, %pci_set_dma_mask.exit732, %if.then95
  %42 = load i64, i64* %start, align 8
  %call.i = call i8* @ioremap_nocache(i64 %42, i64 256) #9
  %tobool119 = icmp eq i8* %call.i, null
  br i1 %tobool119, label %do.body121, label %if.end129

do.body121:                                       ; preds = %if.end113
  %43 = load i32, i32* %7, align 8
  %and123 = and i32 %43, 2
  %tobool124 = icmp eq i32 %and123, 0
  br i1 %tobool124, label %err_out_free_res_3, label %if.then125

if.then125:                                       ; preds = %do.body121
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #9
  br label %err_out_free_res_3

if.end129:                                        ; preds = %if.end113
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  store i8* %call.i, i8** %mmio_addr, align 8
  %pcie_cap.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 14
  %44 = load i8, i8* %pcie_cap.i.i, align 2
  %tobool.i733 = icmp eq i8 %44, 0
  br i1 %tobool.i733, label %do.body132, label %if.end140

do.body132:                                       ; preds = %if.end129
  %45 = load i32, i32* %7, align 8
  %and134 = and i32 %45, 2
  %tobool135 = icmp eq i32 %and134, 0
  br i1 %tobool135, label %if.end140, label %if.then136

if.then136:                                       ; preds = %do.body132
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0)) #9
  %.pre879 = load i8*, i8** %mmio_addr, align 8
  br label %if.end140

if.end140:                                        ; preds = %if.end129, %do.body132, %if.then136
  %46 = phi i8* [ %call.i, %if.end129 ], [ %call.i, %do.body132 ], [ %.pre879, %if.then136 ]
  %default_ver = getelementptr [3 x %struct.rtl_cfg_info], [3 x %struct.rtl_cfg_info]* @rtl_cfg_infos, i64 0, i64 %0, i32 5
  %47 = load i8, i8* %default_ver, align 8
  %add.ptr.i734 = getelementptr i8, i8* %46, i64 64
  %48 = bitcast i8* %add.ptr.i734 to i32*
  %49 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %48) #10, !srcloc !2
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %if.end140
  %p.0.i = phi %struct.rtl_mac_info* [ getelementptr inbounds ([63 x %struct.rtl_mac_info], [63 x %struct.rtl_mac_info]* @rtl8169_get_mac_version.mac_info, i64 0, i64 0), %if.end140 ], [ %incdec.ptr.i, %while.cond.i ]
  %mask.i = getelementptr inbounds %struct.rtl_mac_info, %struct.rtl_mac_info* %p.0.i, i64 0, i32 0
  %50 = load i32, i32* %mask.i, align 4
  %and.i735 = and i32 %50, %49
  %val.i = getelementptr inbounds %struct.rtl_mac_info, %struct.rtl_mac_info* %p.0.i, i64 0, i32 1
  %51 = load i32, i32* %val.i, align 4
  %cmp.i = icmp eq i32 %and.i735, %51
  %incdec.ptr.i = getelementptr %struct.rtl_mac_info, %struct.rtl_mac_info* %p.0.i, i64 1
  br i1 %cmp.i, label %while.end.i, label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %mac_version.i = getelementptr inbounds %struct.rtl_mac_info, %struct.rtl_mac_info* %p.0.i, i64 0, i32 2
  %52 = load i32, i32* %mac_version.i, align 4
  %conv.i = trunc i32 %52 to i16
  %mac_version1.i = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 2342
  %53 = bitcast i8* %mac_version1.i to i16*
  store i16 %conv.i, i16* %53, align 2
  switch i16 %conv.i, label %rtl8169_get_mac_version.exit [
    i16 255, label %do.body.i
    i16 41, label %if.then14.i
    i16 44, label %if.then23.i
    i16 45, label %if.then39.i
  ]

do.body.i:                                        ; preds = %while.end.i
  %54 = load i32, i32* %7, align 8
  %and6.i = and i32 %54, 2
  %tobool.i736 = icmp eq i32 %and6.i, 0
  br i1 %tobool.i736, label %do.end.i, label %if.then7.i

if.then7.i:                                       ; preds = %do.body.i
  call void (%struct.net_device*, i8*, ...) @netdev_notice(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.49, i64 0, i64 0)) #9
  br label %do.end.i

do.end.i:                                         ; preds = %if.then7.i, %do.body.i
  %conv8.i = zext i8 %47 to i16
  br label %if.end53.sink.split.i

if.then14.i:                                      ; preds = %while.end.i
  %bf.load.i = load i8, i8* %14, align 8
  %bf.clear.i = and i8 %bf.load.i, 4
  %55 = zext i8 %bf.clear.i to i16
  %56 = lshr exact i16 %55, 2
  %57 = sub nsw i16 42, %56
  br label %if.end53.sink.split.i

if.then23.i:                                      ; preds = %while.end.i
  %bf.load26.i = load i8, i8* %14, align 8
  %bf.clear28.i = and i8 %bf.load26.i, 4
  %58 = zext i8 %bf.clear28.i to i16
  %59 = lshr exact i16 %58, 1
  %60 = xor i16 %59, 46
  br label %if.end53.sink.split.i

if.then39.i:                                      ; preds = %while.end.i
  %bf.load42.i = load i8, i8* %14, align 8
  %bf.clear44.i = and i8 %bf.load42.i, 4
  %61 = zext i8 %bf.clear44.i to i16
  %62 = lshr exact i16 %61, 1
  %63 = xor i16 %62, 47
  br label %if.end53.sink.split.i

if.end53.sink.split.i:                            ; preds = %if.then39.i, %if.then23.i, %if.then14.i, %do.end.i
  %conv16.sink.i = phi i16 [ %57, %if.then14.i ], [ %63, %if.then39.i ], [ %60, %if.then23.i ], [ %conv8.i, %do.end.i ]
  store i16 %conv16.sink.i, i16* %53, align 2
  br label %rtl8169_get_mac_version.exit

rtl8169_get_mac_version.exit:                     ; preds = %while.end.i, %if.end53.sink.split.i
  call fastcc void @rtl_init_rxcfg(%struct.rtl8169_private* nonnull %3) #11
  %64 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i738 = getelementptr i8, i8* %64, i64 60
  %65 = bitcast i8* %add.ptr.i738 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 0, i16* %65) #10, !srcloc !3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  %66 = load i16, i16* %53, align 2
  switch i16 %66, label %rtl_hw_initialize.exit [
    i16 39, label %sw.bb.i
    i16 40, label %sw.bb.i
    i16 41, label %sw.bb.i
    i16 42, label %sw.bb.i
    i16 43, label %sw.bb.i
    i16 44, label %sw.bb.i
    i16 45, label %sw.bb.i
    i16 46, label %sw.bb.i
    i16 47, label %sw.bb.i
    i16 48, label %sw.bb1.i
    i16 49, label %sw.bb1.i
    i16 50, label %sw.bb1.i
  ]

sw.bb.i:                                          ; preds = %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit
  call fastcc void @rtl_hw_init_8168g(%struct.rtl8169_private* nonnull %3) #9
  br label %rtl_hw_initialize.exit

sw.bb1.i:                                         ; preds = %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit, %rtl8169_get_mac_version.exit
  call fastcc void @rtl8168ep_stop_cmac(%struct.rtl8169_private* nonnull %3) #9
  call fastcc void @rtl_hw_init_8168g(%struct.rtl8169_private* nonnull %3) #9
  br label %rtl_hw_initialize.exit

rtl_hw_initialize.exit:                           ; preds = %rtl8169_get_mac_version.exit, %sw.bb.i, %sw.bb1.i
  %67 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i741 = getelementptr i8, i8* %67, i64 55
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 16, i8* %add.ptr.i741) #10, !srcloc !5
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %rtl_hw_initialize.exit
  %i.017.i.i.i = phi i32 [ 0, %rtl_hw_initialize.exit ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %68 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %68, i64 55
  %69 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i.i) #10, !srcloc !6
  %70 = and i8 %69, 16
  %tobool.i.i742 = icmp eq i8 %70, 0
  br i1 %tobool.i.i742, label %rtl_hw_reset.exit, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %71 = load i32, i32* %7, align 8
  %and.i.i.i = and i32 %71, 1
  %tobool4.i.i.i743 = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i743, label %rtl_hw_reset.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %72 = load %struct.net_device*, %struct.net_device** %4, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %72, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.52, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_hw_reset.exit

rtl_hw_reset.exit:                                ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  %73 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i745 = getelementptr i8, i8* %73, i64 62
  %74 = bitcast i8* %add.ptr.i745 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 -1, i16* %74) #10, !srcloc !3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !7
  call void @pci_set_master(%struct.pci_dev* %pdev) #9
  %75 = load i16, i16* %53, align 2
  switch i16 %75, label %sw.default.i [
    i16 26, label %rtl_init_pll_power_ops.exit.thread
    i16 27, label %rtl_init_mdio_ops.exit
    i16 30, label %rtl_init_mdio_ops.exit
    i16 39, label %sw.bb4.i
    i16 40, label %sw.bb4.i
    i16 41, label %sw.bb4.i
    i16 42, label %sw.bb4.i
    i16 43, label %sw.bb4.i
    i16 44, label %sw.bb4.i
    i16 45, label %sw.bb4.i
    i16 46, label %sw.bb4.i
    i16 47, label %sw.bb4.i
    i16 48, label %sw.bb4.i
    i16 49, label %sw.bb4.i
    i16 50, label %sw.bb4.i
  ]

rtl_init_pll_power_ops.exit.thread:               ; preds = %rtl_hw_reset.exit
  %write7.i866 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5584
  %76 = bitcast i8* %write7.i866 to void (%struct.rtl8169_private*, i32, i32)**
  store void (%struct.rtl8169_private*, i32, i32)* @r8168dp_1_mdio_write, void (%struct.rtl8169_private*, i32, i32)** %76, align 8
  %read8.i867 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5592
  %77 = bitcast i8* %read8.i867 to i32 (%struct.rtl8169_private*, i32)**
  store i32 (%struct.rtl8169_private*, i32)* @r8168dp_1_mdio_read, i32 (%struct.rtl8169_private*, i32)** %77, align 8
  %down4.i868 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5600
  %78 = bitcast i8* %down4.i868 to void (%struct.rtl8169_private*)**
  store void (%struct.rtl8169_private*)* @r8168_pll_power_down, void (%struct.rtl8169_private*)** %78, align 8
  %up5.i869 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5608
  %79 = bitcast i8* %up5.i869 to void (%struct.rtl8169_private*)**
  store void (%struct.rtl8169_private*)* @r8168_pll_power_up, void (%struct.rtl8169_private*)** %79, align 8
  br label %sw.bb7.i

sw.bb4.i:                                         ; preds = %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit, %rtl_hw_reset.exit
  br label %rtl_init_mdio_ops.exit

sw.default.i:                                     ; preds = %rtl_hw_reset.exit
  br label %rtl_init_mdio_ops.exit

rtl_init_mdio_ops.exit:                           ; preds = %rtl_hw_reset.exit, %rtl_hw_reset.exit, %sw.bb4.i, %sw.default.i
  %r8169_mdio_write.sink.i = phi void (%struct.rtl8169_private*, i32, i32)* [ @r8169_mdio_write, %sw.default.i ], [ @r8168g_mdio_write, %sw.bb4.i ], [ @r8168dp_2_mdio_write, %rtl_hw_reset.exit ], [ @r8168dp_2_mdio_write, %rtl_hw_reset.exit ]
  %r8169_mdio_read.sink.i = phi i32 (%struct.rtl8169_private*, i32)* [ @r8169_mdio_read, %sw.default.i ], [ @r8168g_mdio_read, %sw.bb4.i ], [ @r8168dp_2_mdio_read, %rtl_hw_reset.exit ], [ @r8168dp_2_mdio_read, %rtl_hw_reset.exit ]
  %write7.i = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5584
  %80 = bitcast i8* %write7.i to void (%struct.rtl8169_private*, i32, i32)**
  store void (%struct.rtl8169_private*, i32, i32)* %r8169_mdio_write.sink.i, void (%struct.rtl8169_private*, i32, i32)** %80, align 8
  %read8.i = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5592
  %81 = bitcast i8* %read8.i to i32 (%struct.rtl8169_private*, i32)**
  store i32 (%struct.rtl8169_private*, i32)* %r8169_mdio_read.sink.i, i32 (%struct.rtl8169_private*, i32)** %81, align 8
  %switch.tableidx = add i16 %75, -6
  %82 = icmp ult i16 %switch.tableidx, 45
  br i1 %82, label %switch.lookup, label %rtl_init_pll_power_ops.exit

switch.lookup:                                    ; preds = %rtl_init_mdio_ops.exit
  %83 = sext i16 %switch.tableidx to i64
  %switch.gep = getelementptr inbounds [45 x void (%struct.rtl8169_private*)*], [45 x void (%struct.rtl8169_private*)*]* @switch.table.rtl_init_one, i64 0, i64 %83
  %switch.load = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %switch.gep, align 8
  %84 = sext i16 %switch.tableidx to i64
  %switch.gep885 = getelementptr inbounds [45 x void (%struct.rtl8169_private*)*], [45 x void (%struct.rtl8169_private*)*]* @switch.table.rtl_init_one.111, i64 0, i64 %84
  %switch.load886 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %switch.gep885, align 8
  br label %rtl_init_pll_power_ops.exit

rtl_init_pll_power_ops.exit:                      ; preds = %rtl_init_mdio_ops.exit, %switch.lookup
  %.sink14.i = phi void (%struct.rtl8169_private*)* [ %switch.load, %switch.lookup ], [ null, %rtl_init_mdio_ops.exit ]
  %.sink.i = phi void (%struct.rtl8169_private*)* [ %switch.load886, %switch.lookup ], [ null, %rtl_init_mdio_ops.exit ]
  %down4.i = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5600
  %85 = bitcast i8* %down4.i to void (%struct.rtl8169_private*)**
  store void (%struct.rtl8169_private*)* %.sink14.i, void (%struct.rtl8169_private*)** %85, align 8
  %up5.i = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5608
  %86 = bitcast i8* %up5.i to void (%struct.rtl8169_private*)**
  store void (%struct.rtl8169_private*)* %.sink.i, void (%struct.rtl8169_private*)** %86, align 8
  switch i16 %75, label %sw.default.i754 [
    i16 10, label %rtl_init_jumbo_ops.exit.thread
    i16 11, label %rtl_init_jumbo_ops.exit
    i16 16, label %rtl_init_jumbo_ops.exit
    i16 17, label %sw.bb4.i753
    i16 18, label %sw.bb4.i753
    i16 19, label %sw.bb4.i753
    i16 20, label %sw.bb4.i753
    i16 21, label %sw.bb4.i753
    i16 22, label %sw.bb4.i753
    i16 23, label %sw.bb4.i753
    i16 24, label %sw.bb4.i753
    i16 25, label %sw.bb4.i753
    i16 26, label %sw.bb7.i
    i16 27, label %sw.bb7.i
    i16 30, label %sw.bb10.i
    i16 31, label %sw.bb10.i
    i16 32, label %sw.bb10.i
    i16 33, label %sw.bb10.i
  ]

rtl_init_jumbo_ops.exit.thread:                   ; preds = %rtl_init_pll_power_ops.exit
  %disable14.i870 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5624
  %87 = bitcast i8* %disable14.i870 to void (%struct.rtl8169_private*)**
  store void (%struct.rtl8169_private*)* @r8168b_0_hw_jumbo_disable, void (%struct.rtl8169_private*)** %87, align 8
  %enable15.i871 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5616
  %88 = bitcast i8* %enable15.i871 to void (%struct.rtl8169_private*)**
  store void (%struct.rtl8169_private*)* @r8168b_0_hw_jumbo_enable, void (%struct.rtl8169_private*)** %88, align 8
  br label %sw.bb.i757

sw.bb4.i753:                                      ; preds = %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit
  br label %rtl_init_jumbo_ops.exit

sw.bb7.i:                                         ; preds = %rtl_init_pll_power_ops.exit.thread, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit
  br label %rtl_init_jumbo_ops.exit

sw.bb10.i:                                        ; preds = %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit
  br label %rtl_init_jumbo_ops.exit

sw.default.i754:                                  ; preds = %rtl_init_pll_power_ops.exit
  br label %rtl_init_jumbo_ops.exit

rtl_init_jumbo_ops.exit:                          ; preds = %rtl_init_pll_power_ops.exit, %rtl_init_pll_power_ops.exit, %sw.bb4.i753, %sw.bb7.i, %sw.bb10.i, %sw.default.i754
  %.sink30.i = phi void (%struct.rtl8169_private*)* [ null, %sw.default.i754 ], [ @r8168e_hw_jumbo_disable, %sw.bb10.i ], [ @r8168dp_hw_jumbo_disable, %sw.bb7.i ], [ @r8168c_hw_jumbo_disable, %sw.bb4.i753 ], [ @r8168b_1_hw_jumbo_disable, %rtl_init_pll_power_ops.exit ], [ @r8168b_1_hw_jumbo_disable, %rtl_init_pll_power_ops.exit ]
  %.sink.i755 = phi void (%struct.rtl8169_private*)* [ null, %sw.default.i754 ], [ @r8168e_hw_jumbo_enable, %sw.bb10.i ], [ @r8168dp_hw_jumbo_enable, %sw.bb7.i ], [ @r8168c_hw_jumbo_enable, %sw.bb4.i753 ], [ @r8168b_1_hw_jumbo_enable, %rtl_init_pll_power_ops.exit ], [ @r8168b_1_hw_jumbo_enable, %rtl_init_pll_power_ops.exit ]
  %disable14.i = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5624
  %89 = bitcast i8* %disable14.i to void (%struct.rtl8169_private*)**
  store void (%struct.rtl8169_private*)* %.sink30.i, void (%struct.rtl8169_private*)** %89, align 8
  %enable15.i = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5616
  %90 = bitcast i8* %enable15.i to void (%struct.rtl8169_private*)**
  store void (%struct.rtl8169_private*)* %.sink.i755, void (%struct.rtl8169_private*)** %90, align 8
  switch i16 %75, label %sw.default.i759 [
    i16 0, label %sw.bb.i757
    i16 1, label %sw.bb.i757
    i16 2, label %sw.bb.i757
    i16 3, label %sw.bb.i757
    i16 4, label %sw.bb.i757
    i16 5, label %sw.bb.i757
    i16 9, label %sw.bb.i757
    i16 43, label %sw.bb4.i758
    i16 11, label %sw.bb.i757
    i16 12, label %sw.bb.i757
    i16 13, label %sw.bb.i757
    i16 14, label %sw.bb.i757
    i16 15, label %sw.bb.i757
    i16 16, label %sw.bb.i757
    i16 36, label %rtl_init_csi_ops.exit
    i16 37, label %rtl_init_csi_ops.exit
  ]

sw.bb.i757:                                       ; preds = %rtl_init_jumbo_ops.exit.thread, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit
  br label %rtl_init_csi_ops.exit

sw.bb4.i758:                                      ; preds = %rtl_init_jumbo_ops.exit
  br label %rtl_init_csi_ops.exit

sw.default.i759:                                  ; preds = %rtl_init_jumbo_ops.exit
  br label %rtl_init_csi_ops.exit

rtl_init_csi_ops.exit:                            ; preds = %rtl_init_jumbo_ops.exit, %rtl_init_jumbo_ops.exit, %sw.bb.i757, %sw.bb4.i758, %sw.default.i759
  %r8169_csi_write.sink.i = phi void (%struct.rtl8169_private*, i32, i32)* [ @r8169_csi_write, %sw.default.i759 ], [ @r8411_csi_write, %sw.bb4.i758 ], [ null, %sw.bb.i757 ], [ @r8402_csi_write, %rtl_init_jumbo_ops.exit ], [ @r8402_csi_write, %rtl_init_jumbo_ops.exit ]
  %r8169_csi_read.sink.i = phi i32 (%struct.rtl8169_private*, i32)* [ @r8169_csi_read, %sw.default.i759 ], [ @r8411_csi_read, %sw.bb4.i758 ], [ null, %sw.bb.i757 ], [ @r8402_csi_read, %rtl_init_jumbo_ops.exit ], [ @r8402_csi_read, %rtl_init_jumbo_ops.exit ]
  %write7.i760 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5632
  %91 = bitcast i8* %write7.i760 to void (%struct.rtl8169_private*, i32, i32)**
  store void (%struct.rtl8169_private*, i32, i32)* %r8169_csi_write.sink.i, void (%struct.rtl8169_private*, i32, i32)** %91, align 8
  %read8.i761 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5640
  %92 = bitcast i8* %read8.i761 to i32 (%struct.rtl8169_private*, i32)**
  store i32 (%struct.rtl8169_private*, i32)* %r8169_csi_read.sink.i, i32 (%struct.rtl8169_private*, i32)** %92, align 8
  %idxprom142 = zext i16 %75 to i64
  %txd_version = getelementptr [51 x %struct.anon.113], [51 x %struct.anon.113]* @rtl_chip_infos, i64 0, i64 %idxprom142, i32 1
  %93 = load i32, i32* %txd_version, align 8
  %conv144 = trunc i32 %93 to i16
  %txd_version145 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 2340
  %94 = bitcast i8* %txd_version145 to i16*
  store i16 %conv144, i16* %94, align 4
  %add.ptr146 = getelementptr i8, i8* %call.i, i64 80
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 -64, i8* %add.ptr146) #10, !srcloc !5
  %add.ptr147 = getelementptr i8, i8* %call.i, i64 82
  %95 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr147) #10, !srcloc !6
  %96 = or i8 %95, 1
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %96, i8* %add.ptr147) #10, !srcloc !5
  %add.ptr153 = getelementptr i8, i8* %call.i, i64 86
  %97 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr153) #10, !srcloc !6
  %98 = and i8 %97, 115
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %98, i8* %add.ptr153) #10, !srcloc !5
  %99 = load i16, i16* %53, align 2
  switch i16 %99, label %sw.default [
    i16 33, label %sw.bb
    i16 34, label %sw.bb
    i16 35, label %sw.bb
    i16 36, label %sw.bb
    i16 37, label %sw.bb
    i16 39, label %sw.bb
    i16 40, label %sw.bb
    i16 41, label %sw.bb
    i16 42, label %sw.bb
    i16 43, label %sw.bb
    i16 44, label %sw.bb
    i16 45, label %sw.bb
    i16 46, label %sw.bb
    i16 47, label %sw.bb
    i16 48, label %sw.bb
    i16 49, label %sw.bb
    i16 50, label %sw.bb
  ]

sw.bb:                                            ; preds = %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit, %rtl_init_csi_ops.exit
  %100 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i763 = getelementptr i8, i8* %100, i64 116
  %101 = bitcast i8* %add.ptr.i763 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %101) #10, !srcloc !8
  br label %for.body.i.i.i770

for.cond.i.i.i766:                                ; preds = %for.body.i.i.i770
  %inc.i.i.i764 = add nuw nsw i32 %i.017.i.i.i767, 1
  %cmp.i.i.i765 = icmp ult i32 %i.017.i.i.i767, 99
  br i1 %cmp.i.i.i765, label %for.body.i.i.i770, label %do.body.i.i.i774

for.body.i.i.i770:                                ; preds = %for.cond.i.i.i766, %sw.bb
  %i.017.i.i.i767 = phi i32 [ 0, %sw.bb ], [ %inc.i.i.i764, %for.cond.i.i.i766 ]
  call void @__udelay(i64 100) #9
  %102 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i768 = getelementptr i8, i8* %102, i64 116
  %103 = bitcast i8* %add.ptr.i.i768 to i32*
  %104 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %103) #10, !srcloc !2
  %tobool.i.i769 = icmp slt i32 %104, 0
  br i1 %tobool.i.i769, label %rtl_eri_read.exit, label %for.cond.i.i.i766

do.body.i.i.i774:                                 ; preds = %for.cond.i.i.i766
  %105 = load i32, i32* %7, align 8
  %and.i.i.i772 = and i32 %105, 1
  %tobool4.i.i.i773 = icmp eq i32 %and.i.i.i772, 0
  br i1 %tobool4.i.i.i773, label %if.then164, label %if.then5.i.i.i776

if.then5.i.i.i776:                                ; preds = %do.body.i.i.i774
  %106 = load %struct.net_device*, %struct.net_device** %4, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %106, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %if.then164

rtl_eri_read.exit:                                ; preds = %for.body.i.i.i770
  %add.ptr3.i = getelementptr i8, i8* %100, i64 112
  %107 = bitcast i8* %add.ptr3.i to i32*
  %108 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %107) #10, !srcloc !2
  %and162 = and i32 %108, 65536
  %tobool163 = icmp eq i32 %and162, 0
  br i1 %tobool163, label %if.end167, label %if.then164

if.then164:                                       ; preds = %if.then5.i.i.i776, %do.body.i.i.i774, %rtl_eri_read.exit
  %features165 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5792
  %109 = bitcast i8* %features165 to i32*
  %110 = load i32, i32* %109, align 8
  %or166 = or i32 %110, 1
  store i32 %or166, i32* %109, align 8
  br label %if.end167

if.end167:                                        ; preds = %rtl_eri_read.exit, %if.then164
  %add.ptr168 = getelementptr i8, i8* %call.i, i64 84
  %111 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr168) #10, !srcloc !6
  %112 = and i8 %111, 16
  %cmp172 = icmp eq i8 %112, 0
  br i1 %cmp172, label %sw.epilog, label %if.then174

if.then174:                                       ; preds = %if.end167
  %features175 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5792
  %113 = bitcast i8* %features175 to i32*
  %114 = load i32, i32* %113, align 8
  %or176 = or i32 %114, 1
  store i32 %or176, i32* %113, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %rtl_init_csi_ops.exit
  %add.ptr178 = getelementptr i8, i8* %call.i, i64 84
  %115 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr178) #10, !srcloc !6
  %116 = and i8 %115, 48
  %cmp182 = icmp eq i8 %116, 0
  br i1 %cmp182, label %sw.epilog, label %if.then184

if.then184:                                       ; preds = %sw.default
  %features185 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5792
  %117 = bitcast i8* %features185 to i32*
  %118 = load i32, i32* %117, align 8
  %or186 = or i32 %118, 1
  store i32 %or186, i32* %117, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end167, %if.then184, %if.then174
  %119 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr153) #10, !srcloc !6
  %120 = and i8 %119, 112
  %cmp192 = icmp eq i8 %120, 0
  br i1 %cmp192, label %if.end197, label %if.then194

if.then194:                                       ; preds = %sw.epilog
  %features195 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5792
  %121 = bitcast i8* %features195 to i32*
  %122 = load i32, i32* %121, align 8
  %or196 = or i32 %122, 1
  store i32 %or196, i32* %121, align 8
  br label %if.end197

if.end197:                                        ; preds = %sw.epilog, %if.then194
  %123 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i778 = getelementptr i8, i8* %123, i64 83
  %124 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i778) #10, !srcloc !6
  %125 = and i8 %124, -33
  %tobool.i781 = icmp eq i64 %0, 0
  br i1 %tobool.i781, label %if.end12.i, label %if.then.i782

if.then.i782:                                     ; preds = %if.end197
  %126 = load %struct.pci_dev*, %struct.pci_dev** %5, align 8
  %call.i.i = call i32 @pci_enable_msi_range(%struct.pci_dev* %126, i32 1, i32 1) #9
  %cmp.i.i = icmp sgt i32 %call.i.i, -1
  br i1 %cmp.i.i, label %if.else.i, label %do.body.i785

do.body.i785:                                     ; preds = %if.then.i782
  %127 = load i32, i32* %7, align 8
  %and6.i784 = and i32 %127, 8192
  %tobool7.i = icmp eq i32 %and6.i784, 0
  br i1 %tobool7.i, label %if.end12.i, label %if.then8.i

if.then8.i:                                       ; preds = %do.body.i785
  %128 = load %struct.net_device*, %struct.net_device** %4, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* %128, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.100, i64 0, i64 0)) #9
  br label %if.end12.i

if.else.i:                                        ; preds = %if.then.i782
  %129 = or i8 %124, 32
  br label %if.end12.i

if.end12.i:                                       ; preds = %if.else.i, %if.then8.i, %do.body.i785, %if.end197
  %msi.0.i = phi i32 [ 0, %if.then8.i ], [ 0, %do.body.i785 ], [ 2, %if.else.i ], [ 0, %if.end197 ]
  %cfg2.0.i = phi i8 [ %125, %if.then8.i ], [ %125, %do.body.i785 ], [ %129, %if.else.i ], [ %125, %if.end197 ]
  %130 = load i16, i16* %53, align 2
  %cmp.i787 = icmp ult i16 %130, 6
  br i1 %cmp.i787, label %if.then15.i, label %rtl_try_msi.exit

if.then15.i:                                      ; preds = %if.end12.i
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %cfg2.0.i, i8* %add.ptr.i778) #10, !srcloc !5
  br label %rtl_try_msi.exit

rtl_try_msi.exit:                                 ; preds = %if.end12.i, %if.then15.i
  %features199 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5792
  %131 = bitcast i8* %features199 to i32*
  %132 = load i32, i32* %131, align 8
  %or200 = or i32 %132, %msi.0.i
  store i32 %or200, i32* %131, align 8
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 0, i8* %add.ptr146) #10, !srcloc !5
  %133 = load i16, i16* %53, align 2
  %cmp.i789 = icmp eq i16 %133, 0
  br i1 %cmp.i789, label %rtl_tbi_enabled.exit, label %rtl_tbi_enabled.exit.thread

rtl_tbi_enabled.exit.thread:                      ; preds = %rtl_try_msi.exit
  %set_speed874 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5648
  %134 = bitcast i8* %set_speed874 to i32 (%struct.net_device*, i8, i16, i8, i32)**
  br label %.thread

rtl_tbi_enabled.exit:                             ; preds = %rtl_try_msi.exit
  %135 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i791 = getelementptr i8, i8* %135, i64 108
  %136 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i791) #10, !srcloc !6
  %tobool.i792 = icmp slt i8 %136, 0
  %set_speed = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5648
  %137 = bitcast i8* %set_speed to i32 (%struct.net_device*, i8, i16, i8, i32)**
  br i1 %tobool.i792, label %138, label %.thread

.thread:                                          ; preds = %rtl_tbi_enabled.exit.thread, %rtl_tbi_enabled.exit
  %.ph = phi i32 (%struct.net_device*, i8, i16, i8, i32)** [ %134, %rtl_tbi_enabled.exit.thread ], [ %137, %rtl_tbi_enabled.exit ]
  br label %138

; <label>:138:                                    ; preds = %rtl_tbi_enabled.exit, %.thread
  %139 = phi i32 (i8*)* [ @rtl8169_xmii_link_ok, %.thread ], [ @rtl8169_tbi_link_ok, %rtl_tbi_enabled.exit ]
  %140 = phi void (%struct.rtl8169_private*)* [ @rtl8169_xmii_reset_enable, %.thread ], [ @rtl8169_tbi_reset_enable, %rtl_tbi_enabled.exit ]
  %141 = phi i32 (%struct.net_device*, i8, i16, i8, i32)* [ @rtl8169_set_speed_xmii, %.thread ], [ @rtl8169_set_speed_tbi, %rtl_tbi_enabled.exit ]
  %142 = phi i32 (%struct.net_device*, i8, i16, i8, i32)** [ %.ph, %.thread ], [ %137, %rtl_tbi_enabled.exit ]
  %143 = phi i32 (%struct.net_device*, %struct.ethtool_cmd*)* [ @rtl8169_gset_xmii, %.thread ], [ @rtl8169_gset_tbi, %rtl_tbi_enabled.exit ]
  %144 = phi i32 (%struct.rtl8169_private*)* [ @rtl8169_xmii_reset_pending, %.thread ], [ @rtl8169_tbi_reset_pending, %rtl_tbi_enabled.exit ]
  %145 = phi i32 (%struct.rtl8169_private*, %struct.mii_ioctl_data*, i32)* [ @rtl_xmii_ioctl, %.thread ], [ @rtl_tbi_ioctl, %rtl_tbi_enabled.exit ]
  store i32 (%struct.net_device*, i8, i16, i8, i32)* %141, i32 (%struct.net_device*, i8, i16, i8, i32)** %142, align 8
  %get_settings206 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5656
  %146 = bitcast i8* %get_settings206 to i32 (%struct.net_device*, %struct.ethtool_cmd*)**
  store i32 (%struct.net_device*, %struct.ethtool_cmd*)* %143, i32 (%struct.net_device*, %struct.ethtool_cmd*)** %146, align 8
  %phy_reset_enable207 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5664
  %147 = bitcast i8* %phy_reset_enable207 to void (%struct.rtl8169_private*)**
  store void (%struct.rtl8169_private*)* %140, void (%struct.rtl8169_private*)** %147, align 8
  %phy_reset_pending208 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5680
  %148 = bitcast i8* %phy_reset_pending208 to i32 (%struct.rtl8169_private*)**
  store i32 (%struct.rtl8169_private*)* %144, i32 (%struct.rtl8169_private*)** %148, align 8
  %link_ok209 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5688
  %149 = bitcast i8* %link_ok209 to i32 (i8*)**
  store i32 (i8*)* %139, i32 (i8*)** %149, align 8
  %do_ioctl210 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5696
  %150 = bitcast i8* %do_ioctl210 to i32 (%struct.rtl8169_private*, %struct.mii_ioctl_data*, i32)**
  store i32 (%struct.rtl8169_private*, %struct.mii_ioctl_data*, i32)* %145, i32 (%struct.rtl8169_private*, %struct.mii_ioctl_data*, i32)** %150, align 8
  %mutex = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5720
  %151 = bitcast i8* %mutex to %struct.mutex*
  call void @__mutex_init(%struct.mutex* %151, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), %struct.lock_class_key* nonnull @rtl_init_one.__key) #9
  %152 = load i16, i16* %53, align 2
  switch i16 %152, label %if.end304 [
    i16 34, label %if.then294
    i16 35, label %if.then294
    i16 36, label %if.then294
    i16 37, label %if.then294
    i16 39, label %if.then294
    i16 40, label %if.then294
    i16 41, label %if.then294
    i16 42, label %if.then294
    i16 43, label %if.then294
    i16 44, label %if.then294
    i16 45, label %if.then294
    i16 46, label %if.then294
    i16 47, label %if.then294
    i16 48, label %if.then294
    i16 49, label %if.then294
    i16 50, label %if.then294
  ]

if.then294:                                       ; preds = %138, %138, %138, %138, %138, %138, %138, %138, %138, %138, %138, %138, %138, %138, %138, %138
  %153 = bitcast [3 x i16]* %mac_addr to i8*
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %153) #10
  %154 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i794 = getelementptr i8, i8* %154, i64 116
  %155 = bitcast i8* %add.ptr.i794 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61664, i32* %155) #10, !srcloc !8
  br label %for.body.i.i.i801

for.cond.i.i.i797:                                ; preds = %for.body.i.i.i801
  %inc.i.i.i795 = add nuw nsw i32 %i.017.i.i.i798, 1
  %cmp.i.i.i796 = icmp ult i32 %i.017.i.i.i798, 99
  br i1 %cmp.i.i.i796, label %for.body.i.i.i801, label %do.body.i.i.i805

for.body.i.i.i801:                                ; preds = %for.cond.i.i.i797, %if.then294
  %i.017.i.i.i798 = phi i32 [ 0, %if.then294 ], [ %inc.i.i.i795, %for.cond.i.i.i797 ]
  call void @__udelay(i64 100) #9
  %156 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i799 = getelementptr i8, i8* %156, i64 116
  %157 = bitcast i8* %add.ptr.i.i799 to i32*
  %158 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %157) #10, !srcloc !2
  %tobool.i.i800 = icmp slt i32 %158, 0
  br i1 %tobool.i.i800, label %cond.true.i809, label %for.cond.i.i.i797

do.body.i.i.i805:                                 ; preds = %for.cond.i.i.i797
  %159 = load i32, i32* %7, align 8
  %and.i.i.i803 = and i32 %159, 1
  %tobool4.i.i.i804 = icmp eq i32 %and.i.i.i803, 0
  br i1 %tobool4.i.i.i804, label %rtl_eri_read.exit811, label %if.then5.i.i.i807

if.then5.i.i.i807:                                ; preds = %do.body.i.i.i805
  %160 = load %struct.net_device*, %struct.net_device** %4, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %160, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_eri_read.exit811

cond.true.i809:                                   ; preds = %for.body.i.i.i801
  %add.ptr3.i808 = getelementptr i8, i8* %154, i64 112
  %161 = bitcast i8* %add.ptr3.i808 to i32*
  %162 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %161) #10, !srcloc !2
  br label %rtl_eri_read.exit811

rtl_eri_read.exit811:                             ; preds = %do.body.i.i.i805, %if.then5.i.i.i807, %cond.true.i809
  %163 = phi i32 [ %162, %cond.true.i809 ], [ -1, %do.body.i.i.i805 ], [ -1, %if.then5.i.i.i807 ]
  %164 = bitcast [3 x i16]* %mac_addr to i32*
  store i32 %163, i32* %164, align 4
  %165 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i813 = getelementptr i8, i8* %165, i64 116
  %166 = bitcast i8* %add.ptr.i813 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61668, i32* %166) #10, !srcloc !8
  br label %for.body.i.i.i820

for.cond.i.i.i816:                                ; preds = %for.body.i.i.i820
  %inc.i.i.i814 = add nuw nsw i32 %i.017.i.i.i817, 1
  %cmp.i.i.i815 = icmp ult i32 %i.017.i.i.i817, 99
  br i1 %cmp.i.i.i815, label %for.body.i.i.i820, label %do.body.i.i.i824

for.body.i.i.i820:                                ; preds = %for.cond.i.i.i816, %rtl_eri_read.exit811
  %i.017.i.i.i817 = phi i32 [ 0, %rtl_eri_read.exit811 ], [ %inc.i.i.i814, %for.cond.i.i.i816 ]
  call void @__udelay(i64 100) #9
  %167 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i818 = getelementptr i8, i8* %167, i64 116
  %168 = bitcast i8* %add.ptr.i.i818 to i32*
  %169 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %168) #10, !srcloc !2
  %tobool.i.i819 = icmp slt i32 %169, 0
  br i1 %tobool.i.i819, label %cond.true.i828, label %for.cond.i.i.i816

do.body.i.i.i824:                                 ; preds = %for.cond.i.i.i816
  %170 = load i32, i32* %7, align 8
  %and.i.i.i822 = and i32 %170, 1
  %tobool4.i.i.i823 = icmp eq i32 %and.i.i.i822, 0
  br i1 %tobool4.i.i.i823, label %rtl_eri_read.exit830, label %if.then5.i.i.i826

if.then5.i.i.i826:                                ; preds = %do.body.i.i.i824
  %171 = load %struct.net_device*, %struct.net_device** %4, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %171, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_eri_read.exit830

cond.true.i828:                                   ; preds = %for.body.i.i.i820
  %add.ptr3.i827 = getelementptr i8, i8* %165, i64 112
  %172 = bitcast i8* %add.ptr3.i827 to i32*
  %173 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %172) #10, !srcloc !2
  br label %rtl_eri_read.exit830

rtl_eri_read.exit830:                             ; preds = %do.body.i.i.i824, %if.then5.i.i.i826, %cond.true.i828
  %cond.i829 = phi i32 [ %173, %cond.true.i828 ], [ -1, %do.body.i.i.i824 ], [ -1, %if.then5.i.i.i826 ]
  %conv298 = trunc i32 %cond.i829 to i16
  %arrayidx299 = getelementptr inbounds [3 x i16], [3 x i16]* %mac_addr, i64 0, i64 2
  store i16 %conv298, i16* %arrayidx299, align 4
  %and.i.i = and i32 %163, 1
  %tobool.i.i831 = icmp eq i32 %and.i.i, 0
  br i1 %tobool.i.i831, label %is_valid_ether_addr.exit, label %if.end303

is_valid_ether_addr.exit:                         ; preds = %rtl_eri_read.exit830
  %conv.i.i = and i32 %cond.i829, 65535
  %or.i.i = or i32 %163, %conv.i.i
  %cmp.i.i833 = icmp eq i32 %or.i.i, 0
  br i1 %cmp.i.i833, label %if.end303, label %if.then301

if.then301:                                       ; preds = %is_valid_ether_addr.exit
  call fastcc void @rtl_rar_set(%struct.rtl8169_private* nonnull %3, i8* nonnull %153) #11
  br label %if.end303

if.end303:                                        ; preds = %is_valid_ether_addr.exit, %rtl_eri_read.exit830, %if.then301
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %153) #10
  br label %if.end304

if.end304:                                        ; preds = %138, %if.end303
  %dev_addr = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 74
  %174 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* nonnull %call.i) #10, !srcloc !6
  %175 = load i8*, i8** %dev_addr, align 32
  store i8 %174, i8* %175, align 1
  %add.ptr308.1 = getelementptr i8, i8* %call.i, i64 1
  %176 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr308.1) #10, !srcloc !6
  %177 = load i8*, i8** %dev_addr, align 32
  %arrayidx311.1 = getelementptr i8, i8* %177, i64 1
  store i8 %176, i8* %arrayidx311.1, align 1
  %add.ptr308.2 = getelementptr i8, i8* %call.i, i64 2
  %178 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr308.2) #10, !srcloc !6
  %179 = load i8*, i8** %dev_addr, align 32
  %arrayidx311.2 = getelementptr i8, i8* %179, i64 2
  store i8 %178, i8* %arrayidx311.2, align 1
  %add.ptr308.3 = getelementptr i8, i8* %call.i, i64 3
  %180 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr308.3) #10, !srcloc !6
  %181 = load i8*, i8** %dev_addr, align 32
  %arrayidx311.3 = getelementptr i8, i8* %181, i64 3
  store i8 %180, i8* %arrayidx311.3, align 1
  %add.ptr308.4 = getelementptr i8, i8* %call.i, i64 4
  %182 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr308.4) #10, !srcloc !6
  %183 = load i8*, i8** %dev_addr, align 32
  %arrayidx311.4 = getelementptr i8, i8* %183, i64 4
  store i8 %182, i8* %arrayidx311.4, align 1
  %add.ptr308.5 = getelementptr i8, i8* %call.i, i64 5
  %184 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr308.5) #10, !srcloc !6
  %185 = load i8*, i8** %dev_addr, align 32
  %arrayidx311.5 = getelementptr i8, i8* %185, i64 5
  store i8 %184, i8* %arrayidx311.5, align 1
  %ethtool_ops = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 31
  store %struct.ethtool_ops* @rtl8169_ethtool_ops, %struct.ethtool_ops** %ethtool_ops, align 8
  %watchdog_timeo = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 94
  store i32 1500, i32* %watchdog_timeo, align 4
  %napi = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 2136
  %186 = bitcast i8* %napi to %struct.napi_struct*
  call void @netif_napi_add(%struct.net_device* nonnull %call2, %struct.napi_struct* %186, i32 (%struct.napi_struct*, i32)* nonnull @rtl8169_poll, i32 64) #9
  %features312 = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 17
  %187 = load i64, i64* %features312, align 16
  %or313 = or i64 %187, 17179869568
  store i64 %or313, i64* %features312, align 16
  %hw_features = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 18
  store i64 17179935107, i64* %hw_features, align 8
  %vlan_features = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 20
  store i64 65571, i64* %vlan_features, align 8
  %188 = load i16, i16* %26, align 8
  %189 = or i16 %188, 96
  store i16 %189, i16* %26, align 8
  %190 = load i16, i16* %53, align 2
  %cmp320 = icmp eq i16 %190, 4
  br i1 %cmp320, label %if.then322, label %if.end325

if.then322:                                       ; preds = %if.end304
  store i64 17179934851, i64* %hw_features, align 8
  br label %if.end325

if.end325:                                        ; preds = %if.then322, %if.end304
  %191 = phi i64 [ 17179934851, %if.then322 ], [ 17179935107, %if.end304 ]
  %192 = load i16, i16* %94, align 4
  switch i16 %192, label %if.then348 [
    i16 0, label %if.then330
    i16 1, label %if.then336
  ]

if.then330:                                       ; preds = %if.end325
  %tso_csum = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5704
  %193 = bitcast i8* %tso_csum to i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)**
  store i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)* @rtl8169_tso_csum_v1, i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)** %193, align 8
  br label %if.end386

if.then336:                                       ; preds = %if.end325
  %tso_csum337 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5704
  %194 = bitcast i8* %tso_csum337 to i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)**
  store i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)* @rtl8169_tso_csum_v2, i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)** %194, align 8
  %or339 = or i64 %191, 1048592
  store i64 %or339, i64* %hw_features, align 8
  br label %if.end386

if.then348:                                       ; preds = %if.end325
  %.b712 = load i1, i1* @rtl_init_one.__warned, align 1
  br i1 %.b712, label %if.end386, label %if.then364, !prof !9

if.then364:                                       ; preds = %if.then348
  call void @warn_slowpath_null(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 8395) #9
  store i1 true, i1* @rtl_init_one.__warned, align 1
  %.pre880 = load i64, i64* %hw_features, align 8
  %.pre881 = load i16, i16* %53, align 2
  br label %if.end386

if.end386:                                        ; preds = %if.then364, %if.then348, %if.then336, %if.then330
  %195 = phi i16 [ %.pre881, %if.then364 ], [ %190, %if.then348 ], [ %190, %if.then336 ], [ %190, %if.then330 ]
  %196 = phi i64 [ %.pre880, %if.then364 ], [ %191, %if.then348 ], [ %or339, %if.then336 ], [ %191, %if.then330 ]
  %or390 = or i64 %196, 412316860416
  store i64 %or390, i64* %hw_features, align 8
  %197 = bitcast %struct.rtl_cfg_info* %add.ptr to i64*
  %198 = load i64, i64* %197, align 16
  %hw_start391 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5672
  %199 = bitcast i8* %hw_start391 to i64*
  store i64 %198, i64* %199, align 8
  %event_slow = getelementptr [3 x %struct.rtl_cfg_info], [3 x %struct.rtl_cfg_info]* @rtl_cfg_infos, i64 0, i64 %0, i32 3
  %200 = load i16, i16* %event_slow, align 16
  %event_slow392 = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5578
  %201 = bitcast i8* %event_slow392 to i16*
  store i16 %200, i16* %201, align 2
  %cmp395 = icmp eq i16 %195, 0
  %cond397 = select i1 %cmp395, i32 -1, i32 -25165825
  %opts1_mask = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5892
  %202 = bitcast i8* %opts1_mask to i32*
  store i32 %cond397, i32* %202, align 4
  %timer = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5496
  %203 = bitcast i8* %timer to %struct.timer_list*
  call void @init_timer_key(%struct.timer_list* %203, i32 0, i8* null, %struct.lock_class_key* null) #9
  %204 = ptrtoint %struct.net_device* %call2 to i64
  %data = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5528
  %205 = bitcast i8* %data to i64*
  store i64 %204, i64* %205, align 8
  %function = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5520
  %206 = bitcast i8* %function to void (i64)**
  store void (i64)* @rtl8169_phy_timer, void (i64)** %206, align 8
  %rtl_fw = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5896
  %207 = bitcast i8* %rtl_fw to %struct.rtl_fw**
  store %struct.rtl_fw* inttoptr (i64 -11 to %struct.rtl_fw*), %struct.rtl_fw** %207, align 8
  %counters_phys_addr = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5848
  %208 = bitcast i8* %counters_phys_addr to i64*
  %209 = bitcast %struct.device** %dev.addr.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %209) #10
  %210 = bitcast i32* %flag.addr.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %210) #10
  store %struct.device* %dev6, %struct.device** %dev.addr.i.i, align 8
  store i32 37748928, i32* %flag.addr.i.i, align 4
  %211 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i713, align 8
  %tobool4.i.i.i836 = icmp eq %struct.dma_map_ops* %211, null
  br i1 %tobool4.i.i.i836, label %get_dma_ops.exit.i.i838, label %do.end9.i.i842

get_dma_ops.exit.i.i838:                          ; preds = %if.end386
  %212 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %tobool.i.i837 = icmp eq %struct.dma_map_ops* %212, null
  br i1 %tobool.i.i837, label %do.body4.i.i839, label %do.end9.i.i842, !prof !10

do.body4.i.i839:                                  ; preds = %get_dma_ops.exit.i.i838
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 252, i64 12) #10, !srcloc !11
  br label %do.body5.i.i840

do.body5.i.i840:                                  ; preds = %do.body5.i.i840, %do.body4.i.i839
  br label %do.body5.i.i840

do.end9.i.i842:                                   ; preds = %get_dma_ops.exit.i.i838, %if.end386
  %retval.0.i2.i.i841 = phi %struct.dma_map_ops* [ %212, %get_dma_ops.exit.i.i838 ], [ %211, %if.end386 ]
  %call10.i.i = call zeroext i1 @arch_dma_alloc_attrs(%struct.device** nonnull %dev.addr.i.i, i32* nonnull %flag.addr.i.i) #9
  br i1 %call10.i.i, label %if.end12.i.i, label %dma_alloc_coherent.exit

if.end12.i.i:                                     ; preds = %do.end9.i.i842
  %alloc.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i2.i.i841, i64 0, i32 0
  %213 = load i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)*, i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)** %alloc.i.i, align 8
  %tobool13.i.i = icmp eq i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)* %213, null
  br i1 %tobool13.i.i, label %dma_alloc_coherent.exit, label %if.end15.i.i

if.end15.i.i:                                     ; preds = %if.end12.i.i
  %214 = load %struct.device*, %struct.device** %dev.addr.i.i, align 8
  %215 = load i32, i32* %flag.addr.i.i, align 4
  %call17.i.i = call i8* %213(%struct.device* %214, i64 64, i64* %208, i32 %215, %struct.dma_attrs* null) #9
  br label %dma_alloc_coherent.exit

dma_alloc_coherent.exit:                          ; preds = %do.end9.i.i842, %if.end12.i.i, %if.end15.i.i
  %retval.0.i.i843 = phi i8* [ %call17.i.i, %if.end15.i.i ], [ null, %do.end9.i.i842 ], [ null, %if.end12.i.i ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %209) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %210) #10
  %counters = getelementptr %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 5856
  %216 = bitcast i8* %counters to i8**
  store i8* %retval.0.i.i843, i8** %216, align 8
  %tobool404 = icmp eq i8* %retval.0.i.i843, null
  br i1 %tobool404, label %err_out_msi_4, label %if.end406

if.end406:                                        ; preds = %dma_alloc_coherent.exit
  %call407 = call i32 @register_netdev(%struct.net_device* nonnull %call2) #9
  %cmp408 = icmp slt i32 %call407, 0
  br i1 %cmp408, label %err_out_cnt_5, label %if.end411

if.end411:                                        ; preds = %if.end406
  %217 = getelementptr inbounds %struct.net_device, %struct.net_device* %call2, i64 0, i32 0, i64 0
  %driver_data.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35, i32 9
  store i8* %217, i8** %driver_data.i.i, align 8
  %218 = load i32, i32* %7, align 8
  %and414 = and i32 %218, 2
  %tobool415 = icmp eq i32 %and414, 0
  br i1 %tobool415, label %do.end425, label %if.then416

if.then416:                                       ; preds = %if.end411
  %name = getelementptr [51 x %struct.anon.113], [51 x %struct.anon.113]* @rtl_chip_infos, i64 0, i64 %idxprom142, i32 0
  %219 = load i8*, i8** %name, align 16
  %220 = load i8*, i8** %dev_addr, align 32
  %add.ptr420 = getelementptr i8, i8* %call.i, i64 64
  %221 = bitcast i8* %add.ptr420 to i32*
  %222 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %221) #10, !srcloc !2
  %and422 = and i32 %222, -1661929217
  %irq = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 37
  %223 = load i32, i32* %irq, align 4
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.13, i64 0, i64 0), i8* %219, i8* nonnull %call.i, i8* %220, i32 %and422, i32 %223) #9
  br label %do.end425

do.end425:                                        ; preds = %if.end411, %if.then416
  %jumbo_max = getelementptr [51 x %struct.anon.113], [51 x %struct.anon.113]* @rtl_chip_infos, i64 0, i64 %idxprom142, i32 3
  %224 = load i16, i16* %jumbo_max, align 8
  %conv428 = zext i16 %224 to i32
  %225 = lshr i64 2035951131888703, %idxprom142
  %226 = and i64 %225, 1
  %cmp429 = icmp eq i64 %226, 0
  br i1 %cmp429, label %if.end449, label %do.body432

do.body432:                                       ; preds = %do.end425
  %227 = load i32, i32* %7, align 8
  %and434 = and i32 %227, 2
  %tobool435 = icmp eq i32 %and434, 0
  br i1 %tobool435, label %if.end449, label %if.then436

if.then436:                                       ; preds = %do.body432
  %228 = lshr i64 4742449263615, %idxprom142
  %229 = and i64 %228, 1
  %tobool443 = icmp eq i64 %229, 0
  %cond445 = select i1 %tobool443, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0)
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* nonnull %call2, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.14, i64 0, i64 0), i32 %conv428, i8* %cond445) #9
  br label %if.end449

if.end449:                                        ; preds = %do.body432, %do.end425, %if.then436
  %230 = load i16, i16* %53, align 2
  switch i16 %230, label %if.end483 [
    i16 26, label %sw.bb.i846
    i16 27, label %sw.bb.i846
    i16 30, label %sw.bb.i846
    i16 48, label %sw.bb1.i849
    i16 49, label %sw.bb1.i849
    i16 50, label %sw.bb1.i849
  ]

sw.bb.i846:                                       ; preds = %if.end449, %if.end449, %if.end449
  %cmp.i.i.i845 = icmp eq i16 %230, 30
  %conv2.i.i.i = select i1 %cmp.i.i.i845, i16 184, i16 16
  %call1.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.i.i) #9
  %.lobit.i.i = lshr i32 %call1.i.i, 15
  br label %r8168_check_dash.exit

sw.bb1.i849:                                      ; preds = %if.end449, %if.end449, %if.end449
  %call.i.i847 = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 296) #9
  br label %r8168_check_dash.exit

r8168_check_dash.exit:                            ; preds = %sw.bb.i846, %sw.bb1.i849
  %.lobit.i.i.sink = phi i32 [ %.lobit.i.i, %sw.bb.i846 ], [ %call.i.i847, %sw.bb1.i849 ]
  %231 = and i32 %.lobit.i.i.sink, 1
  %tobool481 = icmp eq i32 %231, 0
  br i1 %tobool481, label %if.end483, label %if.then482

if.then482:                                       ; preds = %r8168_check_dash.exit
  %232 = load i16, i16* %53, align 2
  switch i16 %232, label %do.body.i856 [
    i16 26, label %sw.bb.i852
    i16 27, label %sw.bb.i852
    i16 30, label %sw.bb.i852
    i16 48, label %sw.bb1.i855
    i16 49, label %sw.bb1.i855
    i16 50, label %sw.bb1.i855
  ]

sw.bb.i852:                                       ; preds = %if.then482, %if.then482, %if.then482
  %233 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i.i = getelementptr i8, i8* %233, i64 112
  %234 = bitcast i8* %add.ptr.i.i.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 5, i32* %234) #10, !srcloc !8
  %add.ptr11.i.i.i.i = getelementptr i8, i8* %233, i64 116
  %235 = bitcast i8* %add.ptr11.i.i.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479320, i32* %235) #10, !srcloc !8
  br label %for.body.i.i.i.i.i.i

for.cond.i.i.i.i.i.i:                             ; preds = %for.body.i.i.i.i.i.i
  %inc.i.i.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i.i.i, 1
  %cmp.i.i.i.i.i.i = icmp ult i32 %i.017.i.i.i.i.i.i, 99
  br i1 %cmp.i.i.i.i.i.i, label %for.body.i.i.i.i.i.i, label %do.body.i.i.i.i.i.i

for.body.i.i.i.i.i.i:                             ; preds = %for.cond.i.i.i.i.i.i, %sw.bb.i852
  %i.017.i.i.i.i.i.i = phi i32 [ 0, %sw.bb.i852 ], [ %inc.i.i.i.i.i.i, %for.cond.i.i.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %236 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i.i.i = getelementptr i8, i8* %236, i64 116
  %237 = bitcast i8* %add.ptr.i.i.i.i.i to i32*
  %238 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %237) #10, !srcloc !2
  %tobool.i.i.i.i.i = icmp slt i32 %238, 0
  br i1 %tobool.i.i.i.i.i, label %for.cond.i.i.i.i.i.i, label %rtl8168dp_driver_start.exit.i

do.body.i.i.i.i.i.i:                              ; preds = %for.cond.i.i.i.i.i.i
  %239 = load i32, i32* %7, align 8
  %and.i.i.i.i.i.i = and i32 %239, 1
  %tobool4.i.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i.i.i, label %rtl8168dp_driver_start.exit.i, label %if.then5.i.i.i.i.i.i

if.then5.i.i.i.i.i.i:                             ; preds = %do.body.i.i.i.i.i.i
  %240 = load %struct.net_device*, %struct.net_device** %4, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %240, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl8168dp_driver_start.exit.i

rtl8168dp_driver_start.exit.i:                    ; preds = %for.body.i.i.i.i.i.i, %if.then5.i.i.i.i.i.i, %do.body.i.i.i.i.i.i
  call fastcc void @ocp_write(%struct.rtl8169_private* nonnull %3, i16 zeroext 48, i32 1) #9
  call fastcc void @rtl_msleep_loop_wait_high(%struct.rtl8169_private* nonnull %3, %struct.rtl_cond* nonnull @rtl_ocp_read_cond) #9
  br label %if.end483

sw.bb1.i855:                                      ; preds = %if.then482, %if.then482, %if.then482
  call fastcc void @ocp_write(%struct.rtl8169_private* nonnull %3, i16 zeroext 384, i32 5) #9
  %call.i.i853 = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 1, i16 zeroext 48) #9
  %or.i.i854 = or i32 %call.i.i853, 1
  call fastcc void @ocp_write(%struct.rtl8169_private* nonnull %3, i16 zeroext 48, i32 %or.i.i854) #9
  call fastcc void @rtl_msleep_loop_wait_high(%struct.rtl8169_private* nonnull %3, %struct.rtl_cond* nonnull @rtl_ep_ocp_read_cond) #9
  br label %if.end483

do.body.i856:                                     ; preds = %if.then482
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 1430, i64 12) #10, !srcloc !12
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i, %do.body.i856
  br label %do.body2.i

if.end483:                                        ; preds = %if.end449, %sw.bb1.i855, %rtl8168dp_driver_start.exit.i, %r8168_check_dash.exit
  %241 = load i32, i32* %131, align 8
  %and486 = and i32 %241, 1
  %tobool487 = icmp ne i32 %and486, 0
  %call488 = call i32 @device_set_wakeup_enable(%struct.device* %dev6, i1 zeroext %tobool487) #9
  %call489 = call zeroext i1 @pci_dev_run_wake(%struct.pci_dev* %pdev) #9
  br i1 %call489, label %if.then490, label %if.end492

if.then490:                                       ; preds = %if.end483
  %242 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35, i32 10, i32 12, i32 0
  %243 = load volatile i32, i32* %242, align 4
  %cmp1.i.i.i = icmp eq i32 %243, 0
  br i1 %cmp1.i.i.i, label %if.end492, label %if.end.i.i.i.preheader, !prof !10

if.end.i.i.i.preheader:                           ; preds = %if.then490
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.end.i.i.i.preheader, %if.end.i.i.i
  %c.02.i.i.i = phi i32 [ %244, %if.end.i.i.i ], [ %243, %if.end.i.i.i.preheader ]
  %add.i.i.i = add i32 %c.02.i.i.i, -1
  %244 = call i32 asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; cmpxchgl $2,$1", "={ax},=*m,r,0,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %242, i32 %add.i.i.i, i32 %c.02.i.i.i, i32* %242) #10, !srcloc !13
  %cmp3.i.i.i = icmp eq i32 %244, %c.02.i.i.i
  %cmp.i.i.i857 = icmp eq i32 %244, 0
  %or.cond.i.i = or i1 %cmp3.i.i.i, %cmp.i.i.i857
  br i1 %or.cond.i.i, label %if.end492, label %if.end.i.i.i, !prof !14

if.end492:                                        ; preds = %if.end.i.i.i, %if.then490, %if.end483
  call void @netif_carrier_off(%struct.net_device* nonnull %call2) #9
  br label %out

out:                                              ; preds = %if.end, %err_out_free_dev_1, %if.end492
  %rc.0 = phi i32 [ %rc.4, %err_out_free_dev_1 ], [ %call407, %if.end492 ], [ -12, %if.end ]
  ret i32 %rc.0

err_out_cnt_5:                                    ; preds = %if.end406
  %245 = load i8*, i8** %216, align 8
  %246 = load i64, i64* %208, align 8
  %247 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i713, align 8
  %tobool4.i.i.i = icmp eq %struct.dma_map_ops* %247, null
  br i1 %tobool4.i.i.i, label %get_dma_ops.exit.i.i, label %do.end9.i.i

get_dma_ops.exit.i.i:                             ; preds = %err_out_cnt_5
  %248 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %tobool.i.i = icmp eq %struct.dma_map_ops* %248, null
  br i1 %tobool.i.i, label %do.body4.i.i, label %do.end9.i.i, !prof !10

do.body4.i.i:                                     ; preds = %get_dma_ops.exit.i.i
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 273, i64 12) #10, !srcloc !15
  br label %do.body5.i.i

do.body5.i.i:                                     ; preds = %do.body5.i.i, %do.body4.i.i
  br label %do.body5.i.i

do.end9.i.i:                                      ; preds = %get_dma_ops.exit.i.i, %err_out_cnt_5
  %retval.0.i2.i.i = phi %struct.dma_map_ops* [ %248, %get_dma_ops.exit.i.i ], [ %247, %err_out_cnt_5 ]
  %249 = call i64 asm sideeffect "771:\0A\09call *${2:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${1:c}\0A  .byte 772b-771b\0A  .short ${3:c}\0A.popsection\0A", "={ax},i,i,i,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i64 40, i8** getelementptr inbounds (%struct.pv_irq_ops, %struct.pv_irq_ops* @pv_irq_ops, i64 0, i32 0, i32 0), i32 1) #10, !srcloc !16
  %250 = and i64 %249, 512
  %tobool23.i.i = icmp eq i64 %250, 0
  br i1 %tobool23.i.i, label %if.then36.i.i, label %if.end37.i.i, !prof !10

if.then36.i.i:                                    ; preds = %do.end9.i.i
  call void @warn_slowpath_null(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 274) #9
  br label %if.end37.i.i

if.end37.i.i:                                     ; preds = %if.then36.i.i, %do.end9.i.i
  %free.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i2.i.i, i64 0, i32 1
  %251 = load void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)** %free.i.i, align 8
  %tobool46.i.i = icmp eq void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)* %251, null
  br i1 %tobool46.i.i, label %err_out_msi_4, label %if.end48.i.i

if.end48.i.i:                                     ; preds = %if.end37.i.i
  call void %251(%struct.device* nonnull %dev6, i64 64, i8* %245, i64 %246, %struct.dma_attrs* null) #9
  br label %err_out_msi_4

err_out_msi_4:                                    ; preds = %if.end48.i.i, %if.end37.i.i, %dma_alloc_coherent.exit
  %rc.1 = phi i32 [ -12, %dma_alloc_coherent.exit ], [ %call407, %if.end37.i.i ], [ %call407, %if.end48.i.i ]
  call void @netif_napi_del(%struct.napi_struct* nonnull %186) #9
  %252 = load i32, i32* %131, align 8
  %and.i = and i32 %252, 2
  %tobool.i = icmp eq i32 %and.i, 0
  br i1 %tobool.i, label %rtl_disable_msi.exit, label %if.then.i

if.then.i:                                        ; preds = %err_out_msi_4
  call void @pci_disable_msi(%struct.pci_dev* nonnull %pdev) #9
  %253 = load i32, i32* %131, align 8
  %and2.i = and i32 %253, -3
  store i32 %and2.i, i32* %131, align 8
  br label %rtl_disable_msi.exit

rtl_disable_msi.exit:                             ; preds = %err_out_msi_4, %if.then.i
  call void @iounmap(i8* nonnull %call.i) #9
  br label %err_out_free_res_3

err_out_free_res_3:                               ; preds = %if.then125, %do.body121, %do.body104, %if.then108, %rtl_disable_msi.exit
  %rc.2 = phi i32 [ %rc.1, %rtl_disable_msi.exit ], [ %retval.0.i.i731863, %if.then108 ], [ %retval.0.i.i731863, %do.body104 ], [ -5, %do.body121 ], [ -5, %if.then125 ]
  call void @pci_release_regions(%struct.pci_dev* nonnull %pdev) #9
  br label %err_out_mwi_2

err_out_mwi_2:                                    ; preds = %if.then74, %do.body70, %if.then43, %do.body39, %do.body82, %if.then86, %err_out_free_res_3
  %rc.3 = phi i32 [ %call79, %if.then86 ], [ %call79, %do.body82 ], [ %rc.2, %err_out_free_res_3 ], [ -19, %do.body39 ], [ -19, %if.then43 ], [ -19, %do.body70 ], [ -19, %if.then74 ]
  call void @pci_clear_mwi(%struct.pci_dev* nonnull %pdev) #9
  call void @pci_disable_device(%struct.pci_dev* nonnull %pdev) #9
  br label %err_out_free_dev_1

err_out_free_dev_1:                               ; preds = %do.body, %if.then21, %err_out_mwi_2
  %rc.4 = phi i32 [ %call16, %if.then21 ], [ %call16, %do.body ], [ %rc.3, %err_out_mwi_2 ]
  call void @free_netdev(%struct.net_device* nonnull %call2) #9
  br label %out
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_remove_one(%struct.pci_dev* %pdev) #0 {
entry:
  %driver_data.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35, i32 9
  %0 = load i8*, i8** %driver_data.i.i, align 8
  %1 = bitcast i8* %0 to %struct.net_device*
  %2 = getelementptr i8, i8* %0, i64 2112
  %3 = bitcast i8* %2 to %struct.rtl8169_private*
  %mac_version = getelementptr inbounds i8, i8* %0, i64 2342
  %4 = bitcast i8* %mac_version to i16*
  %5 = load i16, i16* %4, align 2
  switch i16 %5, label %if.end [
    i16 26, label %sw.bb.i
    i16 27, label %sw.bb.i
    i16 30, label %sw.bb.i
    i16 48, label %sw.bb1.i
    i16 49, label %sw.bb1.i
    i16 50, label %sw.bb1.i
  ]

sw.bb.i:                                          ; preds = %entry, %entry, %entry
  %cmp.i.i.i = icmp eq i16 %5, 30
  %conv2.i.i.i = select i1 %cmp.i.i.i, i16 184, i16 16
  %call1.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.i.i) #9
  %.lobit.i.i = lshr i32 %call1.i.i, 15
  br label %r8168_check_dash.exit

sw.bb1.i:                                         ; preds = %entry, %entry, %entry
  %call.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 296) #9
  br label %r8168_check_dash.exit

r8168_check_dash.exit:                            ; preds = %sw.bb.i, %sw.bb1.i
  %.lobit.i.i.sink = phi i32 [ %.lobit.i.i, %sw.bb.i ], [ %call.i.i, %sw.bb1.i ]
  %6 = and i32 %.lobit.i.i.sink, 1
  %tobool = icmp eq i32 %6, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %r8168_check_dash.exit
  %7 = load i16, i16* %4, align 2
  switch i16 %7, label %do.body.i [
    i16 26, label %sw.bb.i58
    i16 27, label %sw.bb.i58
    i16 30, label %sw.bb.i58
    i16 48, label %sw.bb1.i62
    i16 49, label %sw.bb1.i62
    i16 50, label %sw.bb1.i62
  ]

sw.bb.i58:                                        ; preds = %if.then, %if.then, %if.then
  %mmio_addr.i.i.i.i = bitcast i8* %2 to i8**
  %8 = load i8*, i8** %mmio_addr.i.i.i.i, align 8
  %add.ptr.i.i.i.i = getelementptr i8, i8* %8, i64 112
  %9 = bitcast i8* %add.ptr.i.i.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 6, i32* %9) #10, !srcloc !8
  %add.ptr11.i.i.i.i = getelementptr i8, i8* %8, i64 116
  %10 = bitcast i8* %add.ptr11.i.i.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479320, i32* %10) #10, !srcloc !8
  br label %for.body.i.i.i.i.i.i

for.cond.i.i.i.i.i.i:                             ; preds = %for.body.i.i.i.i.i.i
  %inc.i.i.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i.i.i, 1
  %cmp.i.i.i.i.i.i = icmp ult i32 %i.017.i.i.i.i.i.i, 99
  br i1 %cmp.i.i.i.i.i.i, label %for.body.i.i.i.i.i.i, label %do.body.i.i.i.i.i.i

for.body.i.i.i.i.i.i:                             ; preds = %for.cond.i.i.i.i.i.i, %sw.bb.i58
  %i.017.i.i.i.i.i.i = phi i32 [ 0, %sw.bb.i58 ], [ %inc.i.i.i.i.i.i, %for.cond.i.i.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %11 = load i8*, i8** %mmio_addr.i.i.i.i, align 8
  %add.ptr.i.i.i.i.i = getelementptr i8, i8* %11, i64 116
  %12 = bitcast i8* %add.ptr.i.i.i.i.i to i32*
  %13 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %12) #10, !srcloc !2
  %tobool.i.i.i.i.i = icmp slt i32 %13, 0
  br i1 %tobool.i.i.i.i.i, label %for.cond.i.i.i.i.i.i, label %rtl8168_oob_notify.exit.i.i

do.body.i.i.i.i.i.i:                              ; preds = %for.cond.i.i.i.i.i.i
  %msg_enable.i.i.i.i.i.i = getelementptr inbounds i8, i8* %0, i64 2336
  %14 = bitcast i8* %msg_enable.i.i.i.i.i.i to i32*
  %15 = load i32, i32* %14, align 8
  %and.i.i.i.i.i.i = and i32 %15, 1
  %tobool4.i.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i.i.i, label %rtl8168_oob_notify.exit.i.i, label %if.then5.i.i.i.i.i.i

if.then5.i.i.i.i.i.i:                             ; preds = %do.body.i.i.i.i.i.i
  %dev.i.i.i.i.i.i = getelementptr inbounds i8, i8* %0, i64 2128
  %16 = bitcast i8* %dev.i.i.i.i.i.i to %struct.net_device**
  %17 = load %struct.net_device*, %struct.net_device** %16, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %17, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl8168_oob_notify.exit.i.i

rtl8168_oob_notify.exit.i.i:                      ; preds = %for.body.i.i.i.i.i.i, %if.then5.i.i.i.i.i.i, %do.body.i.i.i.i.i.i
  call fastcc void @ocp_write(%struct.rtl8169_private* nonnull %3, i16 zeroext 48, i32 1) #9
  call void @msleep(i32 10) #9
  %18 = load i16, i16* %4, align 2
  %cmp.i.i.i59 = icmp eq i16 %18, 30
  %conv2.i.i.i60 = select i1 %cmp.i.i.i59, i16 184, i16 16
  %call1.i.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.i.i60) #9
  %and.i.i.i = and i32 %call1.i.i.i, 2048
  %tobool.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.i.i.i, label %if.end, label %for.cond.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %rtl8168_oob_notify.exit.i.i
  call void @msleep(i32 10) #9
  %19 = load i16, i16* %4, align 2
  %cmp.i.1.i.i = icmp eq i16 %19, 30
  %conv2.i.1.i.i = select i1 %cmp.i.1.i.i, i16 184, i16 16
  %call1.i.1.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.1.i.i) #9
  %and.i.1.i.i = and i32 %call1.i.1.i.i, 2048
  %tobool.i.1.i.i = icmp eq i32 %and.i.1.i.i, 0
  br i1 %tobool.i.1.i.i, label %if.end, label %for.cond.i.i.1.i.i

if.then5.i.i.i.i:                                 ; preds = %for.cond.i.i.9.i.i
  %dev.i.i.i.i = getelementptr inbounds i8, i8* %0, i64 2128
  %20 = bitcast i8* %dev.i.i.i.i to %struct.net_device**
  %21 = load %struct.net_device*, %struct.net_device** %20, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %21, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.109, i64 0, i64 0), i32 1, i32 10, i32 10) #9
  br label %if.end

for.cond.i.i.1.i.i:                               ; preds = %for.cond.i.i.i.i
  call void @msleep(i32 10) #9
  %22 = load i16, i16* %4, align 2
  %cmp.i.2.i.i = icmp eq i16 %22, 30
  %conv2.i.2.i.i = select i1 %cmp.i.2.i.i, i16 184, i16 16
  %call1.i.2.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.2.i.i) #9
  %and.i.2.i.i = and i32 %call1.i.2.i.i, 2048
  %tobool.i.2.i.i = icmp eq i32 %and.i.2.i.i, 0
  br i1 %tobool.i.2.i.i, label %if.end, label %for.cond.i.i.2.i.i

for.cond.i.i.2.i.i:                               ; preds = %for.cond.i.i.1.i.i
  call void @msleep(i32 10) #9
  %23 = load i16, i16* %4, align 2
  %cmp.i.3.i.i = icmp eq i16 %23, 30
  %conv2.i.3.i.i = select i1 %cmp.i.3.i.i, i16 184, i16 16
  %call1.i.3.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.3.i.i) #9
  %and.i.3.i.i = and i32 %call1.i.3.i.i, 2048
  %tobool.i.3.i.i = icmp eq i32 %and.i.3.i.i, 0
  br i1 %tobool.i.3.i.i, label %if.end, label %for.cond.i.i.3.i.i

for.cond.i.i.3.i.i:                               ; preds = %for.cond.i.i.2.i.i
  call void @msleep(i32 10) #9
  %24 = load i16, i16* %4, align 2
  %cmp.i.4.i.i = icmp eq i16 %24, 30
  %conv2.i.4.i.i = select i1 %cmp.i.4.i.i, i16 184, i16 16
  %call1.i.4.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.4.i.i) #9
  %and.i.4.i.i = and i32 %call1.i.4.i.i, 2048
  %tobool.i.4.i.i = icmp eq i32 %and.i.4.i.i, 0
  br i1 %tobool.i.4.i.i, label %if.end, label %for.cond.i.i.4.i.i

for.cond.i.i.4.i.i:                               ; preds = %for.cond.i.i.3.i.i
  call void @msleep(i32 10) #9
  %25 = load i16, i16* %4, align 2
  %cmp.i.5.i.i = icmp eq i16 %25, 30
  %conv2.i.5.i.i = select i1 %cmp.i.5.i.i, i16 184, i16 16
  %call1.i.5.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.5.i.i) #9
  %and.i.5.i.i = and i32 %call1.i.5.i.i, 2048
  %tobool.i.5.i.i = icmp eq i32 %and.i.5.i.i, 0
  br i1 %tobool.i.5.i.i, label %if.end, label %for.cond.i.i.5.i.i

for.cond.i.i.5.i.i:                               ; preds = %for.cond.i.i.4.i.i
  call void @msleep(i32 10) #9
  %26 = load i16, i16* %4, align 2
  %cmp.i.6.i.i = icmp eq i16 %26, 30
  %conv2.i.6.i.i = select i1 %cmp.i.6.i.i, i16 184, i16 16
  %call1.i.6.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.6.i.i) #9
  %and.i.6.i.i = and i32 %call1.i.6.i.i, 2048
  %tobool.i.6.i.i = icmp eq i32 %and.i.6.i.i, 0
  br i1 %tobool.i.6.i.i, label %if.end, label %for.cond.i.i.6.i.i

for.cond.i.i.6.i.i:                               ; preds = %for.cond.i.i.5.i.i
  call void @msleep(i32 10) #9
  %27 = load i16, i16* %4, align 2
  %cmp.i.7.i.i = icmp eq i16 %27, 30
  %conv2.i.7.i.i = select i1 %cmp.i.7.i.i, i16 184, i16 16
  %call1.i.7.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.7.i.i) #9
  %and.i.7.i.i = and i32 %call1.i.7.i.i, 2048
  %tobool.i.7.i.i = icmp eq i32 %and.i.7.i.i, 0
  br i1 %tobool.i.7.i.i, label %if.end, label %for.cond.i.i.7.i.i

for.cond.i.i.7.i.i:                               ; preds = %for.cond.i.i.6.i.i
  call void @msleep(i32 10) #9
  %28 = load i16, i16* %4, align 2
  %cmp.i.8.i.i = icmp eq i16 %28, 30
  %conv2.i.8.i.i = select i1 %cmp.i.8.i.i, i16 184, i16 16
  %call1.i.8.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.8.i.i) #9
  %and.i.8.i.i = and i32 %call1.i.8.i.i, 2048
  %tobool.i.8.i.i = icmp eq i32 %and.i.8.i.i, 0
  br i1 %tobool.i.8.i.i, label %if.end, label %for.cond.i.i.8.i.i

for.cond.i.i.8.i.i:                               ; preds = %for.cond.i.i.7.i.i
  call void @msleep(i32 10) #9
  %29 = load i16, i16* %4, align 2
  %cmp.i.9.i.i = icmp eq i16 %29, 30
  %conv2.i.9.i.i = select i1 %cmp.i.9.i.i, i16 184, i16 16
  %call1.i.9.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext %conv2.i.9.i.i) #9
  %and.i.9.i.i = and i32 %call1.i.9.i.i, 2048
  %tobool.i.9.i.i = icmp eq i32 %and.i.9.i.i, 0
  br i1 %tobool.i.9.i.i, label %if.end, label %for.cond.i.i.9.i.i

for.cond.i.i.9.i.i:                               ; preds = %for.cond.i.i.8.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds i8, i8* %0, i64 2336
  %30 = bitcast i8* %msg_enable.i.i.i.i to i32*
  %31 = load i32, i32* %30, align 8
  %and.i.i.i.i = and i32 %31, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %if.end, label %if.then5.i.i.i.i

sw.bb1.i62:                                       ; preds = %if.then, %if.then, %if.then
  call fastcc void @rtl8168ep_stop_cmac(%struct.rtl8169_private* nonnull %3) #9
  call fastcc void @ocp_write(%struct.rtl8169_private* nonnull %3, i16 zeroext 384, i32 6) #9
  %call.i.i61 = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 1, i16 zeroext 48) #9
  %or.i.i = or i32 %call.i.i61, 1
  call fastcc void @ocp_write(%struct.rtl8169_private* nonnull %3, i16 zeroext 48, i32 %or.i.i) #9
  call void @msleep(i32 10) #9
  %call.i.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.i7.i = and i32 %call.i.i.i, 1
  %tobool.i.i8.i = icmp eq i32 %and.i.i7.i, 0
  br i1 %tobool.i.i8.i, label %if.end, label %for.cond.i.i.i11.i

for.cond.i.i.i11.i:                               ; preds = %sw.bb1.i62
  call void @msleep(i32 10) #9
  %call.i.1.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.1.i9.i = and i32 %call.i.1.i.i, 1
  %tobool.i.1.i10.i = icmp eq i32 %and.i.1.i9.i, 0
  br i1 %tobool.i.1.i10.i, label %if.end, label %for.cond.i.i.1.i16.i

if.then5.i.i.i13.i:                               ; preds = %for.cond.i.i.9.i41.i
  %dev.i.i.i12.i = getelementptr inbounds i8, i8* %0, i64 2128
  %32 = bitcast i8* %dev.i.i.i12.i to %struct.net_device**
  %33 = load %struct.net_device*, %struct.net_device** %32, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %33, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.110, i64 0, i64 0), i32 1, i32 10, i32 10) #9
  br label %if.end

for.cond.i.i.1.i16.i:                             ; preds = %for.cond.i.i.i11.i
  call void @msleep(i32 10) #9
  %call.i.2.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.2.i14.i = and i32 %call.i.2.i.i, 1
  %tobool.i.2.i15.i = icmp eq i32 %and.i.2.i14.i, 0
  br i1 %tobool.i.2.i15.i, label %if.end, label %for.cond.i.i.2.i19.i

for.cond.i.i.2.i19.i:                             ; preds = %for.cond.i.i.1.i16.i
  call void @msleep(i32 10) #9
  %call.i.3.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.3.i17.i = and i32 %call.i.3.i.i, 1
  %tobool.i.3.i18.i = icmp eq i32 %and.i.3.i17.i, 0
  br i1 %tobool.i.3.i18.i, label %if.end, label %for.cond.i.i.3.i22.i

for.cond.i.i.3.i22.i:                             ; preds = %for.cond.i.i.2.i19.i
  call void @msleep(i32 10) #9
  %call.i.4.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.4.i20.i = and i32 %call.i.4.i.i, 1
  %tobool.i.4.i21.i = icmp eq i32 %and.i.4.i20.i, 0
  br i1 %tobool.i.4.i21.i, label %if.end, label %for.cond.i.i.4.i25.i

for.cond.i.i.4.i25.i:                             ; preds = %for.cond.i.i.3.i22.i
  call void @msleep(i32 10) #9
  %call.i.5.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.5.i23.i = and i32 %call.i.5.i.i, 1
  %tobool.i.5.i24.i = icmp eq i32 %and.i.5.i23.i, 0
  br i1 %tobool.i.5.i24.i, label %if.end, label %for.cond.i.i.5.i28.i

for.cond.i.i.5.i28.i:                             ; preds = %for.cond.i.i.4.i25.i
  call void @msleep(i32 10) #9
  %call.i.6.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.6.i26.i = and i32 %call.i.6.i.i, 1
  %tobool.i.6.i27.i = icmp eq i32 %and.i.6.i26.i, 0
  br i1 %tobool.i.6.i27.i, label %if.end, label %for.cond.i.i.6.i31.i

for.cond.i.i.6.i31.i:                             ; preds = %for.cond.i.i.5.i28.i
  call void @msleep(i32 10) #9
  %call.i.7.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.7.i29.i = and i32 %call.i.7.i.i, 1
  %tobool.i.7.i30.i = icmp eq i32 %and.i.7.i29.i, 0
  br i1 %tobool.i.7.i30.i, label %if.end, label %for.cond.i.i.7.i34.i

for.cond.i.i.7.i34.i:                             ; preds = %for.cond.i.i.6.i31.i
  call void @msleep(i32 10) #9
  %call.i.8.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.8.i32.i = and i32 %call.i.8.i.i, 1
  %tobool.i.8.i33.i = icmp eq i32 %and.i.8.i32.i, 0
  br i1 %tobool.i.8.i33.i, label %if.end, label %for.cond.i.i.8.i37.i

for.cond.i.i.8.i37.i:                             ; preds = %for.cond.i.i.7.i34.i
  call void @msleep(i32 10) #9
  %call.i.9.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %3, i8 zeroext 15, i16 zeroext 292) #9
  %and.i.9.i35.i = and i32 %call.i.9.i.i, 1
  %tobool.i.9.i36.i = icmp eq i32 %and.i.9.i35.i, 0
  br i1 %tobool.i.9.i36.i, label %if.end, label %for.cond.i.i.9.i41.i

for.cond.i.i.9.i41.i:                             ; preds = %for.cond.i.i.8.i37.i
  %msg_enable.i.i.i38.i = getelementptr inbounds i8, i8* %0, i64 2336
  %34 = bitcast i8* %msg_enable.i.i.i38.i to i32*
  %35 = load i32, i32* %34, align 8
  %and.i.i.i39.i = and i32 %35, 1
  %tobool4.i.i.i40.i = icmp eq i32 %and.i.i.i39.i, 0
  br i1 %tobool4.i.i.i40.i, label %if.end, label %if.then5.i.i.i13.i

do.body.i:                                        ; preds = %if.then
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 1463, i64 12) #10, !srcloc !17
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i, %do.body.i
  br label %do.body2.i

if.end:                                           ; preds = %entry, %for.cond.i.i.9.i41.i, %for.cond.i.i.8.i37.i, %for.cond.i.i.7.i34.i, %for.cond.i.i.6.i31.i, %for.cond.i.i.5.i28.i, %for.cond.i.i.4.i25.i, %for.cond.i.i.3.i22.i, %for.cond.i.i.2.i19.i, %for.cond.i.i.1.i16.i, %if.then5.i.i.i13.i, %for.cond.i.i.i11.i, %sw.bb1.i62, %for.cond.i.i.9.i.i, %for.cond.i.i.8.i.i, %for.cond.i.i.7.i.i, %for.cond.i.i.6.i.i, %for.cond.i.i.5.i.i, %for.cond.i.i.4.i.i, %for.cond.i.i.3.i.i, %for.cond.i.i.2.i.i, %for.cond.i.i.1.i.i, %if.then5.i.i.i.i, %for.cond.i.i.i.i, %rtl8168_oob_notify.exit.i.i, %r8168_check_dash.exit
  %napi = getelementptr inbounds i8, i8* %0, i64 2136
  %36 = bitcast i8* %napi to %struct.napi_struct*
  call void @netif_napi_del(%struct.napi_struct* %36) #9
  call void @unregister_netdev(%struct.net_device* %1) #9
  %pci_dev = getelementptr inbounds i8, i8* %0, i64 2120
  %37 = bitcast i8* %pci_dev to %struct.pci_dev**
  %38 = load %struct.pci_dev*, %struct.pci_dev** %37, align 8
  %dev28 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %38, i64 0, i32 35
  %counters = getelementptr inbounds i8, i8* %0, i64 5856
  %39 = bitcast i8* %counters to i8**
  %40 = load i8*, i8** %39, align 8
  %counters_phys_addr = getelementptr inbounds i8, i8* %0, i64 5848
  %41 = bitcast i8* %counters_phys_addr to i64*
  %42 = load i64, i64* %41, align 8
  %dma_ops.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %38, i64 0, i32 35, i32 22, i32 0
  %43 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i, align 8
  %tobool4.i.i.i = icmp eq %struct.dma_map_ops* %43, null
  br i1 %tobool4.i.i.i, label %get_dma_ops.exit.i.i, label %do.end9.i.i

get_dma_ops.exit.i.i:                             ; preds = %if.end
  %44 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %tobool.i.i = icmp eq %struct.dma_map_ops* %44, null
  br i1 %tobool.i.i, label %do.body4.i.i, label %do.end9.i.i, !prof !10

do.body4.i.i:                                     ; preds = %get_dma_ops.exit.i.i
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 273, i64 12) #10, !srcloc !15
  br label %do.body5.i.i

do.body5.i.i:                                     ; preds = %do.body5.i.i, %do.body4.i.i
  br label %do.body5.i.i

do.end9.i.i:                                      ; preds = %get_dma_ops.exit.i.i, %if.end
  %retval.0.i2.i.i = phi %struct.dma_map_ops* [ %44, %get_dma_ops.exit.i.i ], [ %43, %if.end ]
  %45 = call i64 asm sideeffect "771:\0A\09call *${2:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${1:c}\0A  .byte 772b-771b\0A  .short ${3:c}\0A.popsection\0A", "={ax},i,i,i,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i64 40, i8** getelementptr inbounds (%struct.pv_irq_ops, %struct.pv_irq_ops* @pv_irq_ops, i64 0, i32 0, i32 0), i32 1) #10, !srcloc !16
  %46 = and i64 %45, 512
  %tobool23.i.i = icmp eq i64 %46, 0
  br i1 %tobool23.i.i, label %if.then36.i.i, label %if.end37.i.i, !prof !10

if.then36.i.i:                                    ; preds = %do.end9.i.i
  call void @warn_slowpath_null(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 274) #9
  br label %if.end37.i.i

if.end37.i.i:                                     ; preds = %if.then36.i.i, %do.end9.i.i
  %free.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i2.i.i, i64 0, i32 1
  %47 = load void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)** %free.i.i, align 8
  %tobool46.i.i = icmp eq void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)* %47, null
  br i1 %tobool46.i.i, label %dma_free_coherent.exit, label %if.end48.i.i

if.end48.i.i:                                     ; preds = %if.end37.i.i
  call void %47(%struct.device* %dev28, i64 64, i8* %40, i64 %42, %struct.dma_attrs* null) #9
  br label %dma_free_coherent.exit

dma_free_coherent.exit:                           ; preds = %if.end37.i.i, %if.end48.i.i
  %rtl_fw.i = getelementptr inbounds i8, i8* %0, i64 5896
  %48 = bitcast i8* %rtl_fw.i to %struct.rtl_fw**
  %49 = bitcast i8* %rtl_fw.i to i8**
  %50 = load i8*, i8** %49, align 8
  %tobool.i.i63 = icmp eq i8* %50, null
  %cmp.i.i = icmp ugt i8* %50, inttoptr (i64 -4096 to i8*)
  %.cmp.i.i = or i1 %tobool.i.i63, %cmp.i.i
  br i1 %.cmp.i.i, label %rtl_release_firmware.exit, label %if.then.i

if.then.i:                                        ; preds = %dma_free_coherent.exit
  %fw.i = bitcast i8* %50 to %struct.firmware**
  %51 = load %struct.firmware*, %struct.firmware** %fw.i, align 8
  call void @release_firmware(%struct.firmware* %51) #9
  %52 = load i8*, i8** %49, align 8
  call void @kfree(i8* %52) #9
  br label %rtl_release_firmware.exit

rtl_release_firmware.exit:                        ; preds = %dma_free_coherent.exit, %if.then.i
  store %struct.rtl_fw* inttoptr (i64 -11 to %struct.rtl_fw*), %struct.rtl_fw** %48, align 8
  %call29 = call zeroext i1 @pci_dev_run_wake(%struct.pci_dev* %pdev) #9
  br i1 %call29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %rtl_release_firmware.exit
  %counter.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35, i32 10, i32 12, i32 0
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; incl $0", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %counter.i.i, i32* %counter.i.i) #10, !srcloc !18
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %rtl_release_firmware.exit
  %perm_addr = getelementptr inbounds i8, i8* %0, i64 574
  call fastcc void @rtl_rar_set(%struct.rtl8169_private* nonnull %3, i8* %perm_addr) #11
  %features.i = getelementptr inbounds i8, i8* %0, i64 5792
  %53 = bitcast i8* %features.i to i32*
  %54 = load i32, i32* %53, align 8
  %and.i = and i32 %54, 2
  %tobool.i = icmp eq i32 %and.i, 0
  br i1 %tobool.i, label %rtl_disable_msi.exit, label %if.then.i64

if.then.i64:                                      ; preds = %if.end32
  call void @pci_disable_msi(%struct.pci_dev* %pdev) #9
  %55 = load i32, i32* %53, align 8
  %and2.i = and i32 %55, -3
  store i32 %and2.i, i32* %53, align 8
  br label %rtl_disable_msi.exit

rtl_disable_msi.exit:                             ; preds = %if.end32, %if.then.i64
  %mmio_addr = bitcast i8* %2 to i8**
  %56 = load i8*, i8** %mmio_addr, align 8
  call void @iounmap(i8* %56) #9
  call void @pci_release_regions(%struct.pci_dev* %pdev) #9
  call void @pci_clear_mwi(%struct.pci_dev* %pdev) #9
  call void @pci_disable_device(%struct.pci_dev* %pdev) #9
  call void @free_netdev(%struct.net_device* nonnull %1) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_shutdown(%struct.pci_dev* %pdev) #0 {
entry:
  %driver_data.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35, i32 9
  %0 = load i8*, i8** %driver_data.i.i, align 8
  %1 = getelementptr i8, i8* %0, i64 2112
  %2 = bitcast i8* %1 to %struct.rtl8169_private*
  %dev2 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35
  %call.i = call i32 @__pm_runtime_resume(%struct.device* %dev2, i32 4) #9
  %state.i.i = getelementptr inbounds i8, i8* %0, i64 72
  %3 = bitcast i8* %state.i.i to i64*
  %4 = load volatile i64, i64* %3, align 8
  %and1.i.i.i = and i64 %4, 1
  %cmp.i.i.i23 = icmp eq i64 %and1.i.i.i, 0
  br i1 %cmp.i.i.i23, label %rtl8169_net_suspend.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %5 = bitcast i8* %0 to %struct.net_device*
  call void @netif_device_detach(%struct.net_device* nonnull %5) #9
  %_tx.i.i.i = getelementptr inbounds i8, i8* %0, i64 960
  %6 = bitcast i8* %_tx.i.i.i to %struct.netdev_queue**
  %7 = load %struct.netdev_queue*, %struct.netdev_queue** %6, align 64
  %state.i.i.i = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %7, i64 0, i32 10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %state.i.i.i, i64 0, i64* %state.i.i.i) #10, !srcloc !19
  %8 = getelementptr i8, i8* %0, i64 5720
  %9 = bitcast i8* %8 to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %9) #9
  %10 = getelementptr i8, i8* %0, i64 2136
  %11 = bitcast i8* %10 to %struct.napi_struct*
  call void @napi_disable(%struct.napi_struct* %11) #9
  %12 = getelementptr i8, i8* %0, i64 5712
  %arraydecay.i = bitcast i8* %12 to i64*
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay.i, i64 0, i64* %arraydecay.i) #10, !srcloc !20
  call void @mutex_unlock(%struct.mutex* %9) #9
  %13 = getelementptr i8, i8* %0, i64 5600
  %14 = bitcast i8* %13 to void (%struct.rtl8169_private*)**
  %15 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %14, align 8
  %tobool.i.i.i = icmp eq void (%struct.rtl8169_private*)* %15, null
  br i1 %tobool.i.i.i, label %rtl8169_net_suspend.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.end.i
  call void %15(%struct.rtl8169_private* nonnull %2) #9
  br label %rtl8169_net_suspend.exit

rtl8169_net_suspend.exit:                         ; preds = %entry, %if.end.i, %if.then.i.i.i
  %perm_addr = getelementptr inbounds i8, i8* %0, i64 574
  call fastcc void @rtl_rar_set(%struct.rtl8169_private* %2, i8* %perm_addr) #11
  call fastcc void @rtl8169_hw_reset(%struct.rtl8169_private* %2) #11
  %16 = load i32, i32* @system_state, align 4
  %cmp = icmp eq i32 %16, 3
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %rtl8169_net_suspend.exit
  %mmio_addr.i24 = bitcast i8* %1 to i8**
  %17 = load i8*, i8** %mmio_addr.i24, align 8
  %add.ptr.i25 = getelementptr i8, i8* %17, i64 82
  %18 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i25) #10, !srcloc !6
  %19 = and i8 %18, 1
  %tobool.i = icmp eq i8 %19, 0
  br i1 %tobool.i, label %if.end, label %if.end.i27

if.end.i27:                                       ; preds = %if.then
  %add.ptr1.i = getelementptr i8, i8* %17, i64 84
  %20 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1.i) #10, !srcloc !6
  %conv3.i = zext i8 %20 to i32
  %and4.i = lshr i32 %conv3.i, 4
  %and4.lobit.i = and i32 %and4.i, 1
  %mac_version.i26 = getelementptr inbounds i8, i8* %0, i64 2342
  %21 = bitcast i8* %mac_version.i26 to i16*
  %22 = load i16, i16* %21, align 2
  switch i16 %22, label %sw.default.i [
    i16 33, label %sw.bb.i28
    i16 34, label %sw.bb.i28
    i16 35, label %sw.bb.i28
    i16 36, label %sw.bb.i28
    i16 37, label %sw.bb.i28
    i16 39, label %sw.bb.i28
    i16 40, label %sw.bb.i28
    i16 41, label %sw.bb.i28
    i16 42, label %sw.bb.i28
    i16 43, label %sw.bb.i28
    i16 44, label %sw.bb.i28
    i16 45, label %sw.bb.i28
    i16 46, label %sw.bb.i28
    i16 47, label %sw.bb.i28
    i16 48, label %sw.bb.i28
    i16 49, label %sw.bb.i28
    i16 50, label %sw.bb.i28
  ]

sw.bb.i28:                                        ; preds = %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27, %if.end.i27
  %23 = load i8*, i8** %mmio_addr.i24, align 8
  %add.ptr.i35 = getelementptr i8, i8* %23, i64 116
  %24 = bitcast i8* %add.ptr.i35 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %24) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i36 = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i36, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %sw.bb.i28
  %i.017.i.i.i = phi i32 [ 0, %sw.bb.i28 ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %25 = load i8*, i8** %mmio_addr.i24, align 8
  %add.ptr.i.i37 = getelementptr i8, i8* %25, i64 116
  %26 = bitcast i8* %add.ptr.i.i37 to i32*
  %27 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %26) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %27, 0
  br i1 %tobool.i.i, label %cond.true.i, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds i8, i8* %0, i64 2336
  %28 = bitcast i8* %msg_enable.i.i.i to i32*
  %29 = load i32, i32* %28, align 8
  %and.i.i.i = and i32 %29, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %__rtl8169_get_wol.exit.thread, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds i8, i8* %0, i64 2128
  %30 = bitcast i8* %dev.i.i.i to %struct.net_device**
  %31 = load %struct.net_device*, %struct.net_device** %30, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %31, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %__rtl8169_get_wol.exit.thread

cond.true.i:                                      ; preds = %for.body.i.i.i
  %add.ptr3.i = getelementptr i8, i8* %23, i64 112
  %32 = bitcast i8* %add.ptr3.i to i32*
  %33 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %32) #10, !srcloc !2
  %phitmp = and i32 %33, 65536
  br label %__rtl8169_get_wol.exit

sw.default.i:                                     ; preds = %if.end.i27
  %and16.i = and i32 %conv3.i, 32
  br label %__rtl8169_get_wol.exit

__rtl8169_get_wol.exit.thread:                    ; preds = %do.body.i.i.i, %if.then5.i.i.i
  %or19.i41 = or i32 %and4.lobit.i, 32
  br label %34

__rtl8169_get_wol.exit:                           ; preds = %cond.true.i, %sw.default.i
  %and16.sink.i = phi i32 [ %and16.i, %sw.default.i ], [ %phitmp, %cond.true.i ]
  %tobool17.i = icmp eq i32 %and16.sink.i, 0
  %or19.i = or i32 %and4.lobit.i, 32
  %and4.lobit.i.or19.i = select i1 %tobool17.i, i32 %and4.lobit.i, i32 %or19.i
  br label %34

; <label>:34:                                     ; preds = %__rtl8169_get_wol.exit, %__rtl8169_get_wol.exit.thread
  %35 = phi i32 [ %or19.i41, %__rtl8169_get_wol.exit.thread ], [ %and4.lobit.i.or19.i, %__rtl8169_get_wol.exit ]
  %add.ptr21.i = getelementptr i8, i8* %17, i64 86
  %36 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr21.i) #10, !srcloc !6
  %conv23.i = zext i8 %36 to i32
  %and24.i = lshr i32 %conv23.i, 3
  %37 = and i32 %and24.i, 2
  %38 = or i32 %37, %35
  %39 = and i32 %and24.i, 8
  %40 = or i32 %38, %39
  %41 = and i32 %and24.i, 4
  %and = or i32 %40, %41
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then5

if.then5:                                         ; preds = %34
  %42 = load i16, i16* %21, align 2
  switch i16 %42, label %rtl_wol_suspend_quirk.exit [
    i16 24, label %sw.bb.i32
    i16 25, label %sw.bb.i32
    i16 28, label %sw.bb.i32
    i16 29, label %sw.bb.i32
    i16 31, label %sw.bb.i32
    i16 32, label %sw.bb.i32
    i16 33, label %sw.bb.i32
    i16 36, label %sw.bb.i32
    i16 37, label %sw.bb.i32
    i16 38, label %sw.bb.i32
    i16 39, label %sw.bb.i32
    i16 40, label %sw.bb.i32
    i16 41, label %sw.bb.i32
    i16 42, label %sw.bb.i32
    i16 43, label %sw.bb.i32
    i16 44, label %sw.bb.i32
    i16 45, label %sw.bb.i32
    i16 46, label %sw.bb.i32
    i16 47, label %sw.bb.i32
    i16 48, label %sw.bb.i32
    i16 49, label %sw.bb.i32
    i16 50, label %sw.bb.i32
  ]

sw.bb.i32:                                        ; preds = %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5, %if.then5
  %43 = load i8*, i8** %mmio_addr.i24, align 8
  %add.ptr.i31 = getelementptr i8, i8* %43, i64 68
  %44 = bitcast i8* %add.ptr.i31 to i32*
  %45 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %44) #10, !srcloc !2
  %or2.i = or i32 %45, 14
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i, i32* %44) #10, !srcloc !8
  %.pr = load i16, i16* %21, align 2
  br label %rtl_wol_suspend_quirk.exit

rtl_wol_suspend_quirk.exit:                       ; preds = %if.then5, %sw.bb.i32
  %46 = phi i16 [ %42, %if.then5 ], [ %.pr, %sw.bb.i32 ]
  switch i16 %46, label %if.end [
    i16 10, label %sw.bb.i
    i16 11, label %sw.bb.i
    i16 16, label %sw.bb.i
  ]

sw.bb.i:                                          ; preds = %rtl_wol_suspend_quirk.exit, %rtl_wol_suspend_quirk.exit, %rtl_wol_suspend_quirk.exit
  %47 = load i8*, i8** %mmio_addr.i24, align 8
  %pci_dev.i = getelementptr inbounds i8, i8* %0, i64 2120
  %48 = bitcast i8* %pci_dev.i to %struct.pci_dev**
  %49 = load %struct.pci_dev*, %struct.pci_dev** %48, align 8
  call void @pci_clear_master(%struct.pci_dev* %49) #9
  %add.ptr.i22 = getelementptr i8, i8* %47, i64 55
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 8, i8* %add.ptr.i22) #10, !srcloc !5
  %50 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i22) #10, !srcloc !6
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb.i, %rtl_wol_suspend_quirk.exit, %34
  %call6 = call i32 @pci_wake_from_d3(%struct.pci_dev* %pdev, i1 zeroext true) #9
  %call7 = call i32 @pci_set_power_state(%struct.pci_dev* %pdev, i32 3) #9
  br label %if.end8

if.end8:                                          ; preds = %if.end, %rtl8169_net_suspend.exit
  %51 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %pdev, i64 0, i32 35, i32 10, i32 12, i32 0
  %52 = load volatile i32, i32* %51, align 4
  %cmp1.i.i.i = icmp eq i32 %52, 0
  br i1 %cmp1.i.i.i, label %pm_runtime_put_noidle.exit, label %if.end.i.i.i.preheader, !prof !10

if.end.i.i.i.preheader:                           ; preds = %if.end8
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.end.i.i.i.preheader, %if.end.i.i.i
  %c.02.i.i.i = phi i32 [ %53, %if.end.i.i.i ], [ %52, %if.end.i.i.i.preheader ]
  %add.i.i.i = add i32 %c.02.i.i.i, -1
  %53 = call i32 asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; cmpxchgl $2,$1", "={ax},=*m,r,0,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %51, i32 %add.i.i.i, i32 %c.02.i.i.i, i32* %51) #10, !srcloc !13
  %cmp3.i.i.i = icmp eq i32 %53, %c.02.i.i.i
  %cmp.i.i.i = icmp eq i32 %53, 0
  %or.cond.i.i = or i1 %cmp3.i.i.i, %cmp.i.i.i
  br i1 %or.cond.i.i, label %pm_runtime_put_noidle.exit, label %if.end.i.i.i, !prof !14

pm_runtime_put_noidle.exit:                       ; preds = %if.end.i.i.i, %if.end8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: noredzone
declare i32 @printk(i8*, ...) local_unnamed_addr #1

; Function Attrs: noredzone
declare %struct.net_device* @alloc_etherdev_mqs(i32, i32, i32) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl_mdio_read(%struct.net_device* %dev, i32 %phy_id, i32 %location) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %read.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %1 = bitcast i8* %read.i to i32 (%struct.rtl8169_private*, i32)**
  %2 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %1, align 8
  %call.i = call i32 %2(%struct.rtl8169_private* %0, i32 %location) #9
  ret i32 %call.i
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_mdio_write(%struct.net_device* %dev, i32 %phy_id, i32 %location, i32 %val) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %write.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %1 = bitcast i8* %write.i to void (%struct.rtl8169_private*, i32, i32)**
  %2 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %1, align 8
  call void %2(%struct.rtl8169_private* %0, i32 %location, i32 %val) #9
  ret void
}

; Function Attrs: noredzone
declare void @pci_disable_link_state(%struct.pci_dev*, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @pci_enable_device(%struct.pci_dev*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @netdev_err(%struct.net_device*, i8*, ...) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @pci_set_mwi(%struct.pci_dev*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @netdev_info(%struct.net_device*, i8*, ...) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @pci_request_regions(%struct.pci_dev*, i8*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_init_rxcfg(%struct.rtl8169_private* nocapture readonly %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %1 = load i16, i16* %mac_version, align 2
  switch i16 %1, label %sw.default [
    i16 0, label %sw.bb
    i16 1, label %sw.bb
    i16 2, label %sw.bb
    i16 3, label %sw.bb
    i16 4, label %sw.bb
    i16 5, label %sw.bb
    i16 9, label %sw.bb
    i16 10, label %sw.bb
    i16 11, label %sw.bb
    i16 12, label %sw.bb
    i16 13, label %sw.bb
    i16 14, label %sw.bb
    i16 15, label %sw.bb
    i16 16, label %sw.bb
    i16 17, label %sw.bb1
    i16 18, label %sw.bb1
    i16 19, label %sw.bb1
    i16 20, label %sw.bb1
    i16 21, label %sw.bb1
    i16 22, label %sw.bb1
    i16 23, label %sw.bb1
    i16 33, label %sw.bb1
    i16 34, label %sw.bb1
    i16 39, label %sw.bb3
    i16 40, label %sw.bb5
    i16 41, label %sw.bb5
    i16 42, label %sw.bb5
    i16 43, label %sw.bb5
    i16 44, label %sw.bb5
    i16 45, label %sw.bb5
    i16 46, label %sw.bb5
    i16 47, label %sw.bb5
    i16 48, label %sw.bb7
    i16 49, label %sw.bb7
    i16 50, label %sw.bb7
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %add.ptr = getelementptr i8, i8* %0, i64 68
  %2 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 59136, i32* %2) #10, !srcloc !8
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %add.ptr2 = getelementptr i8, i8* %0, i64 68
  %3 = bitcast i8* %add.ptr2 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 50944, i32* %3) #10, !srcloc !8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %add.ptr4 = getelementptr i8, i8* %0, i64 68
  %4 = bitcast i8* %add.ptr4 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 52992, i32* %4) #10, !srcloc !8
  br label %sw.epilog

sw.bb5:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %add.ptr6 = getelementptr i8, i8* %0, i64 68
  %5 = bitcast i8* %add.ptr6 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 36608, i32* %5) #10, !srcloc !8
  br label %sw.epilog

sw.bb7:                                           ; preds = %entry, %entry, %entry
  %add.ptr8 = getelementptr i8, i8* %0, i64 68
  %6 = bitcast i8* %add.ptr8 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 52992, i32* %6) #10, !srcloc !8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %add.ptr9 = getelementptr i8, i8* %0, i64 68
  %7 = bitcast i8* %add.ptr9 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 34560, i32* %7) #10, !srcloc !8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb7, %sw.bb5, %sw.bb3, %sw.bb1, %sw.bb
  ret void
}

; Function Attrs: noredzone
declare void @pci_set_master(%struct.pci_dev*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_set_speed_tbi(%struct.net_device* %dev, i8 zeroext %autoneg, i16 zeroext %speed, i8 zeroext %duplex, i32 %ignored) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 100
  %1 = bitcast i8* %add.ptr to i32*
  %2 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %cmp = icmp eq i8 %autoneg, 0
  %cmp4 = icmp eq i16 %speed, 1000
  %or.cond = and i1 %cmp, %cmp4
  %cmp8 = icmp eq i8 %duplex, 1
  %or.cond32 = and i1 %or.cond, %cmp8
  br i1 %or.cond32, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %and = and i32 %2, -805306369
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and, i32* %1) #10, !srcloc !8
  br label %if.end21

if.else:                                          ; preds = %entry
  %cmp12 = icmp eq i8 %autoneg, 1
  br i1 %cmp12, label %if.then14, label %do.body

if.then14:                                        ; preds = %if.else
  %or15 = or i32 %2, 805306368
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or15, i32* %1) #10, !srcloc !8
  br label %if.end21

do.body:                                          ; preds = %if.else
  %msg_enable = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %3 = bitcast i8* %msg_enable to i32*
  %4 = load i32, i32* %3, align 8
  %and18 = and i32 %4, 4
  %tobool = icmp eq i32 %and18, 0
  br i1 %tobool, label %if.end21, label %if.then19

if.then19:                                        ; preds = %do.body
  call void (%struct.net_device*, i8*, ...) @netdev_warn(%struct.net_device* nonnull %dev, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.101, i64 0, i64 0)) #9
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %do.body, %if.then14, %if.then
  %ret.0 = phi i32 [ 0, %if.then ], [ 0, %if.then14 ], [ -95, %do.body ], [ -95, %if.then19 ]
  ret i32 %ret.0
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_gset_tbi(%struct.net_device* nocapture readonly %dev, %struct.ethtool_cmd* nocapture %cmd) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %0 = load i8*, i8** %mmio_addr, align 8
  %supported = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 1
  store i32 1120, i32* %supported, align 4
  %port = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 5
  store i8 3, i8* %port, align 1
  %transceiver = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 7
  store i8 0, i8* %transceiver, align 1
  %add.ptr = getelementptr i8, i8* %0, i64 100
  %1 = bitcast i8* %add.ptr to i32*
  %2 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %and = and i32 %2, 536870912
  %3 = lshr exact i32 %and, 23
  %advertising = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 2
  store i32 %3, i32* %advertising, align 4
  %and.lobit = lshr exact i32 %and, 29
  %4 = trunc i32 %and.lobit to i8
  %autoneg = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 8
  store i8 %4, i8* %autoneg, align 2
  %speed1.i = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 3
  store i16 1000, i16* %speed1.i, align 4
  %speed_hi.i = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 12
  store i16 0, i16* %speed_hi.i, align 4
  %duplex = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 4
  store i8 1, i8* %duplex, align 2
  ret i32 0
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_tbi_reset_enable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 100
  %1 = bitcast i8* %add.ptr to i32*
  %2 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %or = or i32 %2, -2147483648
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or, i32* %1) #10, !srcloc !8
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_tbi_reset_pending(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 100
  %1 = bitcast i8* %add.ptr to i32*
  %2 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %and = and i32 %2, -2147483648
  ret i32 %and
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_tbi_link_ok(i8* %ioaddr) #0 {
entry:
  %add.ptr = getelementptr i8, i8* %ioaddr, i64 100
  %0 = bitcast i8* %add.ptr to i32*
  %1 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %0) #10, !srcloc !2
  %and = and i32 %1, 33554432
  ret i32 %and
}

; Function Attrs: norecurse noredzone nounwind readnone sspstrong
define internal i32 @rtl_tbi_ioctl(%struct.rtl8169_private* nocapture readnone %tp, %struct.mii_ioctl_data* nocapture readnone %data, i32 %cmd) #3 {
entry:
  ret i32 -95
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_set_speed_xmii(%struct.net_device* %dev, i8 zeroext %autoneg, i16 zeroext %speed, i8 zeroext %duplex, i32 %adv) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %write.i132 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %1 = bitcast i8* %write.i132 to void (%struct.rtl8169_private*, i32, i32)**
  %2 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %1, align 8
  call void %2(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %cmp = icmp eq i8 %autoneg, 1
  br i1 %cmp, label %if.then, label %if.else51

if.then:                                          ; preds = %entry
  %read.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %3 = bitcast i8* %read.i to i32 (%struct.rtl8169_private*, i32)**
  %4 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %3, align 8
  %call.i = call i32 %4(%struct.rtl8169_private* %0, i32 4) #9
  %and = and i32 %call.i, -3553
  %and4 = shl i32 %adv, 5
  %5 = and i32 %and4, 480
  %6 = or i32 %5, %and
  %or24 = or i32 %6, 3072
  %7 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %3, align 8
  %call.i134 = call i32 %7(%struct.rtl8169_private* %0, i32 9) #9
  %and26 = and i32 %call.i134, -769
  %8 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5816
  %bf.load = load i8, i8* %8, align 8
  %bf.clear = and i8 %bf.load, 4
  %tobool27 = icmp eq i8 %bf.clear, 0
  br i1 %tobool27, label %if.else, label %if.then28

if.then28:                                        ; preds = %if.then
  %and30 = shl i32 %adv, 4
  %9 = and i32 %and30, 768
  %10 = or i32 %9, %and26
  br label %cleanup

if.else:                                          ; preds = %if.then
  %11 = and i32 %adv, 48
  %tobool43 = icmp eq i32 %11, 0
  br i1 %tobool43, label %cleanup, label %do.body

do.body:                                          ; preds = %if.else
  %msg_enable = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %12 = bitcast i8* %msg_enable to i32*
  %13 = load i32, i32* %12, align 8
  %and45 = and i32 %13, 4
  %tobool46 = icmp eq i32 %and45, 0
  br i1 %tobool46, label %cleanup89, label %if.then47

if.then47:                                        ; preds = %do.body
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* nonnull %dev, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.102, i64 0, i64 0)) #9
  br label %cleanup89

cleanup:                                          ; preds = %if.else, %if.then28
  %giga_ctrl.1 = phi i32 [ %and26, %if.else ], [ %10, %if.then28 ]
  %14 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %1, align 8
  call void %14(%struct.rtl8169_private* nonnull %0, i32 4, i32 %or24) #9
  %15 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %1, align 8
  call void %15(%struct.rtl8169_private* nonnull %0, i32 9, i32 %giga_ctrl.1) #9
  br label %if.end70

if.else51:                                        ; preds = %entry
  switch i16 %speed, label %cleanup89 [
    i16 10, label %if.end63
    i16 100, label %if.then60
  ]

if.then60:                                        ; preds = %if.else51
  br label %if.end63

if.end63:                                         ; preds = %if.else51, %if.then60
  %bmcr.1 = phi i32 [ 8192, %if.then60 ], [ 0, %if.else51 ]
  %cmp65 = icmp eq i8 %duplex, 1
  %or68 = or i32 %bmcr.1, 256
  %or68.bmcr.1 = select i1 %cmp65, i32 %or68, i32 %bmcr.1
  br label %if.end70

if.end70:                                         ; preds = %cleanup, %if.end63
  %bmcr.2 = phi i32 [ 4608, %cleanup ], [ %or68.bmcr.1, %if.end63 ]
  %16 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %1, align 8
  call void %16(%struct.rtl8169_private* %0, i32 0, i32 %bmcr.2) #9
  %mac_version = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %17 = bitcast i8* %mac_version to i16*
  %18 = load i16, i16* %17, align 2
  %.off = add i16 %18, -1
  %switch131 = icmp ult i16 %.off, 2
  br i1 %switch131, label %if.then78, label %cleanup89

if.then78:                                        ; preds = %if.end70
  %cmp80 = icmp ne i16 %speed, 100
  %or.cond = or i1 %cmp, %cmp80
  %19 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %1, align 8
  br i1 %or.cond, label %if.else86, label %if.then85

if.then85:                                        ; preds = %if.then78
  call void %19(%struct.rtl8169_private* nonnull %0, i32 23, i32 8504) #9
  %20 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %1, align 8
  call void %20(%struct.rtl8169_private* nonnull %0, i32 14, i32 608) #9
  br label %cleanup89

if.else86:                                        ; preds = %if.then78
  call void %19(%struct.rtl8169_private* nonnull %0, i32 23, i32 8456) #9
  %21 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %1, align 8
  call void %21(%struct.rtl8169_private* nonnull %0, i32 14, i32 0) #9
  br label %cleanup89

cleanup89:                                        ; preds = %if.then47, %do.body, %if.end70, %if.else51, %if.then85, %if.else86
  %retval.0 = phi i32 [ -22, %if.else51 ], [ 0, %if.end70 ], [ 0, %if.then85 ], [ 0, %if.else86 ], [ -22, %do.body ], [ -22, %if.then47 ]
  ret i32 %retval.0
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_gset_xmii(%struct.net_device* %dev, %struct.ethtool_cmd* %cmd) #0 {
entry:
  %mii = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5800
  %0 = bitcast i8* %mii to %struct.mii_if_info*
  %call1 = call i32 @mii_ethtool_gset(%struct.mii_if_info* %0, %struct.ethtool_cmd* %cmd) #9
  ret i32 %call1
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_xmii_reset_enable(%struct.rtl8169_private* %tp) #0 {
entry:
  %read.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 1
  %0 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i, align 8
  %call.i = call i32 %0(%struct.rtl8169_private* %tp, i32 0) #9
  %or = and i32 %call.i, 32767
  %and = or i32 %or, 32768
  %write.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %1 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %1(%struct.rtl8169_private* %tp, i32 0, i32 %and) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_xmii_reset_pending(%struct.rtl8169_private* %tp) #0 {
entry:
  %read.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 1
  %0 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i, align 8
  %call.i = call i32 %0(%struct.rtl8169_private* %tp, i32 0) #9
  %and = and i32 %call.i, 32768
  ret i32 %and
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_xmii_link_ok(i8* %ioaddr) #0 {
entry:
  %add.ptr = getelementptr i8, i8* %ioaddr, i64 108
  %0 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %1 = and i8 %0, 2
  %and = zext i8 %1 to i32
  ret i32 %and
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl_xmii_ioctl(%struct.rtl8169_private* %tp, %struct.mii_ioctl_data* nocapture %data, i32 %cmd) #0 {
entry:
  switch i32 %cmd, label %return [
    i32 35143, label %sw.bb
    i32 35144, label %sw.bb1
    i32 35145, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  %phy_id = getelementptr inbounds %struct.mii_ioctl_data, %struct.mii_ioctl_data* %data, i64 0, i32 0
  store i16 32, i16* %phy_id, align 2
  br label %return

sw.bb1:                                           ; preds = %entry
  %reg_num = getelementptr inbounds %struct.mii_ioctl_data, %struct.mii_ioctl_data* %data, i64 0, i32 1
  %0 = load i16, i16* %reg_num, align 2
  %1 = and i16 %0, 31
  %and = zext i16 %1 to i32
  %read.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 1
  %2 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i, align 8
  %call.i = call i32 %2(%struct.rtl8169_private* %tp, i32 %and) #9
  %conv2 = trunc i32 %call.i to i16
  %val_out = getelementptr inbounds %struct.mii_ioctl_data, %struct.mii_ioctl_data* %data, i64 0, i32 3
  store i16 %conv2, i16* %val_out, align 2
  br label %return

sw.bb3:                                           ; preds = %entry
  %reg_num4 = getelementptr inbounds %struct.mii_ioctl_data, %struct.mii_ioctl_data* %data, i64 0, i32 1
  %3 = load i16, i16* %reg_num4, align 2
  %4 = and i16 %3, 31
  %and6 = zext i16 %4 to i32
  %val_in = getelementptr inbounds %struct.mii_ioctl_data, %struct.mii_ioctl_data* %data, i64 0, i32 2
  %5 = load i16, i16* %val_in, align 2
  %conv7 = zext i16 %5 to i32
  %write.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %6 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %6(%struct.rtl8169_private* %tp, i32 %and6, i32 %conv7) #9
  br label %return

return:                                           ; preds = %entry, %sw.bb3, %sw.bb1, %sw.bb
  %retval.0 = phi i32 [ 0, %sw.bb3 ], [ 0, %sw.bb1 ], [ 0, %sw.bb ], [ -95, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noredzone
declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_rar_set(%struct.rtl8169_private* %tp, i8* nocapture readonly %addr) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %mutex.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 33, i32 1
  call void @mutex_lock(%struct.mutex* %mutex.i) #9
  %add.ptr = getelementptr i8, i8* %0, i64 80
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 -64, i8* %add.ptr) #10, !srcloc !5
  %arrayidx = getelementptr i8, i8* %addr, i64 4
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %arrayidx1 = getelementptr i8, i8* %addr, i64 5
  %2 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %2 to i32
  %shl = shl nuw nsw i32 %conv2, 8
  %or = or i32 %shl, %conv
  %add.ptr3 = getelementptr i8, i8* %0, i64 4
  %3 = bitcast i8* %add.ptr3 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or, i32* %3) #10, !srcloc !8
  %4 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %3) #10, !srcloc !2
  %5 = load i8, i8* %addr, align 1
  %conv6 = zext i8 %5 to i32
  %arrayidx7 = getelementptr i8, i8* %addr, i64 1
  %6 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %6 to i32
  %shl9 = shl nuw nsw i32 %conv8, 8
  %or10 = or i32 %shl9, %conv6
  %arrayidx11 = getelementptr i8, i8* %addr, i64 2
  %7 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %7 to i32
  %shl13 = shl nuw nsw i32 %conv12, 16
  %or14 = or i32 %or10, %shl13
  %arrayidx15 = getelementptr i8, i8* %addr, i64 3
  %8 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %8 to i32
  %shl17 = shl nuw i32 %conv16, 24
  %or18 = or i32 %or14, %shl17
  %9 = bitcast i8* %0 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or18, i32* %9) #10, !srcloc !8
  %10 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %9) #10, !srcloc !2
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %11 = load i16, i16* %mac_version, align 2
  %cmp = icmp eq i16 %11, 33
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call fastcc void @rtl_rar_exgmac_set(%struct.rtl8169_private* nonnull %tp, i8* nonnull %addr) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 0, i8* %add.ptr) #10, !srcloc !5
  call void @mutex_unlock(%struct.mutex* %mutex.i) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: noredzone
declare void @netif_napi_add(%struct.net_device*, %struct.napi_struct*, i32 (%struct.napi_struct*, i32)*, i32) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_poll(%struct.napi_struct* %napi, i32 %budget) #0 {
entry:
  %c.i.i = alloca i8, align 1
  %c.i.i.i = alloca i8, align 1
  %add.ptr = getelementptr %struct.napi_struct, %struct.napi_struct* %napi, i64 -1, i32 12
  %0 = bitcast %struct.hlist_node* %add.ptr to %struct.rtl8169_private*
  %dev1 = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 1
  %1 = bitcast %struct.hlist_node* %dev1 to %struct.net_device**
  %2 = load %struct.net_device*, %struct.net_device** %1, align 8
  %event_slow = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 20
  %3 = load i16, i16* %event_slow, align 2
  %4 = or i16 %3, 15
  %mmio_addr.i = bitcast %struct.hlist_node* %add.ptr to i8**
  %5 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i = getelementptr i8, i8* %5, i64 62
  %6 = bitcast i8* %add.ptr.i to i16*
  %7 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %6) #10, !srcloc !21
  %conv3 = zext i16 %7 to i32
  %8 = load i16, i16* %event_slow, align 2
  %neg = xor i16 %8, -1
  %and = and i16 %7, %neg
  %9 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i57 = getelementptr i8, i8* %9, i64 62
  %10 = bitcast i8* %add.ptr.i57 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %and, i16* %10) #10, !srcloc !3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !7
  %and8 = and i32 %conv3, 3
  %tobool = icmp eq i32 %and8, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cur_rx1.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 14, i32 1
  %11 = bitcast %struct.hlist_node*** %cur_rx1.i to i32*
  %12 = load i32, i32* %11, align 8
  %cmp2.i = icmp ult i32 %budget, 256
  %budget..i = select i1 %cmp2.i, i32 %budget, i32 256
  %cmp4180.i = icmp eq i32 %budget..i, 0
  br i1 %cmp4180.i, label %rtl_rx.exit, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %if.then
  %RxDescArray.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 18
  %13 = bitcast %struct.hlist_node* %RxDescArray.i to %struct.RxDesc**
  %opts1_mask.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 40
  %features46.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 17
  %pci_dev.i.i = getelementptr %struct.napi_struct, %struct.napi_struct* %napi, i64 -1, i32 12, i32 1
  %14 = bitcast %struct.hlist_node*** %pci_dev.i.i to %struct.pci_dev**
  %napi.i.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 1, i32 1
  %15 = bitcast %struct.hlist_node*** %napi.i.i to %struct.napi_struct*
  %rx_dropped82.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 25, i32 6
  %multicast.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 25, i32 8
  %packets.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 15, i32 1
  %16 = bitcast %struct.hlist_node*** %packets.i to i64*
  %bytes.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 16
  %17 = bitcast %struct.hlist_node* %bytes.i to i64*
  %rx_length_errors75.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 25, i32 10
  %msg_enable.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 14
  %18 = bitcast %struct.hlist_node* %msg_enable.i to i32*
  %rx_errors.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 25, i32 4
  %arraydecay.i.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 225
  %19 = bitcast %struct.hlist_node* %arraydecay.i.i to i64*
  %work.i.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 228
  %20 = bitcast %struct.hlist_node* %work.i.i to %struct.work_struct*
  %rx_fifo_errors.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 25, i32 14
  %rx_crc_errors.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 25, i32 12
  br label %for.body.i

for.body.i:                                       ; preds = %release_descriptor.i, %for.body.lr.ph.i
  %cur_rx.0182.i = phi i32 [ %12, %for.body.lr.ph.i ], [ %inc104.i, %release_descriptor.i ]
  %rx_left.0181.i = phi i32 [ %budget..i, %for.body.lr.ph.i ], [ %dec.i, %release_descriptor.i ]
  %rem.i = and i32 %cur_rx.0182.i, 255
  %21 = load %struct.RxDesc*, %struct.RxDesc** %13, align 8
  %idx.ext.i = zext i32 %rem.i to i64
  %opts1.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %21, i64 %idx.ext.i, i32 0
  %22 = load i32, i32* %opts1.i, align 8
  %23 = load i32, i32* %opts1_mask.i, align 4
  %and.i = and i32 %23, %22
  %tobool.i = icmp slt i32 %and.i, 0
  br i1 %tobool.i, label %for.end.loopexit.i, label %if.end.i

if.end.i:                                         ; preds = %for.body.i
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !22
  %and8.lobit.i = and i32 %and.i, 2097152
  %tobool12.i = icmp eq i32 %and8.lobit.i, 0
  br i1 %tobool12.i, label %if.end.process_pkt_crit_edge.i, label %do.body.i, !prof !9

if.end.process_pkt_crit_edge.i:                   ; preds = %if.end.i
  %.pre.i = load i64, i64* %features46.i, align 16
  br label %process_pkt.i

do.body.i:                                        ; preds = %if.end.i
  %24 = load i32, i32* %18, align 8
  %and14.i = and i32 %24, 64
  %tobool15.i = icmp eq i32 %and14.i, 0
  br i1 %tobool15.i, label %do.end.i, label %if.then16.i

if.then16.i:                                      ; preds = %do.body.i
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.104, i64 0, i64 0), i32 %and.i) #9
  br label %do.end.i

do.end.i:                                         ; preds = %if.then16.i, %do.body.i
  %25 = load i64, i64* %rx_errors.i, align 8
  %inc.i = add i64 %25, 1
  store i64 %inc.i, i64* %rx_errors.i, align 8
  %and18.i = and i32 %and.i, 5242880
  %tobool19.i = icmp eq i32 %and18.i, 0
  br i1 %tobool19.i, label %if.end23.i, label %if.then20.i

if.then20.i:                                      ; preds = %do.end.i
  %26 = load i64, i64* %rx_length_errors75.i, align 8
  %inc22.i = add i64 %26, 1
  store i64 %inc22.i, i64* %rx_length_errors75.i, align 8
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then20.i, %do.end.i
  %and24.i = and i32 %and.i, 524288
  %tobool25.i = icmp eq i32 %and24.i, 0
  br i1 %tobool25.i, label %if.end29.i, label %if.then26.i

if.then26.i:                                      ; preds = %if.end23.i
  %27 = load i64, i64* %rx_crc_errors.i, align 8
  %inc28.i = add i64 %27, 1
  store i64 %inc28.i, i64* %rx_crc_errors.i, align 8
  br label %if.end29.i

if.end29.i:                                       ; preds = %if.then26.i, %if.end23.i
  %and30.i = and i32 %and.i, 8388608
  %tobool31.i = icmp eq i32 %and30.i, 0
  br i1 %tobool31.i, label %if.end35.i, label %if.then32.i

if.then32.i:                                      ; preds = %if.end29.i
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i.i.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* nonnull %19, i8* nonnull %c.i.i.i, i64 2, i64* nonnull %19) #10, !srcloc !23
  %28 = load i8, i8* %c.i.i.i, align 1
  %cmp.i.i.i = icmp eq i8 %28, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i.i.i) #10
  br i1 %cmp.i.i.i, label %if.then.i.i, label %rtl_schedule_task.exit.i

if.then.i.i:                                      ; preds = %if.then32.i
  %29 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %call.i.i.i.i = call zeroext i1 @queue_work_on(i32 512, %struct.workqueue_struct* %29, %struct.work_struct* nonnull %20) #9
  br label %rtl_schedule_task.exit.i

rtl_schedule_task.exit.i:                         ; preds = %if.then.i.i, %if.then32.i
  %30 = load i64, i64* %rx_fifo_errors.i, align 8
  %inc34.i = add i64 %30, 1
  store i64 %inc34.i, i64* %rx_fifo_errors.i, align 8
  br label %if.end35.i

if.end35.i:                                       ; preds = %rtl_schedule_task.exit.i, %if.end29.i
  %and36.i = and i32 %and.i, 1572864
  %tobool37.i = icmp ne i32 %and36.i, 0
  %and38.i = and i32 %and.i, 12582912
  %tobool39.i = icmp eq i32 %and38.i, 0
  %or.cond.i = and i1 %tobool37.i, %tobool39.i
  br i1 %or.cond.i, label %land.lhs.true40.i, label %release_descriptor.i

land.lhs.true40.i:                                ; preds = %if.end35.i
  %31 = load i64, i64* %features46.i, align 16
  %and41.i = and i64 %31, 274877906944
  %tobool42.i = icmp eq i64 %and41.i, 0
  br i1 %tobool42.i, label %release_descriptor.i, label %process_pkt.i

process_pkt.i:                                    ; preds = %land.lhs.true40.i, %if.end.process_pkt_crit_edge.i
  %32 = phi i64 [ %.pre.i, %if.end.process_pkt_crit_edge.i ], [ %31, %land.lhs.true40.i ]
  %addr45.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %21, i64 %idx.ext.i, i32 2
  %33 = load i64, i64* %addr45.i, align 8
  %34 = and i64 %32, 137438953472
  %tobool57.i = icmp eq i64 %34, 0
  %and59.i = and i32 %and.i, 16383
  %sub.i = add nsw i32 %and59.i, -4
  %pkt_size.0.i = select i1 %tobool57.i, i32 %sub.i, i32 %and59.i, !prof !9
  %and.i.i = and i32 %and.i, 805306368
  %cmp.i.i = icmp eq i32 %and.i.i, 805306368
  br i1 %cmp.i.i, label %if.end77.i, label %if.then71.i, !prof !9

if.then71.i:                                      ; preds = %process_pkt.i
  %35 = load i64, i64* %rx_dropped82.i, align 8
  %inc73.i = add i64 %35, 1
  store i64 %inc73.i, i64* %rx_dropped82.i, align 8
  %36 = load i64, i64* %rx_length_errors75.i, align 8
  %inc76.i = add i64 %36, 1
  store i64 %inc76.i, i64* %rx_length_errors75.i, align 8
  br label %release_descriptor.i

if.end77.i:                                       ; preds = %process_pkt.i
  %arrayidx.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 16, i64 %idx.ext.i
  %37 = bitcast i8** %arrayidx.i to i64*
  %38 = load i64, i64* %37, align 8
  %39 = load %struct.pci_dev*, %struct.pci_dev** %14, align 8
  %dev.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %39, i64 0, i32 35
  %add.i.i.i = add i64 %38, 15
  %and.i.i.i = and i64 %add.i.i.i, -16
  %40 = inttoptr i64 %and.i.i.i to i8*
  %conv.i169.i = sext i32 %pkt_size.0.i to i64
  %dma_ops.i.i19.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %39, i64 0, i32 35, i32 22, i32 0
  %41 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i19.i.i, align 8
  %tobool4.i.i20.i.i = icmp eq %struct.dma_map_ops* %41, null
  %42 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i.i = select i1 %tobool4.i.i20.i.i, %struct.dma_map_ops* %42, %struct.dma_map_ops* %41
  %sync_single_for_cpu.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i.i, i64 0, i32 8
  %43 = load void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)** %sync_single_for_cpu.i.i.i, align 8
  %tobool11.i23.i.i = icmp eq void (%struct.device*, i64, i64, i32)* %43, null
  br i1 %tobool11.i23.i.i, label %dma_sync_single_for_cpu.exit.i.i, label %if.then12.i25.i.i

if.then12.i25.i.i:                                ; preds = %if.end77.i
  call void %43(%struct.device* %dev.i.i, i64 %33, i64 %conv.i169.i, i32 2) #9
  br label %dma_sync_single_for_cpu.exit.i.i

dma_sync_single_for_cpu.exit.i.i:                 ; preds = %if.then12.i25.i.i, %if.end77.i
  call void @llvm.prefetch(i8* %40, i32 0, i32 3, i32 1) #10
  %call.i.i.i = call %struct.sk_buff* @__napi_alloc_skb(%struct.napi_struct* nonnull %15, i32 %pkt_size.0.i, i32 34078752) #9
  %tobool.i.i = icmp eq %struct.sk_buff* %call.i.i.i, null
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i170.i

if.then.i170.i:                                   ; preds = %dma_sync_single_for_cpu.exit.i.i
  %data3.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %call.i.i.i, i64 0, i32 41
  %44 = load i8*, i8** %data3.i.i, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %40, i64 %conv.i169.i, i32 1, i1 false) #10
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i170.i, %dma_sync_single_for_cpu.exit.i.i
  %45 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i19.i.i, align 8
  %tobool4.i.i.i.i = icmp eq %struct.dma_map_ops* %45, null
  %46 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %.26.i.i = select i1 %tobool4.i.i.i.i, %struct.dma_map_ops* %46, %struct.dma_map_ops* %45
  %sync_single_for_device.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %.26.i.i, i64 0, i32 9
  %47 = load void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)** %sync_single_for_device.i.i.i, align 8
  %tobool11.i.i.i = icmp eq void (%struct.device*, i64, i64, i32)* %47, null
  br i1 %tobool11.i.i.i, label %rtl8169_try_rx_copy.exit.i, label %if.then12.i.i.i

if.then12.i.i.i:                                  ; preds = %if.end.i.i
  call void %47(%struct.device* nonnull %dev.i.i, i64 %33, i64 %conv.i169.i, i32 2) #9
  br label %rtl8169_try_rx_copy.exit.i

rtl8169_try_rx_copy.exit.i:                       ; preds = %if.then12.i.i.i, %if.end.i.i
  br i1 %tobool.i.i, label %if.then80.i, label %if.end84.i

if.then80.i:                                      ; preds = %rtl8169_try_rx_copy.exit.i
  %48 = load i64, i64* %rx_dropped82.i, align 8
  %inc83.i = add i64 %48, 1
  store i64 %inc83.i, i64* %rx_dropped82.i, align 8
  br label %release_descriptor.i

if.end84.i:                                       ; preds = %rtl8169_try_rx_copy.exit.i
  %49 = and i32 %and.i, 409600
  %50 = icmp eq i32 %49, 131072
  br i1 %50, label %if.then.i172.i, label %lor.lhs.false.i.i

lor.lhs.false.i.i:                                ; preds = %if.end84.i
  %and.i171.i = and i32 %and.i, 393216
  %cmp2.i.i = icmp ne i32 %and.i171.i, 262144
  %51 = trunc i32 %and.i to i16
  %tobool5.i.i = icmp slt i16 %51, 0
  %or.cond11.i.i = or i1 %cmp2.i.i, %tobool5.i.i
  br i1 %or.cond11.i.i, label %rtl8169_rx_csum.exit.i, label %if.then.i172.i

if.then.i172.i:                                   ; preds = %lor.lhs.false.i.i, %if.end84.i
  %ip_summed.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %call.i.i.i, i64 0, i32 17
  %bf.load.i.i = load i32, i32* %ip_summed.i.i, align 8
  %bf.clear.i.i = and i32 %bf.load.i.i, -1537
  %bf.set.i.i = or i32 %bf.clear.i.i, 512
  store i32 %bf.set.i.i, i32* %ip_summed.i.i, align 8
  br label %rtl8169_rx_csum.exit.i

rtl8169_rx_csum.exit.i:                           ; preds = %if.then.i172.i, %lor.lhs.false.i.i
  %call85.i = call i8* @skb_put(%struct.sk_buff* nonnull %call.i.i.i, i32 %pkt_size.0.i) #9
  %call86.i = call zeroext i16 @eth_type_trans(%struct.sk_buff* nonnull %call.i.i.i, %struct.net_device* nonnull %2) #9
  %protocol.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %call.i.i.i, i64 0, i32 33
  store i16 %call86.i, i16* %protocol.i, align 8
  %opts21.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %21, i64 %idx.ext.i, i32 1
  %52 = load i32, i32* %opts21.i.i, align 4
  %and.i174.i = and i32 %52, 65536
  %tobool.i175.i = icmp eq i32 %and.i174.i, 0
  br i1 %tobool.i175.i, label %rtl8169_rx_vlan_tag.exit.i, label %if.then.i177.i

if.then.i177.i:                                   ; preds = %rtl8169_rx_csum.exit.i
  %conv.i176.i = trunc i32 %52 to i16
  %vlan_proto1.i.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %call.i.i.i, i64 0, i32 24
  store i16 129, i16* %vlan_proto1.i.i.i, align 8
  %53 = or i16 %conv.i176.i, 16
  %54 = call i16 @llvm.bswap.i16(i16 %53) #10
  %vlan_tci3.i.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %call.i.i.i, i64 0, i32 25
  store i16 %54, i16* %vlan_tci3.i.i.i, align 2
  br label %rtl8169_rx_vlan_tag.exit.i

rtl8169_rx_vlan_tag.exit.i:                       ; preds = %if.then.i177.i, %rtl8169_rx_csum.exit.i
  %pkt_type.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %call.i.i.i, i64 0, i32 17
  %bf.load.i = load i32, i32* %pkt_type.i, align 8
  %bf.cast.i = and i32 %bf.load.i, 7
  %cmp88.i = icmp eq i32 %bf.cast.i, 2
  br i1 %cmp88.i, label %if.then90.i, label %if.end93.i

if.then90.i:                                      ; preds = %rtl8169_rx_vlan_tag.exit.i
  %55 = load i64, i64* %multicast.i, align 8
  %inc92.i = add i64 %55, 1
  store i64 %inc92.i, i64* %multicast.i, align 8
  br label %if.end93.i

if.end93.i:                                       ; preds = %if.then90.i, %rtl8169_rx_vlan_tag.exit.i
  %call94.i = call i32 @napi_gro_receive(%struct.napi_struct* nonnull %15, %struct.sk_buff* nonnull %call.i.i.i) #9
  %56 = load i64, i64* %16, align 8
  %inc96.i = add i64 %56, 1
  store i64 %inc96.i, i64* %16, align 8
  %57 = load i64, i64* %17, align 8
  %add.i = add i64 %57, %conv.i169.i
  store i64 %add.i, i64* %17, align 8
  br label %release_descriptor.i

release_descriptor.i:                             ; preds = %if.end93.i, %if.then80.i, %if.then71.i, %land.lhs.true40.i, %if.end35.i
  %opts2.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %21, i64 %idx.ext.i, i32 1
  store i32 0, i32* %opts2.i, align 4
  %58 = load i32, i32* %opts1.i, align 8
  %and.i179.i = and i32 %58, 1073741824
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !24
  %or1.i.i = or i32 %and.i179.i, -2147467265
  store i32 %or1.i.i, i32* %opts1.i, align 8
  %dec.i = add i32 %rx_left.0181.i, -1
  %inc104.i = add i32 %cur_rx.0182.i, 1
  %cmp4.i = icmp eq i32 %dec.i, 0
  br i1 %cmp4.i, label %for.end.loopexit.i, label %for.body.i

for.end.loopexit.i:                               ; preds = %release_descriptor.i, %for.body.i
  %cur_rx.0.lcssa.ph.i = phi i32 [ %inc104.i, %release_descriptor.i ], [ %cur_rx.0182.i, %for.body.i ]
  %.pre184.i = load i32, i32* %11, align 8
  br label %rtl_rx.exit

rtl_rx.exit:                                      ; preds = %if.then, %for.end.loopexit.i
  %59 = phi i32 [ %12, %if.then ], [ %.pre184.i, %for.end.loopexit.i ]
  %cur_rx.0.lcssa.i = phi i32 [ %12, %if.then ], [ %cur_rx.0.lcssa.ph.i, %for.end.loopexit.i ]
  %sub106.i = sub i32 %cur_rx.0.lcssa.i, %59
  store i32 %cur_rx.0.lcssa.i, i32* %11, align 8
  br label %if.end

if.end:                                           ; preds = %entry, %rtl_rx.exit
  %work_done.0 = phi i32 [ %sub106.i, %rtl_rx.exit ], [ 0, %entry ]
  %and11 = and i32 %conv3, 12
  %tobool12 = icmp eq i32 %and11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end
  %dirty_tx1.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 15
  %60 = bitcast %struct.hlist_node* %dirty_tx1.i to i32*
  %61 = load i32, i32* %60, align 8
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !25
  %cur_tx.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 8
  %62 = load i32, i32* %cur_tx.i, align 4
  %sub.i58 = sub i32 %62, %61
  %cmp80.i = icmp eq i32 %sub.i58, 0
  br i1 %cmp80.i, label %while.end.i, label %while.body.lr.ph.i

while.body.lr.ph.i:                               ; preds = %if.then13
  %TxDescArray.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 17, i32 1
  %63 = bitcast %struct.hlist_node*** %TxDescArray.i to %struct.TxDesc**
  %pci_dev.i = getelementptr %struct.napi_struct, %struct.napi_struct* %napi, i64 -1, i32 12, i32 1
  %64 = bitcast %struct.hlist_node*** %pci_dev.i to %struct.pci_dev**
  %packets.i59 = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 16, i32 1
  %65 = bitcast %struct.hlist_node*** %packets.i59 to i64*
  %bytes.i60 = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 17
  %66 = bitcast %struct.hlist_node* %bytes.i60 to i64*
  br label %while.body.i

while.body.i:                                     ; preds = %cleanup.cont.i, %while.body.lr.ph.i
  %dirty_tx.082.i = phi i32 [ %61, %while.body.lr.ph.i ], [ %inc18.i, %cleanup.cont.i ]
  %tx_left.081.i = phi i32 [ %sub.i58, %while.body.lr.ph.i ], [ %dec.i71, %cleanup.cont.i ]
  %rem.i61 = and i32 %dirty_tx.082.i, 63
  %idx.ext.i62 = zext i32 %rem.i61 to i64
  %67 = load %struct.TxDesc*, %struct.TxDesc** %63, align 8
  %opts1.i63 = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %67, i64 %idx.ext.i62, i32 0
  %68 = load i32, i32* %opts1.i63, align 8
  %tobool.i64 = icmp slt i32 %68, 0
  br i1 %tobool.i64, label %while.end.i, label %if.end.i67

if.end.i67:                                       ; preds = %while.body.i
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !26
  %69 = load %struct.pci_dev*, %struct.pci_dev** %64, align 8
  %70 = load %struct.TxDesc*, %struct.TxDesc** %63, align 8
  %add.ptr7.i = getelementptr %struct.TxDesc, %struct.TxDesc* %70, i64 %idx.ext.i62
  %len1.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 17, i64 %idx.ext.i62, i32 1
  %dma_ops.i.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %69, i64 0, i32 35, i32 22, i32 0
  %71 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i.i, align 8
  %tobool4.i.i.i.i65 = icmp eq %struct.dma_map_ops* %71, null
  %72 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i = select i1 %tobool4.i.i.i.i65, %struct.dma_map_ops* %72, %struct.dma_map_ops* %71
  %unmap_page.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i, i64 0, i32 5
  %73 = load void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)** %unmap_page.i.i.i, align 8
  %tobool11.i.i.i66 = icmp eq void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)* %73, null
  br i1 %tobool11.i.i.i66, label %rtl8169_unmap_tx_skb.exit.i, label %if.then12.i.i.i68

if.then12.i.i.i68:                                ; preds = %if.end.i67
  %dev4.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %69, i64 0, i32 35
  %74 = load i32, i32* %len1.i.i, align 8
  %conv.i.i = zext i32 %74 to i64
  %addr.i.i = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %70, i64 %idx.ext.i62, i32 2
  %75 = load i64, i64* %addr.i.i, align 8
  call void %73(%struct.device* %dev4.i, i64 %75, i64 %conv.i.i, i32 1, %struct.dma_attrs* null) #9
  br label %rtl8169_unmap_tx_skb.exit.i

rtl8169_unmap_tx_skb.exit.i:                      ; preds = %if.then12.i.i.i68, %if.end.i67
  %76 = bitcast %struct.TxDesc* %add.ptr7.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %76, i8 0, i64 16, i32 8, i1 false) #10
  store i32 0, i32* %len1.i.i, align 8
  %and8.i = and i32 %68, 268435456
  %tobool9.i = icmp eq i32 %and8.i, 0
  br i1 %tobool9.i, label %cleanup.cont.i, label %if.then10.i

if.then10.i:                                      ; preds = %rtl8169_unmap_tx_skb.exit.i
  %77 = load i64, i64* %65, align 8
  %inc.i69 = add i64 %77, 1
  store i64 %inc.i69, i64* %65, align 8
  %skb.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 17, i64 %idx.ext.i62, i32 0
  %78 = load %struct.sk_buff*, %struct.sk_buff** %skb.i, align 8
  %len.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %78, i64 0, i32 9
  %79 = load i32, i32* %len.i, align 8
  %conv.i = zext i32 %79 to i64
  %80 = load i64, i64* %66, align 8
  %add.i70 = add i64 %80, %conv.i
  store i64 %add.i70, i64* %66, align 8
  call void @__dev_kfree_skb_any(%struct.sk_buff* %78, i32 1) #9
  store %struct.sk_buff* null, %struct.sk_buff** %skb.i, align 8
  br label %cleanup.cont.i

cleanup.cont.i:                                   ; preds = %if.then10.i, %rtl8169_unmap_tx_skb.exit.i
  %inc18.i = add i32 %dirty_tx.082.i, 1
  %dec.i71 = add i32 %tx_left.081.i, -1
  %cmp.i = icmp eq i32 %dec.i71, 0
  br i1 %cmp.i, label %while.end.i, label %while.body.i

while.end.i:                                      ; preds = %cleanup.cont.i, %while.body.i, %if.then13
  %dirty_tx.0.lcssa.i = phi i32 [ %61, %if.then13 ], [ %inc18.i, %cleanup.cont.i ], [ %dirty_tx.082.i, %while.body.i ]
  %81 = load i32, i32* %60, align 8
  %cmp22.i = icmp eq i32 %81, %dirty_tx.0.lcssa.i
  br i1 %cmp22.i, label %if.end14, label %if.then24.i

if.then24.i:                                      ; preds = %while.end.i
  store i32 %dirty_tx.0.lcssa.i, i32* %60, align 8
  call void asm sideeffect "mfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !27
  %_tx.i.i77.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 88
  %82 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i77.i, align 64
  %state.i.i.i = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %82, i64 0, i32 10
  %83 = load volatile i64, i64* %state.i.i.i, align 8
  %and1.i.i.i.i = and i64 %83, 1
  %cmp.i.i.i.i = icmp eq i64 %and1.i.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %if.end35.i72, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.then24.i
  %84 = load i32, i32* %60, align 8
  %add28.i = add i32 %84, 64
  %85 = load i32, i32* %cur_tx.i, align 4
  %sub30.i = sub i32 %add28.i, %85
  %cmp32.i = icmp ugt i32 %sub30.i, 17
  br i1 %cmp32.i, label %if.then34.i, label %if.end35.i72

if.then34.i:                                      ; preds = %land.lhs.true.i
  call void @netif_tx_wake_queue(%struct.netdev_queue* %82) #9
  br label %if.end35.i72

if.end35.i72:                                     ; preds = %if.then34.i, %land.lhs.true.i, %if.then24.i
  %86 = load i32, i32* %cur_tx.i, align 4
  %cmp37.i = icmp eq i32 %86, %dirty_tx.0.lcssa.i
  br i1 %cmp37.i, label %if.end14, label %if.then39.i

if.then39.i:                                      ; preds = %if.end35.i72
  %87 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr40.i = getelementptr i8, i8* %87, i64 56
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 64, i8* %add.ptr40.i) #10, !srcloc !5
  br label %if.end14

if.end14:                                         ; preds = %if.then39.i, %if.end35.i72, %while.end.i, %if.end
  %88 = load i16, i16* %event_slow, align 2
  %and1855 = and i16 %88, %7
  %tobool19 = icmp eq i16 %and1855, 0
  br i1 %tobool19, label %if.end27, label %if.then20

if.then20:                                        ; preds = %if.end14
  %neg23 = xor i16 %88, -1
  %and25 = and i16 %4, %neg23
  %arraydecay.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 225
  %89 = bitcast %struct.hlist_node* %arraydecay.i to i64*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %89, i8* nonnull %c.i.i, i64 1, i64* %89) #10, !srcloc !23
  %90 = load i8, i8* %c.i.i, align 1
  %cmp.i.i74 = icmp eq i8 %90, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i.i) #10
  br i1 %cmp.i.i74, label %if.then.i, label %if.end27

if.then.i:                                        ; preds = %if.then20
  %work.i = getelementptr inbounds %struct.hlist_node, %struct.hlist_node* %add.ptr, i64 228
  %91 = bitcast %struct.hlist_node* %work.i to %struct.work_struct*
  %92 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %call.i.i.i75 = call zeroext i1 @queue_work_on(i32 512, %struct.workqueue_struct* %92, %struct.work_struct* %91) #9
  br label %if.end27

if.end27:                                         ; preds = %if.then.i, %if.then20, %if.end14
  %enable_mask.0 = phi i16 [ %4, %if.end14 ], [ %and25, %if.then20 ], [ %and25, %if.then.i ]
  %cmp = icmp slt i32 %work_done.0, %budget
  br i1 %cmp, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end27
  call void @napi_complete_done(%struct.napi_struct* nonnull %napi, i32 0) #9
  %93 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i78 = getelementptr i8, i8* %93, i64 60
  %94 = bitcast i8* %add.ptr.i78 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %enable_mask.0, i16* %94) #10, !srcloc !3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !28
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %if.end27
  ret i32 %work_done.0
}

; Function Attrs: noredzone nounwind sspstrong
define internal zeroext i1 @rtl8169_tso_csum_v1(%struct.rtl8169_private* nocapture readnone %tp, %struct.sk_buff* nocapture readonly %skb, i32* nocapture %opts) #0 {
entry:
  %head.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 40
  %0 = load i8*, i8** %head.i, align 8
  %end.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 39
  %1 = load i32, i32* %end.i, align 4
  %idx.ext.i = zext i32 %1 to i64
  %add.ptr.i = getelementptr i8, i8* %0, i64 %idx.ext.i
  %gso_size = getelementptr inbounds i8, i8* %add.ptr.i, i64 2
  %2 = bitcast i8* %gso_size to i16*
  %3 = load i16, i16* %2, align 2
  %conv = zext i16 %3 to i32
  %tobool = icmp eq i16 %3, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %opts, align 4
  %cmp2 = icmp ult i32 %conv, 2047
  %cond = select i1 %cmp2, i32 %conv, i32 2047
  %shl = shl nuw i32 %cond, 16
  %or = or i32 %shl, %4
  %or5 = or i32 %or, 134217728
  store i32 %or5, i32* %opts, align 4
  br label %if.end70

if.else:                                          ; preds = %entry
  %ip_summed = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 17
  %bf.load = load i32, i32* %ip_summed, align 8
  %bf.cast = and i32 %bf.load, 1536
  %cmp7 = icmp eq i32 %bf.cast, 1536
  br i1 %cmp7, label %if.then9, label %if.end70

if.then9:                                         ; preds = %if.else
  %network_header.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 35
  %5 = load i16, i16* %network_header.i.i, align 4
  %idx.ext.i.i = zext i16 %5 to i64
  %add.ptr.i.i = getelementptr i8, i8* %0, i64 %idx.ext.i.i
  %6 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %7 = load i8, i8* %6, align 1
  switch i8 %7, label %if.then30 [
    i8 6, label %if.then14
    i8 17, label %if.then22
  ]

if.then14:                                        ; preds = %if.then9
  %8 = load i32, i32* %opts, align 4
  %or16 = or i32 %8, 327680
  store i32 %or16, i32* %opts, align 4
  br label %if.end70

if.then22:                                        ; preds = %if.then9
  %9 = load i32, i32* %opts, align 4
  %or24 = or i32 %9, 393216
  store i32 %or24, i32* %opts, align 4
  br label %if.end70

if.then30:                                        ; preds = %if.then9
  %.b84 = load i1, i1* @rtl8169_tso_csum_v1.__warned, align 1
  br i1 %.b84, label %if.end70, label %if.then46, !prof !9

if.then46:                                        ; preds = %if.then30
  call void @warn_slowpath_null(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 7025) #9
  store i1 true, i1* @rtl8169_tso_csum_v1.__warned, align 1
  br label %if.end70

if.end70:                                         ; preds = %if.then14, %if.then22, %if.then30, %if.then46, %if.else, %if.then
  ret i1 true
}

; Function Attrs: noredzone nounwind sspstrong
define internal zeroext i1 @rtl8169_tso_csum_v2(%struct.rtl8169_private* nocapture readonly %tp, %struct.sk_buff* %skb, i32* nocapture %opts) #0 {
entry:
  %head.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 40
  %0 = load i8*, i8** %head.i.i, align 8
  %transport_header.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 34
  %1 = load i16, i16* %transport_header.i.i, align 2
  %idx.ext.i.i = zext i16 %1 to i64
  %add.ptr.i.i = getelementptr i8, i8* %0, i64 %idx.ext.i.i
  %data.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 41
  %2 = bitcast i8** %data.i to i64*
  %3 = load i64, i64* %2, align 8
  %sub.ptr.lhs.cast.i = ptrtoint i8* %add.ptr.i.i to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %3
  %conv.i = trunc i64 %sub.ptr.sub.i to i32
  %end.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 39
  %4 = load i32, i32* %end.i, align 4
  %idx.ext.i = zext i32 %4 to i64
  %add.ptr.i = getelementptr i8, i8* %0, i64 %idx.ext.i
  %gso_size = getelementptr inbounds i8, i8* %add.ptr.i, i64 2
  %5 = bitcast i8* %gso_size to i16*
  %6 = load i16, i16* %5, align 2
  %conv = zext i16 %6 to i32
  %tobool = icmp eq i16 %6, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %cmp = icmp ugt i32 %conv.i, 127
  br i1 %cmp, label %do.body, label %if.end6

do.body:                                          ; preds = %if.then
  %msg_enable = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %7 = load i32, i32* %msg_enable, align 8
  %8 = trunc i32 %7 to i8
  %tobool4 = icmp slt i8 %8, 0
  br i1 %tobool4, label %if.then5, label %cleanup196

if.then5:                                         ; preds = %do.body
  %dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %9 = load %struct.net_device*, %struct.net_device** %dev, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_warn(%struct.net_device* %9, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.105, i64 0, i64 0), i32 %conv.i) #9
  br label %cleanup196

if.end6:                                          ; preds = %if.then
  %protocol1.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 33
  %10 = load i16, i16* %protocol1.i, align 8
  %cmp.i = icmp eq i16 %10, 129
  br i1 %cmp.i, label %if.then.i, label %get_protocol.exit

if.then.i:                                        ; preds = %if.end6
  %mac_header.i.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 36
  %11 = load i16, i16* %mac_header.i.i.i, align 2
  %idx.ext.i.i.i = zext i16 %11 to i64
  %add.ptr.i.i.i = getelementptr i8, i8* %0, i64 %idx.ext.i.i.i
  %h_vlan_encapsulated_proto.i = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 16
  %12 = bitcast i8* %h_vlan_encapsulated_proto.i to i16*
  %13 = load i16, i16* %12, align 2
  br label %get_protocol.exit

get_protocol.exit:                                ; preds = %if.end6, %if.then.i
  %protocol.0.i = phi i16 [ %13, %if.then.i ], [ %10, %if.end6 ]
  switch i16 %protocol.0.i, label %if.then20 [
    i16 8, label %sw.bb
    i16 -8826, label %sw.bb9
  ]

sw.bb:                                            ; preds = %get_protocol.exit
  %14 = load i32, i32* %opts, align 4
  %or = or i32 %14, 67108864
  store i32 %or, i32* %opts, align 4
  br label %sw.epilog

sw.bb9:                                           ; preds = %get_protocol.exit
  %cloned.i.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 14
  %bf.load.i.i.i = load i8, i8* %cloned.i.i.i, align 2
  %bf.clear.i.i.i = and i8 %bf.load.i.i.i, 1
  %tobool.i.i.i = icmp eq i8 %bf.clear.i.i.i, 0
  br i1 %tobool.i.i.i, label %if.end13, label %skb_header_cloned.exit.i.i

skb_header_cloned.exit.i.i:                       ; preds = %sw.bb9
  %dataref1.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 32
  %15 = bitcast i8* %dataref1.i.i.i to i32*
  %16 = load volatile i32, i32* %15, align 4
  %and.i.i.i = and i32 %16, 65535
  %shr.i.i.i = ashr i32 %16, 16
  %sub.i.i.i = sub nsw i32 %and.i.i.i, %shr.i.i.i
  %cmp.i.i.i = icmp eq i32 %sub.i.i.i, 1
  br i1 %cmp.i.i.i, label %if.end13, label %skb_cow_head.exit.i

skb_cow_head.exit.i:                              ; preds = %skb_header_cloned.exit.i.i
  %call20.i.i.i = call i32 @pskb_expand_head(%struct.sk_buff* nonnull %skb, i32 0, i32 0, i32 34078752) #9
  %tobool.i = icmp eq i32 %call20.i.i.i, 0
  br i1 %tobool.i, label %skb_cow_head.exit.i.if.end13_crit_edge, label %cleanup196

skb_cow_head.exit.i.if.end13_crit_edge:           ; preds = %skb_cow_head.exit.i
  %.pre = load i8*, i8** %head.i.i, align 8
  %.pre288 = load i16, i16* %transport_header.i.i, align 2
  br label %if.end13

if.end13:                                         ; preds = %skb_cow_head.exit.i.if.end13_crit_edge, %sw.bb9, %skb_header_cloned.exit.i.i
  %17 = phi i16 [ %.pre288, %skb_cow_head.exit.i.if.end13_crit_edge ], [ %1, %sw.bb9 ], [ %1, %skb_header_cloned.exit.i.i ]
  %18 = phi i8* [ %.pre, %skb_cow_head.exit.i.if.end13_crit_edge ], [ %0, %sw.bb9 ], [ %0, %skb_header_cloned.exit.i.i ]
  %network_header.i.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 35
  %19 = load i16, i16* %network_header.i.i.i, align 4
  %idx.ext.i.i.i278 = zext i16 %19 to i64
  %add.ptr.i.i.i279 = getelementptr i8, i8* %18, i64 %idx.ext.i.i.i278
  %idx.ext.i.i18.i = zext i16 %17 to i64
  %add.ptr.i.i19.i = getelementptr i8, i8* %18, i64 %idx.ext.i.i18.i
  %check.i = getelementptr inbounds i8, i8* %add.ptr.i.i19.i, i64 16
  %20 = bitcast i8* %check.i to i16*
  store i16 0, i16* %20, align 4
  %saddr.i = getelementptr inbounds i8, i8* %add.ptr.i.i.i279, i64 8
  %21 = bitcast i8* %saddr.i to %struct.in6_addr*
  %daddr.i = getelementptr inbounds i8, i8* %add.ptr.i.i.i279, i64 24
  %22 = bitcast i8* %daddr.i to %struct.in6_addr*
  %call.i.i280 = call zeroext i16 @csum_ipv6_magic(%struct.in6_addr* %21, %struct.in6_addr* %22, i32 0, i16 zeroext 6, i32 0) #9
  %neg.i = xor i16 %call.i.i280, -1
  store i16 %neg.i, i16* %20, align 4
  %23 = load i32, i32* %opts, align 4
  %or15 = or i32 %23, 33554432
  store i32 %or15, i32* %opts, align 4
  br label %sw.epilog

if.then20:                                        ; preds = %get_protocol.exit
  %.b243 = load i1, i1* @rtl8169_tso_csum_v2.__warned, align 1
  br i1 %.b243, label %sw.epilog, label %if.then36, !prof !9

if.then36:                                        ; preds = %if.then20
  call void @warn_slowpath_null(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 7058) #9
  store i1 true, i1* @rtl8169_tso_csum_v2.__warned, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then36, %if.then20, %if.end13, %sw.bb
  %shl = shl i32 %conv.i, 18
  %24 = load i32, i32* %opts, align 4
  %or58 = or i32 %24, %shl
  store i32 %or58, i32* %opts, align 4
  %cmp62 = icmp ult i32 %conv, 2047
  %cond = select i1 %cmp62, i32 %conv, i32 2047
  %shl64 = shl nuw i32 %cond, 18
  %arrayidx65 = getelementptr i32, i32* %opts, i64 1
  %25 = load i32, i32* %arrayidx65, align 4
  %or66 = or i32 %25, %shl64
  store i32 %or66, i32* %arrayidx65, align 4
  br label %cleanup196

if.else:                                          ; preds = %entry
  %ip_summed = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 17
  %bf.load = load i32, i32* %ip_summed, align 8
  %bf.cast = and i32 %bf.load, 1536
  %cmp68 = icmp eq i32 %bf.cast, 1536
  %len.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 9
  %26 = load i32, i32* %len.i, align 8
  %cmp.i281 = icmp ult i32 %26, 60
  br i1 %cmp.i281, label %land.rhs.i, label %rtl_test_hw_pad_bug.exit

land.rhs.i:                                       ; preds = %if.else
  %mac_version.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %27 = load i16, i16* %mac_version.i, align 2
  %cmp1.i = icmp eq i16 %27, 33
  br label %rtl_test_hw_pad_bug.exit

rtl_test_hw_pad_bug.exit:                         ; preds = %if.else, %land.rhs.i
  %28 = phi i1 [ false, %if.else ], [ %cmp1.i, %land.rhs.i ]
  br i1 %cmp68, label %if.then70, label %if.else179

if.then70:                                        ; preds = %rtl_test_hw_pad_bug.exit
  br i1 %28, label %if.then79, label %if.end86, !prof !10

if.then79:                                        ; preds = %if.then70
  %call80 = call i32 @skb_checksum_help(%struct.sk_buff* nonnull %skb) #9
  %tobool81 = icmp eq i32 %call80, 0
  br i1 %tobool81, label %lor.rhs, label %cleanup196

lor.rhs:                                          ; preds = %if.then79
  %29 = load i32, i32* %len.i, align 8
  %cmp.i.i262 = icmp ult i32 %29, 60
  br i1 %cmp.i.i262, label %if.then.i.i266, label %cleanup196, !prof !10

if.then.i.i266:                                   ; preds = %lor.rhs
  %sub.i.i263 = sub i32 60, %29
  %call.i.i264 = call i32 @skb_pad(%struct.sk_buff* nonnull %skb, i32 %sub.i.i263) #9
  %tobool3.i.i265 = icmp eq i32 %call.i.i264, 0
  br i1 %tobool3.i.i265, label %if.end.i.i269, label %cleanup196

if.end.i.i269:                                    ; preds = %if.then.i.i266
  %data_len.i.i.i.i267 = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 10
  %30 = load i32, i32* %data_len.i.i.i.i267, align 4
  %tobool.i.i.i.i268 = icmp eq i32 %30, 0
  br i1 %tobool.i.i.i.i268, label %__skb_put.exit.i.i275, label %do.body3.i.i.i270, !prof !9

do.body3.i.i.i270:                                ; preds = %if.end.i.i269
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.108, i64 0, i64 0), i32 1808, i64 12) #10, !srcloc !29
  br label %do.body4.i.i.i271

do.body4.i.i.i271:                                ; preds = %do.body4.i.i.i271, %do.body3.i.i.i270
  br label %do.body4.i.i.i271

__skb_put.exit.i.i275:                            ; preds = %if.end.i.i269
  %tail.i.i.i272 = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 38
  %31 = load i32, i32* %tail.i.i.i272, align 8
  %add.i.i.i273 = add i32 %31, %sub.i.i263
  store i32 %add.i.i.i273, i32* %tail.i.i.i272, align 8
  %32 = load i32, i32* %len.i, align 8
  %add10.i.i.i274 = add i32 %32, %sub.i.i263
  store i32 %add10.i.i.i274, i32* %len.i, align 8
  br label %cleanup196

if.end86:                                         ; preds = %if.then70
  %cmp87 = icmp ugt i32 %conv.i, 1023
  br i1 %cmp87, label %do.body90, label %if.end99

do.body90:                                        ; preds = %if.end86
  %msg_enable91 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %33 = load i32, i32* %msg_enable91, align 8
  %34 = trunc i32 %33 to i8
  %tobool93 = icmp slt i8 %34, 0
  br i1 %tobool93, label %if.then94, label %cleanup196

if.then94:                                        ; preds = %do.body90
  %dev95 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %35 = load %struct.net_device*, %struct.net_device** %dev95, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_warn(%struct.net_device* %35, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.106, i64 0, i64 0), i32 %conv.i) #9
  br label %cleanup196

if.end99:                                         ; preds = %if.end86
  %protocol1.i251 = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 33
  %36 = load i16, i16* %protocol1.i251, align 8
  %cmp.i252 = icmp eq i16 %36, 129
  br i1 %cmp.i252, label %if.then.i258, label %get_protocol.exit260

if.then.i258:                                     ; preds = %if.end99
  %mac_header.i.i.i254 = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 36
  %37 = load i16, i16* %mac_header.i.i.i254, align 2
  %idx.ext.i.i.i255 = zext i16 %37 to i64
  %add.ptr.i.i.i256 = getelementptr i8, i8* %0, i64 %idx.ext.i.i.i255
  %h_vlan_encapsulated_proto.i257 = getelementptr inbounds i8, i8* %add.ptr.i.i.i256, i64 16
  %38 = bitcast i8* %h_vlan_encapsulated_proto.i257 to i16*
  %39 = load i16, i16* %38, align 2
  br label %get_protocol.exit260

get_protocol.exit260:                             ; preds = %if.end99, %if.then.i258
  %protocol.0.i259 = phi i16 [ %39, %if.then.i258 ], [ %36, %if.end99 ]
  switch i16 %protocol.0.i259, label %if.then135 [
    i16 8, label %sw.bb102
    i16 -8826, label %sw.epilog111
  ]

sw.bb102:                                         ; preds = %get_protocol.exit260
  br label %sw.epilog111

sw.epilog111:                                     ; preds = %get_protocol.exit260, %sw.bb102
  %.sink286 = phi i32 [ 536870912, %sw.bb102 ], [ 268435456, %get_protocol.exit260 ]
  %.sink = phi i64 [ 9, %sw.bb102 ], [ 6, %get_protocol.exit260 ]
  %arrayidx107 = getelementptr i32, i32* %opts, i64 1
  %40 = load i32, i32* %arrayidx107, align 4
  %or108 = or i32 %40, %.sink286
  store i32 %or108, i32* %arrayidx107, align 4
  %41 = load i8*, i8** %head.i.i, align 8
  %network_header.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 35
  %42 = load i16, i16* %network_header.i.i, align 4
  %idx.ext.i.i245 = zext i16 %42 to i64
  %add.ptr.i.i246 = getelementptr i8, i8* %41, i64 %idx.ext.i.i245
  %43 = getelementptr inbounds i8, i8* %add.ptr.i.i246, i64 %.sink
  %ip_protocol.0 = load i8, i8* %43, align 1
  switch i8 %ip_protocol.0, label %if.then135 [
    i8 6, label %if.then115
    i8 17, label %if.then122
  ]

if.then115:                                       ; preds = %sw.epilog111
  %or117 = or i32 %or108, 1073741824
  store i32 %or117, i32* %arrayidx107, align 4
  br label %cleanup

if.then122:                                       ; preds = %sw.epilog111
  %or124 = or i32 %or108, -2147483648
  store i32 %or124, i32* %arrayidx107, align 4
  br label %cleanup

if.then135:                                       ; preds = %get_protocol.exit260, %sw.epilog111
  %.b241242 = load i1, i1* @rtl8169_tso_csum_v2.__warned.107, align 1
  br i1 %.b241242, label %cleanup, label %if.then152, !prof !9

if.then152:                                       ; preds = %if.then135
  call void @warn_slowpath_null(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 7098) #9
  store i1 true, i1* @rtl8169_tso_csum_v2.__warned.107, align 1
  br label %cleanup

cleanup:                                          ; preds = %if.then115, %if.then122, %if.then135, %if.then152
  %shl176 = shl i32 %conv.i, 18
  %arrayidx177 = getelementptr i32, i32* %opts, i64 1
  %44 = load i32, i32* %arrayidx177, align 4
  %or178 = or i32 %44, %shl176
  store i32 %or178, i32* %arrayidx177, align 4
  br label %cleanup196

if.else179:                                       ; preds = %rtl_test_hw_pad_bug.exit
  %brmerge.demorgan = and i1 %cmp.i281, %28
  br i1 %brmerge.demorgan, label %if.then.i.i, label %cleanup196, !prof !30

if.then.i.i:                                      ; preds = %if.else179
  %sub.i.i = sub i32 60, %26
  %call.i.i = call i32 @skb_pad(%struct.sk_buff* nonnull %skb, i32 %sub.i.i) #9
  %tobool3.i.i = icmp eq i32 %call.i.i, 0
  br i1 %tobool3.i.i, label %if.end.i.i, label %cleanup196

if.end.i.i:                                       ; preds = %if.then.i.i
  %data_len.i.i.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 10
  %45 = load i32, i32* %data_len.i.i.i.i, align 4
  %tobool.i.i.i.i = icmp eq i32 %45, 0
  br i1 %tobool.i.i.i.i, label %__skb_put.exit.i.i, label %do.body3.i.i.i, !prof !9

do.body3.i.i.i:                                   ; preds = %if.end.i.i
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.108, i64 0, i64 0), i32 1808, i64 12) #10, !srcloc !29
  br label %do.body4.i.i.i

do.body4.i.i.i:                                   ; preds = %do.body4.i.i.i, %do.body3.i.i.i
  br label %do.body4.i.i.i

__skb_put.exit.i.i:                               ; preds = %if.end.i.i
  %tail.i.i.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 38
  %46 = load i32, i32* %tail.i.i.i, align 8
  %add.i.i.i = add i32 %46, %sub.i.i
  store i32 %add.i.i.i, i32* %tail.i.i.i, align 8
  %47 = load i32, i32* %len.i, align 8
  %add10.i.i.i = add i32 %47, %sub.i.i
  store i32 %add10.i.i.i, i32* %len.i, align 8
  br label %cleanup196

cleanup196:                                       ; preds = %if.else179, %__skb_put.exit.i.i, %if.then.i.i, %__skb_put.exit.i.i275, %if.then.i.i266, %lor.rhs, %do.body90, %if.then94, %if.then79, %sw.epilog, %cleanup, %skb_cow_head.exit.i, %do.body, %if.then5
  %retval.1 = phi i1 [ false, %if.then5 ], [ false, %do.body ], [ false, %skb_cow_head.exit.i ], [ true, %cleanup ], [ true, %if.else179 ], [ true, %sw.epilog ], [ false, %do.body90 ], [ false, %if.then94 ], [ false, %if.then79 ], [ false, %if.then.i.i266 ], [ true, %__skb_put.exit.i.i275 ], [ true, %lor.rhs ], [ false, %if.then.i.i ], [ true, %__skb_put.exit.i.i ]
  ret i1 %retval.1
}

; Function Attrs: noredzone
declare void @warn_slowpath_null(i8*, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @init_timer_key(%struct.timer_list*, i32, i8*, %struct.lock_class_key*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_phy_timer(i64 %__opaque) #0 {
entry:
  %c.i.i = alloca i8, align 1
  %0 = inttoptr i64 %__opaque to %struct.net_device*
  %arraydecay.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 5712
  %1 = bitcast i8* %arraydecay.i to i64*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %1, i8* nonnull %c.i.i, i64 3, i64* %1) #10, !srcloc !23
  %2 = load i8, i8* %c.i.i, align 1
  %cmp.i.i = icmp eq i8 %2, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i.i) #10
  br i1 %cmp.i.i, label %if.then.i, label %rtl_schedule_task.exit

if.then.i:                                        ; preds = %entry
  %work.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 5760
  %3 = bitcast i8* %work.i to %struct.work_struct*
  %4 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %call.i.i.i = call zeroext i1 @queue_work_on(i32 512, %struct.workqueue_struct* %4, %struct.work_struct* %3) #9
  br label %rtl_schedule_task.exit

rtl_schedule_task.exit:                           ; preds = %entry, %if.then.i
  ret void
}

; Function Attrs: noredzone
declare i32 @register_netdev(%struct.net_device*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @device_set_wakeup_enable(%struct.device*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: noredzone
declare zeroext i1 @pci_dev_run_wake(%struct.pci_dev*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @netif_carrier_off(%struct.net_device*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @netif_napi_del(%struct.napi_struct*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @iounmap(i8*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @pci_release_regions(%struct.pci_dev*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @pci_clear_mwi(%struct.pci_dev*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @pci_disable_device(%struct.pci_dev*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @free_netdev(%struct.net_device*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_hw_start_8169(%struct.net_device* %dev) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %1 = load i8*, i8** %mmio_addr, align 8
  %mac_version = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %2 = bitcast i8* %mac_version to i16*
  %3 = load i16, i16* %2, align 2
  %cmp = icmp eq i16 %3, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %pci_dev = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %4 = bitcast i8* %pci_dev to %struct.pci_dev**
  %5 = load %struct.pci_dev*, %struct.pci_dev** %4, align 8
  %add.ptr = getelementptr i8, i8* %1, i64 224
  %6 = bitcast i8* %add.ptr to i16*
  %7 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %6) #10, !srcloc !21
  %8 = or i16 %7, 8
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %8, i16* %6) #10, !srcloc !3
  %bus.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %5, i64 0, i32 1
  %9 = load %struct.pci_bus*, %struct.pci_bus** %bus.i, align 8
  %devfn.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %5, i64 0, i32 6
  %10 = load i32, i32* %devfn.i, align 8
  %call.i = call i32 @pci_bus_write_config_byte(%struct.pci_bus* %9, i32 %10, i32 12, i8 zeroext 8) #9
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add.ptr7 = getelementptr i8, i8* %1, i64 80
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 -64, i8* %add.ptr7) #10, !srcloc !5
  %11 = load i16, i16* %2, align 2
  %switch = icmp ult i16 %11, 4
  br i1 %switch, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end
  %add.ptr27 = getelementptr i8, i8* %1, i64 55
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 12, i8* %add.ptr27) #10, !srcloc !5
  br label %if.end28

if.end28:                                         ; preds = %if.end, %if.then26
  call fastcc void @rtl_init_rxcfg(%struct.rtl8169_private* nonnull %0) #11
  %add.ptr29 = getelementptr i8, i8* %1, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr29) #10, !srcloc !5
  %add.ptr.i155 = getelementptr i8, i8* %1, i64 218
  %12 = bitcast i8* %add.ptr.i155 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 16384, i16* %12) #10, !srcloc !3
  %13 = load i16, i16* %2, align 2
  %switch152 = icmp ult i16 %13, 4
  br i1 %switch152, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.end28
  %14 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i156 = getelementptr i8, i8* %14, i64 64
  %15 = bitcast i8* %add.ptr.i156 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 50333440, i32* %15) #10, !srcloc !8
  br label %if.end50

if.end50:                                         ; preds = %if.end28, %if.then49
  %add.ptr.i157 = getelementptr i8, i8* %1, i64 224
  %16 = bitcast i8* %add.ptr.i157 to i16*
  %17 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %16) #10, !srcloc !21
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %17, i16* %16) #10, !srcloc !3
  %cp_cmd = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5576
  %18 = bitcast i8* %cp_cmd to i16*
  %19 = load i16, i16* %18, align 8
  %20 = or i16 %17, %19
  %or55151 = or i16 %20, 8
  store i16 %or55151, i16* %18, align 8
  %21 = load i16, i16* %2, align 2
  %.off = add i16 %21, -1
  %switch153 = icmp ult i16 %.off, 2
  br i1 %switch153, label %do.end, label %if.end71

do.end:                                           ; preds = %if.end50
  %22 = or i16 %20, 16392
  store i16 %22, i16* %18, align 8
  br label %if.end71

if.end71:                                         ; preds = %if.end50, %do.end
  %23 = phi i16 [ %or55151, %if.end50 ], [ %22, %do.end ]
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %23, i16* %16) #10, !srcloc !3
  %24 = load i16, i16* %2, align 2
  %add.ptr.i158 = getelementptr i8, i8* %1, i64 83
  %25 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i158) #10, !srcloc !6
  %26 = and i8 %25, 1
  switch i16 %24, label %rtl8169_set_magic_reg.exit [
    i16 4, label %land.lhs.true.i
    i16 5, label %land.lhs.true.2.i
  ]

land.lhs.true.i:                                  ; preds = %if.end71
  %cmp7.i = icmp eq i8 %26, 0
  %..i = select i1 %cmp7.i, %struct.rtl_cfg2_info* getelementptr inbounds ([4 x %struct.rtl_cfg2_info], [4 x %struct.rtl_cfg2_info]* @rtl8169_set_magic_reg.cfg2_info, i64 0, i64 0), %struct.rtl_cfg2_info* getelementptr inbounds ([4 x %struct.rtl_cfg2_info], [4 x %struct.rtl_cfg2_info]* @rtl8169_set_magic_reg.cfg2_info, i64 0, i64 1)
  br label %if.then.i

if.then.i:                                        ; preds = %land.lhs.true.2.i, %land.lhs.true.i
  %p.020.lcssa.i = phi %struct.rtl_cfg2_info* [ %..i, %land.lhs.true.i ], [ %.22.i, %land.lhs.true.2.i ]
  %val.i = getelementptr inbounds %struct.rtl_cfg2_info, %struct.rtl_cfg2_info* %p.020.lcssa.i, i64 0, i32 2
  %27 = load i32, i32* %val.i, align 4
  %add.ptr9.i = getelementptr i8, i8* %1, i64 124
  %28 = bitcast i8* %add.ptr9.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %27, i32* %28) #10, !srcloc !8
  br label %rtl8169_set_magic_reg.exit

land.lhs.true.2.i:                                ; preds = %if.end71
  %cmp7.2.i = icmp eq i8 %26, 0
  %.22.i = select i1 %cmp7.2.i, %struct.rtl_cfg2_info* getelementptr inbounds ([4 x %struct.rtl_cfg2_info], [4 x %struct.rtl_cfg2_info]* @rtl8169_set_magic_reg.cfg2_info, i64 0, i64 2), %struct.rtl_cfg2_info* getelementptr inbounds ([4 x %struct.rtl_cfg2_info], [4 x %struct.rtl_cfg2_info]* @rtl8169_set_magic_reg.cfg2_info, i64 0, i64 3)
  br label %if.then.i

rtl8169_set_magic_reg.exit:                       ; preds = %if.end71, %if.then.i
  %add.ptr76 = getelementptr i8, i8* %1, i64 226
  %29 = bitcast i8* %add.ptr76 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 0, i16* %29) #10, !srcloc !3
  %TxPhyAddr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2408
  %30 = bitcast i8* %TxPhyAddr.i to i64*
  %31 = load i64, i64* %30, align 8
  %shr.i = lshr i64 %31, 32
  %conv.i = trunc i64 %shr.i to i32
  %add.ptr.i159 = getelementptr i8, i8* %1, i64 36
  %32 = bitcast i8* %add.ptr.i159 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv.i, i32* %32) #10, !srcloc !8
  %33 = load i64, i64* %30, align 8
  %conv2.i = trunc i64 %33 to i32
  %add.ptr3.i = getelementptr i8, i8* %1, i64 32
  %34 = bitcast i8* %add.ptr3.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv2.i, i32* %34) #10, !srcloc !8
  %RxPhyAddr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2416
  %35 = bitcast i8* %RxPhyAddr.i to i64*
  %36 = load i64, i64* %35, align 8
  %shr4.i = lshr i64 %36, 32
  %conv5.i = trunc i64 %shr4.i to i32
  %add.ptr6.i = getelementptr i8, i8* %1, i64 232
  %37 = bitcast i8* %add.ptr6.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv5.i, i32* %37) #10, !srcloc !8
  %38 = load i64, i64* %35, align 8
  %conv9.i = trunc i64 %38 to i32
  %add.ptr10.i = getelementptr i8, i8* %1, i64 228
  %39 = bitcast i8* %add.ptr10.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv9.i, i32* %39) #10, !srcloc !8
  %40 = load i16, i16* %2, align 2
  %switch154 = icmp ult i16 %40, 4
  br i1 %switch154, label %if.end97, label %if.then95

if.then95:                                        ; preds = %rtl8169_set_magic_reg.exit
  %add.ptr96 = getelementptr i8, i8* %1, i64 55
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 12, i8* %add.ptr96) #10, !srcloc !5
  %41 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i161 = getelementptr i8, i8* %41, i64 64
  %42 = bitcast i8* %add.ptr.i161 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 50333440, i32* %42) #10, !srcloc !8
  br label %if.end97

if.end97:                                         ; preds = %rtl8169_set_magic_reg.exit, %if.then95
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 0, i8* %add.ptr7) #10, !srcloc !5
  %add.ptr99 = getelementptr i8, i8* %1, i64 60
  %43 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr99) #10, !srcloc !6
  %add.ptr101 = getelementptr i8, i8* %1, i64 76
  %44 = bitcast i8* %add.ptr101 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %44) #10, !srcloc !8
  call void @rtl_set_rx_mode(%struct.net_device* nonnull %dev) #11
  %add.ptr102 = getelementptr i8, i8* %1, i64 92
  %45 = bitcast i8* %add.ptr102 to i16*
  %46 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %45) #10, !srcloc !21
  %47 = and i16 %46, -4096
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %47, i16* %45) #10, !srcloc !3
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_hw_start_8168(%struct.net_device* %dev) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %1 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %1, i64 80
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 -64, i8* %add.ptr) #10, !srcloc !5
  %add.ptr1 = getelementptr i8, i8* %1, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr1) #10, !srcloc !5
  %add.ptr.i104 = getelementptr i8, i8* %1, i64 218
  %2 = bitcast i8* %add.ptr.i104 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 16384, i16* %2) #10, !srcloc !3
  %add.ptr2 = getelementptr i8, i8* %1, i64 224
  %3 = bitcast i8* %add.ptr2 to i16*
  %4 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %3) #10, !srcloc !21
  %cp_cmd = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5576
  %5 = bitcast i8* %cp_cmd to i16*
  %6 = load i16, i16* %5, align 8
  %7 = or i16 %4, %6
  %or6103 = or i16 %7, 129
  store i16 %or6103, i16* %5, align 8
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %or6103, i16* %3) #10, !srcloc !3
  %add.ptr10 = getelementptr i8, i8* %1, i64 226
  %8 = bitcast i8* %add.ptr10 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 20817, i16* %8) #10, !srcloc !3
  %mac_version = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %9 = bitcast i8* %mac_version to i16*
  %10 = load i16, i16* %9, align 2
  %cmp = icmp eq i16 %10, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %event_slow = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5578
  %11 = bitcast i8* %event_slow to i16*
  %12 = load i16, i16* %11, align 2
  %13 = and i16 %12, -16465
  %14 = or i16 %13, 16448
  store i16 %14, i16* %11, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %TxPhyAddr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2408
  %15 = bitcast i8* %TxPhyAddr.i to i64*
  %16 = load i64, i64* %15, align 8
  %shr.i = lshr i64 %16, 32
  %conv.i = trunc i64 %shr.i to i32
  %add.ptr.i105 = getelementptr i8, i8* %1, i64 36
  %17 = bitcast i8* %add.ptr.i105 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv.i, i32* %17) #10, !srcloc !8
  %18 = load i64, i64* %15, align 8
  %conv2.i = trunc i64 %18 to i32
  %add.ptr3.i = getelementptr i8, i8* %1, i64 32
  %19 = bitcast i8* %add.ptr3.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv2.i, i32* %19) #10, !srcloc !8
  %RxPhyAddr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2416
  %20 = bitcast i8* %RxPhyAddr.i to i64*
  %21 = load i64, i64* %20, align 8
  %shr4.i = lshr i64 %21, 32
  %conv5.i = trunc i64 %shr4.i to i32
  %add.ptr6.i = getelementptr i8, i8* %1, i64 232
  %22 = bitcast i8* %add.ptr6.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv5.i, i32* %22) #10, !srcloc !8
  %23 = load i64, i64* %20, align 8
  %conv9.i = trunc i64 %23 to i32
  %add.ptr10.i = getelementptr i8, i8* %1, i64 228
  %24 = bitcast i8* %add.ptr10.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv9.i, i32* %24) #10, !srcloc !8
  %25 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i106 = getelementptr i8, i8* %25, i64 64
  %26 = bitcast i8* %add.ptr.i106 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 50333440, i32* %26) #10, !srcloc !8
  %add.ptr19 = getelementptr i8, i8* %1, i64 60
  %27 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr19) #10, !srcloc !6
  %28 = load i16, i16* %9, align 2
  switch i16 %28, label %sw.default [
    i16 10, label %sw.bb
    i16 11, label %sw.bb23
    i16 16, label %sw.bb23
    i16 17, label %sw.bb24
    i16 18, label %sw.bb25
    i16 19, label %sw.bb26
    i16 20, label %sw.bb27
    i16 21, label %sw.bb28
    i16 22, label %sw.bb29
    i16 23, label %sw.bb30
    i16 24, label %sw.bb31
    i16 25, label %sw.bb31
    i16 26, label %sw.bb31
    i16 27, label %sw.bb32
    i16 30, label %sw.bb33
    i16 31, label %sw.bb34
    i16 32, label %sw.bb34
    i16 33, label %sw.bb35
    i16 34, label %sw.bb36
    i16 35, label %sw.bb36
    i16 37, label %sw.bb37
    i16 39, label %sw.bb38
    i16 40, label %sw.bb38
    i16 41, label %sw.bb39
    i16 43, label %sw.bb40
    i16 44, label %sw.bb41
    i16 45, label %sw.bb41
    i16 48, label %sw.bb42
    i16 49, label %sw.bb43
    i16 50, label %sw.bb44
  ]

sw.bb:                                            ; preds = %if.end
  %29 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %30 = bitcast i8* %pci_dev.i to %struct.pci_dev**
  %31 = load %struct.pci_dev*, %struct.pci_dev** %30, align 8
  %add.ptr.i108 = getelementptr i8, i8* %29, i64 84
  %32 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i108) #10, !srcloc !6
  %33 = and i8 %32, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %33, i8* %add.ptr.i108) #10, !srcloc !5
  %add.ptr3.i109 = getelementptr i8, i8* %29, i64 224
  %34 = bitcast i8* %add.ptr3.i109 to i16*
  %35 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %34) #10, !srcloc !21
  %36 = and i16 %35, 8291
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %36, i16* %34) #10, !srcloc !3
  %dev.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %37 = bitcast i8* %dev.i to %struct.net_device**
  %38 = load %struct.net_device*, %struct.net_device** %37, align 8
  %mtu.i = getelementptr inbounds %struct.net_device, %struct.net_device* %38, i64 0, i32 42
  %39 = load i32, i32* %mtu.i, align 16
  %cmp.i = icmp ult i32 %39, 1501
  br i1 %cmp.i, label %if.then.i, label %sw.epilog

if.then.i:                                        ; preds = %sw.bb
  %call.i.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %31, i32 8, i16 zeroext 28672, i16 zeroext 22528) #9
  br label %sw.epilog

sw.bb23:                                          ; preds = %if.end, %if.end
  %40 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %41 = bitcast i8* %pci_dev.i.i to %struct.pci_dev**
  %42 = load %struct.pci_dev*, %struct.pci_dev** %41, align 8
  %add.ptr.i.i = getelementptr i8, i8* %40, i64 84
  %43 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i.i) #10, !srcloc !6
  %44 = and i8 %43, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %44, i8* %add.ptr.i.i) #10, !srcloc !5
  %add.ptr3.i.i = getelementptr i8, i8* %40, i64 224
  %45 = bitcast i8* %add.ptr3.i.i to i16*
  %46 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %45) #10, !srcloc !21
  %47 = and i16 %46, 8291
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %47, i16* %45) #10, !srcloc !3
  %dev.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %48 = bitcast i8* %dev.i.i to %struct.net_device**
  %49 = load %struct.net_device*, %struct.net_device** %48, align 8
  %mtu.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %49, i64 0, i32 42
  %50 = load i32, i32* %mtu.i.i, align 16
  %cmp.i.i = icmp ult i32 %50, 1501
  br i1 %cmp.i.i, label %if.then.i.i, label %rtl_hw_start_8168bef.exit

if.then.i.i:                                      ; preds = %sw.bb23
  %call.i.i.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %42, i32 8, i16 zeroext 28672, i16 zeroext 22528) #9
  br label %rtl_hw_start_8168bef.exit

rtl_hw_start_8168bef.exit:                        ; preds = %sw.bb23, %if.then.i.i
  %add.ptr.i111 = getelementptr i8, i8* %40, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr.i111) #10, !srcloc !5
  %add.ptr1.i = getelementptr i8, i8* %40, i64 85
  %51 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1.i) #10, !srcloc !6
  %52 = and i8 %51, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %52, i8* %add.ptr1.i) #10, !srcloc !5
  br label %sw.epilog

sw.bb24:                                          ; preds = %if.end
  %read.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %53 = bitcast i8* %read.i.i.i.i to i32 (%struct.rtl8169_private*, i32)**
  %54 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %53, align 8
  %tobool.i.i.i.i = icmp eq i32 (%struct.rtl8169_private*, i32)* %54, null
  br i1 %tobool.i.i.i.i, label %rtl_csi_read.exit.i.i.i, label %cond.true.i.i.i.i

cond.true.i.i.i.i:                                ; preds = %sw.bb24
  %call.i.i.i.i = call i32 %54(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i = and i32 %call.i.i.i.i, 16777215
  %phitmp.i.i = or i32 %phitmp.i.i.i, 654311424
  br label %rtl_csi_read.exit.i.i.i

rtl_csi_read.exit.i.i.i:                          ; preds = %cond.true.i.i.i.i, %sw.bb24
  %cond.i.i.i.i = phi i32 [ %phitmp.i.i, %cond.true.i.i.i.i ], [ 671088639, %sw.bb24 ]
  %write.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %55 = bitcast i8* %write.i.i.i.i to void (%struct.rtl8169_private*, i32, i32)**
  %56 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %55, align 8
  %tobool.i3.i.i.i = icmp eq void (%struct.rtl8169_private*, i32, i32)* %56, null
  br i1 %tobool.i3.i.i.i, label %rtl_csi_access_enable_2.exit.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %rtl_csi_read.exit.i.i.i
  call void %56(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i) #9
  br label %rtl_csi_access_enable_2.exit.i

rtl_csi_access_enable_2.exit.i:                   ; preds = %if.then.i.i.i.i, %rtl_csi_read.exit.i.i.i
  %msg_enable.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %57 = bitcast i8* %msg_enable.i.i.i.i to i32*
  %dev.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %58 = bitcast i8* %dev.i.i.i.i to %struct.net_device**
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %rtl_ephy_write.exit.i, %rtl_csi_access_enable_2.exit.i
  %e.addr.014.i.i = phi %struct.ephy_info* [ getelementptr inbounds ([5 x %struct.ephy_info], [5 x %struct.ephy_info]* @rtl_hw_start_8168cp_1.e_info_8168cp, i64 0, i64 0), %rtl_csi_access_enable_2.exit.i ], [ %incdec.ptr.i.i, %rtl_ephy_write.exit.i ]
  %len.addr.013.i.i = phi i32 [ 5, %rtl_csi_access_enable_2.exit.i ], [ %dec.i.i, %rtl_ephy_write.exit.i ]
  %dec.i.i = add nsw i32 %len.addr.013.i.i, -1
  %offset.i.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i, i64 0, i32 0
  %59 = load i32, i32* %offset.i.i, align 4
  %60 = load i8*, i8** %mmio_addr, align 8
  %and.i10.i = shl i32 %59, 16
  %shl.i11.i = and i32 %and.i10.i, 2031616
  %add.ptr.i12.i = getelementptr i8, i8* %60, i64 128
  %61 = bitcast i8* %add.ptr.i12.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i11.i, i32* %61) #10, !srcloc !8
  br label %for.body.i.i.i19.i

for.cond.i.i.i15.i:                               ; preds = %for.body.i.i.i19.i
  %inc.i.i.i13.i = add nuw nsw i32 %i.017.i.i.i16.i, 1
  %cmp.i.i.i14.i = icmp ult i32 %i.017.i.i.i16.i, 99
  br i1 %cmp.i.i.i14.i, label %for.body.i.i.i19.i, label %do.body.i.i.i23.i

for.body.i.i.i19.i:                               ; preds = %for.cond.i.i.i15.i, %while.body.i.i
  %i.017.i.i.i16.i = phi i32 [ 0, %while.body.i.i ], [ %inc.i.i.i13.i, %for.cond.i.i.i15.i ]
  call void @__udelay(i64 10) #9
  %62 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i17.i = getelementptr i8, i8* %62, i64 128
  %63 = bitcast i8* %add.ptr.i.i17.i to i32*
  %64 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %63) #10, !srcloc !2
  %tobool.i.i18.i = icmp slt i32 %64, 0
  br i1 %tobool.i.i18.i, label %cond.true.i.i, label %for.cond.i.i.i15.i

do.body.i.i.i23.i:                                ; preds = %for.cond.i.i.i15.i
  %65 = load i32, i32* %57, align 8
  %and.i.i.i21.i = and i32 %65, 1
  %tobool4.i.i.i22.i = icmp eq i32 %and.i.i.i21.i, 0
  br i1 %tobool4.i.i.i22.i, label %rtl_ephy_read.exit.i, label %if.then5.i.i.i25.i

if.then5.i.i.i25.i:                               ; preds = %do.body.i.i.i23.i
  %66 = load %struct.net_device*, %struct.net_device** %58, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %66, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i

cond.true.i.i:                                    ; preds = %for.body.i.i.i19.i
  %67 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %61) #10, !srcloc !2
  %phitmp.i26.i = trunc i32 %67 to i16
  br label %rtl_ephy_read.exit.i

rtl_ephy_read.exit.i:                             ; preds = %cond.true.i.i, %if.then5.i.i.i25.i, %do.body.i.i.i23.i
  %cond.i.i = phi i16 [ %phitmp.i26.i, %cond.true.i.i ], [ -1, %do.body.i.i.i23.i ], [ -1, %if.then5.i.i.i25.i ]
  %mask.i.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i, i64 0, i32 1
  %68 = load i16, i16* %mask.i.i, align 4
  %neg.i.i = xor i16 %68, -1
  %and.i.i = and i16 %cond.i.i, %neg.i.i
  %bits.i.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i, i64 0, i32 2
  %69 = load i16, i16* %bits.i.i, align 2
  %or.i.i = or i16 %and.i.i, %69
  %70 = load i32, i32* %offset.i.i, align 4
  %conv5.i.i = zext i16 %or.i.i to i32
  %71 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i = shl i32 %70, 16
  %shl.i.i = and i32 %and1.i.i, 2031616
  %or.i4.i = or i32 %shl.i.i, %conv5.i.i
  %or2.i.i = or i32 %or.i4.i, -2147483648
  %add.ptr.i.i112 = getelementptr i8, i8* %71, i64 128
  %72 = bitcast i8* %add.ptr.i.i112 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i, i32* %72) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %rtl_ephy_read.exit.i
  %i.017.i.i.i.i = phi i32 [ 0, %rtl_ephy_read.exit.i ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 10) #9
  %73 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %73, i64 128
  %74 = bitcast i8* %add.ptr.i.i.i to i32*
  %75 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %74) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %75, 0
  br i1 %tobool.i.i.i, label %for.cond.i.i.i.i, label %rtl_ephy_write.exit.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %76 = load i32, i32* %57, align 8
  %and.i.i.i.i = and i32 %76, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_ephy_write.exit.i, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %77 = load %struct.net_device*, %struct.net_device** %58, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %77, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i

rtl_ephy_write.exit.i:                            ; preds = %for.body.i.i.i.i, %if.then5.i.i.i.i, %do.body.i.i.i.i
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i, i64 1
  %cmp.i.i113 = icmp ugt i32 %len.addr.013.i.i, 1
  br i1 %cmp.i.i113, label %while.body.i.i, label %rtl_ephy_init.exit.i

rtl_ephy_init.exit.i:                             ; preds = %rtl_ephy_write.exit.i
  %78 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i.i114 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %79 = bitcast i8* %pci_dev.i.i114 to %struct.pci_dev**
  %80 = load %struct.pci_dev*, %struct.pci_dev** %79, align 8
  %add.ptr.i6.i = getelementptr i8, i8* %78, i64 82
  %81 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i6.i) #10, !srcloc !6
  %82 = or i8 %81, 16
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %82, i8* %add.ptr.i6.i) #10, !srcloc !5
  %add.ptr3.i.i115 = getelementptr i8, i8* %78, i64 84
  %83 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3.i.i115) #10, !srcloc !6
  %84 = and i8 %83, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %84, i8* %add.ptr3.i.i115) #10, !srcloc !5
  %85 = load %struct.net_device*, %struct.net_device** %58, align 8
  %mtu.i.i116 = getelementptr inbounds %struct.net_device, %struct.net_device* %85, i64 0, i32 42
  %86 = load i32, i32* %mtu.i.i116, align 16
  %cmp.i7.i = icmp ult i32 %86, 1501
  br i1 %cmp.i7.i, label %if.then.i.i118, label %rtl_hw_start_8168cp_1.exit

if.then.i.i118:                                   ; preds = %rtl_ephy_init.exit.i
  %call.i.i.i117 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %80, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %rtl_hw_start_8168cp_1.exit

rtl_hw_start_8168cp_1.exit:                       ; preds = %rtl_ephy_init.exit.i, %if.then.i.i118
  %call.i.i.i8.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %80, i32 16, i16 zeroext 256, i16 zeroext 0) #9
  %add.ptr9.i.i = getelementptr i8, i8* %78, i64 224
  %87 = bitcast i8* %add.ptr9.i.i to i16*
  %88 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %87) #10, !srcloc !21
  %89 = and i16 %88, 8291
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %89, i16* %87) #10, !srcloc !3
  br label %sw.epilog

sw.bb25:                                          ; preds = %if.end
  %90 = load i8*, i8** %mmio_addr, align 8
  %read.i.i.i.i120 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %91 = bitcast i8* %read.i.i.i.i120 to i32 (%struct.rtl8169_private*, i32)**
  %92 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %91, align 8
  %tobool.i.i.i.i121 = icmp eq i32 (%struct.rtl8169_private*, i32)* %92, null
  br i1 %tobool.i.i.i.i121, label %rtl_csi_read.exit.i.i.i129, label %cond.true.i.i.i.i125

cond.true.i.i.i.i125:                             ; preds = %sw.bb25
  %call.i.i.i.i122 = call i32 %92(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i123 = and i32 %call.i.i.i.i122, 16777215
  %phitmp.i.i124 = or i32 %phitmp.i.i.i123, 654311424
  br label %rtl_csi_read.exit.i.i.i129

rtl_csi_read.exit.i.i.i129:                       ; preds = %cond.true.i.i.i.i125, %sw.bb25
  %cond.i.i.i.i126 = phi i32 [ %phitmp.i.i124, %cond.true.i.i.i.i125 ], [ 671088639, %sw.bb25 ]
  %write.i.i.i.i127 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %93 = bitcast i8* %write.i.i.i.i127 to void (%struct.rtl8169_private*, i32, i32)**
  %94 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %93, align 8
  %tobool.i3.i.i.i128 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %94, null
  br i1 %tobool.i3.i.i.i128, label %rtl_csi_access_enable_2.exit.i134, label %if.then.i.i.i.i130

if.then.i.i.i.i130:                               ; preds = %rtl_csi_read.exit.i.i.i129
  call void %94(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i126) #9
  br label %rtl_csi_access_enable_2.exit.i134

rtl_csi_access_enable_2.exit.i134:                ; preds = %if.then.i.i.i.i130, %rtl_csi_read.exit.i.i.i129
  %add.ptr.i131 = getelementptr i8, i8* %90, i64 209
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 30, i8* %add.ptr.i131) #10, !srcloc !5
  %msg_enable.i.i.i.i132 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %95 = bitcast i8* %msg_enable.i.i.i.i132 to i32*
  %dev.i.i.i.i133 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %96 = bitcast i8* %dev.i.i.i.i133 to %struct.net_device**
  br label %while.body.i.i139

while.body.i.i139:                                ; preds = %rtl_ephy_write.exit.i166, %rtl_csi_access_enable_2.exit.i134
  %e.addr.014.i.i135 = phi %struct.ephy_info* [ getelementptr inbounds ([3 x %struct.ephy_info], [3 x %struct.ephy_info]* @rtl_hw_start_8168c_1.e_info_8168c_1, i64 0, i64 0), %rtl_csi_access_enable_2.exit.i134 ], [ %incdec.ptr.i.i164, %rtl_ephy_write.exit.i166 ]
  %len.addr.013.i.i136 = phi i32 [ 3, %rtl_csi_access_enable_2.exit.i134 ], [ %dec.i.i137, %rtl_ephy_write.exit.i166 ]
  %dec.i.i137 = add nsw i32 %len.addr.013.i.i136, -1
  %offset.i.i138 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i135, i64 0, i32 0
  %97 = load i32, i32* %offset.i.i138, align 4
  %98 = load i8*, i8** %mmio_addr, align 8
  %and.i12.i = shl i32 %97, 16
  %shl.i13.i = and i32 %and.i12.i, 2031616
  %add.ptr.i14.i = getelementptr i8, i8* %98, i64 128
  %99 = bitcast i8* %add.ptr.i14.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i13.i, i32* %99) #10, !srcloc !8
  br label %for.body.i.i.i21.i

for.cond.i.i.i17.i:                               ; preds = %for.body.i.i.i21.i
  %inc.i.i.i15.i = add nuw nsw i32 %i.017.i.i.i18.i, 1
  %cmp.i.i.i16.i = icmp ult i32 %i.017.i.i.i18.i, 99
  br i1 %cmp.i.i.i16.i, label %for.body.i.i.i21.i, label %do.body.i.i.i25.i

for.body.i.i.i21.i:                               ; preds = %for.cond.i.i.i17.i, %while.body.i.i139
  %i.017.i.i.i18.i = phi i32 [ 0, %while.body.i.i139 ], [ %inc.i.i.i15.i, %for.cond.i.i.i17.i ]
  call void @__udelay(i64 10) #9
  %100 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i19.i = getelementptr i8, i8* %100, i64 128
  %101 = bitcast i8* %add.ptr.i.i19.i to i32*
  %102 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %101) #10, !srcloc !2
  %tobool.i.i20.i = icmp slt i32 %102, 0
  br i1 %tobool.i.i20.i, label %cond.true.i.i140, label %for.cond.i.i.i17.i

do.body.i.i.i25.i:                                ; preds = %for.cond.i.i.i17.i
  %103 = load i32, i32* %95, align 8
  %and.i.i.i23.i = and i32 %103, 1
  %tobool4.i.i.i24.i = icmp eq i32 %and.i.i.i23.i, 0
  br i1 %tobool4.i.i.i24.i, label %rtl_ephy_read.exit.i152, label %if.then5.i.i.i27.i

if.then5.i.i.i27.i:                               ; preds = %do.body.i.i.i25.i
  %104 = load %struct.net_device*, %struct.net_device** %96, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %104, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i152

cond.true.i.i140:                                 ; preds = %for.body.i.i.i21.i
  %105 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %99) #10, !srcloc !2
  %phitmp.i28.i = trunc i32 %105 to i16
  br label %rtl_ephy_read.exit.i152

rtl_ephy_read.exit.i152:                          ; preds = %cond.true.i.i140, %if.then5.i.i.i27.i, %do.body.i.i.i25.i
  %cond.i.i141 = phi i16 [ %phitmp.i28.i, %cond.true.i.i140 ], [ -1, %do.body.i.i.i25.i ], [ -1, %if.then5.i.i.i27.i ]
  %mask.i.i142 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i135, i64 0, i32 1
  %106 = load i16, i16* %mask.i.i142, align 4
  %neg.i.i143 = xor i16 %106, -1
  %and.i.i144 = and i16 %cond.i.i141, %neg.i.i143
  %bits.i.i145 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i135, i64 0, i32 2
  %107 = load i16, i16* %bits.i.i145, align 2
  %or.i.i146 = or i16 %and.i.i144, %107
  %108 = load i32, i32* %offset.i.i138, align 4
  %conv5.i.i147 = zext i16 %or.i.i146 to i32
  %109 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i148 = shl i32 %108, 16
  %shl.i.i149 = and i32 %and1.i.i148, 2031616
  %or.i6.i = or i32 %shl.i.i149, %conv5.i.i147
  %or2.i.i150 = or i32 %or.i6.i, -2147483648
  %add.ptr.i.i151 = getelementptr i8, i8* %109, i64 128
  %110 = bitcast i8* %add.ptr.i.i151 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i150, i32* %110) #10, !srcloc !8
  br label %for.body.i.i.i.i159

for.cond.i.i.i.i155:                              ; preds = %for.body.i.i.i.i159
  %inc.i.i.i.i153 = add nuw nsw i32 %i.017.i.i.i.i156, 1
  %cmp.i.i.i.i154 = icmp ult i32 %i.017.i.i.i.i156, 99
  br i1 %cmp.i.i.i.i154, label %for.body.i.i.i.i159, label %do.body.i.i.i.i162

for.body.i.i.i.i159:                              ; preds = %for.cond.i.i.i.i155, %rtl_ephy_read.exit.i152
  %i.017.i.i.i.i156 = phi i32 [ 0, %rtl_ephy_read.exit.i152 ], [ %inc.i.i.i.i153, %for.cond.i.i.i.i155 ]
  call void @__udelay(i64 10) #9
  %111 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i157 = getelementptr i8, i8* %111, i64 128
  %112 = bitcast i8* %add.ptr.i.i.i157 to i32*
  %113 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %112) #10, !srcloc !2
  %tobool.i.i.i158 = icmp slt i32 %113, 0
  br i1 %tobool.i.i.i158, label %for.cond.i.i.i.i155, label %rtl_ephy_write.exit.i166

do.body.i.i.i.i162:                               ; preds = %for.cond.i.i.i.i155
  %114 = load i32, i32* %95, align 8
  %and.i.i.i.i160 = and i32 %114, 1
  %tobool4.i.i.i.i161 = icmp eq i32 %and.i.i.i.i160, 0
  br i1 %tobool4.i.i.i.i161, label %rtl_ephy_write.exit.i166, label %if.then5.i.i.i.i163

if.then5.i.i.i.i163:                              ; preds = %do.body.i.i.i.i162
  %115 = load %struct.net_device*, %struct.net_device** %96, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %115, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i166

rtl_ephy_write.exit.i166:                         ; preds = %for.body.i.i.i.i159, %if.then5.i.i.i.i163, %do.body.i.i.i.i162
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i164 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i135, i64 1
  %cmp.i.i165 = icmp ugt i32 %len.addr.013.i.i136, 1
  br i1 %cmp.i.i165, label %while.body.i.i139, label %rtl_ephy_init.exit.i170

rtl_ephy_init.exit.i170:                          ; preds = %rtl_ephy_write.exit.i166
  %116 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i.i167 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %117 = bitcast i8* %pci_dev.i.i167 to %struct.pci_dev**
  %118 = load %struct.pci_dev*, %struct.pci_dev** %117, align 8
  %add.ptr.i8.i = getelementptr i8, i8* %116, i64 82
  %119 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i8.i) #10, !srcloc !6
  %120 = or i8 %119, 16
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %120, i8* %add.ptr.i8.i) #10, !srcloc !5
  %add.ptr3.i.i168 = getelementptr i8, i8* %116, i64 84
  %121 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3.i.i168) #10, !srcloc !6
  %122 = and i8 %121, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %122, i8* %add.ptr3.i.i168) #10, !srcloc !5
  %123 = load %struct.net_device*, %struct.net_device** %96, align 8
  %mtu.i.i169 = getelementptr inbounds %struct.net_device, %struct.net_device* %123, i64 0, i32 42
  %124 = load i32, i32* %mtu.i.i169, align 16
  %cmp.i9.i = icmp ult i32 %124, 1501
  br i1 %cmp.i9.i, label %if.then.i.i172, label %rtl_hw_start_8168c_1.exit

if.then.i.i172:                                   ; preds = %rtl_ephy_init.exit.i170
  %call.i.i.i171 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %118, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %rtl_hw_start_8168c_1.exit

rtl_hw_start_8168c_1.exit:                        ; preds = %rtl_ephy_init.exit.i170, %if.then.i.i172
  %call.i.i.i10.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %118, i32 16, i16 zeroext 256, i16 zeroext 0) #9
  %add.ptr9.i.i173 = getelementptr i8, i8* %116, i64 224
  %125 = bitcast i8* %add.ptr9.i.i173 to i16*
  %126 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %125) #10, !srcloc !21
  %127 = and i16 %126, 8291
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %127, i16* %125) #10, !srcloc !3
  br label %sw.epilog

sw.bb26:                                          ; preds = %if.end
  call fastcc void @rtl_hw_start_8168c_2(%struct.rtl8169_private* nonnull %0) #11
  br label %sw.epilog

sw.bb27:                                          ; preds = %if.end
  call fastcc void @rtl_hw_start_8168c_2(%struct.rtl8169_private* nonnull %0) #9
  br label %sw.epilog

sw.bb28:                                          ; preds = %if.end
  %read.i.i.i.i174 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %128 = bitcast i8* %read.i.i.i.i174 to i32 (%struct.rtl8169_private*, i32)**
  %129 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %128, align 8
  %tobool.i.i.i.i175 = icmp eq i32 (%struct.rtl8169_private*, i32)* %129, null
  br i1 %tobool.i.i.i.i175, label %rtl_csi_read.exit.i.i.i183, label %cond.true.i.i.i.i179

cond.true.i.i.i.i179:                             ; preds = %sw.bb28
  %call.i.i.i.i176 = call i32 %129(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i177 = and i32 %call.i.i.i.i176, 16777215
  %phitmp.i.i178 = or i32 %phitmp.i.i.i177, 654311424
  br label %rtl_csi_read.exit.i.i.i183

rtl_csi_read.exit.i.i.i183:                       ; preds = %cond.true.i.i.i.i179, %sw.bb28
  %cond.i.i.i.i180 = phi i32 [ %phitmp.i.i178, %cond.true.i.i.i.i179 ], [ 671088639, %sw.bb28 ]
  %write.i.i.i.i181 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %130 = bitcast i8* %write.i.i.i.i181 to void (%struct.rtl8169_private*, i32, i32)**
  %131 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %130, align 8
  %tobool.i3.i.i.i182 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %131, null
  br i1 %tobool.i3.i.i.i182, label %rtl_csi_access_enable_2.exit.i191, label %if.then.i.i.i.i184

if.then.i.i.i.i184:                               ; preds = %rtl_csi_read.exit.i.i.i183
  call void %131(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i180) #9
  br label %rtl_csi_access_enable_2.exit.i191

rtl_csi_access_enable_2.exit.i191:                ; preds = %if.then.i.i.i.i184, %rtl_csi_read.exit.i.i.i183
  %132 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i.i185 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %133 = bitcast i8* %pci_dev.i.i185 to %struct.pci_dev**
  %134 = load %struct.pci_dev*, %struct.pci_dev** %133, align 8
  %add.ptr.i.i186 = getelementptr i8, i8* %132, i64 82
  %135 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i.i186) #10, !srcloc !6
  %136 = or i8 %135, 16
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %136, i8* %add.ptr.i.i186) #10, !srcloc !5
  %add.ptr3.i.i187 = getelementptr i8, i8* %132, i64 84
  %137 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3.i.i187) #10, !srcloc !6
  %138 = and i8 %137, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %138, i8* %add.ptr3.i.i187) #10, !srcloc !5
  %dev.i.i188 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %139 = bitcast i8* %dev.i.i188 to %struct.net_device**
  %140 = load %struct.net_device*, %struct.net_device** %139, align 8
  %mtu.i.i189 = getelementptr inbounds %struct.net_device, %struct.net_device* %140, i64 0, i32 42
  %141 = load i32, i32* %mtu.i.i189, align 16
  %cmp.i.i190 = icmp ult i32 %141, 1501
  br i1 %cmp.i.i190, label %if.then.i.i193, label %rtl_hw_start_8168c_4.exit

if.then.i.i193:                                   ; preds = %rtl_csi_access_enable_2.exit.i191
  %call.i.i.i192 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %134, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %rtl_hw_start_8168c_4.exit

rtl_hw_start_8168c_4.exit:                        ; preds = %rtl_csi_access_enable_2.exit.i191, %if.then.i.i193
  %call.i.i.i2.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %134, i32 16, i16 zeroext 256, i16 zeroext 0) #9
  %add.ptr9.i.i194 = getelementptr i8, i8* %132, i64 224
  %142 = bitcast i8* %add.ptr9.i.i194 to i16*
  %143 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %142) #10, !srcloc !21
  %144 = and i16 %143, 8291
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %144, i16* %142) #10, !srcloc !3
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end
  %145 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i196 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %146 = bitcast i8* %pci_dev.i196 to %struct.pci_dev**
  %147 = load %struct.pci_dev*, %struct.pci_dev** %146, align 8
  %read.i.i.i.i197 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %148 = bitcast i8* %read.i.i.i.i197 to i32 (%struct.rtl8169_private*, i32)**
  %149 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %148, align 8
  %tobool.i.i.i.i198 = icmp eq i32 (%struct.rtl8169_private*, i32)* %149, null
  br i1 %tobool.i.i.i.i198, label %rtl_csi_read.exit.i.i.i206, label %cond.true.i.i.i.i202

cond.true.i.i.i.i202:                             ; preds = %sw.bb29
  %call.i.i.i.i199 = call i32 %149(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i200 = and i32 %call.i.i.i.i199, 16777215
  %phitmp.i.i201 = or i32 %phitmp.i.i.i200, 654311424
  br label %rtl_csi_read.exit.i.i.i206

rtl_csi_read.exit.i.i.i206:                       ; preds = %cond.true.i.i.i.i202, %sw.bb29
  %cond.i.i.i.i203 = phi i32 [ %phitmp.i.i201, %cond.true.i.i.i.i202 ], [ 671088639, %sw.bb29 ]
  %write.i.i.i.i204 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %150 = bitcast i8* %write.i.i.i.i204 to void (%struct.rtl8169_private*, i32, i32)**
  %151 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %150, align 8
  %tobool.i3.i.i.i205 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %151, null
  br i1 %tobool.i3.i.i.i205, label %rtl_csi_access_enable_2.exit.i212, label %if.then.i.i.i.i207

if.then.i.i.i.i207:                               ; preds = %rtl_csi_read.exit.i.i.i206
  call void %151(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i203) #9
  br label %rtl_csi_access_enable_2.exit.i212

rtl_csi_access_enable_2.exit.i212:                ; preds = %if.then.i.i.i.i207, %rtl_csi_read.exit.i.i.i206
  %add.ptr.i208 = getelementptr i8, i8* %145, i64 84
  %152 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i208) #10, !srcloc !6
  %153 = and i8 %152, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %153, i8* %add.ptr.i208) #10, !srcloc !5
  %dev.i209 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %154 = bitcast i8* %dev.i209 to %struct.net_device**
  %155 = load %struct.net_device*, %struct.net_device** %154, align 8
  %mtu.i210 = getelementptr inbounds %struct.net_device, %struct.net_device* %155, i64 0, i32 42
  %156 = load i32, i32* %mtu.i210, align 16
  %cmp.i211 = icmp ult i32 %156, 1501
  br i1 %cmp.i211, label %if.then.i214, label %rtl_hw_start_8168cp_2.exit

if.then.i214:                                     ; preds = %rtl_csi_access_enable_2.exit.i212
  %call.i.i213 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %147, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %rtl_hw_start_8168cp_2.exit

rtl_hw_start_8168cp_2.exit:                       ; preds = %rtl_csi_access_enable_2.exit.i212, %if.then.i214
  %add.ptr4.i = getelementptr i8, i8* %145, i64 224
  %157 = bitcast i8* %add.ptr4.i to i16*
  %158 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %157) #10, !srcloc !21
  %159 = and i16 %158, 8291
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %159, i16* %157) #10, !srcloc !3
  br label %sw.epilog

sw.bb30:                                          ; preds = %if.end
  %160 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i216 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %161 = bitcast i8* %pci_dev.i216 to %struct.pci_dev**
  %162 = load %struct.pci_dev*, %struct.pci_dev** %161, align 8
  %read.i.i.i.i217 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %163 = bitcast i8* %read.i.i.i.i217 to i32 (%struct.rtl8169_private*, i32)**
  %164 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %163, align 8
  %tobool.i.i.i.i218 = icmp eq i32 (%struct.rtl8169_private*, i32)* %164, null
  br i1 %tobool.i.i.i.i218, label %rtl_csi_read.exit.i.i.i226, label %cond.true.i.i.i.i222

cond.true.i.i.i.i222:                             ; preds = %sw.bb30
  %call.i.i.i.i219 = call i32 %164(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i220 = and i32 %call.i.i.i.i219, 16777215
  %phitmp.i.i221 = or i32 %phitmp.i.i.i220, 654311424
  br label %rtl_csi_read.exit.i.i.i226

rtl_csi_read.exit.i.i.i226:                       ; preds = %cond.true.i.i.i.i222, %sw.bb30
  %cond.i.i.i.i223 = phi i32 [ %phitmp.i.i221, %cond.true.i.i.i.i222 ], [ 671088639, %sw.bb30 ]
  %write.i.i.i.i224 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %165 = bitcast i8* %write.i.i.i.i224 to void (%struct.rtl8169_private*, i32, i32)**
  %166 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %165, align 8
  %tobool.i3.i.i.i225 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %166, null
  br i1 %tobool.i3.i.i.i225, label %rtl_csi_access_enable_2.exit.i234, label %if.then.i.i.i.i227

if.then.i.i.i.i227:                               ; preds = %rtl_csi_read.exit.i.i.i226
  call void %166(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i223) #9
  br label %rtl_csi_access_enable_2.exit.i234

rtl_csi_access_enable_2.exit.i234:                ; preds = %if.then.i.i.i.i227, %rtl_csi_read.exit.i.i.i226
  %add.ptr.i228 = getelementptr i8, i8* %160, i64 84
  %167 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i228) #10, !srcloc !6
  %168 = and i8 %167, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %168, i8* %add.ptr.i228) #10, !srcloc !5
  %add.ptr3.i229 = getelementptr i8, i8* %160, i64 209
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 32, i8* %add.ptr3.i229) #10, !srcloc !5
  %add.ptr4.i230 = getelementptr i8, i8* %160, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr4.i230) #10, !srcloc !5
  %dev.i231 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %169 = bitcast i8* %dev.i231 to %struct.net_device**
  %170 = load %struct.net_device*, %struct.net_device** %169, align 8
  %mtu.i232 = getelementptr inbounds %struct.net_device, %struct.net_device* %170, i64 0, i32 42
  %171 = load i32, i32* %mtu.i232, align 16
  %cmp.i233 = icmp ult i32 %171, 1501
  br i1 %cmp.i233, label %if.then.i236, label %rtl_hw_start_8168cp_3.exit

if.then.i236:                                     ; preds = %rtl_csi_access_enable_2.exit.i234
  %call.i.i235 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %162, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %rtl_hw_start_8168cp_3.exit

rtl_hw_start_8168cp_3.exit:                       ; preds = %rtl_csi_access_enable_2.exit.i234, %if.then.i236
  %add.ptr6.i237 = getelementptr i8, i8* %160, i64 224
  %172 = bitcast i8* %add.ptr6.i237 to i16*
  %173 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %172) #10, !srcloc !21
  %174 = and i16 %173, 8291
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %174, i16* %172) #10, !srcloc !3
  br label %sw.epilog

sw.bb31:                                          ; preds = %if.end, %if.end, %if.end
  %175 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i239 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %176 = bitcast i8* %pci_dev.i239 to %struct.pci_dev**
  %177 = load %struct.pci_dev*, %struct.pci_dev** %176, align 8
  %read.i.i.i.i240 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %178 = bitcast i8* %read.i.i.i.i240 to i32 (%struct.rtl8169_private*, i32)**
  %179 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %178, align 8
  %tobool.i.i.i.i241 = icmp eq i32 (%struct.rtl8169_private*, i32)* %179, null
  br i1 %tobool.i.i.i.i241, label %rtl_csi_read.exit.i.i.i249, label %cond.true.i.i.i.i245

cond.true.i.i.i.i245:                             ; preds = %sw.bb31
  %call.i.i.i.i242 = call i32 %179(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i243 = and i32 %call.i.i.i.i242, 16777215
  %phitmp.i.i244 = or i32 %phitmp.i.i.i243, 654311424
  br label %rtl_csi_read.exit.i.i.i249

rtl_csi_read.exit.i.i.i249:                       ; preds = %cond.true.i.i.i.i245, %sw.bb31
  %cond.i.i.i.i246 = phi i32 [ %phitmp.i.i244, %cond.true.i.i.i.i245 ], [ 671088639, %sw.bb31 ]
  %write.i.i.i.i247 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %180 = bitcast i8* %write.i.i.i.i247 to void (%struct.rtl8169_private*, i32, i32)**
  %181 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %180, align 8
  %tobool.i3.i.i.i248 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %181, null
  br i1 %tobool.i3.i.i.i248, label %rtl_csi_access_enable_2.exit.i256, label %if.then.i.i.i.i250

if.then.i.i.i.i250:                               ; preds = %rtl_csi_read.exit.i.i.i249
  call void %181(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i246) #9
  br label %rtl_csi_access_enable_2.exit.i256

rtl_csi_access_enable_2.exit.i256:                ; preds = %if.then.i.i.i.i250, %rtl_csi_read.exit.i.i.i249
  %call.i.i.i251 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %177, i32 16, i16 zeroext 256, i16 zeroext 0) #9
  %add.ptr.i252 = getelementptr i8, i8* %175, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr.i252) #10, !srcloc !5
  %dev.i253 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %182 = bitcast i8* %dev.i253 to %struct.net_device**
  %183 = load %struct.net_device*, %struct.net_device** %182, align 8
  %mtu.i254 = getelementptr inbounds %struct.net_device, %struct.net_device* %183, i64 0, i32 42
  %184 = load i32, i32* %mtu.i254, align 16
  %cmp.i255 = icmp ult i32 %184, 1501
  br i1 %cmp.i255, label %if.then.i258, label %rtl_hw_start_8168d.exit

if.then.i258:                                     ; preds = %rtl_csi_access_enable_2.exit.i256
  %call.i.i257 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %177, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %rtl_hw_start_8168d.exit

rtl_hw_start_8168d.exit:                          ; preds = %rtl_csi_access_enable_2.exit.i256, %if.then.i258
  %add.ptr1.i259 = getelementptr i8, i8* %175, i64 224
  %185 = bitcast i8* %add.ptr1.i259 to i16*
  %186 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %185) #10, !srcloc !21
  %187 = and i16 %186, 8291
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %187, i16* %185) #10, !srcloc !3
  br label %sw.epilog

sw.bb32:                                          ; preds = %if.end
  %188 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i261 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %189 = bitcast i8* %pci_dev.i261 to %struct.pci_dev**
  %190 = load %struct.pci_dev*, %struct.pci_dev** %189, align 8
  %read.i.i.i.i262 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %191 = bitcast i8* %read.i.i.i.i262 to i32 (%struct.rtl8169_private*, i32)**
  %192 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %191, align 8
  %tobool.i.i.i.i263 = icmp eq i32 (%struct.rtl8169_private*, i32)* %192, null
  br i1 %tobool.i.i.i.i263, label %rtl_csi_read.exit.i.i.i271, label %cond.true.i.i.i.i267

cond.true.i.i.i.i267:                             ; preds = %sw.bb32
  %call.i.i.i.i264 = call i32 %192(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i265 = and i32 %call.i.i.i.i264, 16777215
  %phitmp.i.i266 = or i32 %phitmp.i.i.i265, 385875968
  br label %rtl_csi_read.exit.i.i.i271

rtl_csi_read.exit.i.i.i271:                       ; preds = %cond.true.i.i.i.i267, %sw.bb32
  %cond.i.i.i.i268 = phi i32 [ %phitmp.i.i266, %cond.true.i.i.i.i267 ], [ 402653183, %sw.bb32 ]
  %write.i.i.i.i269 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %193 = bitcast i8* %write.i.i.i.i269 to void (%struct.rtl8169_private*, i32, i32)**
  %194 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %193, align 8
  %tobool.i3.i.i.i270 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %194, null
  br i1 %tobool.i3.i.i.i270, label %rtl_csi_access_enable_1.exit.i, label %if.then.i.i.i.i272

if.then.i.i.i.i272:                               ; preds = %rtl_csi_read.exit.i.i.i271
  call void %194(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i268) #9
  br label %rtl_csi_access_enable_1.exit.i

rtl_csi_access_enable_1.exit.i:                   ; preds = %if.then.i.i.i.i272, %rtl_csi_read.exit.i.i.i271
  %call.i.i273 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %190, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  %add.ptr.i274 = getelementptr i8, i8* %188, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr.i274) #10, !srcloc !5
  %msg_enable.i.i.i33.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %195 = bitcast i8* %msg_enable.i.i.i33.i to i32*
  %dev.i.i.i37.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %196 = bitcast i8* %dev.i.i.i37.i to %struct.net_device**
  br label %for.body.i

for.body.i:                                       ; preds = %rtl_ephy_write.exit.i293, %rtl_csi_access_enable_1.exit.i
  %indvars.iv.i = phi i64 [ 0, %rtl_csi_access_enable_1.exit.i ], [ %indvars.iv.next.i, %rtl_ephy_write.exit.i293 ]
  %offset.i = getelementptr [3 x %struct.ephy_info], [3 x %struct.ephy_info]* @rtl_hw_start_8168d_4.e_info_8168d_4, i64 0, i64 %indvars.iv.i, i32 0
  %197 = load i32, i32* %offset.i, align 8
  %198 = load i8*, i8** %mmio_addr, align 8
  %and.i.i275 = shl i32 %197, 16
  %shl.i.i276 = and i32 %and.i.i275, 2031616
  %add.ptr.i.i277 = getelementptr i8, i8* %198, i64 128
  %199 = bitcast i8* %add.ptr.i.i277 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i.i276, i32* %199) #10, !srcloc !8
  br label %for.body.i.i.i.i284

for.cond.i.i.i.i280:                              ; preds = %for.body.i.i.i.i284
  %inc.i.i.i.i278 = add nuw nsw i32 %i.017.i.i.i.i281, 1
  %cmp.i.i.i.i279 = icmp ult i32 %i.017.i.i.i.i281, 99
  br i1 %cmp.i.i.i.i279, label %for.body.i.i.i.i284, label %do.body.i.i.i.i287

for.body.i.i.i.i284:                              ; preds = %for.cond.i.i.i.i280, %for.body.i
  %i.017.i.i.i.i281 = phi i32 [ 0, %for.body.i ], [ %inc.i.i.i.i278, %for.cond.i.i.i.i280 ]
  call void @__udelay(i64 10) #9
  %200 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i282 = getelementptr i8, i8* %200, i64 128
  %201 = bitcast i8* %add.ptr.i.i.i282 to i32*
  %202 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %201) #10, !srcloc !2
  %tobool.i.i.i283 = icmp slt i32 %202, 0
  br i1 %tobool.i.i.i283, label %cond.true.i.i289, label %for.cond.i.i.i.i280

do.body.i.i.i.i287:                               ; preds = %for.cond.i.i.i.i280
  %203 = load i32, i32* %195, align 8
  %and.i.i.i.i285 = and i32 %203, 1
  %tobool4.i.i.i.i286 = icmp eq i32 %and.i.i.i.i285, 0
  br i1 %tobool4.i.i.i.i286, label %rtl_ephy_read.exit.i292, label %if.then5.i.i.i.i288

if.then5.i.i.i.i288:                              ; preds = %do.body.i.i.i.i287
  %204 = load %struct.net_device*, %struct.net_device** %196, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %204, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i292

cond.true.i.i289:                                 ; preds = %for.body.i.i.i.i284
  %205 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %199) #10, !srcloc !2
  %phitmp.i22.i = trunc i32 %205 to i16
  br label %rtl_ephy_read.exit.i292

rtl_ephy_read.exit.i292:                          ; preds = %cond.true.i.i289, %if.then5.i.i.i.i288, %do.body.i.i.i.i287
  %cond.i.i290 = phi i16 [ %phitmp.i22.i, %cond.true.i.i289 ], [ -1, %do.body.i.i.i.i287 ], [ -1, %if.then5.i.i.i.i288 ]
  %mask.i = getelementptr [3 x %struct.ephy_info], [3 x %struct.ephy_info]* @rtl_hw_start_8168d_4.e_info_8168d_4, i64 0, i64 %indvars.iv.i, i32 1
  %206 = load i16, i16* %mask.i, align 4
  %and20.i = and i16 %206, %cond.i.i290
  %bits.i = getelementptr [3 x %struct.ephy_info], [3 x %struct.ephy_info]* @rtl_hw_start_8168d_4.e_info_8168d_4, i64 0, i64 %indvars.iv.i, i32 2
  %207 = load i16, i16* %bits.i, align 2
  %or21.i = or i16 %and20.i, %207
  %or.i = zext i16 %or21.i to i32
  %208 = load i8*, i8** %mmio_addr, align 8
  %or2.i.i291 = or i32 %or.i, -2147287040
  %add.ptr.i25.i = getelementptr i8, i8* %208, i64 128
  %209 = bitcast i8* %add.ptr.i25.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i291, i32* %209) #10, !srcloc !8
  br label %for.body.i.i.i32.i

for.cond.i.i.i28.i:                               ; preds = %for.body.i.i.i32.i
  %inc.i.i.i26.i = add nuw nsw i32 %i.017.i.i.i29.i, 1
  %cmp.i.i.i27.i = icmp ult i32 %i.017.i.i.i29.i, 99
  br i1 %cmp.i.i.i27.i, label %for.body.i.i.i32.i, label %do.body.i.i.i36.i

for.body.i.i.i32.i:                               ; preds = %for.cond.i.i.i28.i, %rtl_ephy_read.exit.i292
  %i.017.i.i.i29.i = phi i32 [ 0, %rtl_ephy_read.exit.i292 ], [ %inc.i.i.i26.i, %for.cond.i.i.i28.i ]
  call void @__udelay(i64 10) #9
  %210 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i30.i = getelementptr i8, i8* %210, i64 128
  %211 = bitcast i8* %add.ptr.i.i30.i to i32*
  %212 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %211) #10, !srcloc !2
  %tobool.i.i31.i = icmp slt i32 %212, 0
  br i1 %tobool.i.i31.i, label %for.cond.i.i.i28.i, label %rtl_ephy_write.exit.i293

do.body.i.i.i36.i:                                ; preds = %for.cond.i.i.i28.i
  %213 = load i32, i32* %195, align 8
  %and.i.i.i34.i = and i32 %213, 1
  %tobool4.i.i.i35.i = icmp eq i32 %and.i.i.i34.i, 0
  br i1 %tobool4.i.i.i35.i, label %rtl_ephy_write.exit.i293, label %if.then5.i.i.i38.i

if.then5.i.i.i38.i:                               ; preds = %do.body.i.i.i36.i
  %214 = load %struct.net_device*, %struct.net_device** %196, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %214, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i293

rtl_ephy_write.exit.i293:                         ; preds = %for.body.i.i.i32.i, %if.then5.i.i.i38.i, %do.body.i.i.i36.i
  call void @__const_udelay(i64 42950) #9
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, 3
  br i1 %exitcond.i, label %rtl_hw_start_8168d_4.exit, label %for.body.i

rtl_hw_start_8168d_4.exit:                        ; preds = %rtl_ephy_write.exit.i293
  %call.i.i.i294 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %190, i32 16, i16 zeroext 0, i16 zeroext 256) #9
  br label %sw.epilog

sw.bb33:                                          ; preds = %if.end
  %215 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i296 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %216 = bitcast i8* %pci_dev.i296 to %struct.pci_dev**
  %217 = load %struct.pci_dev*, %struct.pci_dev** %216, align 8
  %read.i.i.i.i297 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %218 = bitcast i8* %read.i.i.i.i297 to i32 (%struct.rtl8169_private*, i32)**
  %219 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %218, align 8
  %tobool.i.i.i.i298 = icmp eq i32 (%struct.rtl8169_private*, i32)* %219, null
  br i1 %tobool.i.i.i.i298, label %rtl_csi_read.exit.i.i.i306, label %cond.true.i.i.i.i302

cond.true.i.i.i.i302:                             ; preds = %sw.bb33
  %call.i.i.i.i299 = call i32 %219(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i300 = and i32 %call.i.i.i.i299, 16777215
  %phitmp.i.i301 = or i32 %phitmp.i.i.i300, 385875968
  br label %rtl_csi_read.exit.i.i.i306

rtl_csi_read.exit.i.i.i306:                       ; preds = %cond.true.i.i.i.i302, %sw.bb33
  %cond.i.i.i.i303 = phi i32 [ %phitmp.i.i301, %cond.true.i.i.i.i302 ], [ 402653183, %sw.bb33 ]
  %write.i.i.i.i304 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %220 = bitcast i8* %write.i.i.i.i304 to void (%struct.rtl8169_private*, i32, i32)**
  %221 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %220, align 8
  %tobool.i3.i.i.i305 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %221, null
  br i1 %tobool.i3.i.i.i305, label %rtl_csi_access_enable_1.exit.i311, label %if.then.i.i.i.i307

if.then.i.i.i.i307:                               ; preds = %rtl_csi_read.exit.i.i.i306
  call void %221(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i303) #9
  br label %rtl_csi_access_enable_1.exit.i311

rtl_csi_access_enable_1.exit.i311:                ; preds = %if.then.i.i.i.i307, %rtl_csi_read.exit.i.i.i306
  %dev.i308 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %222 = bitcast i8* %dev.i308 to %struct.net_device**
  %223 = load %struct.net_device*, %struct.net_device** %222, align 8
  %mtu.i309 = getelementptr inbounds %struct.net_device, %struct.net_device* %223, i64 0, i32 42
  %224 = load i32, i32* %mtu.i309, align 16
  %cmp.i310 = icmp ult i32 %224, 1501
  br i1 %cmp.i310, label %if.then.i313, label %rtl_hw_start_8168dp.exit

if.then.i313:                                     ; preds = %rtl_csi_access_enable_1.exit.i311
  %call.i.i312 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %217, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %rtl_hw_start_8168dp.exit

rtl_hw_start_8168dp.exit:                         ; preds = %rtl_csi_access_enable_1.exit.i311, %if.then.i313
  %add.ptr.i314 = getelementptr i8, i8* %215, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr.i314) #10, !srcloc !5
  %call.i.i.i315 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %217, i32 16, i16 zeroext 256, i16 zeroext 0) #9
  br label %sw.epilog

sw.bb34:                                          ; preds = %if.end, %if.end
  %225 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i317 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %226 = bitcast i8* %pci_dev.i317 to %struct.pci_dev**
  %227 = load %struct.pci_dev*, %struct.pci_dev** %226, align 8
  %read.i.i.i.i318 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %228 = bitcast i8* %read.i.i.i.i318 to i32 (%struct.rtl8169_private*, i32)**
  %229 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %228, align 8
  %tobool.i.i.i.i319 = icmp eq i32 (%struct.rtl8169_private*, i32)* %229, null
  br i1 %tobool.i.i.i.i319, label %rtl_csi_read.exit.i.i.i327, label %cond.true.i.i.i.i323

cond.true.i.i.i.i323:                             ; preds = %sw.bb34
  %call.i.i.i.i320 = call i32 %229(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i321 = and i32 %call.i.i.i.i320, 16777215
  %phitmp.i.i322 = or i32 %phitmp.i.i.i321, 654311424
  br label %rtl_csi_read.exit.i.i.i327

rtl_csi_read.exit.i.i.i327:                       ; preds = %cond.true.i.i.i.i323, %sw.bb34
  %cond.i.i.i.i324 = phi i32 [ %phitmp.i.i322, %cond.true.i.i.i.i323 ], [ 671088639, %sw.bb34 ]
  %write.i.i.i.i325 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %230 = bitcast i8* %write.i.i.i.i325 to void (%struct.rtl8169_private*, i32, i32)**
  %231 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %230, align 8
  %tobool.i3.i.i.i326 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %231, null
  br i1 %tobool.i3.i.i.i326, label %rtl_csi_access_enable_2.exit.i331, label %if.then.i.i.i.i328

if.then.i.i.i.i328:                               ; preds = %rtl_csi_read.exit.i.i.i327
  call void %231(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i324) #9
  br label %rtl_csi_access_enable_2.exit.i331

rtl_csi_access_enable_2.exit.i331:                ; preds = %if.then.i.i.i.i328, %rtl_csi_read.exit.i.i.i327
  %msg_enable.i.i.i.i329 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %232 = bitcast i8* %msg_enable.i.i.i.i329 to i32*
  %dev.i.i.i.i330 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %233 = bitcast i8* %dev.i.i.i.i330 to %struct.net_device**
  br label %while.body.i.i336

while.body.i.i336:                                ; preds = %rtl_ephy_write.exit.i363, %rtl_csi_access_enable_2.exit.i331
  %e.addr.014.i.i332 = phi %struct.ephy_info* [ getelementptr inbounds ([13 x %struct.ephy_info], [13 x %struct.ephy_info]* @rtl_hw_start_8168e_1.e_info_8168e_1, i64 0, i64 0), %rtl_csi_access_enable_2.exit.i331 ], [ %incdec.ptr.i.i361, %rtl_ephy_write.exit.i363 ]
  %len.addr.013.i.i333 = phi i32 [ 13, %rtl_csi_access_enable_2.exit.i331 ], [ %dec.i.i334, %rtl_ephy_write.exit.i363 ]
  %dec.i.i334 = add nsw i32 %len.addr.013.i.i333, -1
  %offset.i.i335 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i332, i64 0, i32 0
  %234 = load i32, i32* %offset.i.i335, align 4
  %235 = load i8*, i8** %mmio_addr, align 8
  %and.i28.i = shl i32 %234, 16
  %shl.i29.i = and i32 %and.i28.i, 2031616
  %add.ptr.i30.i = getelementptr i8, i8* %235, i64 128
  %236 = bitcast i8* %add.ptr.i30.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i29.i, i32* %236) #10, !srcloc !8
  br label %for.body.i.i.i37.i

for.cond.i.i.i33.i:                               ; preds = %for.body.i.i.i37.i
  %inc.i.i.i31.i = add nuw nsw i32 %i.017.i.i.i34.i, 1
  %cmp.i.i.i32.i = icmp ult i32 %i.017.i.i.i34.i, 99
  br i1 %cmp.i.i.i32.i, label %for.body.i.i.i37.i, label %do.body.i.i.i41.i

for.body.i.i.i37.i:                               ; preds = %for.cond.i.i.i33.i, %while.body.i.i336
  %i.017.i.i.i34.i = phi i32 [ 0, %while.body.i.i336 ], [ %inc.i.i.i31.i, %for.cond.i.i.i33.i ]
  call void @__udelay(i64 10) #9
  %237 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i35.i = getelementptr i8, i8* %237, i64 128
  %238 = bitcast i8* %add.ptr.i.i35.i to i32*
  %239 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %238) #10, !srcloc !2
  %tobool.i.i36.i = icmp slt i32 %239, 0
  br i1 %tobool.i.i36.i, label %cond.true.i.i337, label %for.cond.i.i.i33.i

do.body.i.i.i41.i:                                ; preds = %for.cond.i.i.i33.i
  %240 = load i32, i32* %232, align 8
  %and.i.i.i39.i = and i32 %240, 1
  %tobool4.i.i.i40.i = icmp eq i32 %and.i.i.i39.i, 0
  br i1 %tobool4.i.i.i40.i, label %rtl_ephy_read.exit.i349, label %if.then5.i.i.i43.i

if.then5.i.i.i43.i:                               ; preds = %do.body.i.i.i41.i
  %241 = load %struct.net_device*, %struct.net_device** %233, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %241, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i349

cond.true.i.i337:                                 ; preds = %for.body.i.i.i37.i
  %242 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %236) #10, !srcloc !2
  %phitmp.i44.i = trunc i32 %242 to i16
  br label %rtl_ephy_read.exit.i349

rtl_ephy_read.exit.i349:                          ; preds = %cond.true.i.i337, %if.then5.i.i.i43.i, %do.body.i.i.i41.i
  %cond.i.i338 = phi i16 [ %phitmp.i44.i, %cond.true.i.i337 ], [ -1, %do.body.i.i.i41.i ], [ -1, %if.then5.i.i.i43.i ]
  %mask.i.i339 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i332, i64 0, i32 1
  %243 = load i16, i16* %mask.i.i339, align 4
  %neg.i.i340 = xor i16 %243, -1
  %and.i.i341 = and i16 %cond.i.i338, %neg.i.i340
  %bits.i.i342 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i332, i64 0, i32 2
  %244 = load i16, i16* %bits.i.i342, align 2
  %or.i.i343 = or i16 %and.i.i341, %244
  %245 = load i32, i32* %offset.i.i335, align 4
  %conv5.i.i344 = zext i16 %or.i.i343 to i32
  %246 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i345 = shl i32 %245, 16
  %shl.i.i346 = and i32 %and1.i.i345, 2031616
  %or.i25.i = or i32 %shl.i.i346, %conv5.i.i344
  %or2.i.i347 = or i32 %or.i25.i, -2147483648
  %add.ptr.i.i348 = getelementptr i8, i8* %246, i64 128
  %247 = bitcast i8* %add.ptr.i.i348 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i347, i32* %247) #10, !srcloc !8
  br label %for.body.i.i.i.i356

for.cond.i.i.i.i352:                              ; preds = %for.body.i.i.i.i356
  %inc.i.i.i.i350 = add nuw nsw i32 %i.017.i.i.i.i353, 1
  %cmp.i.i.i.i351 = icmp ult i32 %i.017.i.i.i.i353, 99
  br i1 %cmp.i.i.i.i351, label %for.body.i.i.i.i356, label %do.body.i.i.i.i359

for.body.i.i.i.i356:                              ; preds = %for.cond.i.i.i.i352, %rtl_ephy_read.exit.i349
  %i.017.i.i.i.i353 = phi i32 [ 0, %rtl_ephy_read.exit.i349 ], [ %inc.i.i.i.i350, %for.cond.i.i.i.i352 ]
  call void @__udelay(i64 10) #9
  %248 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i354 = getelementptr i8, i8* %248, i64 128
  %249 = bitcast i8* %add.ptr.i.i.i354 to i32*
  %250 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %249) #10, !srcloc !2
  %tobool.i.i.i355 = icmp slt i32 %250, 0
  br i1 %tobool.i.i.i355, label %for.cond.i.i.i.i352, label %rtl_ephy_write.exit.i363

do.body.i.i.i.i359:                               ; preds = %for.cond.i.i.i.i352
  %251 = load i32, i32* %232, align 8
  %and.i.i.i.i357 = and i32 %251, 1
  %tobool4.i.i.i.i358 = icmp eq i32 %and.i.i.i.i357, 0
  br i1 %tobool4.i.i.i.i358, label %rtl_ephy_write.exit.i363, label %if.then5.i.i.i.i360

if.then5.i.i.i.i360:                              ; preds = %do.body.i.i.i.i359
  %252 = load %struct.net_device*, %struct.net_device** %233, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %252, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i363

rtl_ephy_write.exit.i363:                         ; preds = %for.body.i.i.i.i356, %if.then5.i.i.i.i360, %do.body.i.i.i.i359
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i361 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i332, i64 1
  %cmp.i.i362 = icmp ugt i32 %len.addr.013.i.i333, 1
  br i1 %cmp.i.i362, label %while.body.i.i336, label %rtl_ephy_init.exit.i366

rtl_ephy_init.exit.i366:                          ; preds = %rtl_ephy_write.exit.i363
  %253 = load %struct.net_device*, %struct.net_device** %233, align 8
  %mtu.i364 = getelementptr inbounds %struct.net_device, %struct.net_device* %253, i64 0, i32 42
  %254 = load i32, i32* %mtu.i364, align 16
  %cmp.i365 = icmp ult i32 %254, 1501
  br i1 %cmp.i365, label %if.then.i367, label %rtl_hw_start_8168e_1.exit

if.then.i367:                                     ; preds = %rtl_ephy_init.exit.i366
  %call.i26.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %227, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %rtl_hw_start_8168e_1.exit

rtl_hw_start_8168e_1.exit:                        ; preds = %rtl_ephy_init.exit.i366, %if.then.i367
  %add.ptr.i368 = getelementptr i8, i8* %225, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr.i368) #10, !srcloc !5
  %call.i.i.i369 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %227, i32 16, i16 zeroext 256, i16 zeroext 0) #9
  %add.ptr1.i370 = getelementptr i8, i8* %225, i64 240
  %255 = bitcast i8* %add.ptr1.i370 to i32*
  %256 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %255) #10, !srcloc !2
  %or.i371 = or i32 %256, 536870912
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i371, i32* %255) #10, !srcloc !8
  %257 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %255) #10, !srcloc !2
  %and.i = and i32 %257, -536870913
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i, i32* %255) #10, !srcloc !8
  %add.ptr6.i372 = getelementptr i8, i8* %225, i64 86
  %258 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr6.i372) #10, !srcloc !6
  %259 = and i8 %258, -9
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %259, i8* %add.ptr6.i372) #10, !srcloc !5
  br label %sw.epilog

sw.bb35:                                          ; preds = %if.end
  %260 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i374 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %261 = bitcast i8* %pci_dev.i374 to %struct.pci_dev**
  %262 = load %struct.pci_dev*, %struct.pci_dev** %261, align 8
  %read.i.i.i.i375 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %263 = bitcast i8* %read.i.i.i.i375 to i32 (%struct.rtl8169_private*, i32)**
  %264 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %263, align 8
  %tobool.i.i.i.i376 = icmp eq i32 (%struct.rtl8169_private*, i32)* %264, null
  br i1 %tobool.i.i.i.i376, label %rtl_csi_read.exit.i.i.i384, label %cond.true.i.i.i.i380

cond.true.i.i.i.i380:                             ; preds = %sw.bb35
  %call.i.i.i.i377 = call i32 %264(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i378 = and i32 %call.i.i.i.i377, 16777215
  %phitmp.i.i379 = or i32 %phitmp.i.i.i378, 385875968
  br label %rtl_csi_read.exit.i.i.i384

rtl_csi_read.exit.i.i.i384:                       ; preds = %cond.true.i.i.i.i380, %sw.bb35
  %cond.i.i.i.i381 = phi i32 [ %phitmp.i.i379, %cond.true.i.i.i.i380 ], [ 402653183, %sw.bb35 ]
  %write.i.i.i.i382 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %265 = bitcast i8* %write.i.i.i.i382 to void (%struct.rtl8169_private*, i32, i32)**
  %266 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %265, align 8
  %tobool.i3.i.i.i383 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %266, null
  br i1 %tobool.i3.i.i.i383, label %rtl_csi_access_enable_1.exit.i388, label %if.then.i.i.i.i385

if.then.i.i.i.i385:                               ; preds = %rtl_csi_read.exit.i.i.i384
  call void %266(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i381) #9
  br label %rtl_csi_access_enable_1.exit.i388

rtl_csi_access_enable_1.exit.i388:                ; preds = %if.then.i.i.i.i385, %rtl_csi_read.exit.i.i.i384
  %msg_enable.i.i.i.i386 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %267 = bitcast i8* %msg_enable.i.i.i.i386 to i32*
  %dev.i.i.i.i387 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %268 = bitcast i8* %dev.i.i.i.i387 to %struct.net_device**
  br label %while.body.i.i393

while.body.i.i393:                                ; preds = %rtl_ephy_write.exit.i420, %rtl_csi_access_enable_1.exit.i388
  %e.addr.014.i.i389 = phi %struct.ephy_info* [ getelementptr inbounds ([2 x %struct.ephy_info], [2 x %struct.ephy_info]* @rtl_hw_start_8168e_2.e_info_8168e_2, i64 0, i64 0), %rtl_csi_access_enable_1.exit.i388 ], [ %incdec.ptr.i.i418, %rtl_ephy_write.exit.i420 ]
  %len.addr.013.i.i390 = phi i32 [ 2, %rtl_csi_access_enable_1.exit.i388 ], [ %dec.i.i391, %rtl_ephy_write.exit.i420 ]
  %dec.i.i391 = add nsw i32 %len.addr.013.i.i390, -1
  %offset.i.i392 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i389, i64 0, i32 0
  %269 = load i32, i32* %offset.i.i392, align 4
  %270 = load i8*, i8** %mmio_addr, align 8
  %and.i184.i = shl i32 %269, 16
  %shl.i185.i = and i32 %and.i184.i, 2031616
  %add.ptr.i186.i = getelementptr i8, i8* %270, i64 128
  %271 = bitcast i8* %add.ptr.i186.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i185.i, i32* %271) #10, !srcloc !8
  br label %for.body.i.i.i193.i

for.cond.i.i.i189.i:                              ; preds = %for.body.i.i.i193.i
  %inc.i.i.i187.i = add nuw nsw i32 %i.017.i.i.i190.i, 1
  %cmp.i.i.i188.i = icmp ult i32 %i.017.i.i.i190.i, 99
  br i1 %cmp.i.i.i188.i, label %for.body.i.i.i193.i, label %do.body.i.i.i197.i

for.body.i.i.i193.i:                              ; preds = %for.cond.i.i.i189.i, %while.body.i.i393
  %i.017.i.i.i190.i = phi i32 [ 0, %while.body.i.i393 ], [ %inc.i.i.i187.i, %for.cond.i.i.i189.i ]
  call void @__udelay(i64 10) #9
  %272 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i191.i = getelementptr i8, i8* %272, i64 128
  %273 = bitcast i8* %add.ptr.i.i191.i to i32*
  %274 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %273) #10, !srcloc !2
  %tobool.i.i192.i = icmp slt i32 %274, 0
  br i1 %tobool.i.i192.i, label %cond.true.i.i394, label %for.cond.i.i.i189.i

do.body.i.i.i197.i:                               ; preds = %for.cond.i.i.i189.i
  %275 = load i32, i32* %267, align 8
  %and.i.i.i195.i = and i32 %275, 1
  %tobool4.i.i.i196.i = icmp eq i32 %and.i.i.i195.i, 0
  br i1 %tobool4.i.i.i196.i, label %rtl_ephy_read.exit.i406, label %if.then5.i.i.i199.i

if.then5.i.i.i199.i:                              ; preds = %do.body.i.i.i197.i
  %276 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %276, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i406

cond.true.i.i394:                                 ; preds = %for.body.i.i.i193.i
  %277 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %271) #10, !srcloc !2
  %phitmp.i200.i = trunc i32 %277 to i16
  br label %rtl_ephy_read.exit.i406

rtl_ephy_read.exit.i406:                          ; preds = %cond.true.i.i394, %if.then5.i.i.i199.i, %do.body.i.i.i197.i
  %cond.i.i395 = phi i16 [ %phitmp.i200.i, %cond.true.i.i394 ], [ -1, %do.body.i.i.i197.i ], [ -1, %if.then5.i.i.i199.i ]
  %mask.i.i396 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i389, i64 0, i32 1
  %278 = load i16, i16* %mask.i.i396, align 4
  %neg.i.i397 = xor i16 %278, -1
  %and.i.i398 = and i16 %cond.i.i395, %neg.i.i397
  %bits.i.i399 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i389, i64 0, i32 2
  %279 = load i16, i16* %bits.i.i399, align 2
  %or.i.i400 = or i16 %and.i.i398, %279
  %280 = load i32, i32* %offset.i.i392, align 4
  %conv5.i.i401 = zext i16 %or.i.i400 to i32
  %281 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i402 = shl i32 %280, 16
  %shl.i.i403 = and i32 %and1.i.i402, 2031616
  %or.i57.i = or i32 %shl.i.i403, %conv5.i.i401
  %or2.i.i404 = or i32 %or.i57.i, -2147483648
  %add.ptr.i.i405 = getelementptr i8, i8* %281, i64 128
  %282 = bitcast i8* %add.ptr.i.i405 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i404, i32* %282) #10, !srcloc !8
  br label %for.body.i.i.i.i413

for.cond.i.i.i.i409:                              ; preds = %for.body.i.i.i.i413
  %inc.i.i.i.i407 = add nuw nsw i32 %i.017.i.i.i.i410, 1
  %cmp.i.i.i.i408 = icmp ult i32 %i.017.i.i.i.i410, 99
  br i1 %cmp.i.i.i.i408, label %for.body.i.i.i.i413, label %do.body.i.i.i.i416

for.body.i.i.i.i413:                              ; preds = %for.cond.i.i.i.i409, %rtl_ephy_read.exit.i406
  %i.017.i.i.i.i410 = phi i32 [ 0, %rtl_ephy_read.exit.i406 ], [ %inc.i.i.i.i407, %for.cond.i.i.i.i409 ]
  call void @__udelay(i64 10) #9
  %283 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i411 = getelementptr i8, i8* %283, i64 128
  %284 = bitcast i8* %add.ptr.i.i.i411 to i32*
  %285 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %284) #10, !srcloc !2
  %tobool.i.i.i412 = icmp slt i32 %285, 0
  br i1 %tobool.i.i.i412, label %for.cond.i.i.i.i409, label %rtl_ephy_write.exit.i420

do.body.i.i.i.i416:                               ; preds = %for.cond.i.i.i.i409
  %286 = load i32, i32* %267, align 8
  %and.i.i.i.i414 = and i32 %286, 1
  %tobool4.i.i.i.i415 = icmp eq i32 %and.i.i.i.i414, 0
  br i1 %tobool4.i.i.i.i415, label %rtl_ephy_write.exit.i420, label %if.then5.i.i.i.i417

if.then5.i.i.i.i417:                              ; preds = %do.body.i.i.i.i416
  %287 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %287, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i420

rtl_ephy_write.exit.i420:                         ; preds = %for.body.i.i.i.i413, %if.then5.i.i.i.i417, %do.body.i.i.i.i416
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i418 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i389, i64 1
  %cmp.i.i419 = icmp ugt i32 %len.addr.013.i.i390, 1
  br i1 %cmp.i.i419, label %while.body.i.i393, label %rtl_ephy_init.exit.i423

rtl_ephy_init.exit.i423:                          ; preds = %rtl_ephy_write.exit.i420
  %288 = load %struct.net_device*, %struct.net_device** %268, align 8
  %mtu.i421 = getelementptr inbounds %struct.net_device, %struct.net_device* %288, i64 0, i32 42
  %289 = load i32, i32* %mtu.i421, align 16
  %cmp.i422 = icmp ult i32 %289, 1501
  br i1 %cmp.i422, label %if.then.i424, label %if.end.i

if.then.i424:                                     ; preds = %rtl_ephy_init.exit.i423
  %call.i58.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %262, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i424, %rtl_ephy_init.exit.i423
  %290 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i60.i = getelementptr i8, i8* %290, i64 112
  %291 = bitcast i8* %add.ptr.i60.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %291) #10, !srcloc !8
  %add.ptr11.i.i = getelementptr i8, i8* %290, i64 116
  %292 = bitcast i8* %add.ptr11.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471168, i32* %292) #10, !srcloc !8
  br label %for.body.i.i.i67.i

for.cond.i.i.i63.i:                               ; preds = %for.body.i.i.i67.i
  %inc.i.i.i61.i = add nuw nsw i32 %i.017.i.i.i64.i, 1
  %cmp.i.i.i62.i = icmp ult i32 %i.017.i.i.i64.i, 99
  br i1 %cmp.i.i.i62.i, label %for.body.i.i.i67.i, label %do.body.i.i.i71.i

for.body.i.i.i67.i:                               ; preds = %for.cond.i.i.i63.i, %if.end.i
  %i.017.i.i.i64.i = phi i32 [ 0, %if.end.i ], [ %inc.i.i.i61.i, %for.cond.i.i.i63.i ]
  call void @__udelay(i64 100) #9
  %293 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i65.i = getelementptr i8, i8* %293, i64 116
  %294 = bitcast i8* %add.ptr.i.i65.i to i32*
  %295 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %294) #10, !srcloc !2
  %tobool.i.i66.i = icmp slt i32 %295, 0
  br i1 %tobool.i.i66.i, label %for.cond.i.i.i63.i, label %rtl_eri_write.exit.i

do.body.i.i.i71.i:                                ; preds = %for.cond.i.i.i63.i
  %296 = load i32, i32* %267, align 8
  %and.i.i.i69.i = and i32 %296, 1
  %tobool4.i.i.i70.i = icmp eq i32 %and.i.i.i69.i, 0
  br i1 %tobool4.i.i.i70.i, label %rtl_eri_write.exit.i, label %if.then5.i.i.i73.i

if.then5.i.i.i73.i:                               ; preds = %do.body.i.i.i71.i
  %297 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %297, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit.i

rtl_eri_write.exit.i:                             ; preds = %for.body.i.i.i67.i, %if.then5.i.i.i73.i, %do.body.i.i.i71.i
  %298 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i75.i = getelementptr i8, i8* %298, i64 112
  %299 = bitcast i8* %add.ptr.i75.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %299) #10, !srcloc !8
  %add.ptr11.i76.i = getelementptr i8, i8* %298, i64 116
  %300 = bitcast i8* %add.ptr11.i76.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471176, i32* %300) #10, !srcloc !8
  br label %for.body.i.i.i83.i

for.cond.i.i.i79.i:                               ; preds = %for.body.i.i.i83.i
  %inc.i.i.i77.i = add nuw nsw i32 %i.017.i.i.i80.i, 1
  %cmp.i.i.i78.i = icmp ult i32 %i.017.i.i.i80.i, 99
  br i1 %cmp.i.i.i78.i, label %for.body.i.i.i83.i, label %do.body.i.i.i87.i

for.body.i.i.i83.i:                               ; preds = %for.cond.i.i.i79.i, %rtl_eri_write.exit.i
  %i.017.i.i.i80.i = phi i32 [ 0, %rtl_eri_write.exit.i ], [ %inc.i.i.i77.i, %for.cond.i.i.i79.i ]
  call void @__udelay(i64 100) #9
  %301 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i81.i = getelementptr i8, i8* %301, i64 116
  %302 = bitcast i8* %add.ptr.i.i81.i to i32*
  %303 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %302) #10, !srcloc !2
  %tobool.i.i82.i = icmp slt i32 %303, 0
  br i1 %tobool.i.i82.i, label %for.cond.i.i.i79.i, label %rtl_eri_write.exit90.i

do.body.i.i.i87.i:                                ; preds = %for.cond.i.i.i79.i
  %304 = load i32, i32* %267, align 8
  %and.i.i.i85.i = and i32 %304, 1
  %tobool4.i.i.i86.i = icmp eq i32 %and.i.i.i85.i, 0
  br i1 %tobool4.i.i.i86.i, label %rtl_eri_write.exit90.i, label %if.then5.i.i.i89.i

if.then5.i.i.i89.i:                               ; preds = %do.body.i.i.i87.i
  %305 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %305, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit90.i

rtl_eri_write.exit90.i:                           ; preds = %for.body.i.i.i83.i, %if.then5.i.i.i89.i, %do.body.i.i.i87.i
  %306 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i92.i = getelementptr i8, i8* %306, i64 112
  %307 = bitcast i8* %add.ptr.i92.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1048578, i32* %307) #10, !srcloc !8
  %add.ptr11.i93.i = getelementptr i8, i8* %306, i64 116
  %308 = bitcast i8* %add.ptr11.i93.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147422008, i32* %308) #10, !srcloc !8
  br label %for.body.i.i.i100.i

for.cond.i.i.i96.i:                               ; preds = %for.body.i.i.i100.i
  %inc.i.i.i94.i = add nuw nsw i32 %i.017.i.i.i97.i, 1
  %cmp.i.i.i95.i = icmp ult i32 %i.017.i.i.i97.i, 99
  br i1 %cmp.i.i.i95.i, label %for.body.i.i.i100.i, label %do.body.i.i.i104.i

for.body.i.i.i100.i:                              ; preds = %for.cond.i.i.i96.i, %rtl_eri_write.exit90.i
  %i.017.i.i.i97.i = phi i32 [ 0, %rtl_eri_write.exit90.i ], [ %inc.i.i.i94.i, %for.cond.i.i.i96.i ]
  call void @__udelay(i64 100) #9
  %309 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i98.i = getelementptr i8, i8* %309, i64 116
  %310 = bitcast i8* %add.ptr.i.i98.i to i32*
  %311 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %310) #10, !srcloc !2
  %tobool.i.i99.i = icmp slt i32 %311, 0
  br i1 %tobool.i.i99.i, label %for.cond.i.i.i96.i, label %rtl_eri_write.exit107.i

do.body.i.i.i104.i:                               ; preds = %for.cond.i.i.i96.i
  %312 = load i32, i32* %267, align 8
  %and.i.i.i102.i = and i32 %312, 1
  %tobool4.i.i.i103.i = icmp eq i32 %and.i.i.i102.i, 0
  br i1 %tobool4.i.i.i103.i, label %rtl_eri_write.exit107.i, label %if.then5.i.i.i106.i

if.then5.i.i.i106.i:                              ; preds = %do.body.i.i.i104.i
  %313 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %313, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit107.i

rtl_eri_write.exit107.i:                          ; preds = %for.body.i.i.i100.i, %if.then5.i.i.i106.i, %do.body.i.i.i104.i
  %314 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i109.i = getelementptr i8, i8* %314, i64 112
  %315 = bitcast i8* %add.ptr.i109.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1048582, i32* %315) #10, !srcloc !8
  %add.ptr11.i110.i = getelementptr i8, i8* %314, i64 116
  %316 = bitcast i8* %add.ptr11.i110.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421976, i32* %316) #10, !srcloc !8
  br label %for.body.i.i.i117.i

for.cond.i.i.i113.i:                              ; preds = %for.body.i.i.i117.i
  %inc.i.i.i111.i = add nuw nsw i32 %i.017.i.i.i114.i, 1
  %cmp.i.i.i112.i = icmp ult i32 %i.017.i.i.i114.i, 99
  br i1 %cmp.i.i.i112.i, label %for.body.i.i.i117.i, label %do.body.i.i.i121.i

for.body.i.i.i117.i:                              ; preds = %for.cond.i.i.i113.i, %rtl_eri_write.exit107.i
  %i.017.i.i.i114.i = phi i32 [ 0, %rtl_eri_write.exit107.i ], [ %inc.i.i.i111.i, %for.cond.i.i.i113.i ]
  call void @__udelay(i64 100) #9
  %317 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i115.i = getelementptr i8, i8* %317, i64 116
  %318 = bitcast i8* %add.ptr.i.i115.i to i32*
  %319 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %318) #10, !srcloc !2
  %tobool.i.i116.i = icmp slt i32 %319, 0
  br i1 %tobool.i.i116.i, label %for.cond.i.i.i113.i, label %rtl_eri_write.exit124.i

do.body.i.i.i121.i:                               ; preds = %for.cond.i.i.i113.i
  %320 = load i32, i32* %267, align 8
  %and.i.i.i119.i = and i32 %320, 1
  %tobool4.i.i.i120.i = icmp eq i32 %and.i.i.i119.i, 0
  br i1 %tobool4.i.i.i120.i, label %rtl_eri_write.exit124.i, label %if.then5.i.i.i123.i

if.then5.i.i.i123.i:                              ; preds = %do.body.i.i.i121.i
  %321 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %321, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit124.i

rtl_eri_write.exit124.i:                          ; preds = %for.body.i.i.i117.i, %if.then5.i.i.i123.i, %do.body.i.i.i121.i
  %322 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i126.i = getelementptr i8, i8* %322, i64 112
  %323 = bitcast i8* %add.ptr.i126.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 80, i32* %323) #10, !srcloc !8
  %add.ptr11.i127.i = getelementptr i8, i8* %322, i64 116
  %324 = bitcast i8* %add.ptr11.i127.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147422004, i32* %324) #10, !srcloc !8
  br label %for.body.i.i.i134.i

for.cond.i.i.i130.i:                              ; preds = %for.body.i.i.i134.i
  %inc.i.i.i128.i = add nuw nsw i32 %i.017.i.i.i131.i, 1
  %cmp.i.i.i129.i = icmp ult i32 %i.017.i.i.i131.i, 99
  br i1 %cmp.i.i.i129.i, label %for.body.i.i.i134.i, label %do.body.i.i.i138.i

for.body.i.i.i134.i:                              ; preds = %for.cond.i.i.i130.i, %rtl_eri_write.exit124.i
  %i.017.i.i.i131.i = phi i32 [ 0, %rtl_eri_write.exit124.i ], [ %inc.i.i.i128.i, %for.cond.i.i.i130.i ]
  call void @__udelay(i64 100) #9
  %325 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i132.i = getelementptr i8, i8* %325, i64 116
  %326 = bitcast i8* %add.ptr.i.i132.i to i32*
  %327 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %326) #10, !srcloc !2
  %tobool.i.i133.i = icmp slt i32 %327, 0
  br i1 %tobool.i.i133.i, label %for.cond.i.i.i130.i, label %rtl_eri_write.exit141.i

do.body.i.i.i138.i:                               ; preds = %for.cond.i.i.i130.i
  %328 = load i32, i32* %267, align 8
  %and.i.i.i136.i = and i32 %328, 1
  %tobool4.i.i.i137.i = icmp eq i32 %and.i.i.i136.i, 0
  br i1 %tobool4.i.i.i137.i, label %rtl_eri_write.exit141.i, label %if.then5.i.i.i140.i

if.then5.i.i.i140.i:                              ; preds = %do.body.i.i.i138.i
  %329 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %329, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit141.i

rtl_eri_write.exit141.i:                          ; preds = %for.body.i.i.i134.i, %if.then5.i.i.i140.i, %do.body.i.i.i138.i
  %330 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i143.i = getelementptr i8, i8* %330, i64 112
  %331 = bitcast i8* %add.ptr.i143.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 134152288, i32* %331) #10, !srcloc !8
  %add.ptr11.i144.i = getelementptr i8, i8* %330, i64 116
  %332 = bitcast i8* %add.ptr11.i144.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147422000, i32* %332) #10, !srcloc !8
  br label %for.body.i.i.i151.i

for.cond.i.i.i147.i:                              ; preds = %for.body.i.i.i151.i
  %inc.i.i.i145.i = add nuw nsw i32 %i.017.i.i.i148.i, 1
  %cmp.i.i.i146.i = icmp ult i32 %i.017.i.i.i148.i, 99
  br i1 %cmp.i.i.i146.i, label %for.body.i.i.i151.i, label %do.body.i.i.i155.i

for.body.i.i.i151.i:                              ; preds = %for.cond.i.i.i147.i, %rtl_eri_write.exit141.i
  %i.017.i.i.i148.i = phi i32 [ 0, %rtl_eri_write.exit141.i ], [ %inc.i.i.i145.i, %for.cond.i.i.i147.i ]
  call void @__udelay(i64 100) #9
  %333 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i149.i = getelementptr i8, i8* %333, i64 116
  %334 = bitcast i8* %add.ptr.i.i149.i to i32*
  %335 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %334) #10, !srcloc !2
  %tobool.i.i150.i = icmp slt i32 %335, 0
  br i1 %tobool.i.i150.i, label %for.cond.i.i.i147.i, label %rtl_eri_write.exit158.i

do.body.i.i.i155.i:                               ; preds = %for.cond.i.i.i147.i
  %336 = load i32, i32* %267, align 8
  %and.i.i.i153.i = and i32 %336, 1
  %tobool4.i.i.i154.i = icmp eq i32 %and.i.i.i153.i, 0
  br i1 %tobool4.i.i.i154.i, label %rtl_eri_write.exit158.i, label %if.then5.i.i.i157.i

if.then5.i.i.i157.i:                              ; preds = %do.body.i.i.i155.i
  %337 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %337, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit158.i

rtl_eri_write.exit158.i:                          ; preds = %for.body.i.i.i151.i, %if.then5.i.i.i157.i, %do.body.i.i.i155.i
  %338 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i159.i = getelementptr i8, i8* %338, i64 116
  %339 = bitcast i8* %add.ptr.i.i159.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61872, i32* %339) #10, !srcloc !8
  br label %for.body.i.i.i.i.i

for.cond.i.i.i.i.i:                               ; preds = %for.body.i.i.i.i.i
  %inc.i.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i.i, 1
  %cmp.i.i.i.i.i = icmp ult i32 %i.017.i.i.i.i.i, 99
  br i1 %cmp.i.i.i.i.i, label %for.body.i.i.i.i.i, label %do.body.i.i.i.i.i

for.body.i.i.i.i.i:                               ; preds = %for.cond.i.i.i.i.i, %rtl_eri_write.exit158.i
  %i.017.i.i.i.i.i = phi i32 [ 0, %rtl_eri_write.exit158.i ], [ %inc.i.i.i.i.i, %for.cond.i.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %340 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i.i = getelementptr i8, i8* %340, i64 116
  %341 = bitcast i8* %add.ptr.i.i.i.i to i32*
  %342 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %341) #10, !srcloc !2
  %tobool.i.i.i160.i = icmp slt i32 %342, 0
  br i1 %tobool.i.i.i160.i, label %cond.true.i.i.i, label %for.cond.i.i.i.i.i

do.body.i.i.i.i.i:                                ; preds = %for.cond.i.i.i.i.i
  %343 = load i32, i32* %267, align 8
  %and.i.i.i.i.i = and i32 %343, 1
  %tobool4.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i.i, label %rtl_w0w1_eri.exit.i, label %if.then5.i.i.i.i.i

if.then5.i.i.i.i.i:                               ; preds = %do.body.i.i.i.i.i
  %344 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %344, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit.i

cond.true.i.i.i:                                  ; preds = %for.body.i.i.i.i.i
  %add.ptr3.i.i.i = getelementptr i8, i8* %338, i64 112
  %345 = bitcast i8* %add.ptr3.i.i.i to i32*
  %346 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %345) #10, !srcloc !2
  %phitmp.i = or i32 %346, 16
  br label %rtl_w0w1_eri.exit.i

rtl_w0w1_eri.exit.i:                              ; preds = %cond.true.i.i.i, %if.then5.i.i.i.i.i, %do.body.i.i.i.i.i
  %cond.i.i.i = phi i32 [ %phitmp.i, %cond.true.i.i.i ], [ -1, %do.body.i.i.i.i.i ], [ -1, %if.then5.i.i.i.i.i ]
  %347 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i202.i = getelementptr i8, i8* %347, i64 112
  %348 = bitcast i8* %add.ptr.i202.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i.i, i32* %348) #10, !srcloc !8
  %add.ptr11.i203.i = getelementptr i8, i8* %347, i64 116
  %349 = bitcast i8* %add.ptr11.i203.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479120, i32* %349) #10, !srcloc !8
  br label %for.body.i.i.i210.i

for.cond.i.i.i206.i:                              ; preds = %for.body.i.i.i210.i
  %inc.i.i.i204.i = add nuw nsw i32 %i.017.i.i.i207.i, 1
  %cmp.i.i.i205.i = icmp ult i32 %i.017.i.i.i207.i, 99
  br i1 %cmp.i.i.i205.i, label %for.body.i.i.i210.i, label %do.body.i.i.i214.i

for.body.i.i.i210.i:                              ; preds = %for.cond.i.i.i206.i, %rtl_w0w1_eri.exit.i
  %i.017.i.i.i207.i = phi i32 [ 0, %rtl_w0w1_eri.exit.i ], [ %inc.i.i.i204.i, %for.cond.i.i.i206.i ]
  call void @__udelay(i64 100) #9
  %350 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i208.i = getelementptr i8, i8* %350, i64 116
  %351 = bitcast i8* %add.ptr.i.i208.i to i32*
  %352 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %351) #10, !srcloc !2
  %tobool.i.i209.i = icmp slt i32 %352, 0
  br i1 %tobool.i.i209.i, label %for.cond.i.i.i206.i, label %rtl_eri_write.exit217.i

do.body.i.i.i214.i:                               ; preds = %for.cond.i.i.i206.i
  %353 = load i32, i32* %267, align 8
  %and.i.i.i212.i = and i32 %353, 1
  %tobool4.i.i.i213.i = icmp eq i32 %and.i.i.i212.i, 0
  br i1 %tobool4.i.i.i213.i, label %rtl_eri_write.exit217.i, label %if.then5.i.i.i216.i

if.then5.i.i.i216.i:                              ; preds = %do.body.i.i.i214.i
  %354 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %354, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit217.i

rtl_eri_write.exit217.i:                          ; preds = %for.body.i.i.i210.i, %if.then5.i.i.i216.i, %do.body.i.i.i214.i
  %355 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i163.i = getelementptr i8, i8* %355, i64 116
  %356 = bitcast i8* %add.ptr.i.i163.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61652, i32* %356) #10, !srcloc !8
  br label %for.body.i.i.i.i170.i

for.cond.i.i.i.i166.i:                            ; preds = %for.body.i.i.i.i170.i
  %inc.i.i.i.i164.i = add nuw nsw i32 %i.017.i.i.i.i167.i, 1
  %cmp.i.i.i.i165.i = icmp ult i32 %i.017.i.i.i.i167.i, 99
  br i1 %cmp.i.i.i.i165.i, label %for.body.i.i.i.i170.i, label %do.body.i.i.i.i174.i

for.body.i.i.i.i170.i:                            ; preds = %for.cond.i.i.i.i166.i, %rtl_eri_write.exit217.i
  %i.017.i.i.i.i167.i = phi i32 [ 0, %rtl_eri_write.exit217.i ], [ %inc.i.i.i.i164.i, %for.cond.i.i.i.i166.i ]
  call void @__udelay(i64 100) #9
  %357 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i168.i = getelementptr i8, i8* %357, i64 116
  %358 = bitcast i8* %add.ptr.i.i.i168.i to i32*
  %359 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %358) #10, !srcloc !2
  %tobool.i.i.i169.i = icmp slt i32 %359, 0
  br i1 %tobool.i.i.i169.i, label %cond.true.i.i178.i, label %for.cond.i.i.i.i166.i

do.body.i.i.i.i174.i:                             ; preds = %for.cond.i.i.i.i166.i
  %360 = load i32, i32* %267, align 8
  %and.i.i.i.i172.i = and i32 %360, 1
  %tobool4.i.i.i.i173.i = icmp eq i32 %and.i.i.i.i172.i, 0
  br i1 %tobool4.i.i.i.i173.i, label %rtl_w0w1_eri.exit182.i, label %if.then5.i.i.i.i176.i

if.then5.i.i.i.i176.i:                            ; preds = %do.body.i.i.i.i174.i
  %361 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %361, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit182.i

cond.true.i.i178.i:                               ; preds = %for.body.i.i.i.i170.i
  %add.ptr3.i.i177.i = getelementptr i8, i8* %355, i64 112
  %362 = bitcast i8* %add.ptr3.i.i177.i to i32*
  %363 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %362) #10, !srcloc !2
  %phitmp235.i = and i32 %363, -65281
  %phitmp236.i = or i32 %phitmp235.i, 3072
  br label %rtl_w0w1_eri.exit182.i

rtl_w0w1_eri.exit182.i:                           ; preds = %cond.true.i.i178.i, %if.then5.i.i.i.i176.i, %do.body.i.i.i.i174.i
  %cond.i.i179.i = phi i32 [ %phitmp236.i, %cond.true.i.i178.i ], [ -62209, %do.body.i.i.i.i174.i ], [ -62209, %if.then5.i.i.i.i176.i ]
  %364 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i219.i = getelementptr i8, i8* %364, i64 112
  %365 = bitcast i8* %add.ptr.i219.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i179.i, i32* %365) #10, !srcloc !8
  %add.ptr11.i220.i = getelementptr i8, i8* %364, i64 116
  %366 = bitcast i8* %add.ptr11.i220.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471148, i32* %366) #10, !srcloc !8
  br label %for.body.i.i.i227.i

for.cond.i.i.i223.i:                              ; preds = %for.body.i.i.i227.i
  %inc.i.i.i221.i = add nuw nsw i32 %i.017.i.i.i224.i, 1
  %cmp.i.i.i222.i = icmp ult i32 %i.017.i.i.i224.i, 99
  br i1 %cmp.i.i.i222.i, label %for.body.i.i.i227.i, label %do.body.i.i.i231.i

for.body.i.i.i227.i:                              ; preds = %for.cond.i.i.i223.i, %rtl_w0w1_eri.exit182.i
  %i.017.i.i.i224.i = phi i32 [ 0, %rtl_w0w1_eri.exit182.i ], [ %inc.i.i.i221.i, %for.cond.i.i.i223.i ]
  call void @__udelay(i64 100) #9
  %367 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i225.i = getelementptr i8, i8* %367, i64 116
  %368 = bitcast i8* %add.ptr.i.i225.i to i32*
  %369 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %368) #10, !srcloc !2
  %tobool.i.i226.i = icmp slt i32 %369, 0
  br i1 %tobool.i.i226.i, label %for.cond.i.i.i223.i, label %rtl_hw_start_8168e_2.exit

do.body.i.i.i231.i:                               ; preds = %for.cond.i.i.i223.i
  %370 = load i32, i32* %267, align 8
  %and.i.i.i229.i = and i32 %370, 1
  %tobool4.i.i.i230.i = icmp eq i32 %and.i.i.i229.i, 0
  br i1 %tobool4.i.i.i230.i, label %rtl_hw_start_8168e_2.exit, label %if.then5.i.i.i233.i

if.then5.i.i.i233.i:                              ; preds = %do.body.i.i.i231.i
  %371 = load %struct.net_device*, %struct.net_device** %268, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %371, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_hw_start_8168e_2.exit

rtl_hw_start_8168e_2.exit:                        ; preds = %for.body.i.i.i227.i, %do.body.i.i.i231.i, %if.then5.i.i.i233.i
  %add.ptr.i425 = getelementptr i8, i8* %260, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 39, i8* %add.ptr.i425) #10, !srcloc !5
  %call.i.i.i426 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %262, i32 16, i16 zeroext 256, i16 zeroext 0) #9
  %add.ptr1.i427 = getelementptr i8, i8* %260, i64 64
  %372 = bitcast i8* %add.ptr1.i427 to i32*
  %373 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %372) #10, !srcloc !2
  %or.i428 = or i32 %373, 128
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i428, i32* %372) #10, !srcloc !8
  %add.ptr3.i429 = getelementptr i8, i8* %260, i64 211
  %374 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3.i429) #10, !srcloc !6
  %375 = and i8 %374, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %375, i8* %add.ptr3.i429) #10, !srcloc !5
  %add.ptr7.i = getelementptr i8, i8* %260, i64 27
  %376 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr7.i) #10, !srcloc !6
  %377 = and i8 %376, -8
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %377, i8* %add.ptr7.i) #10, !srcloc !5
  %add.ptr13.i = getelementptr i8, i8* %260, i64 208
  %378 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr13.i) #10, !srcloc !6
  %379 = or i8 %378, 64
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %379, i8* %add.ptr13.i) #10, !srcloc !5
  %add.ptr19.i = getelementptr i8, i8* %260, i64 240
  %380 = bitcast i8* %add.ptr19.i to i32*
  %381 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %380) #10, !srcloc !2
  %or21.i430 = or i32 %381, 4194304
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or21.i430, i32* %380) #10, !srcloc !8
  %add.ptr23.i = getelementptr i8, i8* %260, i64 86
  %382 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr23.i) #10, !srcloc !6
  %383 = and i8 %382, -9
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %383, i8* %add.ptr23.i) #10, !srcloc !5
  br label %sw.epilog

sw.bb36:                                          ; preds = %if.end, %if.end
  %384 = load i8*, i8** %mmio_addr, align 8
  call fastcc void @rtl_hw_start_8168f(%struct.rtl8169_private* nonnull %0) #9
  %msg_enable.i.i.i.i432 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %385 = bitcast i8* %msg_enable.i.i.i.i432 to i32*
  %dev.i.i.i.i433 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %386 = bitcast i8* %dev.i.i.i.i433 to %struct.net_device**
  br label %while.body.i.i438

while.body.i.i438:                                ; preds = %rtl_ephy_write.exit.i466, %sw.bb36
  %e.addr.014.i.i434 = phi %struct.ephy_info* [ getelementptr inbounds ([4 x %struct.ephy_info], [4 x %struct.ephy_info]* @rtl_hw_start_8168f_1.e_info_8168f_1, i64 0, i64 0), %sw.bb36 ], [ %incdec.ptr.i.i464, %rtl_ephy_write.exit.i466 ]
  %len.addr.013.i.i435 = phi i32 [ 4, %sw.bb36 ], [ %dec.i.i436, %rtl_ephy_write.exit.i466 ]
  %dec.i.i436 = add nsw i32 %len.addr.013.i.i435, -1
  %offset.i.i437 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i434, i64 0, i32 0
  %387 = load i32, i32* %offset.i.i437, align 4
  %388 = load i8*, i8** %mmio_addr, align 8
  %and.i14.i = shl i32 %387, 16
  %shl.i15.i = and i32 %and.i14.i, 2031616
  %add.ptr.i16.i = getelementptr i8, i8* %388, i64 128
  %389 = bitcast i8* %add.ptr.i16.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i15.i, i32* %389) #10, !srcloc !8
  br label %for.body.i.i.i23.i

for.cond.i.i.i19.i:                               ; preds = %for.body.i.i.i23.i
  %inc.i.i.i17.i = add nuw nsw i32 %i.017.i.i.i20.i, 1
  %cmp.i.i.i18.i = icmp ult i32 %i.017.i.i.i20.i, 99
  br i1 %cmp.i.i.i18.i, label %for.body.i.i.i23.i, label %do.body.i.i.i27.i

for.body.i.i.i23.i:                               ; preds = %for.cond.i.i.i19.i, %while.body.i.i438
  %i.017.i.i.i20.i = phi i32 [ 0, %while.body.i.i438 ], [ %inc.i.i.i17.i, %for.cond.i.i.i19.i ]
  call void @__udelay(i64 10) #9
  %390 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i21.i = getelementptr i8, i8* %390, i64 128
  %391 = bitcast i8* %add.ptr.i.i21.i to i32*
  %392 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %391) #10, !srcloc !2
  %tobool.i.i22.i = icmp slt i32 %392, 0
  br i1 %tobool.i.i22.i, label %cond.true.i.i440, label %for.cond.i.i.i19.i

do.body.i.i.i27.i:                                ; preds = %for.cond.i.i.i19.i
  %393 = load i32, i32* %385, align 8
  %and.i.i.i25.i = and i32 %393, 1
  %tobool4.i.i.i26.i = icmp eq i32 %and.i.i.i25.i, 0
  br i1 %tobool4.i.i.i26.i, label %rtl_ephy_read.exit.i452, label %if.then5.i.i.i29.i

if.then5.i.i.i29.i:                               ; preds = %do.body.i.i.i27.i
  %394 = load %struct.net_device*, %struct.net_device** %386, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %394, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i452

cond.true.i.i440:                                 ; preds = %for.body.i.i.i23.i
  %395 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %389) #10, !srcloc !2
  %phitmp.i.i439 = trunc i32 %395 to i16
  br label %rtl_ephy_read.exit.i452

rtl_ephy_read.exit.i452:                          ; preds = %cond.true.i.i440, %if.then5.i.i.i29.i, %do.body.i.i.i27.i
  %cond.i.i441 = phi i16 [ %phitmp.i.i439, %cond.true.i.i440 ], [ -1, %do.body.i.i.i27.i ], [ -1, %if.then5.i.i.i29.i ]
  %mask.i.i442 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i434, i64 0, i32 1
  %396 = load i16, i16* %mask.i.i442, align 4
  %neg.i.i443 = xor i16 %396, -1
  %and.i.i444 = and i16 %cond.i.i441, %neg.i.i443
  %bits.i.i445 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i434, i64 0, i32 2
  %397 = load i16, i16* %bits.i.i445, align 2
  %or.i.i446 = or i16 %and.i.i444, %397
  %398 = load i32, i32* %offset.i.i437, align 4
  %conv5.i.i447 = zext i16 %or.i.i446 to i32
  %399 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i448 = shl i32 %398, 16
  %shl.i.i449 = and i32 %and1.i.i448, 2031616
  %or.i9.i = or i32 %shl.i.i449, %conv5.i.i447
  %or2.i.i450 = or i32 %or.i9.i, -2147483648
  %add.ptr.i.i451 = getelementptr i8, i8* %399, i64 128
  %400 = bitcast i8* %add.ptr.i.i451 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i450, i32* %400) #10, !srcloc !8
  br label %for.body.i.i.i.i459

for.cond.i.i.i.i455:                              ; preds = %for.body.i.i.i.i459
  %inc.i.i.i.i453 = add nuw nsw i32 %i.017.i.i.i.i456, 1
  %cmp.i.i.i.i454 = icmp ult i32 %i.017.i.i.i.i456, 99
  br i1 %cmp.i.i.i.i454, label %for.body.i.i.i.i459, label %do.body.i.i.i.i462

for.body.i.i.i.i459:                              ; preds = %for.cond.i.i.i.i455, %rtl_ephy_read.exit.i452
  %i.017.i.i.i.i456 = phi i32 [ 0, %rtl_ephy_read.exit.i452 ], [ %inc.i.i.i.i453, %for.cond.i.i.i.i455 ]
  call void @__udelay(i64 10) #9
  %401 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i457 = getelementptr i8, i8* %401, i64 128
  %402 = bitcast i8* %add.ptr.i.i.i457 to i32*
  %403 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %402) #10, !srcloc !2
  %tobool.i.i.i458 = icmp slt i32 %403, 0
  br i1 %tobool.i.i.i458, label %for.cond.i.i.i.i455, label %rtl_ephy_write.exit.i466

do.body.i.i.i.i462:                               ; preds = %for.cond.i.i.i.i455
  %404 = load i32, i32* %385, align 8
  %and.i.i.i.i460 = and i32 %404, 1
  %tobool4.i.i.i.i461 = icmp eq i32 %and.i.i.i.i460, 0
  br i1 %tobool4.i.i.i.i461, label %rtl_ephy_write.exit.i466, label %if.then5.i.i.i.i463

if.then5.i.i.i.i463:                              ; preds = %do.body.i.i.i.i462
  %405 = load %struct.net_device*, %struct.net_device** %386, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %405, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i466

rtl_ephy_write.exit.i466:                         ; preds = %for.body.i.i.i.i459, %if.then5.i.i.i.i463, %do.body.i.i.i.i462
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i464 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i434, i64 1
  %cmp.i.i465 = icmp ugt i32 %len.addr.013.i.i435, 1
  br i1 %cmp.i.i465, label %while.body.i.i438, label %rtl_ephy_init.exit.i467

rtl_ephy_init.exit.i467:                          ; preds = %rtl_ephy_write.exit.i466
  %406 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i10.i = getelementptr i8, i8* %406, i64 116
  %407 = bitcast i8* %add.ptr.i.i10.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61652, i32* %407) #10, !srcloc !8
  br label %for.body.i.i.i.i.i474

for.cond.i.i.i.i.i470:                            ; preds = %for.body.i.i.i.i.i474
  %inc.i.i.i.i.i468 = add nuw nsw i32 %i.017.i.i.i.i.i471, 1
  %cmp.i.i.i.i.i469 = icmp ult i32 %i.017.i.i.i.i.i471, 99
  br i1 %cmp.i.i.i.i.i469, label %for.body.i.i.i.i.i474, label %do.body.i.i.i.i.i477

for.body.i.i.i.i.i474:                            ; preds = %for.cond.i.i.i.i.i470, %rtl_ephy_init.exit.i467
  %i.017.i.i.i.i.i471 = phi i32 [ 0, %rtl_ephy_init.exit.i467 ], [ %inc.i.i.i.i.i468, %for.cond.i.i.i.i.i470 ]
  call void @__udelay(i64 100) #9
  %408 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i.i472 = getelementptr i8, i8* %408, i64 116
  %409 = bitcast i8* %add.ptr.i.i.i.i472 to i32*
  %410 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %409) #10, !srcloc !2
  %tobool.i.i.i.i473 = icmp slt i32 %410, 0
  br i1 %tobool.i.i.i.i473, label %cond.true.i.i.i481, label %for.cond.i.i.i.i.i470

do.body.i.i.i.i.i477:                             ; preds = %for.cond.i.i.i.i.i470
  %411 = load i32, i32* %385, align 8
  %and.i.i.i.i.i475 = and i32 %411, 1
  %tobool4.i.i.i.i.i476 = icmp eq i32 %and.i.i.i.i.i475, 0
  br i1 %tobool4.i.i.i.i.i476, label %rtl_w0w1_eri.exit.i484, label %if.then5.i.i.i.i.i478

if.then5.i.i.i.i.i478:                            ; preds = %do.body.i.i.i.i.i477
  %412 = load %struct.net_device*, %struct.net_device** %386, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %412, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit.i484

cond.true.i.i.i481:                               ; preds = %for.body.i.i.i.i.i474
  %add.ptr3.i.i.i479 = getelementptr i8, i8* %406, i64 112
  %413 = bitcast i8* %add.ptr3.i.i.i479 to i32*
  %414 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %413) #10, !srcloc !2
  %phitmp.i480 = and i32 %414, -65281
  %phitmp45.i = or i32 %phitmp.i480, 3072
  br label %rtl_w0w1_eri.exit.i484

rtl_w0w1_eri.exit.i484:                           ; preds = %cond.true.i.i.i481, %if.then5.i.i.i.i.i478, %do.body.i.i.i.i.i477
  %cond.i.i.i482 = phi i32 [ %phitmp45.i, %cond.true.i.i.i481 ], [ -62209, %do.body.i.i.i.i.i477 ], [ -62209, %if.then5.i.i.i.i.i478 ]
  %415 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i31.i = getelementptr i8, i8* %415, i64 112
  %416 = bitcast i8* %add.ptr.i31.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i.i482, i32* %416) #10, !srcloc !8
  %add.ptr11.i.i483 = getelementptr i8, i8* %415, i64 116
  %417 = bitcast i8* %add.ptr11.i.i483 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471148, i32* %417) #10, !srcloc !8
  br label %for.body.i.i.i38.i

for.cond.i.i.i34.i:                               ; preds = %for.body.i.i.i38.i
  %inc.i.i.i32.i = add nuw nsw i32 %i.017.i.i.i35.i, 1
  %cmp.i.i.i33.i = icmp ult i32 %i.017.i.i.i35.i, 99
  br i1 %cmp.i.i.i33.i, label %for.body.i.i.i38.i, label %do.body.i.i.i42.i

for.body.i.i.i38.i:                               ; preds = %for.cond.i.i.i34.i, %rtl_w0w1_eri.exit.i484
  %i.017.i.i.i35.i = phi i32 [ 0, %rtl_w0w1_eri.exit.i484 ], [ %inc.i.i.i32.i, %for.cond.i.i.i34.i ]
  call void @__udelay(i64 100) #9
  %418 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i36.i = getelementptr i8, i8* %418, i64 116
  %419 = bitcast i8* %add.ptr.i.i36.i to i32*
  %420 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %419) #10, !srcloc !2
  %tobool.i.i37.i = icmp slt i32 %420, 0
  br i1 %tobool.i.i37.i, label %for.cond.i.i.i34.i, label %rtl_hw_start_8168f_1.exit

do.body.i.i.i42.i:                                ; preds = %for.cond.i.i.i34.i
  %421 = load i32, i32* %385, align 8
  %and.i.i.i40.i = and i32 %421, 1
  %tobool4.i.i.i41.i = icmp eq i32 %and.i.i.i40.i, 0
  br i1 %tobool4.i.i.i41.i, label %rtl_hw_start_8168f_1.exit, label %if.then5.i.i.i44.i

if.then5.i.i.i44.i:                               ; preds = %do.body.i.i.i42.i
  %422 = load %struct.net_device*, %struct.net_device** %386, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %422, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_hw_start_8168f_1.exit

rtl_hw_start_8168f_1.exit:                        ; preds = %for.body.i.i.i38.i, %do.body.i.i.i42.i, %if.then5.i.i.i44.i
  %add.ptr.i485 = getelementptr i8, i8* %384, i64 27
  %423 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i485) #10, !srcloc !6
  %424 = and i8 %423, -8
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %424, i8* %add.ptr.i485) #10, !srcloc !5
  br label %sw.epilog

sw.bb37:                                          ; preds = %if.end
  call fastcc void @rtl_hw_start_8168f(%struct.rtl8169_private* nonnull %0) #9
  %425 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i488 = getelementptr i8, i8* %425, i64 84
  %426 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i.i488) #10, !srcloc !6
  %427 = and i8 %426, -3
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %427, i8* %add.ptr.i.i488) #10, !srcloc !5
  %msg_enable.i.i.i.i489 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %428 = bitcast i8* %msg_enable.i.i.i.i489 to i32*
  %dev.i.i.i.i490 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %429 = bitcast i8* %dev.i.i.i.i490 to %struct.net_device**
  br label %while.body.i.i495

while.body.i.i495:                                ; preds = %rtl_ephy_write.exit.i523, %sw.bb37
  %e.addr.014.i.i491 = phi %struct.ephy_info* [ getelementptr inbounds ([4 x %struct.ephy_info], [4 x %struct.ephy_info]* @rtl_hw_start_8411.e_info_8168f_1, i64 0, i64 0), %sw.bb37 ], [ %incdec.ptr.i.i521, %rtl_ephy_write.exit.i523 ]
  %len.addr.013.i.i492 = phi i32 [ 4, %sw.bb37 ], [ %dec.i.i493, %rtl_ephy_write.exit.i523 ]
  %dec.i.i493 = add nsw i32 %len.addr.013.i.i492, -1
  %offset.i.i494 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i491, i64 0, i32 0
  %430 = load i32, i32* %offset.i.i494, align 4
  %431 = load i8*, i8** %mmio_addr, align 8
  %and.i11.i = shl i32 %430, 16
  %shl.i12.i = and i32 %and.i11.i, 2031616
  %add.ptr.i13.i = getelementptr i8, i8* %431, i64 128
  %432 = bitcast i8* %add.ptr.i13.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i12.i, i32* %432) #10, !srcloc !8
  br label %for.body.i.i.i20.i

for.cond.i.i.i16.i:                               ; preds = %for.body.i.i.i20.i
  %inc.i.i.i14.i = add nuw nsw i32 %i.017.i.i.i17.i, 1
  %cmp.i.i.i15.i = icmp ult i32 %i.017.i.i.i17.i, 99
  br i1 %cmp.i.i.i15.i, label %for.body.i.i.i20.i, label %do.body.i.i.i24.i

for.body.i.i.i20.i:                               ; preds = %for.cond.i.i.i16.i, %while.body.i.i495
  %i.017.i.i.i17.i = phi i32 [ 0, %while.body.i.i495 ], [ %inc.i.i.i14.i, %for.cond.i.i.i16.i ]
  call void @__udelay(i64 10) #9
  %433 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i18.i = getelementptr i8, i8* %433, i64 128
  %434 = bitcast i8* %add.ptr.i.i18.i to i32*
  %435 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %434) #10, !srcloc !2
  %tobool.i.i19.i = icmp slt i32 %435, 0
  br i1 %tobool.i.i19.i, label %cond.true.i.i497, label %for.cond.i.i.i16.i

do.body.i.i.i24.i:                                ; preds = %for.cond.i.i.i16.i
  %436 = load i32, i32* %428, align 8
  %and.i.i.i22.i = and i32 %436, 1
  %tobool4.i.i.i23.i = icmp eq i32 %and.i.i.i22.i, 0
  br i1 %tobool4.i.i.i23.i, label %rtl_ephy_read.exit.i509, label %if.then5.i.i.i26.i

if.then5.i.i.i26.i:                               ; preds = %do.body.i.i.i24.i
  %437 = load %struct.net_device*, %struct.net_device** %429, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %437, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i509

cond.true.i.i497:                                 ; preds = %for.body.i.i.i20.i
  %438 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %432) #10, !srcloc !2
  %phitmp.i.i496 = trunc i32 %438 to i16
  br label %rtl_ephy_read.exit.i509

rtl_ephy_read.exit.i509:                          ; preds = %cond.true.i.i497, %if.then5.i.i.i26.i, %do.body.i.i.i24.i
  %cond.i.i498 = phi i16 [ %phitmp.i.i496, %cond.true.i.i497 ], [ -1, %do.body.i.i.i24.i ], [ -1, %if.then5.i.i.i26.i ]
  %mask.i.i499 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i491, i64 0, i32 1
  %439 = load i16, i16* %mask.i.i499, align 4
  %neg.i.i500 = xor i16 %439, -1
  %and.i.i501 = and i16 %cond.i.i498, %neg.i.i500
  %bits.i.i502 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i491, i64 0, i32 2
  %440 = load i16, i16* %bits.i.i502, align 2
  %or.i.i503 = or i16 %and.i.i501, %440
  %441 = load i32, i32* %offset.i.i494, align 4
  %conv5.i.i504 = zext i16 %or.i.i503 to i32
  %442 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i505 = shl i32 %441, 16
  %shl.i.i506 = and i32 %and1.i.i505, 2031616
  %or.i6.i507 = or i32 %shl.i.i506, %conv5.i.i504
  %or2.i.i508 = or i32 %or.i6.i507, -2147483648
  %add.ptr.i7.i = getelementptr i8, i8* %442, i64 128
  %443 = bitcast i8* %add.ptr.i7.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i508, i32* %443) #10, !srcloc !8
  br label %for.body.i.i.i.i516

for.cond.i.i.i.i512:                              ; preds = %for.body.i.i.i.i516
  %inc.i.i.i.i510 = add nuw nsw i32 %i.017.i.i.i.i513, 1
  %cmp.i.i.i.i511 = icmp ult i32 %i.017.i.i.i.i513, 99
  br i1 %cmp.i.i.i.i511, label %for.body.i.i.i.i516, label %do.body.i.i.i.i519

for.body.i.i.i.i516:                              ; preds = %for.cond.i.i.i.i512, %rtl_ephy_read.exit.i509
  %i.017.i.i.i.i513 = phi i32 [ 0, %rtl_ephy_read.exit.i509 ], [ %inc.i.i.i.i510, %for.cond.i.i.i.i512 ]
  call void @__udelay(i64 10) #9
  %444 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i514 = getelementptr i8, i8* %444, i64 128
  %445 = bitcast i8* %add.ptr.i.i.i514 to i32*
  %446 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %445) #10, !srcloc !2
  %tobool.i.i.i515 = icmp slt i32 %446, 0
  br i1 %tobool.i.i.i515, label %for.cond.i.i.i.i512, label %rtl_ephy_write.exit.i523

do.body.i.i.i.i519:                               ; preds = %for.cond.i.i.i.i512
  %447 = load i32, i32* %428, align 8
  %and.i.i.i.i517 = and i32 %447, 1
  %tobool4.i.i.i.i518 = icmp eq i32 %and.i.i.i.i517, 0
  br i1 %tobool4.i.i.i.i518, label %rtl_ephy_write.exit.i523, label %if.then5.i.i.i.i520

if.then5.i.i.i.i520:                              ; preds = %do.body.i.i.i.i519
  %448 = load %struct.net_device*, %struct.net_device** %429, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %448, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i523

rtl_ephy_write.exit.i523:                         ; preds = %for.body.i.i.i.i516, %if.then5.i.i.i.i520, %do.body.i.i.i.i519
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i521 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i491, i64 1
  %cmp.i.i522 = icmp ugt i32 %len.addr.013.i.i492, 1
  br i1 %cmp.i.i522, label %while.body.i.i495, label %rtl_ephy_init.exit.i524

rtl_ephy_init.exit.i524:                          ; preds = %rtl_ephy_write.exit.i523
  %449 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i8.i = getelementptr i8, i8* %449, i64 116
  %450 = bitcast i8* %add.ptr.i.i8.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61652, i32* %450) #10, !srcloc !8
  br label %for.body.i.i.i.i.i531

for.cond.i.i.i.i.i527:                            ; preds = %for.body.i.i.i.i.i531
  %inc.i.i.i.i.i525 = add nuw nsw i32 %i.017.i.i.i.i.i528, 1
  %cmp.i.i.i.i.i526 = icmp ult i32 %i.017.i.i.i.i.i528, 99
  br i1 %cmp.i.i.i.i.i526, label %for.body.i.i.i.i.i531, label %do.body.i.i.i.i.i534

for.body.i.i.i.i.i531:                            ; preds = %for.cond.i.i.i.i.i527, %rtl_ephy_init.exit.i524
  %i.017.i.i.i.i.i528 = phi i32 [ 0, %rtl_ephy_init.exit.i524 ], [ %inc.i.i.i.i.i525, %for.cond.i.i.i.i.i527 ]
  call void @__udelay(i64 100) #9
  %451 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i.i529 = getelementptr i8, i8* %451, i64 116
  %452 = bitcast i8* %add.ptr.i.i.i.i529 to i32*
  %453 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %452) #10, !srcloc !2
  %tobool.i.i.i.i530 = icmp slt i32 %453, 0
  br i1 %tobool.i.i.i.i530, label %cond.true.i.i.i538, label %for.cond.i.i.i.i.i527

do.body.i.i.i.i.i534:                             ; preds = %for.cond.i.i.i.i.i527
  %454 = load i32, i32* %428, align 8
  %and.i.i.i.i.i532 = and i32 %454, 1
  %tobool4.i.i.i.i.i533 = icmp eq i32 %and.i.i.i.i.i532, 0
  br i1 %tobool4.i.i.i.i.i533, label %rtl_w0w1_eri.exit.i541, label %if.then5.i.i.i.i.i535

if.then5.i.i.i.i.i535:                            ; preds = %do.body.i.i.i.i.i534
  %455 = load %struct.net_device*, %struct.net_device** %429, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %455, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit.i541

cond.true.i.i.i538:                               ; preds = %for.body.i.i.i.i.i531
  %add.ptr3.i.i.i536 = getelementptr i8, i8* %449, i64 112
  %456 = bitcast i8* %add.ptr3.i.i.i536 to i32*
  %457 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %456) #10, !srcloc !2
  %phitmp.i537 = or i32 %457, 3072
  br label %rtl_w0w1_eri.exit.i541

rtl_w0w1_eri.exit.i541:                           ; preds = %cond.true.i.i.i538, %if.then5.i.i.i.i.i535, %do.body.i.i.i.i.i534
  %cond.i.i.i539 = phi i32 [ %phitmp.i537, %cond.true.i.i.i538 ], [ -1, %do.body.i.i.i.i.i534 ], [ -1, %if.then5.i.i.i.i.i535 ]
  %458 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i28.i = getelementptr i8, i8* %458, i64 112
  %459 = bitcast i8* %add.ptr.i28.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i.i539, i32* %459) #10, !srcloc !8
  %add.ptr11.i.i540 = getelementptr i8, i8* %458, i64 116
  %460 = bitcast i8* %add.ptr11.i.i540 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471148, i32* %460) #10, !srcloc !8
  br label %for.body.i.i.i35.i

for.cond.i.i.i31.i:                               ; preds = %for.body.i.i.i35.i
  %inc.i.i.i29.i = add nuw nsw i32 %i.017.i.i.i32.i, 1
  %cmp.i.i.i30.i = icmp ult i32 %i.017.i.i.i32.i, 99
  br i1 %cmp.i.i.i30.i, label %for.body.i.i.i35.i, label %do.body.i.i.i39.i

for.body.i.i.i35.i:                               ; preds = %for.cond.i.i.i31.i, %rtl_w0w1_eri.exit.i541
  %i.017.i.i.i32.i = phi i32 [ 0, %rtl_w0w1_eri.exit.i541 ], [ %inc.i.i.i29.i, %for.cond.i.i.i31.i ]
  call void @__udelay(i64 100) #9
  %461 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i33.i = getelementptr i8, i8* %461, i64 116
  %462 = bitcast i8* %add.ptr.i.i33.i to i32*
  %463 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %462) #10, !srcloc !2
  %tobool.i.i34.i = icmp slt i32 %463, 0
  br i1 %tobool.i.i34.i, label %for.cond.i.i.i31.i, label %sw.epilog

do.body.i.i.i39.i:                                ; preds = %for.cond.i.i.i31.i
  %464 = load i32, i32* %428, align 8
  %and.i.i.i37.i = and i32 %464, 1
  %tobool4.i.i.i38.i = icmp eq i32 %and.i.i.i37.i, 0
  br i1 %tobool4.i.i.i38.i, label %sw.epilog, label %if.then5.i.i.i41.i

if.then5.i.i.i41.i:                               ; preds = %do.body.i.i.i39.i
  %465 = load %struct.net_device*, %struct.net_device** %429, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %465, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %sw.epilog

sw.bb38:                                          ; preds = %if.end, %if.end
  %466 = load i8*, i8** %mmio_addr, align 8
  call fastcc void @rtl_hw_start_8168g(%struct.rtl8169_private* nonnull %0) #9
  %add.ptr.i544 = getelementptr i8, i8* %466, i64 83
  %467 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i544) #10, !srcloc !6
  %468 = and i8 %467, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %468, i8* %add.ptr.i544) #10, !srcloc !5
  %add.ptr3.i545 = getelementptr i8, i8* %466, i64 86
  %469 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3.i545) #10, !srcloc !6
  %470 = and i8 %469, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %470, i8* %add.ptr3.i545) #10, !srcloc !5
  %msg_enable.i.i.i.i546 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %471 = bitcast i8* %msg_enable.i.i.i.i546 to i32*
  %dev.i.i.i.i547 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %472 = bitcast i8* %dev.i.i.i.i547 to %struct.net_device**
  br label %while.body.i.i552

while.body.i.i552:                                ; preds = %rtl_ephy_write.exit.i580, %sw.bb38
  %e.addr.014.i.i548 = phi %struct.ephy_info* [ getelementptr inbounds ([4 x %struct.ephy_info], [4 x %struct.ephy_info]* @rtl_hw_start_8168g_1.e_info_8168g_1, i64 0, i64 0), %sw.bb38 ], [ %incdec.ptr.i.i578, %rtl_ephy_write.exit.i580 ]
  %len.addr.013.i.i549 = phi i32 [ 4, %sw.bb38 ], [ %dec.i.i550, %rtl_ephy_write.exit.i580 ]
  %dec.i.i550 = add nsw i32 %len.addr.013.i.i549, -1
  %offset.i.i551 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i548, i64 0, i32 0
  %473 = load i32, i32* %offset.i.i551, align 4
  %474 = load i8*, i8** %mmio_addr, align 8
  %and.i18.i = shl i32 %473, 16
  %shl.i19.i = and i32 %and.i18.i, 2031616
  %add.ptr.i20.i = getelementptr i8, i8* %474, i64 128
  %475 = bitcast i8* %add.ptr.i20.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i19.i, i32* %475) #10, !srcloc !8
  br label %for.body.i.i.i27.i

for.cond.i.i.i23.i:                               ; preds = %for.body.i.i.i27.i
  %inc.i.i.i21.i = add nuw nsw i32 %i.017.i.i.i24.i, 1
  %cmp.i.i.i22.i = icmp ult i32 %i.017.i.i.i24.i, 99
  br i1 %cmp.i.i.i22.i, label %for.body.i.i.i27.i, label %do.body.i.i.i31.i

for.body.i.i.i27.i:                               ; preds = %for.cond.i.i.i23.i, %while.body.i.i552
  %i.017.i.i.i24.i = phi i32 [ 0, %while.body.i.i552 ], [ %inc.i.i.i21.i, %for.cond.i.i.i23.i ]
  call void @__udelay(i64 10) #9
  %476 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i25.i = getelementptr i8, i8* %476, i64 128
  %477 = bitcast i8* %add.ptr.i.i25.i to i32*
  %478 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %477) #10, !srcloc !2
  %tobool.i.i26.i = icmp slt i32 %478, 0
  br i1 %tobool.i.i26.i, label %cond.true.i.i554, label %for.cond.i.i.i23.i

do.body.i.i.i31.i:                                ; preds = %for.cond.i.i.i23.i
  %479 = load i32, i32* %471, align 8
  %and.i.i.i29.i = and i32 %479, 1
  %tobool4.i.i.i30.i = icmp eq i32 %and.i.i.i29.i, 0
  br i1 %tobool4.i.i.i30.i, label %rtl_ephy_read.exit.i566, label %if.then5.i.i.i33.i

if.then5.i.i.i33.i:                               ; preds = %do.body.i.i.i31.i
  %480 = load %struct.net_device*, %struct.net_device** %472, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %480, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i566

cond.true.i.i554:                                 ; preds = %for.body.i.i.i27.i
  %481 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %475) #10, !srcloc !2
  %phitmp.i.i553 = trunc i32 %481 to i16
  br label %rtl_ephy_read.exit.i566

rtl_ephy_read.exit.i566:                          ; preds = %cond.true.i.i554, %if.then5.i.i.i33.i, %do.body.i.i.i31.i
  %cond.i.i555 = phi i16 [ %phitmp.i.i553, %cond.true.i.i554 ], [ -1, %do.body.i.i.i31.i ], [ -1, %if.then5.i.i.i33.i ]
  %mask.i.i556 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i548, i64 0, i32 1
  %482 = load i16, i16* %mask.i.i556, align 4
  %neg.i.i557 = xor i16 %482, -1
  %and.i.i558 = and i16 %cond.i.i555, %neg.i.i557
  %bits.i.i559 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i548, i64 0, i32 2
  %483 = load i16, i16* %bits.i.i559, align 2
  %or.i.i560 = or i16 %and.i.i558, %483
  %484 = load i32, i32* %offset.i.i551, align 4
  %conv5.i.i561 = zext i16 %or.i.i560 to i32
  %485 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i562 = shl i32 %484, 16
  %shl.i.i563 = and i32 %and1.i.i562, 2031616
  %or.i16.i = or i32 %shl.i.i563, %conv5.i.i561
  %or2.i.i564 = or i32 %or.i16.i, -2147483648
  %add.ptr.i.i565 = getelementptr i8, i8* %485, i64 128
  %486 = bitcast i8* %add.ptr.i.i565 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i564, i32* %486) #10, !srcloc !8
  br label %for.body.i.i.i.i573

for.cond.i.i.i.i569:                              ; preds = %for.body.i.i.i.i573
  %inc.i.i.i.i567 = add nuw nsw i32 %i.017.i.i.i.i570, 1
  %cmp.i.i.i.i568 = icmp ult i32 %i.017.i.i.i.i570, 99
  br i1 %cmp.i.i.i.i568, label %for.body.i.i.i.i573, label %do.body.i.i.i.i576

for.body.i.i.i.i573:                              ; preds = %for.cond.i.i.i.i569, %rtl_ephy_read.exit.i566
  %i.017.i.i.i.i570 = phi i32 [ 0, %rtl_ephy_read.exit.i566 ], [ %inc.i.i.i.i567, %for.cond.i.i.i.i569 ]
  call void @__udelay(i64 10) #9
  %487 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i571 = getelementptr i8, i8* %487, i64 128
  %488 = bitcast i8* %add.ptr.i.i.i571 to i32*
  %489 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %488) #10, !srcloc !2
  %tobool.i.i.i572 = icmp slt i32 %489, 0
  br i1 %tobool.i.i.i572, label %for.cond.i.i.i.i569, label %rtl_ephy_write.exit.i580

do.body.i.i.i.i576:                               ; preds = %for.cond.i.i.i.i569
  %490 = load i32, i32* %471, align 8
  %and.i.i.i.i574 = and i32 %490, 1
  %tobool4.i.i.i.i575 = icmp eq i32 %and.i.i.i.i574, 0
  br i1 %tobool4.i.i.i.i575, label %rtl_ephy_write.exit.i580, label %if.then5.i.i.i.i577

if.then5.i.i.i.i577:                              ; preds = %do.body.i.i.i.i576
  %491 = load %struct.net_device*, %struct.net_device** %472, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %491, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i580

rtl_ephy_write.exit.i580:                         ; preds = %for.body.i.i.i.i573, %if.then5.i.i.i.i577, %do.body.i.i.i.i576
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i578 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i548, i64 1
  %cmp.i.i579 = icmp ugt i32 %len.addr.013.i.i549, 1
  br i1 %cmp.i.i579, label %while.body.i.i552, label %sw.epilog

sw.bb39:                                          ; preds = %if.end
  call fastcc void @rtl_hw_start_8168g_2(%struct.rtl8169_private* nonnull %0) #11
  br label %sw.epilog

sw.bb40:                                          ; preds = %if.end
  %492 = load i8*, i8** %mmio_addr, align 8
  call fastcc void @rtl_hw_start_8168g(%struct.rtl8169_private* nonnull %0) #9
  %add.ptr.i583 = getelementptr i8, i8* %492, i64 83
  %493 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i583) #10, !srcloc !6
  %494 = and i8 %493, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %494, i8* %add.ptr.i583) #10, !srcloc !5
  %add.ptr3.i584 = getelementptr i8, i8* %492, i64 86
  %495 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3.i584) #10, !srcloc !6
  %496 = and i8 %495, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %496, i8* %add.ptr3.i584) #10, !srcloc !5
  %msg_enable.i.i.i.i585 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %497 = bitcast i8* %msg_enable.i.i.i.i585 to i32*
  %dev.i.i.i.i586 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %498 = bitcast i8* %dev.i.i.i.i586 to %struct.net_device**
  br label %while.body.i.i594

while.body.i.i594:                                ; preds = %rtl_ephy_write.exit.i634, %sw.bb40
  %e.addr.014.i.i587 = phi %struct.ephy_info* [ getelementptr inbounds ([5 x %struct.ephy_info], [5 x %struct.ephy_info]* @rtl_hw_start_8411_2.e_info_8411_2, i64 0, i64 0), %sw.bb40 ], [ %incdec.ptr.i.i632, %rtl_ephy_write.exit.i634 ]
  %len.addr.013.i.i588 = phi i32 [ 5, %sw.bb40 ], [ %dec.i.i589, %rtl_ephy_write.exit.i634 ]
  %dec.i.i589 = add nsw i32 %len.addr.013.i.i588, -1
  %offset.i.i590 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i587, i64 0, i32 0
  %499 = load i32, i32* %offset.i.i590, align 4
  %500 = load i8*, i8** %mmio_addr, align 8
  %and.i18.i591 = shl i32 %499, 16
  %shl.i19.i592 = and i32 %and.i18.i591, 2031616
  %add.ptr.i20.i593 = getelementptr i8, i8* %500, i64 128
  %501 = bitcast i8* %add.ptr.i20.i593 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i19.i592, i32* %501) #10, !srcloc !8
  br label %for.body.i.i.i27.i601

for.cond.i.i.i23.i597:                            ; preds = %for.body.i.i.i27.i601
  %inc.i.i.i21.i595 = add nuw nsw i32 %i.017.i.i.i24.i598, 1
  %cmp.i.i.i22.i596 = icmp ult i32 %i.017.i.i.i24.i598, 99
  br i1 %cmp.i.i.i22.i596, label %for.body.i.i.i27.i601, label %do.body.i.i.i31.i604

for.body.i.i.i27.i601:                            ; preds = %for.cond.i.i.i23.i597, %while.body.i.i594
  %i.017.i.i.i24.i598 = phi i32 [ 0, %while.body.i.i594 ], [ %inc.i.i.i21.i595, %for.cond.i.i.i23.i597 ]
  call void @__udelay(i64 10) #9
  %502 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i25.i599 = getelementptr i8, i8* %502, i64 128
  %503 = bitcast i8* %add.ptr.i.i25.i599 to i32*
  %504 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %503) #10, !srcloc !2
  %tobool.i.i26.i600 = icmp slt i32 %504, 0
  br i1 %tobool.i.i26.i600, label %cond.true.i.i607, label %for.cond.i.i.i23.i597

do.body.i.i.i31.i604:                             ; preds = %for.cond.i.i.i23.i597
  %505 = load i32, i32* %497, align 8
  %and.i.i.i29.i602 = and i32 %505, 1
  %tobool4.i.i.i30.i603 = icmp eq i32 %and.i.i.i29.i602, 0
  br i1 %tobool4.i.i.i30.i603, label %rtl_ephy_read.exit.i620, label %if.then5.i.i.i33.i605

if.then5.i.i.i33.i605:                            ; preds = %do.body.i.i.i31.i604
  %506 = load %struct.net_device*, %struct.net_device** %498, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %506, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i620

cond.true.i.i607:                                 ; preds = %for.body.i.i.i27.i601
  %507 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %501) #10, !srcloc !2
  %phitmp.i.i606 = trunc i32 %507 to i16
  br label %rtl_ephy_read.exit.i620

rtl_ephy_read.exit.i620:                          ; preds = %cond.true.i.i607, %if.then5.i.i.i33.i605, %do.body.i.i.i31.i604
  %cond.i.i608 = phi i16 [ %phitmp.i.i606, %cond.true.i.i607 ], [ -1, %do.body.i.i.i31.i604 ], [ -1, %if.then5.i.i.i33.i605 ]
  %mask.i.i609 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i587, i64 0, i32 1
  %508 = load i16, i16* %mask.i.i609, align 4
  %neg.i.i610 = xor i16 %508, -1
  %and.i.i611 = and i16 %cond.i.i608, %neg.i.i610
  %bits.i.i612 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i587, i64 0, i32 2
  %509 = load i16, i16* %bits.i.i612, align 2
  %or.i.i613 = or i16 %and.i.i611, %509
  %510 = load i32, i32* %offset.i.i590, align 4
  %conv5.i.i614 = zext i16 %or.i.i613 to i32
  %511 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i615 = shl i32 %510, 16
  %shl.i.i616 = and i32 %and1.i.i615, 2031616
  %or.i16.i617 = or i32 %shl.i.i616, %conv5.i.i614
  %or2.i.i618 = or i32 %or.i16.i617, -2147483648
  %add.ptr.i.i619 = getelementptr i8, i8* %511, i64 128
  %512 = bitcast i8* %add.ptr.i.i619 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i618, i32* %512) #10, !srcloc !8
  br label %for.body.i.i.i.i627

for.cond.i.i.i.i623:                              ; preds = %for.body.i.i.i.i627
  %inc.i.i.i.i621 = add nuw nsw i32 %i.017.i.i.i.i624, 1
  %cmp.i.i.i.i622 = icmp ult i32 %i.017.i.i.i.i624, 99
  br i1 %cmp.i.i.i.i622, label %for.body.i.i.i.i627, label %do.body.i.i.i.i630

for.body.i.i.i.i627:                              ; preds = %for.cond.i.i.i.i623, %rtl_ephy_read.exit.i620
  %i.017.i.i.i.i624 = phi i32 [ 0, %rtl_ephy_read.exit.i620 ], [ %inc.i.i.i.i621, %for.cond.i.i.i.i623 ]
  call void @__udelay(i64 10) #9
  %513 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i625 = getelementptr i8, i8* %513, i64 128
  %514 = bitcast i8* %add.ptr.i.i.i625 to i32*
  %515 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %514) #10, !srcloc !2
  %tobool.i.i.i626 = icmp slt i32 %515, 0
  br i1 %tobool.i.i.i626, label %for.cond.i.i.i.i623, label %rtl_ephy_write.exit.i634

do.body.i.i.i.i630:                               ; preds = %for.cond.i.i.i.i623
  %516 = load i32, i32* %497, align 8
  %and.i.i.i.i628 = and i32 %516, 1
  %tobool4.i.i.i.i629 = icmp eq i32 %and.i.i.i.i628, 0
  br i1 %tobool4.i.i.i.i629, label %rtl_ephy_write.exit.i634, label %if.then5.i.i.i.i631

if.then5.i.i.i.i631:                              ; preds = %do.body.i.i.i.i630
  %517 = load %struct.net_device*, %struct.net_device** %498, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %517, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i634

rtl_ephy_write.exit.i634:                         ; preds = %for.body.i.i.i.i627, %if.then5.i.i.i.i631, %do.body.i.i.i.i630
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i632 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i587, i64 1
  %cmp.i.i633 = icmp ugt i32 %len.addr.013.i.i588, 1
  br i1 %cmp.i.i633, label %while.body.i.i594, label %sw.epilog

sw.bb41:                                          ; preds = %if.end, %if.end
  call fastcc void @rtl_hw_start_8168h_1(%struct.rtl8169_private* nonnull %0) #11
  br label %sw.epilog

sw.bb42:                                          ; preds = %if.end
  %518 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i637 = getelementptr i8, i8* %518, i64 83
  %519 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i637) #10, !srcloc !6
  %520 = and i8 %519, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %520, i8* %add.ptr.i637) #10, !srcloc !5
  %add.ptr3.i638 = getelementptr i8, i8* %518, i64 86
  %521 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3.i638) #10, !srcloc !6
  %522 = and i8 %521, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %522, i8* %add.ptr3.i638) #10, !srcloc !5
  %msg_enable.i.i.i.i639 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %523 = bitcast i8* %msg_enable.i.i.i.i639 to i32*
  %dev.i.i.i.i640 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %524 = bitcast i8* %dev.i.i.i.i640 to %struct.net_device**
  br label %while.body.i.i648

while.body.i.i648:                                ; preds = %rtl_ephy_write.exit.i688, %sw.bb42
  %e.addr.014.i.i641 = phi %struct.ephy_info* [ getelementptr inbounds ([5 x %struct.ephy_info], [5 x %struct.ephy_info]* @rtl_hw_start_8168ep_1.e_info_8168ep_1, i64 0, i64 0), %sw.bb42 ], [ %incdec.ptr.i.i686, %rtl_ephy_write.exit.i688 ]
  %len.addr.013.i.i642 = phi i32 [ 5, %sw.bb42 ], [ %dec.i.i643, %rtl_ephy_write.exit.i688 ]
  %dec.i.i643 = add nsw i32 %len.addr.013.i.i642, -1
  %offset.i.i644 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i641, i64 0, i32 0
  %525 = load i32, i32* %offset.i.i644, align 4
  %526 = load i8*, i8** %mmio_addr, align 8
  %and.i18.i645 = shl i32 %525, 16
  %shl.i19.i646 = and i32 %and.i18.i645, 2031616
  %add.ptr.i20.i647 = getelementptr i8, i8* %526, i64 128
  %527 = bitcast i8* %add.ptr.i20.i647 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i19.i646, i32* %527) #10, !srcloc !8
  br label %for.body.i.i.i27.i655

for.cond.i.i.i23.i651:                            ; preds = %for.body.i.i.i27.i655
  %inc.i.i.i21.i649 = add nuw nsw i32 %i.017.i.i.i24.i652, 1
  %cmp.i.i.i22.i650 = icmp ult i32 %i.017.i.i.i24.i652, 99
  br i1 %cmp.i.i.i22.i650, label %for.body.i.i.i27.i655, label %do.body.i.i.i31.i658

for.body.i.i.i27.i655:                            ; preds = %for.cond.i.i.i23.i651, %while.body.i.i648
  %i.017.i.i.i24.i652 = phi i32 [ 0, %while.body.i.i648 ], [ %inc.i.i.i21.i649, %for.cond.i.i.i23.i651 ]
  call void @__udelay(i64 10) #9
  %528 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i25.i653 = getelementptr i8, i8* %528, i64 128
  %529 = bitcast i8* %add.ptr.i.i25.i653 to i32*
  %530 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %529) #10, !srcloc !2
  %tobool.i.i26.i654 = icmp slt i32 %530, 0
  br i1 %tobool.i.i26.i654, label %cond.true.i.i661, label %for.cond.i.i.i23.i651

do.body.i.i.i31.i658:                             ; preds = %for.cond.i.i.i23.i651
  %531 = load i32, i32* %523, align 8
  %and.i.i.i29.i656 = and i32 %531, 1
  %tobool4.i.i.i30.i657 = icmp eq i32 %and.i.i.i29.i656, 0
  br i1 %tobool4.i.i.i30.i657, label %rtl_ephy_read.exit.i674, label %if.then5.i.i.i33.i659

if.then5.i.i.i33.i659:                            ; preds = %do.body.i.i.i31.i658
  %532 = load %struct.net_device*, %struct.net_device** %524, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %532, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i674

cond.true.i.i661:                                 ; preds = %for.body.i.i.i27.i655
  %533 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %527) #10, !srcloc !2
  %phitmp.i.i660 = trunc i32 %533 to i16
  br label %rtl_ephy_read.exit.i674

rtl_ephy_read.exit.i674:                          ; preds = %cond.true.i.i661, %if.then5.i.i.i33.i659, %do.body.i.i.i31.i658
  %cond.i.i662 = phi i16 [ %phitmp.i.i660, %cond.true.i.i661 ], [ -1, %do.body.i.i.i31.i658 ], [ -1, %if.then5.i.i.i33.i659 ]
  %mask.i.i663 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i641, i64 0, i32 1
  %534 = load i16, i16* %mask.i.i663, align 4
  %neg.i.i664 = xor i16 %534, -1
  %and.i.i665 = and i16 %cond.i.i662, %neg.i.i664
  %bits.i.i666 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i641, i64 0, i32 2
  %535 = load i16, i16* %bits.i.i666, align 2
  %or.i.i667 = or i16 %and.i.i665, %535
  %536 = load i32, i32* %offset.i.i644, align 4
  %conv5.i.i668 = zext i16 %or.i.i667 to i32
  %537 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i669 = shl i32 %536, 16
  %shl.i.i670 = and i32 %and1.i.i669, 2031616
  %or.i16.i671 = or i32 %shl.i.i670, %conv5.i.i668
  %or2.i.i672 = or i32 %or.i16.i671, -2147483648
  %add.ptr.i.i673 = getelementptr i8, i8* %537, i64 128
  %538 = bitcast i8* %add.ptr.i.i673 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i672, i32* %538) #10, !srcloc !8
  br label %for.body.i.i.i.i681

for.cond.i.i.i.i677:                              ; preds = %for.body.i.i.i.i681
  %inc.i.i.i.i675 = add nuw nsw i32 %i.017.i.i.i.i678, 1
  %cmp.i.i.i.i676 = icmp ult i32 %i.017.i.i.i.i678, 99
  br i1 %cmp.i.i.i.i676, label %for.body.i.i.i.i681, label %do.body.i.i.i.i684

for.body.i.i.i.i681:                              ; preds = %for.cond.i.i.i.i677, %rtl_ephy_read.exit.i674
  %i.017.i.i.i.i678 = phi i32 [ 0, %rtl_ephy_read.exit.i674 ], [ %inc.i.i.i.i675, %for.cond.i.i.i.i677 ]
  call void @__udelay(i64 10) #9
  %539 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i679 = getelementptr i8, i8* %539, i64 128
  %540 = bitcast i8* %add.ptr.i.i.i679 to i32*
  %541 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %540) #10, !srcloc !2
  %tobool.i.i.i680 = icmp slt i32 %541, 0
  br i1 %tobool.i.i.i680, label %for.cond.i.i.i.i677, label %rtl_ephy_write.exit.i688

do.body.i.i.i.i684:                               ; preds = %for.cond.i.i.i.i677
  %542 = load i32, i32* %523, align 8
  %and.i.i.i.i682 = and i32 %542, 1
  %tobool4.i.i.i.i683 = icmp eq i32 %and.i.i.i.i682, 0
  br i1 %tobool4.i.i.i.i683, label %rtl_ephy_write.exit.i688, label %if.then5.i.i.i.i685

if.then5.i.i.i.i685:                              ; preds = %do.body.i.i.i.i684
  %543 = load %struct.net_device*, %struct.net_device** %524, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %543, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i688

rtl_ephy_write.exit.i688:                         ; preds = %for.body.i.i.i.i681, %if.then5.i.i.i.i685, %do.body.i.i.i.i684
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i686 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i641, i64 1
  %cmp.i.i687 = icmp ugt i32 %len.addr.013.i.i642, 1
  br i1 %cmp.i.i687, label %while.body.i.i648, label %rtl_hw_start_8168ep_1.exit

rtl_hw_start_8168ep_1.exit:                       ; preds = %rtl_ephy_write.exit.i688
  call fastcc void @rtl_hw_start_8168ep(%struct.rtl8169_private* nonnull %0) #9
  br label %sw.epilog

sw.bb43:                                          ; preds = %if.end
  %544 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i691 = getelementptr i8, i8* %544, i64 83
  %545 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i691) #10, !srcloc !6
  %546 = and i8 %545, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %546, i8* %add.ptr.i691) #10, !srcloc !5
  %add.ptr3.i692 = getelementptr i8, i8* %544, i64 86
  %547 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3.i692) #10, !srcloc !6
  %548 = and i8 %547, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %548, i8* %add.ptr3.i692) #10, !srcloc !5
  %msg_enable.i.i.i.i693 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %549 = bitcast i8* %msg_enable.i.i.i.i693 to i32*
  %dev.i.i.i.i694 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %550 = bitcast i8* %dev.i.i.i.i694 to %struct.net_device**
  br label %while.body.i.i699

while.body.i.i699:                                ; preds = %rtl_ephy_write.exit.i727, %sw.bb43
  %e.addr.014.i.i695 = phi %struct.ephy_info* [ getelementptr inbounds ([3 x %struct.ephy_info], [3 x %struct.ephy_info]* @rtl_hw_start_8168ep_2.e_info_8168ep_2, i64 0, i64 0), %sw.bb43 ], [ %incdec.ptr.i.i725, %rtl_ephy_write.exit.i727 ]
  %len.addr.013.i.i696 = phi i32 [ 3, %sw.bb43 ], [ %dec.i.i697, %rtl_ephy_write.exit.i727 ]
  %dec.i.i697 = add nsw i32 %len.addr.013.i.i696, -1
  %offset.i.i698 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i695, i64 0, i32 0
  %551 = load i32, i32* %offset.i.i698, align 4
  %552 = load i8*, i8** %mmio_addr, align 8
  %and.i34.i = shl i32 %551, 16
  %shl.i35.i = and i32 %and.i34.i, 2031616
  %add.ptr.i36.i = getelementptr i8, i8* %552, i64 128
  %553 = bitcast i8* %add.ptr.i36.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i35.i, i32* %553) #10, !srcloc !8
  br label %for.body.i.i.i43.i

for.cond.i.i.i39.i:                               ; preds = %for.body.i.i.i43.i
  %inc.i.i.i37.i = add nuw nsw i32 %i.017.i.i.i40.i, 1
  %cmp.i.i.i38.i = icmp ult i32 %i.017.i.i.i40.i, 99
  br i1 %cmp.i.i.i38.i, label %for.body.i.i.i43.i, label %do.body.i.i.i47.i

for.body.i.i.i43.i:                               ; preds = %for.cond.i.i.i39.i, %while.body.i.i699
  %i.017.i.i.i40.i = phi i32 [ 0, %while.body.i.i699 ], [ %inc.i.i.i37.i, %for.cond.i.i.i39.i ]
  call void @__udelay(i64 10) #9
  %554 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i41.i = getelementptr i8, i8* %554, i64 128
  %555 = bitcast i8* %add.ptr.i.i41.i to i32*
  %556 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %555) #10, !srcloc !2
  %tobool.i.i42.i = icmp slt i32 %556, 0
  br i1 %tobool.i.i42.i, label %cond.true.i.i701, label %for.cond.i.i.i39.i

do.body.i.i.i47.i:                                ; preds = %for.cond.i.i.i39.i
  %557 = load i32, i32* %549, align 8
  %and.i.i.i45.i = and i32 %557, 1
  %tobool4.i.i.i46.i = icmp eq i32 %and.i.i.i45.i, 0
  br i1 %tobool4.i.i.i46.i, label %rtl_ephy_read.exit.i713, label %if.then5.i.i.i49.i

if.then5.i.i.i49.i:                               ; preds = %do.body.i.i.i47.i
  %558 = load %struct.net_device*, %struct.net_device** %550, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %558, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i713

cond.true.i.i701:                                 ; preds = %for.body.i.i.i43.i
  %559 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %553) #10, !srcloc !2
  %phitmp.i.i700 = trunc i32 %559 to i16
  br label %rtl_ephy_read.exit.i713

rtl_ephy_read.exit.i713:                          ; preds = %cond.true.i.i701, %if.then5.i.i.i49.i, %do.body.i.i.i47.i
  %cond.i.i702 = phi i16 [ %phitmp.i.i700, %cond.true.i.i701 ], [ -1, %do.body.i.i.i47.i ], [ -1, %if.then5.i.i.i49.i ]
  %mask.i.i703 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i695, i64 0, i32 1
  %560 = load i16, i16* %mask.i.i703, align 4
  %neg.i.i704 = xor i16 %560, -1
  %and.i.i705 = and i16 %cond.i.i702, %neg.i.i704
  %bits.i.i706 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i695, i64 0, i32 2
  %561 = load i16, i16* %bits.i.i706, align 2
  %or.i.i707 = or i16 %and.i.i705, %561
  %562 = load i32, i32* %offset.i.i698, align 4
  %conv5.i.i708 = zext i16 %or.i.i707 to i32
  %563 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i709 = shl i32 %562, 16
  %shl.i.i710 = and i32 %and1.i.i709, 2031616
  %or.i32.i = or i32 %shl.i.i710, %conv5.i.i708
  %or2.i.i711 = or i32 %or.i32.i, -2147483648
  %add.ptr.i.i712 = getelementptr i8, i8* %563, i64 128
  %564 = bitcast i8* %add.ptr.i.i712 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i711, i32* %564) #10, !srcloc !8
  br label %for.body.i.i.i.i720

for.cond.i.i.i.i716:                              ; preds = %for.body.i.i.i.i720
  %inc.i.i.i.i714 = add nuw nsw i32 %i.017.i.i.i.i717, 1
  %cmp.i.i.i.i715 = icmp ult i32 %i.017.i.i.i.i717, 99
  br i1 %cmp.i.i.i.i715, label %for.body.i.i.i.i720, label %do.body.i.i.i.i723

for.body.i.i.i.i720:                              ; preds = %for.cond.i.i.i.i716, %rtl_ephy_read.exit.i713
  %i.017.i.i.i.i717 = phi i32 [ 0, %rtl_ephy_read.exit.i713 ], [ %inc.i.i.i.i714, %for.cond.i.i.i.i716 ]
  call void @__udelay(i64 10) #9
  %565 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i718 = getelementptr i8, i8* %565, i64 128
  %566 = bitcast i8* %add.ptr.i.i.i718 to i32*
  %567 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %566) #10, !srcloc !2
  %tobool.i.i.i719 = icmp slt i32 %567, 0
  br i1 %tobool.i.i.i719, label %for.cond.i.i.i.i716, label %rtl_ephy_write.exit.i727

do.body.i.i.i.i723:                               ; preds = %for.cond.i.i.i.i716
  %568 = load i32, i32* %549, align 8
  %and.i.i.i.i721 = and i32 %568, 1
  %tobool4.i.i.i.i722 = icmp eq i32 %and.i.i.i.i721, 0
  br i1 %tobool4.i.i.i.i722, label %rtl_ephy_write.exit.i727, label %if.then5.i.i.i.i724

if.then5.i.i.i.i724:                              ; preds = %do.body.i.i.i.i723
  %569 = load %struct.net_device*, %struct.net_device** %550, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %569, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i727

rtl_ephy_write.exit.i727:                         ; preds = %for.body.i.i.i.i720, %if.then5.i.i.i.i724, %do.body.i.i.i.i723
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i725 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i695, i64 1
  %cmp.i.i726 = icmp ugt i32 %len.addr.013.i.i696, 1
  br i1 %cmp.i.i726, label %while.body.i.i699, label %rtl_hw_start_8168ep_2.exit

rtl_hw_start_8168ep_2.exit:                       ; preds = %rtl_ephy_write.exit.i727
  call fastcc void @rtl_hw_start_8168ep(%struct.rtl8169_private* nonnull %0) #9
  %add.ptr9.i = getelementptr i8, i8* %544, i64 208
  %570 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr9.i) #10, !srcloc !6
  %571 = and i8 %570, -65
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %571, i8* %add.ptr9.i) #10, !srcloc !5
  %add.ptr15.i = getelementptr i8, i8* %544, i64 242
  %572 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr15.i) #10, !srcloc !6
  %573 = and i8 %572, -65
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %573, i8* %add.ptr9.i) #10, !srcloc !5
  br label %sw.epilog

sw.bb44:                                          ; preds = %if.end
  %574 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i730 = getelementptr i8, i8* %574, i64 83
  %575 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i730) #10, !srcloc !6
  %576 = and i8 %575, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %576, i8* %add.ptr.i730) #10, !srcloc !5
  %add.ptr3.i731 = getelementptr i8, i8* %574, i64 86
  %577 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3.i731) #10, !srcloc !6
  %578 = and i8 %577, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %578, i8* %add.ptr3.i731) #10, !srcloc !5
  %msg_enable.i.i.i.i732 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %579 = bitcast i8* %msg_enable.i.i.i.i732 to i32*
  %dev.i.i.i.i733 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %580 = bitcast i8* %dev.i.i.i.i733 to %struct.net_device**
  br label %while.body.i.i738

while.body.i.i738:                                ; preds = %rtl_ephy_write.exit.i766, %sw.bb44
  %e.addr.014.i.i734 = phi %struct.ephy_info* [ getelementptr inbounds ([4 x %struct.ephy_info], [4 x %struct.ephy_info]* @rtl_hw_start_8168ep_3.e_info_8168ep_3, i64 0, i64 0), %sw.bb44 ], [ %incdec.ptr.i.i764, %rtl_ephy_write.exit.i766 ]
  %len.addr.013.i.i735 = phi i32 [ 4, %sw.bb44 ], [ %dec.i.i736, %rtl_ephy_write.exit.i766 ]
  %dec.i.i736 = add nsw i32 %len.addr.013.i.i735, -1
  %offset.i.i737 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i734, i64 0, i32 0
  %581 = load i32, i32* %offset.i.i737, align 4
  %582 = load i8*, i8** %mmio_addr, align 8
  %and.i75.i = shl i32 %581, 16
  %shl.i76.i = and i32 %and.i75.i, 2031616
  %add.ptr.i77.i = getelementptr i8, i8* %582, i64 128
  %583 = bitcast i8* %add.ptr.i77.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i76.i, i32* %583) #10, !srcloc !8
  br label %for.body.i.i.i84.i

for.cond.i.i.i80.i:                               ; preds = %for.body.i.i.i84.i
  %inc.i.i.i78.i = add nuw nsw i32 %i.017.i.i.i81.i, 1
  %cmp.i.i.i79.i = icmp ult i32 %i.017.i.i.i81.i, 99
  br i1 %cmp.i.i.i79.i, label %for.body.i.i.i84.i, label %do.body.i.i.i88.i

for.body.i.i.i84.i:                               ; preds = %for.cond.i.i.i80.i, %while.body.i.i738
  %i.017.i.i.i81.i = phi i32 [ 0, %while.body.i.i738 ], [ %inc.i.i.i78.i, %for.cond.i.i.i80.i ]
  call void @__udelay(i64 10) #9
  %584 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i82.i = getelementptr i8, i8* %584, i64 128
  %585 = bitcast i8* %add.ptr.i.i82.i to i32*
  %586 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %585) #10, !srcloc !2
  %tobool.i.i83.i = icmp slt i32 %586, 0
  br i1 %tobool.i.i83.i, label %cond.true.i.i740, label %for.cond.i.i.i80.i

do.body.i.i.i88.i:                                ; preds = %for.cond.i.i.i80.i
  %587 = load i32, i32* %579, align 8
  %and.i.i.i86.i = and i32 %587, 1
  %tobool4.i.i.i87.i = icmp eq i32 %and.i.i.i86.i, 0
  br i1 %tobool4.i.i.i87.i, label %rtl_ephy_read.exit.i752, label %if.then5.i.i.i90.i

if.then5.i.i.i90.i:                               ; preds = %do.body.i.i.i88.i
  %588 = load %struct.net_device*, %struct.net_device** %580, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %588, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i752

cond.true.i.i740:                                 ; preds = %for.body.i.i.i84.i
  %589 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %583) #10, !srcloc !2
  %phitmp.i.i739 = trunc i32 %589 to i16
  br label %rtl_ephy_read.exit.i752

rtl_ephy_read.exit.i752:                          ; preds = %cond.true.i.i740, %if.then5.i.i.i90.i, %do.body.i.i.i88.i
  %cond.i.i741 = phi i16 [ %phitmp.i.i739, %cond.true.i.i740 ], [ -1, %do.body.i.i.i88.i ], [ -1, %if.then5.i.i.i90.i ]
  %mask.i.i742 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i734, i64 0, i32 1
  %590 = load i16, i16* %mask.i.i742, align 4
  %neg.i.i743 = xor i16 %590, -1
  %and.i.i744 = and i16 %cond.i.i741, %neg.i.i743
  %bits.i.i745 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i734, i64 0, i32 2
  %591 = load i16, i16* %bits.i.i745, align 2
  %or.i.i746 = or i16 %and.i.i744, %591
  %592 = load i32, i32* %offset.i.i737, align 4
  %conv5.i.i747 = zext i16 %or.i.i746 to i32
  %593 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i748 = shl i32 %592, 16
  %shl.i.i749 = and i32 %and1.i.i748, 2031616
  %or.i54.i = or i32 %shl.i.i749, %conv5.i.i747
  %or2.i.i750 = or i32 %or.i54.i, -2147483648
  %add.ptr.i.i751 = getelementptr i8, i8* %593, i64 128
  %594 = bitcast i8* %add.ptr.i.i751 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i750, i32* %594) #10, !srcloc !8
  br label %for.body.i.i.i.i759

for.cond.i.i.i.i755:                              ; preds = %for.body.i.i.i.i759
  %inc.i.i.i.i753 = add nuw nsw i32 %i.017.i.i.i.i756, 1
  %cmp.i.i.i.i754 = icmp ult i32 %i.017.i.i.i.i756, 99
  br i1 %cmp.i.i.i.i754, label %for.body.i.i.i.i759, label %do.body.i.i.i.i762

for.body.i.i.i.i759:                              ; preds = %for.cond.i.i.i.i755, %rtl_ephy_read.exit.i752
  %i.017.i.i.i.i756 = phi i32 [ 0, %rtl_ephy_read.exit.i752 ], [ %inc.i.i.i.i753, %for.cond.i.i.i.i755 ]
  call void @__udelay(i64 10) #9
  %595 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i757 = getelementptr i8, i8* %595, i64 128
  %596 = bitcast i8* %add.ptr.i.i.i757 to i32*
  %597 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %596) #10, !srcloc !2
  %tobool.i.i.i758 = icmp slt i32 %597, 0
  br i1 %tobool.i.i.i758, label %for.cond.i.i.i.i755, label %rtl_ephy_write.exit.i766

do.body.i.i.i.i762:                               ; preds = %for.cond.i.i.i.i755
  %598 = load i32, i32* %579, align 8
  %and.i.i.i.i760 = and i32 %598, 1
  %tobool4.i.i.i.i761 = icmp eq i32 %and.i.i.i.i760, 0
  br i1 %tobool4.i.i.i.i761, label %rtl_ephy_write.exit.i766, label %if.then5.i.i.i.i763

if.then5.i.i.i.i763:                              ; preds = %do.body.i.i.i.i762
  %599 = load %struct.net_device*, %struct.net_device** %580, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %599, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i766

rtl_ephy_write.exit.i766:                         ; preds = %for.body.i.i.i.i759, %if.then5.i.i.i.i763, %do.body.i.i.i.i762
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i764 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i734, i64 1
  %cmp.i.i765 = icmp ugt i32 %len.addr.013.i.i735, 1
  br i1 %cmp.i.i765, label %while.body.i.i738, label %rtl_hw_start_8168ep_3.exit

rtl_hw_start_8168ep_3.exit:                       ; preds = %rtl_ephy_write.exit.i766
  call fastcc void @rtl_hw_start_8168ep(%struct.rtl8169_private* nonnull %0) #9
  %add.ptr9.i767 = getelementptr i8, i8* %574, i64 208
  %600 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr9.i767) #10, !srcloc !6
  %601 = and i8 %600, -65
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %601, i8* %add.ptr9.i767) #10, !srcloc !5
  %add.ptr15.i768 = getelementptr i8, i8* %574, i64 242
  %602 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr15.i768) #10, !srcloc !6
  %603 = and i8 %602, -65
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %603, i8* %add.ptr9.i767) #10, !srcloc !5
  %604 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i56.i = getelementptr i8, i8* %604, i64 176
  %605 = bitcast i8* %add.ptr.i56.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1777401856, i32* %605) #10, !srcloc !8
  %606 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %605) #10, !srcloc !2
  %607 = and i32 %606, 61440
  %608 = load i8*, i8** %mmio_addr, align 8
  %or1.i.i = or i32 %607, -370081167
  %add.ptr.i59.i = getelementptr i8, i8* %608, i64 176
  %609 = bitcast i8* %add.ptr.i59.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i.i, i32* %609) #10, !srcloc !8
  %610 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i61.i = getelementptr i8, i8* %610, i64 176
  %611 = bitcast i8* %add.ptr.i61.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1777467392, i32* %611) #10, !srcloc !8
  %612 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %611) #10, !srcloc !2
  %613 = and i32 %612, 65280
  %614 = load i8*, i8** %mmio_addr, align 8
  %or1.i65.i = or i32 %613, -370016256
  %add.ptr.i66.i = getelementptr i8, i8* %614, i64 176
  %615 = bitcast i8* %add.ptr.i66.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i65.i, i32* %615) #10, !srcloc !8
  %616 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i68.i = getelementptr i8, i8* %616, i64 176
  %617 = bitcast i8* %add.ptr.i68.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1949302784, i32* %617) #10, !srcloc !8
  %618 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %617) #10, !srcloc !2
  %619 = and i32 %618, 65407
  %620 = load i8*, i8** %mmio_addr, align 8
  %or1.i72.i = or i32 %619, -198180736
  %add.ptr.i73.i = getelementptr i8, i8* %620, i64 176
  %621 = bitcast i8* %add.ptr.i73.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i72.i, i32* %621) #10, !srcloc !8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %conv22 = zext i16 %28 to i32
  %arraydecay = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 0
  %call47 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.18, i64 0, i64 0), i8* %arraydecay, i32 %conv22) #9
  br label %sw.epilog

sw.epilog:                                        ; preds = %rtl_ephy_write.exit.i634, %rtl_ephy_write.exit.i580, %for.body.i.i.i35.i, %if.then5.i.i.i41.i, %do.body.i.i.i39.i, %if.then.i, %sw.bb, %sw.default, %rtl_hw_start_8168ep_3.exit, %rtl_hw_start_8168ep_2.exit, %rtl_hw_start_8168ep_1.exit, %sw.bb41, %sw.bb39, %rtl_hw_start_8168f_1.exit, %rtl_hw_start_8168e_2.exit, %rtl_hw_start_8168e_1.exit, %rtl_hw_start_8168dp.exit, %rtl_hw_start_8168d_4.exit, %rtl_hw_start_8168d.exit, %rtl_hw_start_8168cp_3.exit, %rtl_hw_start_8168cp_2.exit, %rtl_hw_start_8168c_4.exit, %sw.bb27, %sw.bb26, %rtl_hw_start_8168c_1.exit, %rtl_hw_start_8168cp_1.exit, %rtl_hw_start_8168bef.exit
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 0, i8* %add.ptr) #10, !srcloc !5
  %add.ptr49 = getelementptr i8, i8* %1, i64 55
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 12, i8* %add.ptr49) #10, !srcloc !5
  call void @rtl_set_rx_mode(%struct.net_device* nonnull %dev) #11
  %add.ptr50 = getelementptr i8, i8* %1, i64 92
  %622 = bitcast i8* %add.ptr50 to i16*
  %623 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %622) #10, !srcloc !21
  %624 = and i16 %623, -4096
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %624, i16* %622) #10, !srcloc !3
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_hw_start_8101(%struct.net_device* %dev) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %1 = load i8*, i8** %mmio_addr, align 8
  %pci_dev = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %2 = bitcast i8* %pci_dev to %struct.pci_dev**
  %3 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %mac_version = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %4 = bitcast i8* %mac_version to i16*
  %5 = load i16, i16* %4, align 2
  %cmp = icmp ugt i16 %5, 28
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %event_slow = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5578
  %6 = bitcast i8* %event_slow to i16*
  %7 = load i16, i16* %6, align 2
  %8 = and i16 %7, -65
  store i16 %8, i16* %6, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  switch i16 %5, label %if.end14 [
    i16 12, label %if.then12
    i16 15, label %if.then12
  ]

if.then12:                                        ; preds = %if.end, %if.end
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %3, i32 8, i16 zeroext 0, i16 zeroext 2048) #9
  br label %if.end14

if.end14:                                         ; preds = %if.end, %if.then12
  %add.ptr = getelementptr i8, i8* %1, i64 80
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 -64, i8* %add.ptr) #10, !srcloc !5
  %add.ptr15 = getelementptr i8, i8* %1, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr15) #10, !srcloc !5
  %add.ptr.i75 = getelementptr i8, i8* %1, i64 218
  %9 = bitcast i8* %add.ptr.i75 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 16384, i16* %9) #10, !srcloc !3
  %cp_cmd = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5576
  %10 = bitcast i8* %cp_cmd to i16*
  %11 = load i16, i16* %10, align 8
  %12 = and i16 %11, 8291
  store i16 %12, i16* %10, align 8
  %add.ptr20 = getelementptr i8, i8* %1, i64 224
  %13 = bitcast i8* %add.ptr20 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %12, i16* %13) #10, !srcloc !3
  %TxPhyAddr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2408
  %14 = bitcast i8* %TxPhyAddr.i to i64*
  %15 = load i64, i64* %14, align 8
  %shr.i = lshr i64 %15, 32
  %conv.i = trunc i64 %shr.i to i32
  %add.ptr.i76 = getelementptr i8, i8* %1, i64 36
  %16 = bitcast i8* %add.ptr.i76 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv.i, i32* %16) #10, !srcloc !8
  %17 = load i64, i64* %14, align 8
  %conv2.i = trunc i64 %17 to i32
  %add.ptr3.i = getelementptr i8, i8* %1, i64 32
  %18 = bitcast i8* %add.ptr3.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv2.i, i32* %18) #10, !srcloc !8
  %RxPhyAddr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2416
  %19 = bitcast i8* %RxPhyAddr.i to i64*
  %20 = load i64, i64* %19, align 8
  %shr4.i = lshr i64 %20, 32
  %conv5.i = trunc i64 %shr4.i to i32
  %add.ptr6.i = getelementptr i8, i8* %1, i64 232
  %21 = bitcast i8* %add.ptr6.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv5.i, i32* %21) #10, !srcloc !8
  %22 = load i64, i64* %19, align 8
  %conv9.i = trunc i64 %22 to i32
  %add.ptr10.i = getelementptr i8, i8* %1, i64 228
  %23 = bitcast i8* %add.ptr10.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv9.i, i32* %23) #10, !srcloc !8
  %24 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i77 = getelementptr i8, i8* %24, i64 64
  %25 = bitcast i8* %add.ptr.i77 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 50333440, i32* %25) #10, !srcloc !8
  %26 = load i16, i16* %4, align 2
  switch i16 %26, label %sw.epilog [
    i16 6, label %sw.bb
    i16 7, label %sw.bb23
    i16 8, label %sw.bb24
    i16 28, label %sw.bb25
    i16 29, label %sw.bb26
    i16 36, label %sw.bb27
    i16 38, label %sw.bb28
    i16 42, label %sw.bb29
    i16 46, label %sw.bb30
    i16 47, label %sw.bb30
  ]

sw.bb:                                            ; preds = %if.end14
  %27 = load i8*, i8** %mmio_addr, align 8
  %28 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %read.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %29 = bitcast i8* %read.i.i.i.i to i32 (%struct.rtl8169_private*, i32)**
  %30 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %29, align 8
  %tobool.i.i.i.i = icmp eq i32 (%struct.rtl8169_private*, i32)* %30, null
  br i1 %tobool.i.i.i.i, label %rtl_csi_read.exit.i.i.i, label %cond.true.i.i.i.i

cond.true.i.i.i.i:                                ; preds = %sw.bb
  %call.i.i.i.i = call i32 %30(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i = and i32 %call.i.i.i.i, 16777215
  %phitmp.i.i = or i32 %phitmp.i.i.i, 654311424
  br label %rtl_csi_read.exit.i.i.i

rtl_csi_read.exit.i.i.i:                          ; preds = %cond.true.i.i.i.i, %sw.bb
  %cond.i.i.i.i = phi i32 [ %phitmp.i.i, %cond.true.i.i.i.i ], [ 671088639, %sw.bb ]
  %write.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %31 = bitcast i8* %write.i.i.i.i to void (%struct.rtl8169_private*, i32, i32)**
  %32 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %31, align 8
  %tobool.i3.i.i.i = icmp eq void (%struct.rtl8169_private*, i32, i32)* %32, null
  br i1 %tobool.i3.i.i.i, label %rtl_csi_access_enable_2.exit.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %rtl_csi_read.exit.i.i.i
  call void %32(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i) #9
  br label %rtl_csi_access_enable_2.exit.i

rtl_csi_access_enable_2.exit.i:                   ; preds = %if.then.i.i.i.i, %rtl_csi_read.exit.i.i.i
  %add.ptr.i79 = getelementptr i8, i8* %27, i64 209
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 16, i8* %add.ptr.i79) #10, !srcloc !5
  %call.i.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %28, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  %add.ptr1.i = getelementptr i8, i8* %27, i64 82
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 -33, i8* %add.ptr1.i) #10, !srcloc !5
  %add.ptr2.i = getelementptr i8, i8* %27, i64 84
  %33 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr2.i) #10, !srcloc !6
  %34 = and i8 %33, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %34, i8* %add.ptr2.i) #10, !srcloc !5
  %35 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1.i) #10, !srcloc !6
  %36 = icmp ugt i8 %35, -65
  br i1 %36, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %rtl_csi_access_enable_2.exit.i
  %and13.i = and i8 %35, -65
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %and13.i, i8* %add.ptr1.i) #10, !srcloc !5
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %rtl_csi_access_enable_2.exit.i
  %msg_enable.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %37 = bitcast i8* %msg_enable.i.i.i.i to i32*
  %dev.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %38 = bitcast i8* %dev.i.i.i.i to %struct.net_device**
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %rtl_ephy_write.exit.i, %if.end.i
  %e.addr.014.i.i = phi %struct.ephy_info* [ getelementptr inbounds ([8 x %struct.ephy_info], [8 x %struct.ephy_info]* @rtl_hw_start_8102e_1.e_info_8102e_1, i64 0, i64 0), %if.end.i ], [ %incdec.ptr.i.i, %rtl_ephy_write.exit.i ]
  %len.addr.013.i.i = phi i32 [ 8, %if.end.i ], [ %dec.i.i, %rtl_ephy_write.exit.i ]
  %dec.i.i = add nsw i32 %len.addr.013.i.i, -1
  %offset.i.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i, i64 0, i32 0
  %39 = load i32, i32* %offset.i.i, align 4
  %40 = load i8*, i8** %mmio_addr, align 8
  %and.i32.i = shl i32 %39, 16
  %shl.i33.i = and i32 %and.i32.i, 2031616
  %add.ptr.i34.i = getelementptr i8, i8* %40, i64 128
  %41 = bitcast i8* %add.ptr.i34.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i33.i, i32* %41) #10, !srcloc !8
  br label %for.body.i.i.i41.i

for.cond.i.i.i37.i:                               ; preds = %for.body.i.i.i41.i
  %inc.i.i.i35.i = add nuw nsw i32 %i.017.i.i.i38.i, 1
  %cmp.i.i.i36.i = icmp ult i32 %i.017.i.i.i38.i, 99
  br i1 %cmp.i.i.i36.i, label %for.body.i.i.i41.i, label %do.body.i.i.i45.i

for.body.i.i.i41.i:                               ; preds = %for.cond.i.i.i37.i, %while.body.i.i
  %i.017.i.i.i38.i = phi i32 [ 0, %while.body.i.i ], [ %inc.i.i.i35.i, %for.cond.i.i.i37.i ]
  call void @__udelay(i64 10) #9
  %42 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i39.i = getelementptr i8, i8* %42, i64 128
  %43 = bitcast i8* %add.ptr.i.i39.i to i32*
  %44 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %43) #10, !srcloc !2
  %tobool.i.i40.i = icmp slt i32 %44, 0
  br i1 %tobool.i.i40.i, label %cond.true.i.i, label %for.cond.i.i.i37.i

do.body.i.i.i45.i:                                ; preds = %for.cond.i.i.i37.i
  %45 = load i32, i32* %37, align 8
  %and.i.i.i43.i = and i32 %45, 1
  %tobool4.i.i.i44.i = icmp eq i32 %and.i.i.i43.i, 0
  br i1 %tobool4.i.i.i44.i, label %rtl_ephy_read.exit.i, label %if.then5.i.i.i47.i

if.then5.i.i.i47.i:                               ; preds = %do.body.i.i.i45.i
  %46 = load %struct.net_device*, %struct.net_device** %38, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %46, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i

cond.true.i.i:                                    ; preds = %for.body.i.i.i41.i
  %47 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %41) #10, !srcloc !2
  %phitmp.i48.i = trunc i32 %47 to i16
  br label %rtl_ephy_read.exit.i

rtl_ephy_read.exit.i:                             ; preds = %cond.true.i.i, %if.then5.i.i.i47.i, %do.body.i.i.i45.i
  %cond.i.i = phi i16 [ %phitmp.i48.i, %cond.true.i.i ], [ -1, %do.body.i.i.i45.i ], [ -1, %if.then5.i.i.i47.i ]
  %mask.i.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i, i64 0, i32 1
  %48 = load i16, i16* %mask.i.i, align 4
  %neg.i.i = xor i16 %48, -1
  %and.i.i = and i16 %cond.i.i, %neg.i.i
  %bits.i.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i, i64 0, i32 2
  %49 = load i16, i16* %bits.i.i, align 2
  %or.i.i = or i16 %and.i.i, %49
  %50 = load i32, i32* %offset.i.i, align 4
  %conv5.i.i = zext i16 %or.i.i to i32
  %51 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i = shl i32 %50, 16
  %shl.i.i = and i32 %and1.i.i, 2031616
  %or.i30.i = or i32 %shl.i.i, %conv5.i.i
  %or2.i.i = or i32 %or.i30.i, -2147483648
  %add.ptr.i.i = getelementptr i8, i8* %51, i64 128
  %52 = bitcast i8* %add.ptr.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i, i32* %52) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %rtl_ephy_read.exit.i
  %i.017.i.i.i.i = phi i32 [ 0, %rtl_ephy_read.exit.i ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 10) #9
  %53 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %53, i64 128
  %54 = bitcast i8* %add.ptr.i.i.i to i32*
  %55 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %54) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %55, 0
  br i1 %tobool.i.i.i, label %for.cond.i.i.i.i, label %rtl_ephy_write.exit.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %56 = load i32, i32* %37, align 8
  %and.i.i.i.i = and i32 %56, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_ephy_write.exit.i, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %57 = load %struct.net_device*, %struct.net_device** %38, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %57, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i

rtl_ephy_write.exit.i:                            ; preds = %for.body.i.i.i.i, %if.then5.i.i.i.i, %do.body.i.i.i.i
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i, i64 1
  %cmp.i.i = icmp ugt i32 %len.addr.013.i.i, 1
  br i1 %cmp.i.i, label %while.body.i.i, label %sw.epilog

sw.bb23:                                          ; preds = %if.end14
  %58 = load i8*, i8** %mmio_addr, align 8
  %59 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %read.i.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %60 = bitcast i8* %read.i.i.i.i.i to i32 (%struct.rtl8169_private*, i32)**
  %61 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %60, align 8
  %tobool.i.i.i.i.i = icmp eq i32 (%struct.rtl8169_private*, i32)* %61, null
  br i1 %tobool.i.i.i.i.i, label %rtl_csi_read.exit.i.i.i.i, label %cond.true.i.i.i.i.i

cond.true.i.i.i.i.i:                              ; preds = %sw.bb23
  %call.i.i.i.i.i = call i32 %61(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i.i = and i32 %call.i.i.i.i.i, 16777215
  %phitmp.i.i.i80 = or i32 %phitmp.i.i.i.i, 654311424
  br label %rtl_csi_read.exit.i.i.i.i

rtl_csi_read.exit.i.i.i.i:                        ; preds = %cond.true.i.i.i.i.i, %sw.bb23
  %cond.i.i.i.i.i = phi i32 [ %phitmp.i.i.i80, %cond.true.i.i.i.i.i ], [ 671088639, %sw.bb23 ]
  %write.i.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %62 = bitcast i8* %write.i.i.i.i.i to void (%struct.rtl8169_private*, i32, i32)**
  %63 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %62, align 8
  %tobool.i3.i.i.i.i = icmp eq void (%struct.rtl8169_private*, i32, i32)* %63, null
  br i1 %tobool.i3.i.i.i.i, label %rtl_hw_start_8102e_2.exit.i, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %rtl_csi_read.exit.i.i.i.i
  call void %63(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i.i) #9
  br label %rtl_hw_start_8102e_2.exit.i

rtl_hw_start_8102e_2.exit.i:                      ; preds = %if.then.i.i.i.i.i, %rtl_csi_read.exit.i.i.i.i
  %call.i.i.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %59, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  %add.ptr.i.i81 = getelementptr i8, i8* %58, i64 82
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 15, i8* %add.ptr.i.i81) #10, !srcloc !5
  %add.ptr1.i.i = getelementptr i8, i8* %58, i64 84
  %64 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1.i.i) #10, !srcloc !6
  %65 = and i8 %64, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %65, i8* %add.ptr1.i.i) #10, !srcloc !5
  %66 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i3.i = getelementptr i8, i8* %66, i64 128
  %67 = bitcast i8* %add.ptr.i3.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147237127, i32* %67) #10, !srcloc !8
  br label %for.body.i.i.i.i88

for.cond.i.i.i.i84:                               ; preds = %for.body.i.i.i.i88
  %inc.i.i.i.i82 = add nuw nsw i32 %i.017.i.i.i.i85, 1
  %cmp.i.i.i.i83 = icmp ult i32 %i.017.i.i.i.i85, 99
  br i1 %cmp.i.i.i.i83, label %for.body.i.i.i.i88, label %do.body.i.i.i.i92

for.body.i.i.i.i88:                               ; preds = %for.cond.i.i.i.i84, %rtl_hw_start_8102e_2.exit.i
  %i.017.i.i.i.i85 = phi i32 [ 0, %rtl_hw_start_8102e_2.exit.i ], [ %inc.i.i.i.i82, %for.cond.i.i.i.i84 ]
  call void @__udelay(i64 10) #9
  %68 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i86 = getelementptr i8, i8* %68, i64 128
  %69 = bitcast i8* %add.ptr.i.i.i86 to i32*
  %70 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %69) #10, !srcloc !2
  %tobool.i.i.i87 = icmp slt i32 %70, 0
  br i1 %tobool.i.i.i87, label %for.cond.i.i.i.i84, label %rtl_hw_start_8102e_3.exit

do.body.i.i.i.i92:                                ; preds = %for.cond.i.i.i.i84
  %msg_enable.i.i.i.i89 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %71 = bitcast i8* %msg_enable.i.i.i.i89 to i32*
  %72 = load i32, i32* %71, align 8
  %and.i.i.i.i90 = and i32 %72, 1
  %tobool4.i.i.i.i91 = icmp eq i32 %and.i.i.i.i90, 0
  br i1 %tobool4.i.i.i.i91, label %rtl_hw_start_8102e_3.exit, label %if.then5.i.i.i.i94

if.then5.i.i.i.i94:                               ; preds = %do.body.i.i.i.i92
  %dev.i.i.i.i93 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %73 = bitcast i8* %dev.i.i.i.i93 to %struct.net_device**
  %74 = load %struct.net_device*, %struct.net_device** %73, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %74, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_hw_start_8102e_3.exit

rtl_hw_start_8102e_3.exit:                        ; preds = %for.body.i.i.i.i88, %do.body.i.i.i.i92, %if.then5.i.i.i.i94
  call void @__const_udelay(i64 42950) #9
  br label %sw.epilog

sw.bb24:                                          ; preds = %if.end14
  %75 = load i8*, i8** %mmio_addr, align 8
  %76 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %read.i.i.i.i98 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %77 = bitcast i8* %read.i.i.i.i98 to i32 (%struct.rtl8169_private*, i32)**
  %78 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %77, align 8
  %tobool.i.i.i.i99 = icmp eq i32 (%struct.rtl8169_private*, i32)* %78, null
  br i1 %tobool.i.i.i.i99, label %rtl_csi_read.exit.i.i.i107, label %cond.true.i.i.i.i103

cond.true.i.i.i.i103:                             ; preds = %sw.bb24
  %call.i.i.i.i100 = call i32 %78(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i101 = and i32 %call.i.i.i.i100, 16777215
  %phitmp.i.i102 = or i32 %phitmp.i.i.i101, 654311424
  br label %rtl_csi_read.exit.i.i.i107

rtl_csi_read.exit.i.i.i107:                       ; preds = %cond.true.i.i.i.i103, %sw.bb24
  %cond.i.i.i.i104 = phi i32 [ %phitmp.i.i102, %cond.true.i.i.i.i103 ], [ 671088639, %sw.bb24 ]
  %write.i.i.i.i105 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %79 = bitcast i8* %write.i.i.i.i105 to void (%struct.rtl8169_private*, i32, i32)**
  %80 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %79, align 8
  %tobool.i3.i.i.i106 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %80, null
  br i1 %tobool.i3.i.i.i106, label %rtl_hw_start_8102e_2.exit, label %if.then.i.i.i.i108

if.then.i.i.i.i108:                               ; preds = %rtl_csi_read.exit.i.i.i107
  call void %80(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i104) #9
  br label %rtl_hw_start_8102e_2.exit

rtl_hw_start_8102e_2.exit:                        ; preds = %rtl_csi_read.exit.i.i.i107, %if.then.i.i.i.i108
  %call.i.i109 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %76, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  %add.ptr.i110 = getelementptr i8, i8* %75, i64 82
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 15, i8* %add.ptr.i110) #10, !srcloc !5
  %add.ptr1.i111 = getelementptr i8, i8* %75, i64 84
  %81 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1.i111) #10, !srcloc !6
  %82 = and i8 %81, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %82, i8* %add.ptr1.i111) #10, !srcloc !5
  br label %sw.epilog

sw.bb25:                                          ; preds = %if.end14
  call fastcc void @rtl_hw_start_8105e_1(%struct.rtl8169_private* nonnull %0) #11
  br label %sw.epilog

sw.bb26:                                          ; preds = %if.end14
  call fastcc void @rtl_hw_start_8105e_1(%struct.rtl8169_private* nonnull %0) #9
  %83 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i114 = getelementptr i8, i8* %83, i64 128
  %84 = bitcast i8* %add.ptr.i.i114 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1966080, i32* %84) #10, !srcloc !8
  br label %for.body.i.i.i.i121

for.cond.i.i.i.i117:                              ; preds = %for.body.i.i.i.i121
  %inc.i.i.i.i115 = add nuw nsw i32 %i.017.i.i.i.i118, 1
  %cmp.i.i.i.i116 = icmp ult i32 %i.017.i.i.i.i118, 99
  br i1 %cmp.i.i.i.i116, label %for.body.i.i.i.i121, label %do.body.i.i.i.i125

for.body.i.i.i.i121:                              ; preds = %for.cond.i.i.i.i117, %sw.bb26
  %i.017.i.i.i.i118 = phi i32 [ 0, %sw.bb26 ], [ %inc.i.i.i.i115, %for.cond.i.i.i.i117 ]
  call void @__udelay(i64 10) #9
  %85 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i119 = getelementptr i8, i8* %85, i64 128
  %86 = bitcast i8* %add.ptr.i.i.i119 to i32*
  %87 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %86) #10, !srcloc !2
  %tobool.i.i.i120 = icmp slt i32 %87, 0
  br i1 %tobool.i.i.i120, label %cond.true.i.i128, label %for.cond.i.i.i.i117

do.body.i.i.i.i125:                               ; preds = %for.cond.i.i.i.i117
  %msg_enable.i.i.i.i122 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %88 = bitcast i8* %msg_enable.i.i.i.i122 to i32*
  %89 = load i32, i32* %88, align 8
  %and.i.i.i.i123 = and i32 %89, 1
  %tobool4.i.i.i.i124 = icmp eq i32 %and.i.i.i.i123, 0
  br i1 %tobool4.i.i.i.i124, label %rtl_ephy_read.exit.i130, label %if.then5.i.i.i.i127

if.then5.i.i.i.i127:                              ; preds = %do.body.i.i.i.i125
  %dev.i.i.i.i126 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %90 = bitcast i8* %dev.i.i.i.i126 to %struct.net_device**
  %91 = load %struct.net_device*, %struct.net_device** %90, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %91, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i130

cond.true.i.i128:                                 ; preds = %for.body.i.i.i.i121
  %92 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %84) #10, !srcloc !2
  %phitmp.i = and i32 %92, 32767
  %phitmp21.i = or i32 %phitmp.i, -2145484800
  br label %rtl_ephy_read.exit.i130

rtl_ephy_read.exit.i130:                          ; preds = %cond.true.i.i128, %if.then5.i.i.i.i127, %do.body.i.i.i.i125
  %cond.i.i129 = phi i32 [ %phitmp21.i, %cond.true.i.i128 ], [ -2145452033, %do.body.i.i.i.i125 ], [ -2145452033, %if.then5.i.i.i.i127 ]
  %93 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i4.i = getelementptr i8, i8* %93, i64 128
  %94 = bitcast i8* %add.ptr.i4.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i129, i32* %94) #10, !srcloc !8
  br label %for.body.i.i.i11.i

for.cond.i.i.i7.i:                                ; preds = %for.body.i.i.i11.i
  %inc.i.i.i5.i = add nuw nsw i32 %i.017.i.i.i8.i, 1
  %cmp.i.i.i6.i = icmp ult i32 %i.017.i.i.i8.i, 99
  br i1 %cmp.i.i.i6.i, label %for.body.i.i.i11.i, label %do.body.i.i.i15.i

for.body.i.i.i11.i:                               ; preds = %for.cond.i.i.i7.i, %rtl_ephy_read.exit.i130
  %i.017.i.i.i8.i = phi i32 [ 0, %rtl_ephy_read.exit.i130 ], [ %inc.i.i.i5.i, %for.cond.i.i.i7.i ]
  call void @__udelay(i64 10) #9
  %95 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i9.i = getelementptr i8, i8* %95, i64 128
  %96 = bitcast i8* %add.ptr.i.i9.i to i32*
  %97 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %96) #10, !srcloc !2
  %tobool.i.i10.i = icmp slt i32 %97, 0
  br i1 %tobool.i.i10.i, label %for.cond.i.i.i7.i, label %rtl_hw_start_8105e_2.exit

do.body.i.i.i15.i:                                ; preds = %for.cond.i.i.i7.i
  %msg_enable.i.i.i12.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %98 = bitcast i8* %msg_enable.i.i.i12.i to i32*
  %99 = load i32, i32* %98, align 8
  %and.i.i.i13.i = and i32 %99, 1
  %tobool4.i.i.i14.i = icmp eq i32 %and.i.i.i13.i, 0
  br i1 %tobool4.i.i.i14.i, label %rtl_hw_start_8105e_2.exit, label %if.then5.i.i.i17.i

if.then5.i.i.i17.i:                               ; preds = %do.body.i.i.i15.i
  %dev.i.i.i16.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %100 = bitcast i8* %dev.i.i.i16.i to %struct.net_device**
  %101 = load %struct.net_device*, %struct.net_device** %100, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %101, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_hw_start_8105e_2.exit

rtl_hw_start_8105e_2.exit:                        ; preds = %for.body.i.i.i11.i, %do.body.i.i.i15.i, %if.then5.i.i.i17.i
  call void @__const_udelay(i64 42950) #9
  br label %sw.epilog

sw.bb27:                                          ; preds = %if.end14
  %102 = load i8*, i8** %mmio_addr, align 8
  %read.i.i.i.i133 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5640
  %103 = bitcast i8* %read.i.i.i.i133 to i32 (%struct.rtl8169_private*, i32)**
  %104 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %103, align 8
  %tobool.i.i.i.i134 = icmp eq i32 (%struct.rtl8169_private*, i32)* %104, null
  br i1 %tobool.i.i.i.i134, label %rtl_csi_read.exit.i.i.i142, label %cond.true.i.i.i.i138

cond.true.i.i.i.i138:                             ; preds = %sw.bb27
  %call.i.i.i.i135 = call i32 %104(%struct.rtl8169_private* nonnull %0, i32 1804) #9
  %phitmp.i.i.i136 = and i32 %call.i.i.i.i135, 16777215
  %phitmp.i.i137 = or i32 %phitmp.i.i.i136, 654311424
  br label %rtl_csi_read.exit.i.i.i142

rtl_csi_read.exit.i.i.i142:                       ; preds = %cond.true.i.i.i.i138, %sw.bb27
  %cond.i.i.i.i139 = phi i32 [ %phitmp.i.i137, %cond.true.i.i.i.i138 ], [ 671088639, %sw.bb27 ]
  %write.i.i.i.i140 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5632
  %105 = bitcast i8* %write.i.i.i.i140 to void (%struct.rtl8169_private*, i32, i32)**
  %106 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %105, align 8
  %tobool.i3.i.i.i141 = icmp eq void (%struct.rtl8169_private*, i32, i32)* %106, null
  br i1 %tobool.i3.i.i.i141, label %rtl_csi_access_enable_2.exit.i149, label %if.then.i.i.i.i143

if.then.i.i.i.i143:                               ; preds = %rtl_csi_read.exit.i.i.i142
  call void %106(%struct.rtl8169_private* nonnull %0, i32 1804, i32 %cond.i.i.i.i139) #9
  br label %rtl_csi_access_enable_2.exit.i149

rtl_csi_access_enable_2.exit.i149:                ; preds = %if.then.i.i.i.i143, %rtl_csi_read.exit.i.i.i142
  %add.ptr.i144 = getelementptr i8, i8* %102, i64 240
  %107 = bitcast i8* %add.ptr.i144 to i32*
  %108 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %107) #10, !srcloc !2
  %or.i = or i32 %108, 10240
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i, i32* %107) #10, !srcloc !8
  %add.ptr2.i145 = getelementptr i8, i8* %102, i64 64
  %109 = bitcast i8* %add.ptr2.i145 to i32*
  %110 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %109) #10, !srcloc !2
  %or4.i = or i32 %110, 128
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or4.i, i32* %109) #10, !srcloc !8
  %add.ptr6.i146 = getelementptr i8, i8* %102, i64 211
  %111 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr6.i146) #10, !srcloc !6
  %112 = and i8 %111, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %112, i8* %add.ptr6.i146) #10, !srcloc !5
  %msg_enable.i.i.i.i147 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %113 = bitcast i8* %msg_enable.i.i.i.i147 to i32*
  %dev.i.i.i.i148 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %114 = bitcast i8* %dev.i.i.i.i148 to %struct.net_device**
  br label %while.body.i.i154

while.body.i.i154:                                ; preds = %rtl_ephy_write.exit.i181, %rtl_csi_access_enable_2.exit.i149
  %e.addr.014.i.i150 = phi %struct.ephy_info* [ getelementptr inbounds ([2 x %struct.ephy_info], [2 x %struct.ephy_info]* @rtl_hw_start_8402.e_info_8402, i64 0, i64 0), %rtl_csi_access_enable_2.exit.i149 ], [ %incdec.ptr.i.i179, %rtl_ephy_write.exit.i181 ]
  %len.addr.013.i.i151 = phi i32 [ 2, %rtl_csi_access_enable_2.exit.i149 ], [ %dec.i.i152, %rtl_ephy_write.exit.i181 ]
  %dec.i.i152 = add nsw i32 %len.addr.013.i.i151, -1
  %offset.i.i153 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i150, i64 0, i32 0
  %115 = load i32, i32* %offset.i.i153, align 4
  %116 = load i8*, i8** %mmio_addr, align 8
  %and.i143.i = shl i32 %115, 16
  %shl.i144.i = and i32 %and.i143.i, 2031616
  %add.ptr.i145.i = getelementptr i8, i8* %116, i64 128
  %117 = bitcast i8* %add.ptr.i145.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i144.i, i32* %117) #10, !srcloc !8
  br label %for.body.i.i.i152.i

for.cond.i.i.i148.i:                              ; preds = %for.body.i.i.i152.i
  %inc.i.i.i146.i = add nuw nsw i32 %i.017.i.i.i149.i, 1
  %cmp.i.i.i147.i = icmp ult i32 %i.017.i.i.i149.i, 99
  br i1 %cmp.i.i.i147.i, label %for.body.i.i.i152.i, label %do.body.i.i.i156.i

for.body.i.i.i152.i:                              ; preds = %for.cond.i.i.i148.i, %while.body.i.i154
  %i.017.i.i.i149.i = phi i32 [ 0, %while.body.i.i154 ], [ %inc.i.i.i146.i, %for.cond.i.i.i148.i ]
  call void @__udelay(i64 10) #9
  %118 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i150.i = getelementptr i8, i8* %118, i64 128
  %119 = bitcast i8* %add.ptr.i.i150.i to i32*
  %120 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %119) #10, !srcloc !2
  %tobool.i.i151.i = icmp slt i32 %120, 0
  br i1 %tobool.i.i151.i, label %cond.true.i.i155, label %for.cond.i.i.i148.i

do.body.i.i.i156.i:                               ; preds = %for.cond.i.i.i148.i
  %121 = load i32, i32* %113, align 8
  %and.i.i.i154.i = and i32 %121, 1
  %tobool4.i.i.i155.i = icmp eq i32 %and.i.i.i154.i, 0
  br i1 %tobool4.i.i.i155.i, label %rtl_ephy_read.exit.i167, label %if.then5.i.i.i158.i

if.then5.i.i.i158.i:                              ; preds = %do.body.i.i.i156.i
  %122 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %122, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit.i167

cond.true.i.i155:                                 ; preds = %for.body.i.i.i152.i
  %123 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %117) #10, !srcloc !2
  %phitmp.i159.i = trunc i32 %123 to i16
  br label %rtl_ephy_read.exit.i167

rtl_ephy_read.exit.i167:                          ; preds = %cond.true.i.i155, %if.then5.i.i.i158.i, %do.body.i.i.i156.i
  %cond.i.i156 = phi i16 [ %phitmp.i159.i, %cond.true.i.i155 ], [ -1, %do.body.i.i.i156.i ], [ -1, %if.then5.i.i.i158.i ]
  %mask.i.i157 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i150, i64 0, i32 1
  %124 = load i16, i16* %mask.i.i157, align 4
  %neg.i.i158 = xor i16 %124, -1
  %and.i.i159 = and i16 %cond.i.i156, %neg.i.i158
  %bits.i.i160 = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i150, i64 0, i32 2
  %125 = load i16, i16* %bits.i.i160, align 2
  %or.i.i161 = or i16 %and.i.i159, %125
  %126 = load i32, i32* %offset.i.i153, align 4
  %conv5.i.i162 = zext i16 %or.i.i161 to i32
  %127 = load i8*, i8** %mmio_addr, align 8
  %and1.i.i163 = shl i32 %126, 16
  %shl.i.i164 = and i32 %and1.i.i163, 2031616
  %or.i28.i = or i32 %shl.i.i164, %conv5.i.i162
  %or2.i.i165 = or i32 %or.i28.i, -2147483648
  %add.ptr.i.i166 = getelementptr i8, i8* %127, i64 128
  %128 = bitcast i8* %add.ptr.i.i166 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i165, i32* %128) #10, !srcloc !8
  br label %for.body.i.i.i.i174

for.cond.i.i.i.i170:                              ; preds = %for.body.i.i.i.i174
  %inc.i.i.i.i168 = add nuw nsw i32 %i.017.i.i.i.i171, 1
  %cmp.i.i.i.i169 = icmp ult i32 %i.017.i.i.i.i171, 99
  br i1 %cmp.i.i.i.i169, label %for.body.i.i.i.i174, label %do.body.i.i.i.i177

for.body.i.i.i.i174:                              ; preds = %for.cond.i.i.i.i170, %rtl_ephy_read.exit.i167
  %i.017.i.i.i.i171 = phi i32 [ 0, %rtl_ephy_read.exit.i167 ], [ %inc.i.i.i.i168, %for.cond.i.i.i.i170 ]
  call void @__udelay(i64 10) #9
  %129 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i172 = getelementptr i8, i8* %129, i64 128
  %130 = bitcast i8* %add.ptr.i.i.i172 to i32*
  %131 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %130) #10, !srcloc !2
  %tobool.i.i.i173 = icmp slt i32 %131, 0
  br i1 %tobool.i.i.i173, label %for.cond.i.i.i.i170, label %rtl_ephy_write.exit.i181

do.body.i.i.i.i177:                               ; preds = %for.cond.i.i.i.i170
  %132 = load i32, i32* %113, align 8
  %and.i.i.i.i175 = and i32 %132, 1
  %tobool4.i.i.i.i176 = icmp eq i32 %and.i.i.i.i175, 0
  br i1 %tobool4.i.i.i.i176, label %rtl_ephy_write.exit.i181, label %if.then5.i.i.i.i178

if.then5.i.i.i.i178:                              ; preds = %do.body.i.i.i.i177
  %133 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %133, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit.i181

rtl_ephy_write.exit.i181:                         ; preds = %for.body.i.i.i.i174, %if.then5.i.i.i.i178, %do.body.i.i.i.i177
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i.i179 = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i.i150, i64 1
  %cmp.i.i180 = icmp ugt i32 %len.addr.013.i.i151, 1
  br i1 %cmp.i.i180, label %while.body.i.i154, label %rtl_ephy_init.exit.i

rtl_ephy_init.exit.i:                             ; preds = %rtl_ephy_write.exit.i181
  %134 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %call.i29.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %134, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  %135 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i31.i = getelementptr i8, i8* %135, i64 112
  %136 = bitcast i8* %add.ptr.i31.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 2, i32* %136) #10, !srcloc !8
  %add.ptr11.i.i = getelementptr i8, i8* %135, i64 116
  %137 = bitcast i8* %add.ptr11.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147422008, i32* %137) #10, !srcloc !8
  br label %for.body.i.i.i38.i

for.cond.i.i.i34.i:                               ; preds = %for.body.i.i.i38.i
  %inc.i.i.i32.i = add nuw nsw i32 %i.017.i.i.i35.i, 1
  %cmp.i.i.i33.i = icmp ult i32 %i.017.i.i.i35.i, 99
  br i1 %cmp.i.i.i33.i, label %for.body.i.i.i38.i, label %do.body.i.i.i42.i

for.body.i.i.i38.i:                               ; preds = %for.cond.i.i.i34.i, %rtl_ephy_init.exit.i
  %i.017.i.i.i35.i = phi i32 [ 0, %rtl_ephy_init.exit.i ], [ %inc.i.i.i32.i, %for.cond.i.i.i34.i ]
  call void @__udelay(i64 100) #9
  %138 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i36.i = getelementptr i8, i8* %138, i64 116
  %139 = bitcast i8* %add.ptr.i.i36.i to i32*
  %140 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %139) #10, !srcloc !2
  %tobool.i.i37.i = icmp slt i32 %140, 0
  br i1 %tobool.i.i37.i, label %for.cond.i.i.i34.i, label %rtl_eri_write.exit.i

do.body.i.i.i42.i:                                ; preds = %for.cond.i.i.i34.i
  %141 = load i32, i32* %113, align 8
  %and.i.i.i40.i = and i32 %141, 1
  %tobool4.i.i.i41.i = icmp eq i32 %and.i.i.i40.i, 0
  br i1 %tobool4.i.i.i41.i, label %rtl_eri_write.exit.i, label %if.then5.i.i.i44.i

if.then5.i.i.i44.i:                               ; preds = %do.body.i.i.i42.i
  %142 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %142, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit.i

rtl_eri_write.exit.i:                             ; preds = %for.body.i.i.i38.i, %if.then5.i.i.i44.i, %do.body.i.i.i42.i
  %143 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i46.i = getelementptr i8, i8* %143, i64 112
  %144 = bitcast i8* %add.ptr.i46.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 6, i32* %144) #10, !srcloc !8
  %add.ptr11.i47.i = getelementptr i8, i8* %143, i64 116
  %145 = bitcast i8* %add.ptr11.i47.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421976, i32* %145) #10, !srcloc !8
  br label %for.body.i.i.i54.i

for.cond.i.i.i50.i:                               ; preds = %for.body.i.i.i54.i
  %inc.i.i.i48.i = add nuw nsw i32 %i.017.i.i.i51.i, 1
  %cmp.i.i.i49.i = icmp ult i32 %i.017.i.i.i51.i, 99
  br i1 %cmp.i.i.i49.i, label %for.body.i.i.i54.i, label %do.body.i.i.i58.i

for.body.i.i.i54.i:                               ; preds = %for.cond.i.i.i50.i, %rtl_eri_write.exit.i
  %i.017.i.i.i51.i = phi i32 [ 0, %rtl_eri_write.exit.i ], [ %inc.i.i.i48.i, %for.cond.i.i.i50.i ]
  call void @__udelay(i64 100) #9
  %146 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i52.i = getelementptr i8, i8* %146, i64 116
  %147 = bitcast i8* %add.ptr.i.i52.i to i32*
  %148 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %147) #10, !srcloc !2
  %tobool.i.i53.i = icmp slt i32 %148, 0
  br i1 %tobool.i.i53.i, label %for.cond.i.i.i50.i, label %rtl_eri_write.exit61.i

do.body.i.i.i58.i:                                ; preds = %for.cond.i.i.i50.i
  %149 = load i32, i32* %113, align 8
  %and.i.i.i56.i = and i32 %149, 1
  %tobool4.i.i.i57.i = icmp eq i32 %and.i.i.i56.i, 0
  br i1 %tobool4.i.i.i57.i, label %rtl_eri_write.exit61.i, label %if.then5.i.i.i60.i

if.then5.i.i.i60.i:                               ; preds = %do.body.i.i.i58.i
  %150 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %150, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit61.i

rtl_eri_write.exit61.i:                           ; preds = %for.body.i.i.i54.i, %if.then5.i.i.i60.i, %do.body.i.i.i58.i
  %151 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i62.i = getelementptr i8, i8* %151, i64 116
  %152 = bitcast i8* %add.ptr.i.i62.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %152) #10, !srcloc !8
  br label %for.body.i.i.i.i.i

for.cond.i.i.i.i.i:                               ; preds = %for.body.i.i.i.i.i
  %inc.i.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i.i, 1
  %cmp.i.i.i.i.i = icmp ult i32 %i.017.i.i.i.i.i, 99
  br i1 %cmp.i.i.i.i.i, label %for.body.i.i.i.i.i, label %do.body.i.i.i.i.i

for.body.i.i.i.i.i:                               ; preds = %for.cond.i.i.i.i.i, %rtl_eri_write.exit61.i
  %i.017.i.i.i.i.i = phi i32 [ 0, %rtl_eri_write.exit61.i ], [ %inc.i.i.i.i.i, %for.cond.i.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %153 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i.i = getelementptr i8, i8* %153, i64 116
  %154 = bitcast i8* %add.ptr.i.i.i.i to i32*
  %155 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %154) #10, !srcloc !2
  %tobool.i.i.i63.i = icmp slt i32 %155, 0
  br i1 %tobool.i.i.i63.i, label %cond.true.i.i.i, label %for.cond.i.i.i.i.i

do.body.i.i.i.i.i:                                ; preds = %for.cond.i.i.i.i.i
  %156 = load i32, i32* %113, align 8
  %and.i.i.i.i.i = and i32 %156, 1
  %tobool4.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i.i, label %rtl_w0w1_eri.exit.i, label %if.then5.i.i.i.i.i

if.then5.i.i.i.i.i:                               ; preds = %do.body.i.i.i.i.i
  %157 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %157, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit.i

cond.true.i.i.i:                                  ; preds = %for.body.i.i.i.i.i
  %add.ptr3.i.i.i = getelementptr i8, i8* %151, i64 112
  %158 = bitcast i8* %add.ptr3.i.i.i to i32*
  %159 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %158) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit.i

rtl_w0w1_eri.exit.i:                              ; preds = %cond.true.i.i.i, %if.then5.i.i.i.i.i, %do.body.i.i.i.i.i
  %cond.i.i.i = phi i32 [ %159, %cond.true.i.i.i ], [ -1, %do.body.i.i.i.i.i ], [ -1, %if.then5.i.i.i.i.i ]
  %and.i64.i = and i32 %cond.i.i.i, -2
  %160 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i161.i = getelementptr i8, i8* %160, i64 112
  %161 = bitcast i8* %add.ptr.i161.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i64.i, i32* %161) #10, !srcloc !8
  %add.ptr11.i162.i = getelementptr i8, i8* %160, i64 116
  %162 = bitcast i8* %add.ptr11.i162.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %162) #10, !srcloc !8
  br label %for.body.i.i.i169.i

for.cond.i.i.i165.i:                              ; preds = %for.body.i.i.i169.i
  %inc.i.i.i163.i = add nuw nsw i32 %i.017.i.i.i166.i, 1
  %cmp.i.i.i164.i = icmp ult i32 %i.017.i.i.i166.i, 99
  br i1 %cmp.i.i.i164.i, label %for.body.i.i.i169.i, label %do.body.i.i.i173.i

for.body.i.i.i169.i:                              ; preds = %for.cond.i.i.i165.i, %rtl_w0w1_eri.exit.i
  %i.017.i.i.i166.i = phi i32 [ 0, %rtl_w0w1_eri.exit.i ], [ %inc.i.i.i163.i, %for.cond.i.i.i165.i ]
  call void @__udelay(i64 100) #9
  %163 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i167.i = getelementptr i8, i8* %163, i64 116
  %164 = bitcast i8* %add.ptr.i.i167.i to i32*
  %165 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %164) #10, !srcloc !2
  %tobool.i.i168.i = icmp slt i32 %165, 0
  br i1 %tobool.i.i168.i, label %for.cond.i.i.i165.i, label %rtl_eri_write.exit176.i

do.body.i.i.i173.i:                               ; preds = %for.cond.i.i.i165.i
  %166 = load i32, i32* %113, align 8
  %and.i.i.i171.i = and i32 %166, 1
  %tobool4.i.i.i172.i = icmp eq i32 %and.i.i.i171.i, 0
  br i1 %tobool4.i.i.i172.i, label %rtl_eri_write.exit176.i, label %if.then5.i.i.i175.i

if.then5.i.i.i175.i:                              ; preds = %do.body.i.i.i173.i
  %167 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %167, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit176.i

rtl_eri_write.exit176.i:                          ; preds = %for.body.i.i.i169.i, %if.then5.i.i.i175.i, %do.body.i.i.i173.i
  %168 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i66.i = getelementptr i8, i8* %168, i64 116
  %169 = bitcast i8* %add.ptr.i.i66.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %169) #10, !srcloc !8
  br label %for.body.i.i.i.i73.i

for.cond.i.i.i.i69.i:                             ; preds = %for.body.i.i.i.i73.i
  %inc.i.i.i.i67.i = add nuw nsw i32 %i.017.i.i.i.i70.i, 1
  %cmp.i.i.i.i68.i = icmp ult i32 %i.017.i.i.i.i70.i, 99
  br i1 %cmp.i.i.i.i68.i, label %for.body.i.i.i.i73.i, label %do.body.i.i.i.i77.i

for.body.i.i.i.i73.i:                             ; preds = %for.cond.i.i.i.i69.i, %rtl_eri_write.exit176.i
  %i.017.i.i.i.i70.i = phi i32 [ 0, %rtl_eri_write.exit176.i ], [ %inc.i.i.i.i67.i, %for.cond.i.i.i.i69.i ]
  call void @__udelay(i64 100) #9
  %170 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i71.i = getelementptr i8, i8* %170, i64 116
  %171 = bitcast i8* %add.ptr.i.i.i71.i to i32*
  %172 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %171) #10, !srcloc !2
  %tobool.i.i.i72.i = icmp slt i32 %172, 0
  br i1 %tobool.i.i.i72.i, label %cond.true.i.i81.i, label %for.cond.i.i.i.i69.i

do.body.i.i.i.i77.i:                              ; preds = %for.cond.i.i.i.i69.i
  %173 = load i32, i32* %113, align 8
  %and.i.i.i.i75.i = and i32 %173, 1
  %tobool4.i.i.i.i76.i = icmp eq i32 %and.i.i.i.i75.i, 0
  br i1 %tobool4.i.i.i.i76.i, label %rtl_w0w1_eri.exit84.i, label %if.then5.i.i.i.i79.i

if.then5.i.i.i.i79.i:                             ; preds = %do.body.i.i.i.i77.i
  %174 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %174, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit84.i

cond.true.i.i81.i:                                ; preds = %for.body.i.i.i.i73.i
  %add.ptr3.i.i80.i = getelementptr i8, i8* %168, i64 112
  %175 = bitcast i8* %add.ptr3.i.i80.i to i32*
  %176 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %175) #10, !srcloc !2
  %phitmp.i183 = or i32 %176, 1
  br label %rtl_w0w1_eri.exit84.i

rtl_w0w1_eri.exit84.i:                            ; preds = %cond.true.i.i81.i, %if.then5.i.i.i.i79.i, %do.body.i.i.i.i77.i
  %cond.i.i82.i = phi i32 [ %phitmp.i183, %cond.true.i.i81.i ], [ -1, %do.body.i.i.i.i77.i ], [ -1, %if.then5.i.i.i.i79.i ]
  %177 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i178.i = getelementptr i8, i8* %177, i64 112
  %178 = bitcast i8* %add.ptr.i178.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i82.i, i32* %178) #10, !srcloc !8
  %add.ptr11.i179.i = getelementptr i8, i8* %177, i64 116
  %179 = bitcast i8* %add.ptr11.i179.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %179) #10, !srcloc !8
  br label %for.body.i.i.i186.i

for.cond.i.i.i182.i:                              ; preds = %for.body.i.i.i186.i
  %inc.i.i.i180.i = add nuw nsw i32 %i.017.i.i.i183.i, 1
  %cmp.i.i.i181.i = icmp ult i32 %i.017.i.i.i183.i, 99
  br i1 %cmp.i.i.i181.i, label %for.body.i.i.i186.i, label %do.body.i.i.i190.i

for.body.i.i.i186.i:                              ; preds = %for.cond.i.i.i182.i, %rtl_w0w1_eri.exit84.i
  %i.017.i.i.i183.i = phi i32 [ 0, %rtl_w0w1_eri.exit84.i ], [ %inc.i.i.i180.i, %for.cond.i.i.i182.i ]
  call void @__udelay(i64 100) #9
  %180 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i184.i = getelementptr i8, i8* %180, i64 116
  %181 = bitcast i8* %add.ptr.i.i184.i to i32*
  %182 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %181) #10, !srcloc !2
  %tobool.i.i185.i = icmp slt i32 %182, 0
  br i1 %tobool.i.i185.i, label %for.cond.i.i.i182.i, label %rtl_eri_write.exit193.i

do.body.i.i.i190.i:                               ; preds = %for.cond.i.i.i182.i
  %183 = load i32, i32* %113, align 8
  %and.i.i.i188.i = and i32 %183, 1
  %tobool4.i.i.i189.i = icmp eq i32 %and.i.i.i188.i, 0
  br i1 %tobool4.i.i.i189.i, label %rtl_eri_write.exit193.i, label %if.then5.i.i.i192.i

if.then5.i.i.i192.i:                              ; preds = %do.body.i.i.i190.i
  %184 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %184, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit193.i

rtl_eri_write.exit193.i:                          ; preds = %for.body.i.i.i186.i, %if.then5.i.i.i192.i, %do.body.i.i.i190.i
  %185 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i86.i = getelementptr i8, i8* %185, i64 112
  %186 = bitcast i8* %add.ptr.i86.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %186) #10, !srcloc !8
  %add.ptr11.i87.i = getelementptr i8, i8* %185, i64 116
  %187 = bitcast i8* %add.ptr11.i87.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471168, i32* %187) #10, !srcloc !8
  br label %for.body.i.i.i94.i

for.cond.i.i.i90.i:                               ; preds = %for.body.i.i.i94.i
  %inc.i.i.i88.i = add nuw nsw i32 %i.017.i.i.i91.i, 1
  %cmp.i.i.i89.i = icmp ult i32 %i.017.i.i.i91.i, 99
  br i1 %cmp.i.i.i89.i, label %for.body.i.i.i94.i, label %do.body.i.i.i98.i

for.body.i.i.i94.i:                               ; preds = %for.cond.i.i.i90.i, %rtl_eri_write.exit193.i
  %i.017.i.i.i91.i = phi i32 [ 0, %rtl_eri_write.exit193.i ], [ %inc.i.i.i88.i, %for.cond.i.i.i90.i ]
  call void @__udelay(i64 100) #9
  %188 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i92.i = getelementptr i8, i8* %188, i64 116
  %189 = bitcast i8* %add.ptr.i.i92.i to i32*
  %190 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %189) #10, !srcloc !2
  %tobool.i.i93.i = icmp slt i32 %190, 0
  br i1 %tobool.i.i93.i, label %for.cond.i.i.i90.i, label %rtl_eri_write.exit101.i

do.body.i.i.i98.i:                                ; preds = %for.cond.i.i.i90.i
  %191 = load i32, i32* %113, align 8
  %and.i.i.i96.i = and i32 %191, 1
  %tobool4.i.i.i97.i = icmp eq i32 %and.i.i.i96.i, 0
  br i1 %tobool4.i.i.i97.i, label %rtl_eri_write.exit101.i, label %if.then5.i.i.i100.i

if.then5.i.i.i100.i:                              ; preds = %do.body.i.i.i98.i
  %192 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %192, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit101.i

rtl_eri_write.exit101.i:                          ; preds = %for.body.i.i.i94.i, %if.then5.i.i.i100.i, %do.body.i.i.i98.i
  %193 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i103.i = getelementptr i8, i8* %193, i64 112
  %194 = bitcast i8* %add.ptr.i103.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %194) #10, !srcloc !8
  %add.ptr11.i104.i = getelementptr i8, i8* %193, i64 116
  %195 = bitcast i8* %add.ptr11.i104.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471176, i32* %195) #10, !srcloc !8
  br label %for.body.i.i.i111.i

for.cond.i.i.i107.i:                              ; preds = %for.body.i.i.i111.i
  %inc.i.i.i105.i = add nuw nsw i32 %i.017.i.i.i108.i, 1
  %cmp.i.i.i106.i = icmp ult i32 %i.017.i.i.i108.i, 99
  br i1 %cmp.i.i.i106.i, label %for.body.i.i.i111.i, label %do.body.i.i.i115.i

for.body.i.i.i111.i:                              ; preds = %for.cond.i.i.i107.i, %rtl_eri_write.exit101.i
  %i.017.i.i.i108.i = phi i32 [ 0, %rtl_eri_write.exit101.i ], [ %inc.i.i.i105.i, %for.cond.i.i.i107.i ]
  call void @__udelay(i64 100) #9
  %196 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i109.i = getelementptr i8, i8* %196, i64 116
  %197 = bitcast i8* %add.ptr.i.i109.i to i32*
  %198 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %197) #10, !srcloc !2
  %tobool.i.i110.i = icmp slt i32 %198, 0
  br i1 %tobool.i.i110.i, label %for.cond.i.i.i107.i, label %rtl_eri_write.exit118.i

do.body.i.i.i115.i:                               ; preds = %for.cond.i.i.i107.i
  %199 = load i32, i32* %113, align 8
  %and.i.i.i113.i = and i32 %199, 1
  %tobool4.i.i.i114.i = icmp eq i32 %and.i.i.i113.i, 0
  br i1 %tobool4.i.i.i114.i, label %rtl_eri_write.exit118.i, label %if.then5.i.i.i117.i

if.then5.i.i.i117.i:                              ; preds = %do.body.i.i.i115.i
  %200 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %200, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit118.i

rtl_eri_write.exit118.i:                          ; preds = %for.body.i.i.i111.i, %if.then5.i.i.i117.i, %do.body.i.i.i115.i
  %201 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i120.i = getelementptr i8, i8* %201, i64 116
  %202 = bitcast i8* %add.ptr.i.i120.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61652, i32* %202) #10, !srcloc !8
  br label %for.body.i.i.i.i127.i

for.cond.i.i.i.i123.i:                            ; preds = %for.body.i.i.i.i127.i
  %inc.i.i.i.i121.i = add nuw nsw i32 %i.017.i.i.i.i124.i, 1
  %cmp.i.i.i.i122.i = icmp ult i32 %i.017.i.i.i.i124.i, 99
  br i1 %cmp.i.i.i.i122.i, label %for.body.i.i.i.i127.i, label %do.body.i.i.i.i131.i

for.body.i.i.i.i127.i:                            ; preds = %for.cond.i.i.i.i123.i, %rtl_eri_write.exit118.i
  %i.017.i.i.i.i124.i = phi i32 [ 0, %rtl_eri_write.exit118.i ], [ %inc.i.i.i.i121.i, %for.cond.i.i.i.i123.i ]
  call void @__udelay(i64 100) #9
  %203 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i125.i = getelementptr i8, i8* %203, i64 116
  %204 = bitcast i8* %add.ptr.i.i.i125.i to i32*
  %205 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %204) #10, !srcloc !2
  %tobool.i.i.i126.i = icmp slt i32 %205, 0
  br i1 %tobool.i.i.i126.i, label %cond.true.i.i135.i, label %for.cond.i.i.i.i123.i

do.body.i.i.i.i131.i:                             ; preds = %for.cond.i.i.i.i123.i
  %206 = load i32, i32* %113, align 8
  %and.i.i.i.i129.i = and i32 %206, 1
  %tobool4.i.i.i.i130.i = icmp eq i32 %and.i.i.i.i129.i, 0
  br i1 %tobool4.i.i.i.i130.i, label %rtl_w0w1_eri.exit139.i, label %if.then5.i.i.i.i133.i

if.then5.i.i.i.i133.i:                            ; preds = %do.body.i.i.i.i131.i
  %207 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %207, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit139.i

cond.true.i.i135.i:                               ; preds = %for.body.i.i.i.i127.i
  %add.ptr3.i.i134.i = getelementptr i8, i8* %201, i64 112
  %208 = bitcast i8* %add.ptr3.i.i134.i to i32*
  %209 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %208) #10, !srcloc !2
  %phitmp211.i = and i32 %209, -65281
  %phitmp212.i = or i32 %phitmp211.i, 3584
  br label %rtl_w0w1_eri.exit139.i

rtl_w0w1_eri.exit139.i:                           ; preds = %cond.true.i.i135.i, %if.then5.i.i.i.i133.i, %do.body.i.i.i.i131.i
  %cond.i.i136.i = phi i32 [ %phitmp212.i, %cond.true.i.i135.i ], [ -61697, %do.body.i.i.i.i131.i ], [ -61697, %if.then5.i.i.i.i133.i ]
  %210 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i195.i = getelementptr i8, i8* %210, i64 112
  %211 = bitcast i8* %add.ptr.i195.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i136.i, i32* %211) #10, !srcloc !8
  %add.ptr11.i196.i = getelementptr i8, i8* %210, i64 116
  %212 = bitcast i8* %add.ptr11.i196.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471148, i32* %212) #10, !srcloc !8
  br label %for.body.i.i.i203.i

for.cond.i.i.i199.i:                              ; preds = %for.body.i.i.i203.i
  %inc.i.i.i197.i = add nuw nsw i32 %i.017.i.i.i200.i, 1
  %cmp.i.i.i198.i = icmp ult i32 %i.017.i.i.i200.i, 99
  br i1 %cmp.i.i.i198.i, label %for.body.i.i.i203.i, label %do.body.i.i.i207.i

for.body.i.i.i203.i:                              ; preds = %for.cond.i.i.i199.i, %rtl_w0w1_eri.exit139.i
  %i.017.i.i.i200.i = phi i32 [ 0, %rtl_w0w1_eri.exit139.i ], [ %inc.i.i.i197.i, %for.cond.i.i.i199.i ]
  call void @__udelay(i64 100) #9
  %213 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i201.i = getelementptr i8, i8* %213, i64 116
  %214 = bitcast i8* %add.ptr.i.i201.i to i32*
  %215 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %214) #10, !srcloc !2
  %tobool.i.i202.i = icmp slt i32 %215, 0
  br i1 %tobool.i.i202.i, label %for.cond.i.i.i199.i, label %rtl_hw_start_8402.exit

do.body.i.i.i207.i:                               ; preds = %for.cond.i.i.i199.i
  %216 = load i32, i32* %113, align 8
  %and.i.i.i205.i = and i32 %216, 1
  %tobool4.i.i.i206.i = icmp eq i32 %and.i.i.i205.i, 0
  br i1 %tobool4.i.i.i206.i, label %rtl_hw_start_8402.exit, label %if.then5.i.i.i209.i

if.then5.i.i.i209.i:                              ; preds = %do.body.i.i.i207.i
  %217 = load %struct.net_device*, %struct.net_device** %114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %217, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_hw_start_8402.exit

rtl_hw_start_8402.exit:                           ; preds = %for.body.i.i.i203.i, %do.body.i.i.i207.i, %if.then5.i.i.i209.i
  %218 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i141.i = getelementptr i8, i8* %218, i64 84
  %219 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i141.i) #10, !srcloc !6
  %220 = and i8 %219, -3
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %220, i8* %add.ptr.i141.i) #10, !srcloc !5
  br label %sw.epilog

sw.bb28:                                          ; preds = %if.end14
  %221 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i185 = getelementptr i8, i8* %221, i64 240
  %222 = bitcast i8* %add.ptr.i185 to i32*
  %223 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %222) #10, !srcloc !2
  %or.i186 = or i32 %223, 10240
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i186, i32* %222) #10, !srcloc !8
  %224 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %222) #10, !srcloc !2
  %or4.i187 = and i32 %224, -8454145
  %and.i = or i32 %or4.i187, 8388608
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i, i32* %222) #10, !srcloc !8
  %add.ptr6.i188 = getelementptr i8, i8* %221, i64 211
  %225 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr6.i188) #10, !srcloc !6
  %226 = or i8 %225, 12
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %226, i8* %add.ptr6.i188) #10, !srcloc !5
  %add.ptr12.i = getelementptr i8, i8* %221, i64 208
  %227 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr12.i) #10, !srcloc !6
  %228 = and i8 %227, -65
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %228, i8* %add.ptr12.i) #10, !srcloc !5
  %229 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i189 = getelementptr i8, i8* %229, i64 84
  %230 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i.i189) #10, !srcloc !6
  %231 = and i8 %230, -3
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %231, i8* %add.ptr.i.i189) #10, !srcloc !5
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end14
  call fastcc void @rtl_hw_start_8168g_2(%struct.rtl8169_private* nonnull %0) #11
  br label %sw.epilog

sw.bb30:                                          ; preds = %if.end14, %if.end14
  call fastcc void @rtl_hw_start_8168h_1(%struct.rtl8169_private* nonnull %0) #11
  br label %sw.epilog

sw.epilog:                                        ; preds = %rtl_ephy_write.exit.i, %if.end14, %sw.bb30, %sw.bb29, %sw.bb28, %rtl_hw_start_8402.exit, %rtl_hw_start_8105e_2.exit, %sw.bb25, %rtl_hw_start_8102e_2.exit, %rtl_hw_start_8102e_3.exit
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 0, i8* %add.ptr) #10, !srcloc !5
  %add.ptr32 = getelementptr i8, i8* %1, i64 226
  %232 = bitcast i8* %add.ptr32 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 0, i16* %232) #10, !srcloc !3
  %add.ptr33 = getelementptr i8, i8* %1, i64 55
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 12, i8* %add.ptr33) #10, !srcloc !5
  call void @rtl_set_rx_mode(%struct.net_device* nonnull %dev) #11
  %add.ptr34 = getelementptr i8, i8* %1, i64 60
  %233 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr34) #10, !srcloc !6
  %add.ptr36 = getelementptr i8, i8* %1, i64 92
  %234 = bitcast i8* %add.ptr36 to i16*
  %235 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %234) #10, !srcloc !21
  %236 = and i16 %235, -4096
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %236, i16* %234) #10, !srcloc !3
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_set_rx_mode(%struct.net_device* %dev) #0 {
entry:
  %mc_filter = alloca [2 x i32], align 4
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %0 = load i8*, i8** %mmio_addr, align 8
  %1 = bitcast [2 x i32]* %mc_filter to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #10
  %flags = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 34
  %2 = load i32, i32* %flags, align 32
  %and = and i32 %2, 256
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.else, label %do.body

do.body:                                          ; preds = %entry
  %msg_enable = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %3 = bitcast i8* %msg_enable to i32*
  %4 = load i32, i32* %3, align 8
  %and1 = and i32 %4, 4
  %tobool2 = icmp eq i32 %and1, 0
  br i1 %tobool2, label %if.end33.sink.split, label %if.then3

if.then3:                                         ; preds = %do.body
  call void (%struct.net_device*, i8*, ...) @netdev_notice(%struct.net_device* nonnull %dev, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.17, i64 0, i64 0)) #9
  br label %if.end33.sink.split

if.else:                                          ; preds = %entry
  %count = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 58, i32 1
  %5 = load i32, i32* %count, align 8
  %cmp = icmp slt i32 %5, 33
  %and6 = and i32 %2, 512
  %tobool7 = icmp eq i32 %and6, 0
  %or.cond = and i1 %tobool7, %cmp
  br i1 %or.cond, label %if.else11, label %if.end33.sink.split

if.else11:                                        ; preds = %if.else
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %mc_filter, i64 0, i64 0
  store i32 0, i32* %arrayidx12, align 4
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %mc_filter, i64 0, i64 1
  store i32 0, i32* %arrayidx13, align 4
  %list = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 58, i32 0
  %6 = bitcast %struct.list_head* %list to %struct.netdev_hw_addr**
  %ha.095 = load %struct.netdev_hw_addr*, %struct.netdev_hw_addr** %6, align 8
  %list1696 = getelementptr inbounds %struct.netdev_hw_addr, %struct.netdev_hw_addr* %ha.095, i64 0, i32 0
  %cmp1997 = icmp eq %struct.list_head* %list1696, %list
  br i1 %cmp1997, label %if.end33, label %for.body.preheader

for.body.preheader:                               ; preds = %if.else11
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %ha.099 = phi %struct.netdev_hw_addr* [ %ha.0, %for.body ], [ %ha.095, %for.body.preheader ]
  %rx_mode.098 = phi i32 [ %or26, %for.body ], [ 10, %for.body.preheader ]
  %arraydecay = getelementptr inbounds %struct.netdev_hw_addr, %struct.netdev_hw_addr* %ha.099, i64 0, i32 1, i64 0
  %call20 = call i32 @crc32_le(i32 -1, i8* %arraydecay, i64 6) #12
  %7 = and i32 %call20, 255
  %8 = zext i32 %7 to i64
  %arrayidx.i.i.i = getelementptr [256 x i8], [256 x i8]* @byte_rev_table, i64 0, i64 %8
  %9 = load i8, i8* %arrayidx.i.i.i, align 1
  %conv2.i.i = zext i8 %9 to i32
  %shr = lshr i32 %conv2.i.i, 2
  %and23 = and i32 %shr, 31
  %shl = shl i32 1, %and23
  %10 = lshr i32 %conv2.i.i, 7
  %11 = zext i32 %10 to i64
  %arrayidx25 = getelementptr [2 x i32], [2 x i32]* %mc_filter, i64 0, i64 %11
  %12 = load i32, i32* %arrayidx25, align 4
  %or = or i32 %shl, %12
  store i32 %or, i32* %arrayidx25, align 4
  %or26 = or i32 %rx_mode.098, 4
  %13 = bitcast %struct.netdev_hw_addr* %ha.099 to %struct.netdev_hw_addr**
  %ha.0 = load %struct.netdev_hw_addr*, %struct.netdev_hw_addr** %13, align 8
  %list16 = getelementptr inbounds %struct.netdev_hw_addr, %struct.netdev_hw_addr* %ha.0, i64 0, i32 0
  %cmp19 = icmp eq %struct.list_head* %list16, %list
  br i1 %cmp19, label %if.end33, label %for.body

if.end33.sink.split:                              ; preds = %if.then3, %do.body, %if.else
  %rx_mode.1.ph = phi i32 [ 14, %if.else ], [ 15, %do.body ], [ 15, %if.then3 ]
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %mc_filter, i64 0, i64 0
  store i32 -1, i32* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds [2 x i32], [2 x i32]* %mc_filter, i64 0, i64 1
  store i32 -1, i32* %arrayidx10, align 4
  br label %if.end33

if.end33:                                         ; preds = %for.body, %if.else11, %if.end33.sink.split
  %rx_mode.1 = phi i32 [ %rx_mode.1.ph, %if.end33.sink.split ], [ 10, %if.else11 ], [ %or26, %for.body ]
  %features = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 17
  %14 = load i64, i64* %features, align 16
  %and34 = and i64 %14, 274877906944
  %tobool35 = icmp eq i64 %and34, 0
  %or37 = or i32 %rx_mode.1, 48
  %rx_mode.1.or37 = select i1 %tobool35, i32 %rx_mode.1, i32 %or37
  %add.ptr39 = getelementptr i8, i8* %0, i64 68
  %15 = bitcast i8* %add.ptr39 to i32*
  %16 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %15) #10, !srcloc !2
  %and41 = and i32 %16, -64
  %or42 = or i32 %rx_mode.1.or37, %and41
  %mac_version = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %17 = bitcast i8* %mac_version to i16*
  %18 = load i16, i16* %17, align 2
  %cmp43 = icmp ugt i16 %18, 5
  br i1 %cmp43, label %if.end52, label %if.end33.if.end60_crit_edge

if.end33.if.end60_crit_edge:                      ; preds = %if.end33
  %arrayidx61.phi.trans.insert = getelementptr inbounds [2 x i32], [2 x i32]* %mc_filter, i64 0, i64 1
  %.pre = load i32, i32* %arrayidx61.phi.trans.insert, align 4
  %arrayidx63.phi.trans.insert = getelementptr inbounds [2 x i32], [2 x i32]* %mc_filter, i64 0, i64 0
  %.pre100 = load i32, i32* %arrayidx63.phi.trans.insert, align 4
  br label %if.end60

if.end52:                                         ; preds = %if.end33
  %arrayidx46 = getelementptr inbounds [2 x i32], [2 x i32]* %mc_filter, i64 0, i64 0
  %19 = load i32, i32* %arrayidx46, align 4
  %arrayidx47 = getelementptr inbounds [2 x i32], [2 x i32]* %mc_filter, i64 0, i64 1
  %20 = load i32, i32* %arrayidx47, align 4
  %21 = call i32 asm "bswapl $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %20) #13, !srcloc !31
  store i32 %21, i32* %arrayidx46, align 4
  %22 = call i32 asm "bswapl $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %19) #13, !srcloc !31
  store i32 %22, i32* %arrayidx47, align 4
  %cmp55 = icmp eq i16 %18, 34
  br i1 %cmp55, label %if.then57, label %if.end60

if.then57:                                        ; preds = %if.end52
  store i32 -1, i32* %arrayidx46, align 4
  store i32 -1, i32* %arrayidx47, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.end33.if.end60_crit_edge, %if.then57, %if.end52
  %23 = phi i32 [ %.pre100, %if.end33.if.end60_crit_edge ], [ -1, %if.then57 ], [ %21, %if.end52 ]
  %24 = phi i32 [ %.pre, %if.end33.if.end60_crit_edge ], [ -1, %if.then57 ], [ %22, %if.end52 ]
  %add.ptr62 = getelementptr i8, i8* %0, i64 12
  %25 = bitcast i8* %add.ptr62 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %24, i32* %25) #10, !srcloc !8
  %add.ptr64 = getelementptr i8, i8* %0, i64 8
  %26 = bitcast i8* %add.ptr64 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %23, i32* %26) #10, !srcloc !8
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or42, i32* %15) #10, !srcloc !8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #10
  ret void
}

; Function Attrs: noredzone
declare i32 @pci_bus_write_config_byte(%struct.pci_bus*, i32, i32, i8 zeroext) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @netdev_notice(%struct.net_device*, i8*, ...) local_unnamed_addr #1

; Function Attrs: noredzone nounwind readonly
declare i32 @crc32_le(i32, i8*, i64) local_unnamed_addr #4

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_hw_start_8168c_2(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %read.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 1
  %0 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i.i, align 8
  %tobool.i.i.i = icmp eq i32 (%struct.rtl8169_private*, i32)* %0, null
  br i1 %tobool.i.i.i, label %rtl_csi_read.exit.i.i, label %cond.true.i.i.i

cond.true.i.i.i:                                  ; preds = %entry
  %call.i.i.i = call i32 %0(%struct.rtl8169_private* nonnull %tp, i32 1804) #9
  %phitmp.i.i = and i32 %call.i.i.i, 16777215
  %phitmp.i = or i32 %phitmp.i.i, 654311424
  br label %rtl_csi_read.exit.i.i

rtl_csi_read.exit.i.i:                            ; preds = %cond.true.i.i.i, %entry
  %cond.i.i.i = phi i32 [ %phitmp.i, %cond.true.i.i.i ], [ 671088639, %entry ]
  %write.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 0
  %1 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i.i, align 8
  %tobool.i3.i.i = icmp eq void (%struct.rtl8169_private*, i32, i32)* %1, null
  br i1 %tobool.i3.i.i, label %rtl_csi_access_enable_2.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %rtl_csi_read.exit.i.i
  call void %1(%struct.rtl8169_private* nonnull %tp, i32 1804, i32 %cond.i.i.i) #9
  br label %rtl_csi_access_enable_2.exit

rtl_csi_access_enable_2.exit:                     ; preds = %rtl_csi_read.exit.i.i, %if.then.i.i.i
  %call.i = call fastcc zeroext i16 @rtl_ephy_read(%struct.rtl8169_private* nonnull %tp, i32 1) #9
  %or.i = or i16 %call.i, 1
  %conv5.i = zext i16 %or.i to i32
  call fastcc void @rtl_ephy_write(%struct.rtl8169_private* nonnull %tp, i32 1, i32 %conv5.i) #9
  %call.i.1 = call fastcc zeroext i16 @rtl_ephy_read(%struct.rtl8169_private* nonnull %tp, i32 3) #9
  %and.i.1 = and i16 %call.i.1, -1569
  %or.i.1 = or i16 %and.i.1, 544
  %conv5.i.1 = zext i16 %or.i.1 to i32
  call fastcc void @rtl_ephy_write(%struct.rtl8169_private* nonnull %tp, i32 3, i32 %conv5.i.1) #9
  call fastcc void @__rtl_hw_start_8168cp(%struct.rtl8169_private* nonnull %tp) #11
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_hw_start_8168g_2(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  call fastcc void @rtl_hw_start_8168g(%struct.rtl8169_private* %tp) #11
  %add.ptr = getelementptr i8, i8* %0, i64 83
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %2 = and i8 %1, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %2, i8* %add.ptr) #10, !srcloc !5
  %add.ptr3 = getelementptr i8, i8* %0, i64 86
  %3 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3) #10, !srcloc !6
  %4 = and i8 %3, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %4, i8* %add.ptr3) #10, !srcloc !5
  %call.i = call fastcc zeroext i16 @rtl_ephy_read(%struct.rtl8169_private* %tp, i32 0) #9
  %or.i = or i16 %call.i, 8
  %conv5.i = zext i16 %or.i to i32
  call fastcc void @rtl_ephy_write(%struct.rtl8169_private* %tp, i32 0, i32 %conv5.i) #9
  %call.i.1 = call fastcc zeroext i16 @rtl_ephy_read(%struct.rtl8169_private* %tp, i32 12) #9
  %and.i.1 = and i16 %call.i.1, -16369
  %or.i.1 = or i16 %and.i.1, 512
  %conv5.i.1 = zext i16 %or.i.1 to i32
  call fastcc void @rtl_ephy_write(%struct.rtl8169_private* %tp, i32 12, i32 %conv5.i.1) #9
  %call.i.2 = call fastcc zeroext i16 @rtl_ephy_read(%struct.rtl8169_private* %tp, i32 25) #9
  call fastcc void @rtl_ephy_write(%struct.rtl8169_private* %tp, i32 25, i32 64512) #9
  %call.i.3 = call fastcc zeroext i16 @rtl_ephy_read(%struct.rtl8169_private* %tp, i32 30) #9
  call fastcc void @rtl_ephy_write(%struct.rtl8169_private* %tp, i32 30, i32 8427) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_hw_start_8168h_1(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %1 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 83
  %2 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %3 = and i8 %2, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %3, i8* %add.ptr) #10, !srcloc !5
  %add.ptr3 = getelementptr i8, i8* %0, i64 86
  %4 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3) #10, !srcloc !6
  %5 = and i8 %4, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %5, i8* %add.ptr3) #10, !srcloc !5
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  br label %while.body.i

while.body.i:                                     ; preds = %rtl_ephy_write.exit, %entry
  %e.addr.014.i = phi %struct.ephy_info* [ getelementptr inbounds ([6 x %struct.ephy_info], [6 x %struct.ephy_info]* @rtl_hw_start_8168h_1.e_info_8168h_1, i64 0, i64 0), %entry ], [ %incdec.ptr.i, %rtl_ephy_write.exit ]
  %len.addr.013.i = phi i32 [ 6, %entry ], [ %dec.i, %rtl_ephy_write.exit ]
  %dec.i = add nsw i32 %len.addr.013.i, -1
  %offset.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i, i64 0, i32 0
  %6 = load i32, i32* %offset.i, align 4
  %7 = load i8*, i8** %mmio_addr, align 8
  %and.i387 = shl i32 %6, 16
  %shl.i388 = and i32 %and.i387, 2031616
  %add.ptr.i389 = getelementptr i8, i8* %7, i64 128
  %8 = bitcast i8* %add.ptr.i389 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i388, i32* %8) #10, !srcloc !8
  br label %for.body.i.i.i396

for.cond.i.i.i392:                                ; preds = %for.body.i.i.i396
  %inc.i.i.i390 = add nuw nsw i32 %i.017.i.i.i393, 1
  %cmp.i.i.i391 = icmp ult i32 %i.017.i.i.i393, 99
  br i1 %cmp.i.i.i391, label %for.body.i.i.i396, label %do.body.i.i.i400

for.body.i.i.i396:                                ; preds = %for.cond.i.i.i392, %while.body.i
  %i.017.i.i.i393 = phi i32 [ 0, %while.body.i ], [ %inc.i.i.i390, %for.cond.i.i.i392 ]
  call void @__udelay(i64 10) #9
  %9 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i394 = getelementptr i8, i8* %9, i64 128
  %10 = bitcast i8* %add.ptr.i.i394 to i32*
  %11 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %10) #10, !srcloc !2
  %tobool.i.i395 = icmp slt i32 %11, 0
  br i1 %tobool.i.i395, label %cond.true.i, label %for.cond.i.i.i392

do.body.i.i.i400:                                 ; preds = %for.cond.i.i.i392
  %12 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i398 = and i32 %12, 1
  %tobool4.i.i.i399 = icmp eq i32 %and.i.i.i398, 0
  br i1 %tobool4.i.i.i399, label %rtl_ephy_read.exit, label %if.then5.i.i.i402

if.then5.i.i.i402:                                ; preds = %do.body.i.i.i400
  %13 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %13, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit

cond.true.i:                                      ; preds = %for.body.i.i.i396
  %14 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %8) #10, !srcloc !2
  %phitmp.i403 = trunc i32 %14 to i16
  br label %rtl_ephy_read.exit

rtl_ephy_read.exit:                               ; preds = %do.body.i.i.i400, %if.then5.i.i.i402, %cond.true.i
  %cond.i = phi i16 [ %phitmp.i403, %cond.true.i ], [ -1, %do.body.i.i.i400 ], [ -1, %if.then5.i.i.i402 ]
  %mask.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i, i64 0, i32 1
  %15 = load i16, i16* %mask.i, align 4
  %neg.i = xor i16 %15, -1
  %and.i = and i16 %cond.i, %neg.i
  %bits.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i, i64 0, i32 2
  %16 = load i16, i16* %bits.i, align 2
  %or.i = or i16 %and.i, %16
  %17 = load i32, i32* %offset.i, align 4
  %conv5.i = zext i16 %or.i to i32
  %18 = load i8*, i8** %mmio_addr, align 8
  %and1.i = shl i32 %17, 16
  %shl.i = and i32 %and1.i, 2031616
  %or.i139 = or i32 %shl.i, %conv5.i
  %or2.i = or i32 %or.i139, -2147483648
  %add.ptr.i = getelementptr i8, i8* %18, i64 128
  %19 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i, i32* %19) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %rtl_ephy_read.exit
  %i.017.i.i.i = phi i32 [ 0, %rtl_ephy_read.exit ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 10) #9
  %20 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %20, i64 128
  %21 = bitcast i8* %add.ptr.i.i to i32*
  %22 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %21) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %22, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %rtl_ephy_write.exit

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %23 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %23, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %rtl_ephy_write.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %24 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %24, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit

rtl_ephy_write.exit:                              ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i, i64 1
  %cmp.i = icmp ugt i32 %len.addr.013.i, 1
  br i1 %cmp.i, label %while.body.i, label %rtl_ephy_init.exit

rtl_ephy_init.exit:                               ; preds = %rtl_ephy_write.exit
  %add.ptr9 = getelementptr i8, i8* %0, i64 64
  %25 = bitcast i8* %add.ptr9 to i32*
  %26 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %25) #10, !srcloc !2
  %or = or i32 %26, 128
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or, i32* %25) #10, !srcloc !8
  %27 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i141 = getelementptr i8, i8* %27, i64 112
  %28 = bitcast i8* %add.ptr.i141 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 524290, i32* %28) #10, !srcloc !8
  %add.ptr11.i = getelementptr i8, i8* %27, i64 116
  %29 = bitcast i8* %add.ptr11.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147462968, i32* %29) #10, !srcloc !8
  br label %for.body.i.i.i148

for.cond.i.i.i144:                                ; preds = %for.body.i.i.i148
  %inc.i.i.i142 = add nuw nsw i32 %i.017.i.i.i145, 1
  %cmp.i.i.i143 = icmp ult i32 %i.017.i.i.i145, 99
  br i1 %cmp.i.i.i143, label %for.body.i.i.i148, label %do.body.i.i.i152

for.body.i.i.i148:                                ; preds = %for.cond.i.i.i144, %rtl_ephy_init.exit
  %i.017.i.i.i145 = phi i32 [ 0, %rtl_ephy_init.exit ], [ %inc.i.i.i142, %for.cond.i.i.i144 ]
  call void @__udelay(i64 100) #9
  %30 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i146 = getelementptr i8, i8* %30, i64 116
  %31 = bitcast i8* %add.ptr.i.i146 to i32*
  %32 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %31) #10, !srcloc !2
  %tobool.i.i147 = icmp slt i32 %32, 0
  br i1 %tobool.i.i147, label %for.cond.i.i.i144, label %rtl_eri_write.exit

do.body.i.i.i152:                                 ; preds = %for.cond.i.i.i144
  %33 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i150 = and i32 %33, 1
  %tobool4.i.i.i151 = icmp eq i32 %and.i.i.i150, 0
  br i1 %tobool4.i.i.i151, label %rtl_eri_write.exit, label %if.then5.i.i.i154

if.then5.i.i.i154:                                ; preds = %do.body.i.i.i152
  %34 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %34, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit

rtl_eri_write.exit:                               ; preds = %for.body.i.i.i148, %do.body.i.i.i152, %if.then5.i.i.i154
  %35 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i156 = getelementptr i8, i8* %35, i64 112
  %36 = bitcast i8* %add.ptr.i156 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 56, i32* %36) #10, !srcloc !8
  %add.ptr11.i157 = getelementptr i8, i8* %35, i64 116
  %37 = bitcast i8* %add.ptr11.i157 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479348, i32* %37) #10, !srcloc !8
  br label %for.body.i.i.i164

for.cond.i.i.i160:                                ; preds = %for.body.i.i.i164
  %inc.i.i.i158 = add nuw nsw i32 %i.017.i.i.i161, 1
  %cmp.i.i.i159 = icmp ult i32 %i.017.i.i.i161, 99
  br i1 %cmp.i.i.i159, label %for.body.i.i.i164, label %do.body.i.i.i168

for.body.i.i.i164:                                ; preds = %for.cond.i.i.i160, %rtl_eri_write.exit
  %i.017.i.i.i161 = phi i32 [ 0, %rtl_eri_write.exit ], [ %inc.i.i.i158, %for.cond.i.i.i160 ]
  call void @__udelay(i64 100) #9
  %38 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i162 = getelementptr i8, i8* %38, i64 116
  %39 = bitcast i8* %add.ptr.i.i162 to i32*
  %40 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %39) #10, !srcloc !2
  %tobool.i.i163 = icmp slt i32 %40, 0
  br i1 %tobool.i.i163, label %for.cond.i.i.i160, label %rtl_eri_write.exit171

do.body.i.i.i168:                                 ; preds = %for.cond.i.i.i160
  %41 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i166 = and i32 %41, 1
  %tobool4.i.i.i167 = icmp eq i32 %and.i.i.i166, 0
  br i1 %tobool4.i.i.i167, label %rtl_eri_write.exit171, label %if.then5.i.i.i170

if.then5.i.i.i170:                                ; preds = %do.body.i.i.i168
  %42 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %42, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit171

rtl_eri_write.exit171:                            ; preds = %for.body.i.i.i164, %do.body.i.i.i168, %if.then5.i.i.i170
  %43 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i173 = getelementptr i8, i8* %43, i64 112
  %44 = bitcast i8* %add.ptr.i173 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 72, i32* %44) #10, !srcloc !8
  %add.ptr11.i174 = getelementptr i8, i8* %43, i64 116
  %45 = bitcast i8* %add.ptr11.i174 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479344, i32* %45) #10, !srcloc !8
  br label %for.body.i.i.i181

for.cond.i.i.i177:                                ; preds = %for.body.i.i.i181
  %inc.i.i.i175 = add nuw nsw i32 %i.017.i.i.i178, 1
  %cmp.i.i.i176 = icmp ult i32 %i.017.i.i.i178, 99
  br i1 %cmp.i.i.i176, label %for.body.i.i.i181, label %do.body.i.i.i185

for.body.i.i.i181:                                ; preds = %for.cond.i.i.i177, %rtl_eri_write.exit171
  %i.017.i.i.i178 = phi i32 [ 0, %rtl_eri_write.exit171 ], [ %inc.i.i.i175, %for.cond.i.i.i177 ]
  call void @__udelay(i64 100) #9
  %46 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i179 = getelementptr i8, i8* %46, i64 116
  %47 = bitcast i8* %add.ptr.i.i179 to i32*
  %48 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %47) #10, !srcloc !2
  %tobool.i.i180 = icmp slt i32 %48, 0
  br i1 %tobool.i.i180, label %for.cond.i.i.i177, label %rtl_eri_write.exit188

do.body.i.i.i185:                                 ; preds = %for.cond.i.i.i177
  %49 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i183 = and i32 %49, 1
  %tobool4.i.i.i184 = icmp eq i32 %and.i.i.i183, 0
  br i1 %tobool4.i.i.i184, label %rtl_eri_write.exit188, label %if.then5.i.i.i187

if.then5.i.i.i187:                                ; preds = %do.body.i.i.i185
  %50 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %50, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit188

rtl_eri_write.exit188:                            ; preds = %for.body.i.i.i181, %do.body.i.i.i185, %if.then5.i.i.i187
  %51 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i190 = getelementptr i8, i8* %51, i64 112
  %52 = bitcast i8* %add.ptr.i190 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1048582, i32* %52) #10, !srcloc !8
  %add.ptr11.i191 = getelementptr i8, i8* %51, i64 116
  %53 = bitcast i8* %add.ptr11.i191 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421976, i32* %53) #10, !srcloc !8
  br label %for.body.i.i.i198

for.cond.i.i.i194:                                ; preds = %for.body.i.i.i198
  %inc.i.i.i192 = add nuw nsw i32 %i.017.i.i.i195, 1
  %cmp.i.i.i193 = icmp ult i32 %i.017.i.i.i195, 99
  br i1 %cmp.i.i.i193, label %for.body.i.i.i198, label %do.body.i.i.i202

for.body.i.i.i198:                                ; preds = %for.cond.i.i.i194, %rtl_eri_write.exit188
  %i.017.i.i.i195 = phi i32 [ 0, %rtl_eri_write.exit188 ], [ %inc.i.i.i192, %for.cond.i.i.i194 ]
  call void @__udelay(i64 100) #9
  %54 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i196 = getelementptr i8, i8* %54, i64 116
  %55 = bitcast i8* %add.ptr.i.i196 to i32*
  %56 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %55) #10, !srcloc !2
  %tobool.i.i197 = icmp slt i32 %56, 0
  br i1 %tobool.i.i197, label %for.cond.i.i.i194, label %rtl_eri_write.exit205

do.body.i.i.i202:                                 ; preds = %for.cond.i.i.i194
  %57 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i200 = and i32 %57, 1
  %tobool4.i.i.i201 = icmp eq i32 %and.i.i.i200, 0
  br i1 %tobool4.i.i.i201, label %rtl_eri_write.exit205, label %if.then5.i.i.i204

if.then5.i.i.i204:                                ; preds = %do.body.i.i.i202
  %58 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %58, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit205

rtl_eri_write.exit205:                            ; preds = %for.body.i.i.i198, %do.body.i.i.i202, %if.then5.i.i.i204
  %read.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 1
  %59 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i.i, align 8
  %tobool.i.i.i = icmp eq i32 (%struct.rtl8169_private*, i32)* %59, null
  br i1 %tobool.i.i.i, label %rtl_csi_read.exit.i.i, label %cond.true.i.i.i

cond.true.i.i.i:                                  ; preds = %rtl_eri_write.exit205
  %call.i.i.i = call i32 %59(%struct.rtl8169_private* nonnull %tp, i32 1804) #9
  %phitmp.i.i = and i32 %call.i.i.i, 16777215
  %phitmp.i = or i32 %phitmp.i.i, 385875968
  br label %rtl_csi_read.exit.i.i

rtl_csi_read.exit.i.i:                            ; preds = %cond.true.i.i.i, %rtl_eri_write.exit205
  %cond.i.i.i = phi i32 [ %phitmp.i, %cond.true.i.i.i ], [ 402653183, %rtl_eri_write.exit205 ]
  %write.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 0
  %60 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i.i, align 8
  %tobool.i3.i.i = icmp eq void (%struct.rtl8169_private*, i32, i32)* %60, null
  br i1 %tobool.i3.i.i, label %rtl_csi_access_enable_1.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %rtl_csi_read.exit.i.i
  call void %60(%struct.rtl8169_private* nonnull %tp, i32 1804, i32 %cond.i.i.i) #9
  br label %rtl_csi_access_enable_1.exit

rtl_csi_access_enable_1.exit:                     ; preds = %rtl_csi_read.exit.i.i, %if.then.i.i.i
  %call.i206 = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %1, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  %61 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i207 = getelementptr i8, i8* %61, i64 116
  %62 = bitcast i8* %add.ptr.i.i207 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %62) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %rtl_csi_access_enable_1.exit
  %i.017.i.i.i.i = phi i32 [ 0, %rtl_csi_access_enable_1.exit ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %63 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %63, i64 116
  %64 = bitcast i8* %add.ptr.i.i.i to i32*
  %65 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %64) #10, !srcloc !2
  %tobool.i.i.i208 = icmp slt i32 %65, 0
  br i1 %tobool.i.i.i208, label %cond.true.i.i, label %for.cond.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %66 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i.i = and i32 %66, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_w0w1_eri.exit, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %67 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %67, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit

cond.true.i.i:                                    ; preds = %for.body.i.i.i.i
  %add.ptr3.i.i = getelementptr i8, i8* %61, i64 112
  %68 = bitcast i8* %add.ptr3.i.i to i32*
  %69 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %68) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit

rtl_w0w1_eri.exit:                                ; preds = %do.body.i.i.i.i, %if.then5.i.i.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %69, %cond.true.i.i ], [ -1, %do.body.i.i.i.i ], [ -1, %if.then5.i.i.i.i ]
  %and.i209 = and i32 %cond.i.i, -2
  %70 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i405 = getelementptr i8, i8* %70, i64 112
  %71 = bitcast i8* %add.ptr.i405 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i209, i32* %71) #10, !srcloc !8
  %add.ptr11.i406 = getelementptr i8, i8* %70, i64 116
  %72 = bitcast i8* %add.ptr11.i406 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %72) #10, !srcloc !8
  br label %for.body.i.i.i413

for.cond.i.i.i409:                                ; preds = %for.body.i.i.i413
  %inc.i.i.i407 = add nuw nsw i32 %i.017.i.i.i410, 1
  %cmp.i.i.i408 = icmp ult i32 %i.017.i.i.i410, 99
  br i1 %cmp.i.i.i408, label %for.body.i.i.i413, label %do.body.i.i.i417

for.body.i.i.i413:                                ; preds = %for.cond.i.i.i409, %rtl_w0w1_eri.exit
  %i.017.i.i.i410 = phi i32 [ 0, %rtl_w0w1_eri.exit ], [ %inc.i.i.i407, %for.cond.i.i.i409 ]
  call void @__udelay(i64 100) #9
  %73 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i411 = getelementptr i8, i8* %73, i64 116
  %74 = bitcast i8* %add.ptr.i.i411 to i32*
  %75 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %74) #10, !srcloc !2
  %tobool.i.i412 = icmp slt i32 %75, 0
  br i1 %tobool.i.i412, label %for.cond.i.i.i409, label %rtl_eri_write.exit420

do.body.i.i.i417:                                 ; preds = %for.cond.i.i.i409
  %76 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i415 = and i32 %76, 1
  %tobool4.i.i.i416 = icmp eq i32 %and.i.i.i415, 0
  br i1 %tobool4.i.i.i416, label %rtl_eri_write.exit420, label %if.then5.i.i.i419

if.then5.i.i.i419:                                ; preds = %do.body.i.i.i417
  %77 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %77, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit420

rtl_eri_write.exit420:                            ; preds = %for.body.i.i.i413, %do.body.i.i.i417, %if.then5.i.i.i419
  %78 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i211 = getelementptr i8, i8* %78, i64 116
  %79 = bitcast i8* %add.ptr.i.i211 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %79) #10, !srcloc !8
  br label %for.body.i.i.i.i218

for.cond.i.i.i.i214:                              ; preds = %for.body.i.i.i.i218
  %inc.i.i.i.i212 = add nuw nsw i32 %i.017.i.i.i.i215, 1
  %cmp.i.i.i.i213 = icmp ult i32 %i.017.i.i.i.i215, 99
  br i1 %cmp.i.i.i.i213, label %for.body.i.i.i.i218, label %do.body.i.i.i.i222

for.body.i.i.i.i218:                              ; preds = %for.cond.i.i.i.i214, %rtl_eri_write.exit420
  %i.017.i.i.i.i215 = phi i32 [ 0, %rtl_eri_write.exit420 ], [ %inc.i.i.i.i212, %for.cond.i.i.i.i214 ]
  call void @__udelay(i64 100) #9
  %80 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i216 = getelementptr i8, i8* %80, i64 116
  %81 = bitcast i8* %add.ptr.i.i.i216 to i32*
  %82 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %81) #10, !srcloc !2
  %tobool.i.i.i217 = icmp slt i32 %82, 0
  br i1 %tobool.i.i.i217, label %cond.true.i.i226, label %for.cond.i.i.i.i214

do.body.i.i.i.i222:                               ; preds = %for.cond.i.i.i.i214
  %83 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i.i220 = and i32 %83, 1
  %tobool4.i.i.i.i221 = icmp eq i32 %and.i.i.i.i220, 0
  br i1 %tobool4.i.i.i.i221, label %rtl_w0w1_eri.exit229, label %if.then5.i.i.i.i224

if.then5.i.i.i.i224:                              ; preds = %do.body.i.i.i.i222
  %84 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %84, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit229

cond.true.i.i226:                                 ; preds = %for.body.i.i.i.i218
  %add.ptr3.i.i225 = getelementptr i8, i8* %78, i64 112
  %85 = bitcast i8* %add.ptr3.i.i225 to i32*
  %86 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %85) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit229

rtl_w0w1_eri.exit229:                             ; preds = %do.body.i.i.i.i222, %if.then5.i.i.i.i224, %cond.true.i.i226
  %cond.i.i227 = phi i32 [ %86, %cond.true.i.i226 ], [ -1, %do.body.i.i.i.i222 ], [ -1, %if.then5.i.i.i.i224 ]
  %or.i228 = or i32 %cond.i.i227, 1
  %87 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i422 = getelementptr i8, i8* %87, i64 112
  %88 = bitcast i8* %add.ptr.i422 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i228, i32* %88) #10, !srcloc !8
  %add.ptr11.i423 = getelementptr i8, i8* %87, i64 116
  %89 = bitcast i8* %add.ptr11.i423 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %89) #10, !srcloc !8
  br label %for.body.i.i.i430

for.cond.i.i.i426:                                ; preds = %for.body.i.i.i430
  %inc.i.i.i424 = add nuw nsw i32 %i.017.i.i.i427, 1
  %cmp.i.i.i425 = icmp ult i32 %i.017.i.i.i427, 99
  br i1 %cmp.i.i.i425, label %for.body.i.i.i430, label %do.body.i.i.i434

for.body.i.i.i430:                                ; preds = %for.cond.i.i.i426, %rtl_w0w1_eri.exit229
  %i.017.i.i.i427 = phi i32 [ 0, %rtl_w0w1_eri.exit229 ], [ %inc.i.i.i424, %for.cond.i.i.i426 ]
  call void @__udelay(i64 100) #9
  %90 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i428 = getelementptr i8, i8* %90, i64 116
  %91 = bitcast i8* %add.ptr.i.i428 to i32*
  %92 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %91) #10, !srcloc !2
  %tobool.i.i429 = icmp slt i32 %92, 0
  br i1 %tobool.i.i429, label %for.cond.i.i.i426, label %rtl_eri_write.exit437

do.body.i.i.i434:                                 ; preds = %for.cond.i.i.i426
  %93 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i432 = and i32 %93, 1
  %tobool4.i.i.i433 = icmp eq i32 %and.i.i.i432, 0
  br i1 %tobool4.i.i.i433, label %rtl_eri_write.exit437, label %if.then5.i.i.i436

if.then5.i.i.i436:                                ; preds = %do.body.i.i.i434
  %94 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %94, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit437

rtl_eri_write.exit437:                            ; preds = %for.body.i.i.i430, %do.body.i.i.i434, %if.then5.i.i.i436
  %95 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i231 = getelementptr i8, i8* %95, i64 116
  %96 = bitcast i8* %add.ptr.i.i231 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %96) #10, !srcloc !8
  br label %for.body.i.i.i.i238

for.cond.i.i.i.i234:                              ; preds = %for.body.i.i.i.i238
  %inc.i.i.i.i232 = add nuw nsw i32 %i.017.i.i.i.i235, 1
  %cmp.i.i.i.i233 = icmp ult i32 %i.017.i.i.i.i235, 99
  br i1 %cmp.i.i.i.i233, label %for.body.i.i.i.i238, label %do.body.i.i.i.i242

for.body.i.i.i.i238:                              ; preds = %for.cond.i.i.i.i234, %rtl_eri_write.exit437
  %i.017.i.i.i.i235 = phi i32 [ 0, %rtl_eri_write.exit437 ], [ %inc.i.i.i.i232, %for.cond.i.i.i.i234 ]
  call void @__udelay(i64 100) #9
  %97 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i236 = getelementptr i8, i8* %97, i64 116
  %98 = bitcast i8* %add.ptr.i.i.i236 to i32*
  %99 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %98) #10, !srcloc !2
  %tobool.i.i.i237 = icmp slt i32 %99, 0
  br i1 %tobool.i.i.i237, label %cond.true.i.i246, label %for.cond.i.i.i.i234

do.body.i.i.i.i242:                               ; preds = %for.cond.i.i.i.i234
  %100 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i.i240 = and i32 %100, 1
  %tobool4.i.i.i.i241 = icmp eq i32 %and.i.i.i.i240, 0
  br i1 %tobool4.i.i.i.i241, label %rtl_w0w1_eri.exit249, label %if.then5.i.i.i.i244

if.then5.i.i.i.i244:                              ; preds = %do.body.i.i.i.i242
  %101 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %101, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit249

cond.true.i.i246:                                 ; preds = %for.body.i.i.i.i238
  %add.ptr3.i.i245 = getelementptr i8, i8* %95, i64 112
  %102 = bitcast i8* %add.ptr3.i.i245 to i32*
  %103 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %102) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit249

rtl_w0w1_eri.exit249:                             ; preds = %do.body.i.i.i.i242, %if.then5.i.i.i.i244, %cond.true.i.i246
  %cond.i.i247 = phi i32 [ %103, %cond.true.i.i246 ], [ -1, %do.body.i.i.i.i242 ], [ -1, %if.then5.i.i.i.i244 ]
  %or.i248 = or i32 %cond.i.i247, 16
  %104 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i439 = getelementptr i8, i8* %104, i64 112
  %105 = bitcast i8* %add.ptr.i439 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i248, i32* %105) #10, !srcloc !8
  %add.ptr11.i440 = getelementptr i8, i8* %104, i64 116
  %106 = bitcast i8* %add.ptr11.i440 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421988, i32* %106) #10, !srcloc !8
  br label %for.body.i.i.i447

for.cond.i.i.i443:                                ; preds = %for.body.i.i.i447
  %inc.i.i.i441 = add nuw nsw i32 %i.017.i.i.i444, 1
  %cmp.i.i.i442 = icmp ult i32 %i.017.i.i.i444, 99
  br i1 %cmp.i.i.i442, label %for.body.i.i.i447, label %do.body.i.i.i451

for.body.i.i.i447:                                ; preds = %for.cond.i.i.i443, %rtl_w0w1_eri.exit249
  %i.017.i.i.i444 = phi i32 [ 0, %rtl_w0w1_eri.exit249 ], [ %inc.i.i.i441, %for.cond.i.i.i443 ]
  call void @__udelay(i64 100) #9
  %107 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i445 = getelementptr i8, i8* %107, i64 116
  %108 = bitcast i8* %add.ptr.i.i445 to i32*
  %109 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %108) #10, !srcloc !2
  %tobool.i.i446 = icmp slt i32 %109, 0
  br i1 %tobool.i.i446, label %for.cond.i.i.i443, label %rtl_eri_write.exit454

do.body.i.i.i451:                                 ; preds = %for.cond.i.i.i443
  %110 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i449 = and i32 %110, 1
  %tobool4.i.i.i450 = icmp eq i32 %and.i.i.i449, 0
  br i1 %tobool4.i.i.i450, label %rtl_eri_write.exit454, label %if.then5.i.i.i453

if.then5.i.i.i453:                                ; preds = %do.body.i.i.i451
  %111 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %111, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit454

rtl_eri_write.exit454:                            ; preds = %for.body.i.i.i447, %do.body.i.i.i451, %if.then5.i.i.i453
  %112 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i251 = getelementptr i8, i8* %112, i64 116
  %113 = bitcast i8* %add.ptr.i.i251 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61652, i32* %113) #10, !srcloc !8
  br label %for.body.i.i.i.i258

for.cond.i.i.i.i254:                              ; preds = %for.body.i.i.i.i258
  %inc.i.i.i.i252 = add nuw nsw i32 %i.017.i.i.i.i255, 1
  %cmp.i.i.i.i253 = icmp ult i32 %i.017.i.i.i.i255, 99
  br i1 %cmp.i.i.i.i253, label %for.body.i.i.i.i258, label %do.body.i.i.i.i262

for.body.i.i.i.i258:                              ; preds = %for.cond.i.i.i.i254, %rtl_eri_write.exit454
  %i.017.i.i.i.i255 = phi i32 [ 0, %rtl_eri_write.exit454 ], [ %inc.i.i.i.i252, %for.cond.i.i.i.i254 ]
  call void @__udelay(i64 100) #9
  %114 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i256 = getelementptr i8, i8* %114, i64 116
  %115 = bitcast i8* %add.ptr.i.i.i256 to i32*
  %116 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %115) #10, !srcloc !2
  %tobool.i.i.i257 = icmp slt i32 %116, 0
  br i1 %tobool.i.i.i257, label %cond.true.i.i266, label %for.cond.i.i.i.i254

do.body.i.i.i.i262:                               ; preds = %for.cond.i.i.i.i254
  %117 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i.i260 = and i32 %117, 1
  %tobool4.i.i.i.i261 = icmp eq i32 %and.i.i.i.i260, 0
  br i1 %tobool4.i.i.i.i261, label %rtl_w0w1_eri.exit269, label %if.then5.i.i.i.i264

if.then5.i.i.i.i264:                              ; preds = %do.body.i.i.i.i262
  %118 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %118, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit269

cond.true.i.i266:                                 ; preds = %for.body.i.i.i.i258
  %add.ptr3.i.i265 = getelementptr i8, i8* %112, i64 112
  %119 = bitcast i8* %add.ptr3.i.i265 to i32*
  %120 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %119) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit269

rtl_w0w1_eri.exit269:                             ; preds = %do.body.i.i.i.i262, %if.then5.i.i.i.i264, %cond.true.i.i266
  %cond.i.i267 = phi i32 [ %120, %cond.true.i.i266 ], [ -1, %do.body.i.i.i.i262 ], [ -1, %if.then5.i.i.i.i264 ]
  %or.i268 = or i32 %cond.i.i267, 7936
  %121 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i456 = getelementptr i8, i8* %121, i64 112
  %122 = bitcast i8* %add.ptr.i456 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i268, i32* %122) #10, !srcloc !8
  %add.ptr11.i457 = getelementptr i8, i8* %121, i64 116
  %123 = bitcast i8* %add.ptr11.i457 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421996, i32* %123) #10, !srcloc !8
  br label %for.body.i.i.i464

for.cond.i.i.i460:                                ; preds = %for.body.i.i.i464
  %inc.i.i.i458 = add nuw nsw i32 %i.017.i.i.i461, 1
  %cmp.i.i.i459 = icmp ult i32 %i.017.i.i.i461, 99
  br i1 %cmp.i.i.i459, label %for.body.i.i.i464, label %do.body.i.i.i468

for.body.i.i.i464:                                ; preds = %for.cond.i.i.i460, %rtl_w0w1_eri.exit269
  %i.017.i.i.i461 = phi i32 [ 0, %rtl_w0w1_eri.exit269 ], [ %inc.i.i.i458, %for.cond.i.i.i460 ]
  call void @__udelay(i64 100) #9
  %124 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i462 = getelementptr i8, i8* %124, i64 116
  %125 = bitcast i8* %add.ptr.i.i462 to i32*
  %126 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %125) #10, !srcloc !2
  %tobool.i.i463 = icmp slt i32 %126, 0
  br i1 %tobool.i.i463, label %for.cond.i.i.i460, label %rtl_eri_write.exit471

do.body.i.i.i468:                                 ; preds = %for.cond.i.i.i460
  %127 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i466 = and i32 %127, 1
  %tobool4.i.i.i467 = icmp eq i32 %and.i.i.i466, 0
  br i1 %tobool4.i.i.i467, label %rtl_eri_write.exit471, label %if.then5.i.i.i470

if.then5.i.i.i470:                                ; preds = %do.body.i.i.i468
  %128 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %128, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit471

rtl_eri_write.exit471:                            ; preds = %for.body.i.i.i464, %do.body.i.i.i468, %if.then5.i.i.i470
  %129 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i271 = getelementptr i8, i8* %129, i64 112
  %130 = bitcast i8* %add.ptr.i271 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 20359, i32* %130) #10, !srcloc !8
  %add.ptr11.i272 = getelementptr i8, i8* %129, i64 116
  %131 = bitcast i8* %add.ptr11.i272 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147469840, i32* %131) #10, !srcloc !8
  br label %for.body.i.i.i279

for.cond.i.i.i275:                                ; preds = %for.body.i.i.i279
  %inc.i.i.i273 = add nuw nsw i32 %i.017.i.i.i276, 1
  %cmp.i.i.i274 = icmp ult i32 %i.017.i.i.i276, 99
  br i1 %cmp.i.i.i274, label %for.body.i.i.i279, label %do.body.i.i.i283

for.body.i.i.i279:                                ; preds = %for.cond.i.i.i275, %rtl_eri_write.exit471
  %i.017.i.i.i276 = phi i32 [ 0, %rtl_eri_write.exit471 ], [ %inc.i.i.i273, %for.cond.i.i.i275 ]
  call void @__udelay(i64 100) #9
  %132 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i277 = getelementptr i8, i8* %132, i64 116
  %133 = bitcast i8* %add.ptr.i.i277 to i32*
  %134 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %133) #10, !srcloc !2
  %tobool.i.i278 = icmp slt i32 %134, 0
  br i1 %tobool.i.i278, label %for.cond.i.i.i275, label %rtl_eri_write.exit286

do.body.i.i.i283:                                 ; preds = %for.cond.i.i.i275
  %135 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i281 = and i32 %135, 1
  %tobool4.i.i.i282 = icmp eq i32 %and.i.i.i281, 0
  br i1 %tobool4.i.i.i282, label %rtl_eri_write.exit286, label %if.then5.i.i.i285

if.then5.i.i.i285:                                ; preds = %do.body.i.i.i283
  %136 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %136, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit286

rtl_eri_write.exit286:                            ; preds = %for.body.i.i.i279, %do.body.i.i.i283, %if.then5.i.i.i285
  %add.ptr12 = getelementptr i8, i8* %0, i64 240
  %137 = bitcast i8* %add.ptr12 to i32*
  %138 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %137) #10, !srcloc !2
  %and14 = and i32 %138, -524289
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and14, i32* %137) #10, !srcloc !8
  %add.ptr16 = getelementptr i8, i8* %0, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 39, i8* %add.ptr16) #10, !srcloc !5
  %139 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i288 = getelementptr i8, i8* %139, i64 112
  %140 = bitcast i8* %add.ptr.i288 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %140) #10, !srcloc !8
  %add.ptr11.i289 = getelementptr i8, i8* %139, i64 116
  %141 = bitcast i8* %add.ptr11.i289 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471168, i32* %141) #10, !srcloc !8
  br label %for.body.i.i.i296

for.cond.i.i.i292:                                ; preds = %for.body.i.i.i296
  %inc.i.i.i290 = add nuw nsw i32 %i.017.i.i.i293, 1
  %cmp.i.i.i291 = icmp ult i32 %i.017.i.i.i293, 99
  br i1 %cmp.i.i.i291, label %for.body.i.i.i296, label %do.body.i.i.i300

for.body.i.i.i296:                                ; preds = %for.cond.i.i.i292, %rtl_eri_write.exit286
  %i.017.i.i.i293 = phi i32 [ 0, %rtl_eri_write.exit286 ], [ %inc.i.i.i290, %for.cond.i.i.i292 ]
  call void @__udelay(i64 100) #9
  %142 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i294 = getelementptr i8, i8* %142, i64 116
  %143 = bitcast i8* %add.ptr.i.i294 to i32*
  %144 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %143) #10, !srcloc !2
  %tobool.i.i295 = icmp slt i32 %144, 0
  br i1 %tobool.i.i295, label %for.cond.i.i.i292, label %rtl_eri_write.exit303

do.body.i.i.i300:                                 ; preds = %for.cond.i.i.i292
  %145 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i298 = and i32 %145, 1
  %tobool4.i.i.i299 = icmp eq i32 %and.i.i.i298, 0
  br i1 %tobool4.i.i.i299, label %rtl_eri_write.exit303, label %if.then5.i.i.i302

if.then5.i.i.i302:                                ; preds = %do.body.i.i.i300
  %146 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %146, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit303

rtl_eri_write.exit303:                            ; preds = %for.body.i.i.i296, %do.body.i.i.i300, %if.then5.i.i.i302
  %147 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i305 = getelementptr i8, i8* %147, i64 112
  %148 = bitcast i8* %add.ptr.i305 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %148) #10, !srcloc !8
  %add.ptr11.i306 = getelementptr i8, i8* %147, i64 116
  %149 = bitcast i8* %add.ptr11.i306 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471176, i32* %149) #10, !srcloc !8
  br label %for.body.i.i.i313

for.cond.i.i.i309:                                ; preds = %for.body.i.i.i313
  %inc.i.i.i307 = add nuw nsw i32 %i.017.i.i.i310, 1
  %cmp.i.i.i308 = icmp ult i32 %i.017.i.i.i310, 99
  br i1 %cmp.i.i.i308, label %for.body.i.i.i313, label %do.body.i.i.i317

for.body.i.i.i313:                                ; preds = %for.cond.i.i.i309, %rtl_eri_write.exit303
  %i.017.i.i.i310 = phi i32 [ 0, %rtl_eri_write.exit303 ], [ %inc.i.i.i307, %for.cond.i.i.i309 ]
  call void @__udelay(i64 100) #9
  %150 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i311 = getelementptr i8, i8* %150, i64 116
  %151 = bitcast i8* %add.ptr.i.i311 to i32*
  %152 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %151) #10, !srcloc !2
  %tobool.i.i312 = icmp slt i32 %152, 0
  br i1 %tobool.i.i312, label %for.cond.i.i.i309, label %rtl_eri_write.exit320

do.body.i.i.i317:                                 ; preds = %for.cond.i.i.i309
  %153 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i315 = and i32 %153, 1
  %tobool4.i.i.i316 = icmp eq i32 %and.i.i.i315, 0
  br i1 %tobool4.i.i.i316, label %rtl_eri_write.exit320, label %if.then5.i.i.i319

if.then5.i.i.i319:                                ; preds = %do.body.i.i.i317
  %154 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %154, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit320

rtl_eri_write.exit320:                            ; preds = %for.body.i.i.i313, %do.body.i.i.i317, %if.then5.i.i.i319
  %add.ptr17 = getelementptr i8, i8* %0, i64 27
  %155 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr17) #10, !srcloc !6
  %156 = and i8 %155, -8
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %156, i8* %add.ptr17) #10, !srcloc !5
  %add.ptr23 = getelementptr i8, i8* %0, i64 208
  %157 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr23) #10, !srcloc !6
  %158 = and i8 %157, -65
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %158, i8* %add.ptr23) #10, !srcloc !5
  %add.ptr29 = getelementptr i8, i8* %0, i64 242
  %159 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr29) #10, !srcloc !6
  %160 = and i8 %159, -65
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %160, i8* %add.ptr23) #10, !srcloc !5
  %161 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr23) #10, !srcloc !6
  %162 = and i8 %161, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %162, i8* %add.ptr23) #10, !srcloc !5
  %163 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i322 = getelementptr i8, i8* %163, i64 116
  %164 = bitcast i8* %add.ptr.i.i322 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61872, i32* %164) #10, !srcloc !8
  br label %for.body.i.i.i.i329

for.cond.i.i.i.i325:                              ; preds = %for.body.i.i.i.i329
  %inc.i.i.i.i323 = add nuw nsw i32 %i.017.i.i.i.i326, 1
  %cmp.i.i.i.i324 = icmp ult i32 %i.017.i.i.i.i326, 99
  br i1 %cmp.i.i.i.i324, label %for.body.i.i.i.i329, label %do.body.i.i.i.i333

for.body.i.i.i.i329:                              ; preds = %for.cond.i.i.i.i325, %rtl_eri_write.exit320
  %i.017.i.i.i.i326 = phi i32 [ 0, %rtl_eri_write.exit320 ], [ %inc.i.i.i.i323, %for.cond.i.i.i.i325 ]
  call void @__udelay(i64 100) #9
  %165 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i327 = getelementptr i8, i8* %165, i64 116
  %166 = bitcast i8* %add.ptr.i.i.i327 to i32*
  %167 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %166) #10, !srcloc !2
  %tobool.i.i.i328 = icmp slt i32 %167, 0
  br i1 %tobool.i.i.i328, label %cond.true.i.i337, label %for.cond.i.i.i.i325

do.body.i.i.i.i333:                               ; preds = %for.cond.i.i.i.i325
  %168 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i.i331 = and i32 %168, 1
  %tobool4.i.i.i.i332 = icmp eq i32 %and.i.i.i.i331, 0
  br i1 %tobool4.i.i.i.i332, label %rtl_w0w1_eri.exit340, label %if.then5.i.i.i.i335

if.then5.i.i.i.i335:                              ; preds = %do.body.i.i.i.i333
  %169 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %169, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit340

cond.true.i.i337:                                 ; preds = %for.body.i.i.i.i329
  %add.ptr3.i.i336 = getelementptr i8, i8* %163, i64 112
  %170 = bitcast i8* %add.ptr3.i.i336 to i32*
  %171 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %170) #10, !srcloc !2
  %phitmp = and i32 %171, -4097
  br label %rtl_w0w1_eri.exit340

rtl_w0w1_eri.exit340:                             ; preds = %do.body.i.i.i.i333, %if.then5.i.i.i.i335, %cond.true.i.i337
  %cond.i.i338 = phi i32 [ %phitmp, %cond.true.i.i337 ], [ -4097, %do.body.i.i.i.i333 ], [ -4097, %if.then5.i.i.i.i335 ]
  %172 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i473 = getelementptr i8, i8* %172, i64 112
  %173 = bitcast i8* %add.ptr.i473 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i338, i32* %173) #10, !srcloc !8
  %add.ptr11.i474 = getelementptr i8, i8* %172, i64 116
  %174 = bitcast i8* %add.ptr11.i474 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147470928, i32* %174) #10, !srcloc !8
  br label %for.body.i.i.i481

for.cond.i.i.i477:                                ; preds = %for.body.i.i.i481
  %inc.i.i.i475 = add nuw nsw i32 %i.017.i.i.i478, 1
  %cmp.i.i.i476 = icmp ult i32 %i.017.i.i.i478, 99
  br i1 %cmp.i.i.i476, label %for.body.i.i.i481, label %do.body.i.i.i485

for.body.i.i.i481:                                ; preds = %for.cond.i.i.i477, %rtl_w0w1_eri.exit340
  %i.017.i.i.i478 = phi i32 [ 0, %rtl_w0w1_eri.exit340 ], [ %inc.i.i.i475, %for.cond.i.i.i477 ]
  call void @__udelay(i64 100) #9
  %175 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i479 = getelementptr i8, i8* %175, i64 116
  %176 = bitcast i8* %add.ptr.i.i479 to i32*
  %177 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %176) #10, !srcloc !2
  %tobool.i.i480 = icmp slt i32 %177, 0
  br i1 %tobool.i.i480, label %for.cond.i.i.i477, label %rtl_eri_write.exit488

do.body.i.i.i485:                                 ; preds = %for.cond.i.i.i477
  %178 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i483 = and i32 %178, 1
  %tobool4.i.i.i484 = icmp eq i32 %and.i.i.i483, 0
  br i1 %tobool4.i.i.i484, label %rtl_eri_write.exit488, label %if.then5.i.i.i487

if.then5.i.i.i487:                                ; preds = %do.body.i.i.i485
  %179 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %179, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit488

rtl_eri_write.exit488:                            ; preds = %for.body.i.i.i481, %do.body.i.i.i485, %if.then5.i.i.i487
  %180 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i342 = getelementptr i8, i8* %180, i64 84
  %181 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i342) #10, !srcloc !6
  %182 = and i8 %181, -3
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %182, i8* %add.ptr.i342) #10, !srcloc !5
  %write.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %183 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %183(%struct.rtl8169_private* nonnull %tp, i32 31, i32 3138) #9
  %read.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 1
  %184 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i, align 8
  %call.i343 = call i32 %184(%struct.rtl8169_private* nonnull %tp, i32 19) #9
  %185 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %185(%struct.rtl8169_private* nonnull %tp, i32 31, i32 0) #9
  %cmp = icmp sgt i32 %call.i343, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %rtl_eri_write.exit488
  %div489 = udiv i32 16000000, %call.i343
  %186 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i346 = getelementptr i8, i8* %186, i64 176
  %187 = bitcast i8* %add.ptr.i346 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1778974720, i32* %187) #10, !srcloc !8
  %188 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %187) #10, !srcloc !2
  %conv46490 = or i32 %188, %div489
  %or51 = and i32 %conv46490, 4095
  %189 = load i8*, i8** %mmio_addr, align 8
  %or1.i = or i32 %or51, -368508928
  %add.ptr.i349 = getelementptr i8, i8* %189, i64 176
  %190 = bitcast i8* %add.ptr.i349 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i, i32* %190) #10, !srcloc !8
  br label %if.end

if.end:                                           ; preds = %if.then, %rtl_eri_write.exit488
  %191 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i351 = getelementptr i8, i8* %191, i64 176
  %192 = bitcast i8* %add.ptr.i351 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1881866240, i32* %192) #10, !srcloc !8
  %193 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %192) #10, !srcloc !2
  %194 = and i32 %193, 240
  %195 = load i8*, i8** %mmio_addr, align 8
  %or1.i355 = or i32 %194, -265617401
  %add.ptr.i356 = getelementptr i8, i8* %195, i64 176
  %196 = bitcast i8* %add.ptr.i356 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i355, i32* %196) #10, !srcloc !8
  %197 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i358 = getelementptr i8, i8* %197, i64 176
  %198 = bitcast i8* %add.ptr.i358 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1881735168, i32* %198) #10, !srcloc !8
  %199 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %198) #10, !srcloc !2
  %200 = and i32 %199, 32776
  %201 = load i8*, i8** %mmio_addr, align 8
  %or1.i362 = or i32 %200, -265723904
  %add.ptr.i363 = getelementptr i8, i8* %201, i64 176
  %202 = bitcast i8* %add.ptr.i363 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i362, i32* %202) #10, !srcloc !8
  %203 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i365 = getelementptr i8, i8* %203, i64 176
  %204 = bitcast i8* %add.ptr.i365 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1886060544, i32* %204) #10, !srcloc !8
  %205 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %204) #10, !srcloc !2
  %206 = and i32 %205, 128
  %207 = load i8*, i8** %mmio_addr, align 8
  %or1.i369 = or i32 %206, -261422721
  %add.ptr.i370 = getelementptr i8, i8* %207, i64 176
  %208 = bitcast i8* %add.ptr.i370 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i369, i32* %208) #10, !srcloc !8
  %209 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i372 = getelementptr i8, i8* %209, i64 176
  %210 = bitcast i8* %add.ptr.i372 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1779433472, i32* %210) #10, !srcloc !8
  %211 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %210) #10, !srcloc !2
  %212 = and i32 %211, 2944
  %213 = load i8*, i8** %mmio_addr, align 8
  %or1.i376 = or i32 %212, -368049025
  %add.ptr.i377 = getelementptr i8, i8* %213, i64 176
  %214 = bitcast i8* %add.ptr.i377 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i376, i32* %214) #10, !srcloc !8
  %215 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i379 = getelementptr i8, i8* %215, i64 176
  %216 = bitcast i8* %add.ptr.i379 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -216072191, i32* %216) #10, !srcloc !8
  %217 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i381 = getelementptr i8, i8* %217, i64 176
  %218 = bitcast i8* %add.ptr.i381 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -216072192, i32* %218) #10, !srcloc !8
  %219 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i383 = getelementptr i8, i8* %219, i64 176
  %220 = bitcast i8* %add.ptr.i383 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -532021248, i32* %220) #10, !srcloc !8
  %221 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i385 = getelementptr i8, i8* %221, i64 176
  %222 = bitcast i8* %add.ptr.i385 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -531693568, i32* %222) #10, !srcloc !8
  ret void
}

; Function Attrs: noredzone
declare i32 @pcie_capability_clear_and_set_word(%struct.pci_dev*, i32, i16 zeroext, i16 zeroext) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @__rtl_hw_start_8168cp(%struct.rtl8169_private* nocapture readonly %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %1 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 82
  %2 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %3 = or i8 %2, 16
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %3, i8* %add.ptr) #10, !srcloc !5
  %add.ptr3 = getelementptr i8, i8* %0, i64 84
  %4 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3) #10, !srcloc !6
  %5 = and i8 %4, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %5, i8* %add.ptr3) #10, !srcloc !5
  %dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %6 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %mtu = getelementptr inbounds %struct.net_device, %struct.net_device* %6, i64 0, i32 42
  %7 = load i32, i32* %mtu, align 16
  %cmp = icmp ult i32 %7, 1501
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %1, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call.i.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %1, i32 16, i16 zeroext 256, i16 zeroext 0) #9
  %add.ptr9 = getelementptr i8, i8* %0, i64 224
  %8 = bitcast i8* %add.ptr9 to i16*
  %9 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %8) #10, !srcloc !21
  %10 = and i16 %9, 8291
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %10, i16* %8) #10, !srcloc !3
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc zeroext i16 @rtl_ephy_read(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg_addr) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %and = shl i32 %reg_addr, 16
  %shl = and i32 %and, 2031616
  %add.ptr = getelementptr i8, i8* %0, i64 128
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl, i32* %1) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 99
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 10) #9
  %2 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %2, i64 128
  %3 = bitcast i8* %add.ptr.i to i32*
  %4 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %3) #10, !srcloc !2
  %tobool.i = icmp slt i32 %4, 0
  br i1 %tobool.i, label %cond.true, label %for.cond.i.i

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %5 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %5, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %cond.end, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %6 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %cond.end

cond.true:                                        ; preds = %for.body.i.i
  %7 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %phitmp = trunc i32 %7 to i16
  br label %cond.end

cond.end:                                         ; preds = %if.then5.i.i, %do.body.i.i, %cond.true
  %cond = phi i16 [ %phitmp, %cond.true ], [ -1, %do.body.i.i ], [ -1, %if.then5.i.i ]
  ret i16 %cond
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_ephy_write(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg_addr, i32 %value) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %and = and i32 %value, 65535
  %and1 = shl i32 %reg_addr, 16
  %shl = and i32 %and1, 2031616
  %or = or i32 %shl, %and
  %or2 = or i32 %or, -2147483648
  %add.ptr = getelementptr i8, i8* %0, i64 128
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2, i32* %1) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 99
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 10) #9
  %2 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %2, i64 128
  %3 = bitcast i8* %add.ptr.i to i32*
  %4 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %3) #10, !srcloc !2
  %tobool.i = icmp slt i32 %4, 0
  br i1 %tobool.i, label %for.cond.i.i, label %rtl_udelay_loop_wait_low.exit

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %5 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %5, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %rtl_udelay_loop_wait_low.exit, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %6 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_udelay_loop_wait_low.exit

rtl_udelay_loop_wait_low.exit:                    ; preds = %for.body.i.i, %do.body.i.i, %if.then5.i.i
  call void @__const_udelay(i64 42950) #9
  ret void
}

; Function Attrs: noredzone
declare void @__udelay(i64) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @__const_udelay(i64) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_hw_start_8168f(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %1 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %read.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 1
  %2 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i.i, align 8
  %tobool.i.i.i = icmp eq i32 (%struct.rtl8169_private*, i32)* %2, null
  br i1 %tobool.i.i.i, label %rtl_csi_read.exit.i.i, label %cond.true.i.i.i

cond.true.i.i.i:                                  ; preds = %entry
  %call.i.i.i = call i32 %2(%struct.rtl8169_private* nonnull %tp, i32 1804) #9
  %phitmp.i.i = and i32 %call.i.i.i, 16777215
  %phitmp.i = or i32 %phitmp.i.i, 654311424
  br label %rtl_csi_read.exit.i.i

rtl_csi_read.exit.i.i:                            ; preds = %cond.true.i.i.i, %entry
  %cond.i.i.i = phi i32 [ %phitmp.i, %cond.true.i.i.i ], [ 671088639, %entry ]
  %write.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 0
  %3 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i.i, align 8
  %tobool.i3.i.i = icmp eq void (%struct.rtl8169_private*, i32, i32)* %3, null
  br i1 %tobool.i3.i.i, label %rtl_csi_access_enable_2.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %rtl_csi_read.exit.i.i
  call void %3(%struct.rtl8169_private* nonnull %tp, i32 1804, i32 %cond.i.i.i) #9
  br label %rtl_csi_access_enable_2.exit

rtl_csi_access_enable_2.exit:                     ; preds = %rtl_csi_read.exit.i.i, %if.then.i.i.i
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %1, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  %4 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %4, i64 112
  %5 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %5) #10, !srcloc !8
  %add.ptr11.i = getelementptr i8, i8* %4, i64 116
  %6 = bitcast i8* %add.ptr11.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471168, i32* %6) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %rtl_csi_access_enable_2.exit
  %i.017.i.i.i = phi i32 [ 0, %rtl_csi_access_enable_2.exit ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %7 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %7, i64 116
  %8 = bitcast i8* %add.ptr.i.i to i32*
  %9 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %8) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %9, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %rtl_eri_write.exit

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %10 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %10, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %rtl_eri_write.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %11 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %11, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit

rtl_eri_write.exit:                               ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  %12 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i49 = getelementptr i8, i8* %12, i64 112
  %13 = bitcast i8* %add.ptr.i49 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %13) #10, !srcloc !8
  %add.ptr11.i50 = getelementptr i8, i8* %12, i64 116
  %14 = bitcast i8* %add.ptr11.i50 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471176, i32* %14) #10, !srcloc !8
  br label %for.body.i.i.i57

for.cond.i.i.i53:                                 ; preds = %for.body.i.i.i57
  %inc.i.i.i51 = add nuw nsw i32 %i.017.i.i.i54, 1
  %cmp.i.i.i52 = icmp ult i32 %i.017.i.i.i54, 99
  br i1 %cmp.i.i.i52, label %for.body.i.i.i57, label %do.body.i.i.i61

for.body.i.i.i57:                                 ; preds = %for.cond.i.i.i53, %rtl_eri_write.exit
  %i.017.i.i.i54 = phi i32 [ 0, %rtl_eri_write.exit ], [ %inc.i.i.i51, %for.cond.i.i.i53 ]
  call void @__udelay(i64 100) #9
  %15 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i55 = getelementptr i8, i8* %15, i64 116
  %16 = bitcast i8* %add.ptr.i.i55 to i32*
  %17 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %16) #10, !srcloc !2
  %tobool.i.i56 = icmp slt i32 %17, 0
  br i1 %tobool.i.i56, label %for.cond.i.i.i53, label %rtl_eri_write.exit64

do.body.i.i.i61:                                  ; preds = %for.cond.i.i.i53
  %msg_enable.i.i.i58 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %18 = load i32, i32* %msg_enable.i.i.i58, align 8
  %and.i.i.i59 = and i32 %18, 1
  %tobool4.i.i.i60 = icmp eq i32 %and.i.i.i59, 0
  br i1 %tobool4.i.i.i60, label %rtl_eri_write.exit64, label %if.then5.i.i.i63

if.then5.i.i.i63:                                 ; preds = %do.body.i.i.i61
  %dev.i.i.i62 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %19 = load %struct.net_device*, %struct.net_device** %dev.i.i.i62, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %19, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit64

rtl_eri_write.exit64:                             ; preds = %for.body.i.i.i57, %do.body.i.i.i61, %if.then5.i.i.i63
  %20 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i66 = getelementptr i8, i8* %20, i64 112
  %21 = bitcast i8* %add.ptr.i66 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1048578, i32* %21) #10, !srcloc !8
  %add.ptr11.i67 = getelementptr i8, i8* %20, i64 116
  %22 = bitcast i8* %add.ptr11.i67 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147422008, i32* %22) #10, !srcloc !8
  br label %for.body.i.i.i74

for.cond.i.i.i70:                                 ; preds = %for.body.i.i.i74
  %inc.i.i.i68 = add nuw nsw i32 %i.017.i.i.i71, 1
  %cmp.i.i.i69 = icmp ult i32 %i.017.i.i.i71, 99
  br i1 %cmp.i.i.i69, label %for.body.i.i.i74, label %do.body.i.i.i78

for.body.i.i.i74:                                 ; preds = %for.cond.i.i.i70, %rtl_eri_write.exit64
  %i.017.i.i.i71 = phi i32 [ 0, %rtl_eri_write.exit64 ], [ %inc.i.i.i68, %for.cond.i.i.i70 ]
  call void @__udelay(i64 100) #9
  %23 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i72 = getelementptr i8, i8* %23, i64 116
  %24 = bitcast i8* %add.ptr.i.i72 to i32*
  %25 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %24) #10, !srcloc !2
  %tobool.i.i73 = icmp slt i32 %25, 0
  br i1 %tobool.i.i73, label %for.cond.i.i.i70, label %rtl_eri_write.exit81

do.body.i.i.i78:                                  ; preds = %for.cond.i.i.i70
  %msg_enable.i.i.i75 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %26 = load i32, i32* %msg_enable.i.i.i75, align 8
  %and.i.i.i76 = and i32 %26, 1
  %tobool4.i.i.i77 = icmp eq i32 %and.i.i.i76, 0
  br i1 %tobool4.i.i.i77, label %rtl_eri_write.exit81, label %if.then5.i.i.i80

if.then5.i.i.i80:                                 ; preds = %do.body.i.i.i78
  %dev.i.i.i79 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %27 = load %struct.net_device*, %struct.net_device** %dev.i.i.i79, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %27, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit81

rtl_eri_write.exit81:                             ; preds = %for.body.i.i.i74, %do.body.i.i.i78, %if.then5.i.i.i80
  %28 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i83 = getelementptr i8, i8* %28, i64 112
  %29 = bitcast i8* %add.ptr.i83 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1048582, i32* %29) #10, !srcloc !8
  %add.ptr11.i84 = getelementptr i8, i8* %28, i64 116
  %30 = bitcast i8* %add.ptr11.i84 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421976, i32* %30) #10, !srcloc !8
  br label %for.body.i.i.i91

for.cond.i.i.i87:                                 ; preds = %for.body.i.i.i91
  %inc.i.i.i85 = add nuw nsw i32 %i.017.i.i.i88, 1
  %cmp.i.i.i86 = icmp ult i32 %i.017.i.i.i88, 99
  br i1 %cmp.i.i.i86, label %for.body.i.i.i91, label %do.body.i.i.i95

for.body.i.i.i91:                                 ; preds = %for.cond.i.i.i87, %rtl_eri_write.exit81
  %i.017.i.i.i88 = phi i32 [ 0, %rtl_eri_write.exit81 ], [ %inc.i.i.i85, %for.cond.i.i.i87 ]
  call void @__udelay(i64 100) #9
  %31 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i89 = getelementptr i8, i8* %31, i64 116
  %32 = bitcast i8* %add.ptr.i.i89 to i32*
  %33 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %32) #10, !srcloc !2
  %tobool.i.i90 = icmp slt i32 %33, 0
  br i1 %tobool.i.i90, label %for.cond.i.i.i87, label %rtl_eri_write.exit98

do.body.i.i.i95:                                  ; preds = %for.cond.i.i.i87
  %msg_enable.i.i.i92 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %34 = load i32, i32* %msg_enable.i.i.i92, align 8
  %and.i.i.i93 = and i32 %34, 1
  %tobool4.i.i.i94 = icmp eq i32 %and.i.i.i93, 0
  br i1 %tobool4.i.i.i94, label %rtl_eri_write.exit98, label %if.then5.i.i.i97

if.then5.i.i.i97:                                 ; preds = %do.body.i.i.i95
  %dev.i.i.i96 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %35 = load %struct.net_device*, %struct.net_device** %dev.i.i.i96, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %35, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit98

rtl_eri_write.exit98:                             ; preds = %for.body.i.i.i91, %do.body.i.i.i95, %if.then5.i.i.i97
  %36 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i99 = getelementptr i8, i8* %36, i64 116
  %37 = bitcast i8* %add.ptr.i.i99 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %37) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %rtl_eri_write.exit98
  %i.017.i.i.i.i = phi i32 [ 0, %rtl_eri_write.exit98 ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %38 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %38, i64 116
  %39 = bitcast i8* %add.ptr.i.i.i to i32*
  %40 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %39) #10, !srcloc !2
  %tobool.i.i.i100 = icmp slt i32 %40, 0
  br i1 %tobool.i.i.i100, label %cond.true.i.i, label %for.cond.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %41 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %41, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_w0w1_eri.exit, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %dev.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %42 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %42, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit

cond.true.i.i:                                    ; preds = %for.body.i.i.i.i
  %add.ptr3.i.i = getelementptr i8, i8* %36, i64 112
  %43 = bitcast i8* %add.ptr3.i.i to i32*
  %44 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %43) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit

rtl_w0w1_eri.exit:                                ; preds = %do.body.i.i.i.i, %if.then5.i.i.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %44, %cond.true.i.i ], [ -1, %do.body.i.i.i.i ], [ -1, %if.then5.i.i.i.i ]
  %and.i = and i32 %cond.i.i, -2
  %45 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i195 = getelementptr i8, i8* %45, i64 112
  %46 = bitcast i8* %add.ptr.i195 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i, i32* %46) #10, !srcloc !8
  %add.ptr11.i196 = getelementptr i8, i8* %45, i64 116
  %47 = bitcast i8* %add.ptr11.i196 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %47) #10, !srcloc !8
  br label %for.body.i.i.i203

for.cond.i.i.i199:                                ; preds = %for.body.i.i.i203
  %inc.i.i.i197 = add nuw nsw i32 %i.017.i.i.i200, 1
  %cmp.i.i.i198 = icmp ult i32 %i.017.i.i.i200, 99
  br i1 %cmp.i.i.i198, label %for.body.i.i.i203, label %do.body.i.i.i207

for.body.i.i.i203:                                ; preds = %for.cond.i.i.i199, %rtl_w0w1_eri.exit
  %i.017.i.i.i200 = phi i32 [ 0, %rtl_w0w1_eri.exit ], [ %inc.i.i.i197, %for.cond.i.i.i199 ]
  call void @__udelay(i64 100) #9
  %48 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i201 = getelementptr i8, i8* %48, i64 116
  %49 = bitcast i8* %add.ptr.i.i201 to i32*
  %50 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %49) #10, !srcloc !2
  %tobool.i.i202 = icmp slt i32 %50, 0
  br i1 %tobool.i.i202, label %for.cond.i.i.i199, label %rtl_eri_write.exit210

do.body.i.i.i207:                                 ; preds = %for.cond.i.i.i199
  %msg_enable.i.i.i204 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %51 = load i32, i32* %msg_enable.i.i.i204, align 8
  %and.i.i.i205 = and i32 %51, 1
  %tobool4.i.i.i206 = icmp eq i32 %and.i.i.i205, 0
  br i1 %tobool4.i.i.i206, label %rtl_eri_write.exit210, label %if.then5.i.i.i209

if.then5.i.i.i209:                                ; preds = %do.body.i.i.i207
  %dev.i.i.i208 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %52 = load %struct.net_device*, %struct.net_device** %dev.i.i.i208, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %52, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit210

rtl_eri_write.exit210:                            ; preds = %for.body.i.i.i203, %do.body.i.i.i207, %if.then5.i.i.i209
  %53 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i102 = getelementptr i8, i8* %53, i64 116
  %54 = bitcast i8* %add.ptr.i.i102 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %54) #10, !srcloc !8
  br label %for.body.i.i.i.i109

for.cond.i.i.i.i105:                              ; preds = %for.body.i.i.i.i109
  %inc.i.i.i.i103 = add nuw nsw i32 %i.017.i.i.i.i106, 1
  %cmp.i.i.i.i104 = icmp ult i32 %i.017.i.i.i.i106, 99
  br i1 %cmp.i.i.i.i104, label %for.body.i.i.i.i109, label %do.body.i.i.i.i113

for.body.i.i.i.i109:                              ; preds = %for.cond.i.i.i.i105, %rtl_eri_write.exit210
  %i.017.i.i.i.i106 = phi i32 [ 0, %rtl_eri_write.exit210 ], [ %inc.i.i.i.i103, %for.cond.i.i.i.i105 ]
  call void @__udelay(i64 100) #9
  %55 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i107 = getelementptr i8, i8* %55, i64 116
  %56 = bitcast i8* %add.ptr.i.i.i107 to i32*
  %57 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %56) #10, !srcloc !2
  %tobool.i.i.i108 = icmp slt i32 %57, 0
  br i1 %tobool.i.i.i108, label %cond.true.i.i117, label %for.cond.i.i.i.i105

do.body.i.i.i.i113:                               ; preds = %for.cond.i.i.i.i105
  %msg_enable.i.i.i.i110 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %58 = load i32, i32* %msg_enable.i.i.i.i110, align 8
  %and.i.i.i.i111 = and i32 %58, 1
  %tobool4.i.i.i.i112 = icmp eq i32 %and.i.i.i.i111, 0
  br i1 %tobool4.i.i.i.i112, label %rtl_w0w1_eri.exit119, label %if.then5.i.i.i.i115

if.then5.i.i.i.i115:                              ; preds = %do.body.i.i.i.i113
  %dev.i.i.i.i114 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %59 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i114, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %59, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit119

cond.true.i.i117:                                 ; preds = %for.body.i.i.i.i109
  %add.ptr3.i.i116 = getelementptr i8, i8* %53, i64 112
  %60 = bitcast i8* %add.ptr3.i.i116 to i32*
  %61 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %60) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit119

rtl_w0w1_eri.exit119:                             ; preds = %do.body.i.i.i.i113, %if.then5.i.i.i.i115, %cond.true.i.i117
  %cond.i.i118 = phi i32 [ %61, %cond.true.i.i117 ], [ -1, %do.body.i.i.i.i113 ], [ -1, %if.then5.i.i.i.i115 ]
  %or.i = or i32 %cond.i.i118, 1
  %62 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i212 = getelementptr i8, i8* %62, i64 112
  %63 = bitcast i8* %add.ptr.i212 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i, i32* %63) #10, !srcloc !8
  %add.ptr11.i213 = getelementptr i8, i8* %62, i64 116
  %64 = bitcast i8* %add.ptr11.i213 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %64) #10, !srcloc !8
  br label %for.body.i.i.i220

for.cond.i.i.i216:                                ; preds = %for.body.i.i.i220
  %inc.i.i.i214 = add nuw nsw i32 %i.017.i.i.i217, 1
  %cmp.i.i.i215 = icmp ult i32 %i.017.i.i.i217, 99
  br i1 %cmp.i.i.i215, label %for.body.i.i.i220, label %do.body.i.i.i224

for.body.i.i.i220:                                ; preds = %for.cond.i.i.i216, %rtl_w0w1_eri.exit119
  %i.017.i.i.i217 = phi i32 [ 0, %rtl_w0w1_eri.exit119 ], [ %inc.i.i.i214, %for.cond.i.i.i216 ]
  call void @__udelay(i64 100) #9
  %65 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i218 = getelementptr i8, i8* %65, i64 116
  %66 = bitcast i8* %add.ptr.i.i218 to i32*
  %67 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %66) #10, !srcloc !2
  %tobool.i.i219 = icmp slt i32 %67, 0
  br i1 %tobool.i.i219, label %for.cond.i.i.i216, label %rtl_eri_write.exit227

do.body.i.i.i224:                                 ; preds = %for.cond.i.i.i216
  %msg_enable.i.i.i221 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %68 = load i32, i32* %msg_enable.i.i.i221, align 8
  %and.i.i.i222 = and i32 %68, 1
  %tobool4.i.i.i223 = icmp eq i32 %and.i.i.i222, 0
  br i1 %tobool4.i.i.i223, label %rtl_eri_write.exit227, label %if.then5.i.i.i226

if.then5.i.i.i226:                                ; preds = %do.body.i.i.i224
  %dev.i.i.i225 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %69 = load %struct.net_device*, %struct.net_device** %dev.i.i.i225, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %69, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit227

rtl_eri_write.exit227:                            ; preds = %for.body.i.i.i220, %do.body.i.i.i224, %if.then5.i.i.i226
  %70 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i121 = getelementptr i8, i8* %70, i64 116
  %71 = bitcast i8* %add.ptr.i.i121 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61872, i32* %71) #10, !srcloc !8
  br label %for.body.i.i.i.i128

for.cond.i.i.i.i124:                              ; preds = %for.body.i.i.i.i128
  %inc.i.i.i.i122 = add nuw nsw i32 %i.017.i.i.i.i125, 1
  %cmp.i.i.i.i123 = icmp ult i32 %i.017.i.i.i.i125, 99
  br i1 %cmp.i.i.i.i123, label %for.body.i.i.i.i128, label %do.body.i.i.i.i132

for.body.i.i.i.i128:                              ; preds = %for.cond.i.i.i.i124, %rtl_eri_write.exit227
  %i.017.i.i.i.i125 = phi i32 [ 0, %rtl_eri_write.exit227 ], [ %inc.i.i.i.i122, %for.cond.i.i.i.i124 ]
  call void @__udelay(i64 100) #9
  %72 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i126 = getelementptr i8, i8* %72, i64 116
  %73 = bitcast i8* %add.ptr.i.i.i126 to i32*
  %74 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %73) #10, !srcloc !2
  %tobool.i.i.i127 = icmp slt i32 %74, 0
  br i1 %tobool.i.i.i127, label %cond.true.i.i136, label %for.cond.i.i.i.i124

do.body.i.i.i.i132:                               ; preds = %for.cond.i.i.i.i124
  %msg_enable.i.i.i.i129 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %75 = load i32, i32* %msg_enable.i.i.i.i129, align 8
  %and.i.i.i.i130 = and i32 %75, 1
  %tobool4.i.i.i.i131 = icmp eq i32 %and.i.i.i.i130, 0
  br i1 %tobool4.i.i.i.i131, label %rtl_w0w1_eri.exit139, label %if.then5.i.i.i.i134

if.then5.i.i.i.i134:                              ; preds = %do.body.i.i.i.i132
  %dev.i.i.i.i133 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %76 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i133, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %76, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit139

cond.true.i.i136:                                 ; preds = %for.body.i.i.i.i128
  %add.ptr3.i.i135 = getelementptr i8, i8* %70, i64 112
  %77 = bitcast i8* %add.ptr3.i.i135 to i32*
  %78 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %77) #10, !srcloc !2
  %phitmp = or i32 %78, 16
  br label %rtl_w0w1_eri.exit139

rtl_w0w1_eri.exit139:                             ; preds = %do.body.i.i.i.i132, %if.then5.i.i.i.i134, %cond.true.i.i136
  %cond.i.i137 = phi i32 [ %phitmp, %cond.true.i.i136 ], [ -1, %do.body.i.i.i.i132 ], [ -1, %if.then5.i.i.i.i134 ]
  %79 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i229 = getelementptr i8, i8* %79, i64 112
  %80 = bitcast i8* %add.ptr.i229 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i137, i32* %80) #10, !srcloc !8
  %add.ptr11.i230 = getelementptr i8, i8* %79, i64 116
  %81 = bitcast i8* %add.ptr11.i230 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479120, i32* %81) #10, !srcloc !8
  br label %for.body.i.i.i237

for.cond.i.i.i233:                                ; preds = %for.body.i.i.i237
  %inc.i.i.i231 = add nuw nsw i32 %i.017.i.i.i234, 1
  %cmp.i.i.i232 = icmp ult i32 %i.017.i.i.i234, 99
  br i1 %cmp.i.i.i232, label %for.body.i.i.i237, label %do.body.i.i.i241

for.body.i.i.i237:                                ; preds = %for.cond.i.i.i233, %rtl_w0w1_eri.exit139
  %i.017.i.i.i234 = phi i32 [ 0, %rtl_w0w1_eri.exit139 ], [ %inc.i.i.i231, %for.cond.i.i.i233 ]
  call void @__udelay(i64 100) #9
  %82 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i235 = getelementptr i8, i8* %82, i64 116
  %83 = bitcast i8* %add.ptr.i.i235 to i32*
  %84 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %83) #10, !srcloc !2
  %tobool.i.i236 = icmp slt i32 %84, 0
  br i1 %tobool.i.i236, label %for.cond.i.i.i233, label %rtl_eri_write.exit244

do.body.i.i.i241:                                 ; preds = %for.cond.i.i.i233
  %msg_enable.i.i.i238 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %85 = load i32, i32* %msg_enable.i.i.i238, align 8
  %and.i.i.i239 = and i32 %85, 1
  %tobool4.i.i.i240 = icmp eq i32 %and.i.i.i239, 0
  br i1 %tobool4.i.i.i240, label %rtl_eri_write.exit244, label %if.then5.i.i.i243

if.then5.i.i.i243:                                ; preds = %do.body.i.i.i241
  %dev.i.i.i242 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %86 = load %struct.net_device*, %struct.net_device** %dev.i.i.i242, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %86, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit244

rtl_eri_write.exit244:                            ; preds = %for.body.i.i.i237, %do.body.i.i.i241, %if.then5.i.i.i243
  %87 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i141 = getelementptr i8, i8* %87, i64 116
  %88 = bitcast i8* %add.ptr.i.i141 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61904, i32* %88) #10, !srcloc !8
  br label %for.body.i.i.i.i148

for.cond.i.i.i.i144:                              ; preds = %for.body.i.i.i.i148
  %inc.i.i.i.i142 = add nuw nsw i32 %i.017.i.i.i.i145, 1
  %cmp.i.i.i.i143 = icmp ult i32 %i.017.i.i.i.i145, 99
  br i1 %cmp.i.i.i.i143, label %for.body.i.i.i.i148, label %do.body.i.i.i.i152

for.body.i.i.i.i148:                              ; preds = %for.cond.i.i.i.i144, %rtl_eri_write.exit244
  %i.017.i.i.i.i145 = phi i32 [ 0, %rtl_eri_write.exit244 ], [ %inc.i.i.i.i142, %for.cond.i.i.i.i144 ]
  call void @__udelay(i64 100) #9
  %89 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i146 = getelementptr i8, i8* %89, i64 116
  %90 = bitcast i8* %add.ptr.i.i.i146 to i32*
  %91 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %90) #10, !srcloc !2
  %tobool.i.i.i147 = icmp slt i32 %91, 0
  br i1 %tobool.i.i.i147, label %cond.true.i.i156, label %for.cond.i.i.i.i144

do.body.i.i.i.i152:                               ; preds = %for.cond.i.i.i.i144
  %msg_enable.i.i.i.i149 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %92 = load i32, i32* %msg_enable.i.i.i.i149, align 8
  %and.i.i.i.i150 = and i32 %92, 1
  %tobool4.i.i.i.i151 = icmp eq i32 %and.i.i.i.i150, 0
  br i1 %tobool4.i.i.i.i151, label %rtl_w0w1_eri.exit159, label %if.then5.i.i.i.i154

if.then5.i.i.i.i154:                              ; preds = %do.body.i.i.i.i152
  %dev.i.i.i.i153 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %93 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i153, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %93, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit159

cond.true.i.i156:                                 ; preds = %for.body.i.i.i.i148
  %add.ptr3.i.i155 = getelementptr i8, i8* %87, i64 112
  %94 = bitcast i8* %add.ptr3.i.i155 to i32*
  %95 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %94) #10, !srcloc !2
  %phitmp262 = or i32 %95, 16
  br label %rtl_w0w1_eri.exit159

rtl_w0w1_eri.exit159:                             ; preds = %do.body.i.i.i.i152, %if.then5.i.i.i.i154, %cond.true.i.i156
  %cond.i.i157 = phi i32 [ %phitmp262, %cond.true.i.i156 ], [ -1, %do.body.i.i.i.i152 ], [ -1, %if.then5.i.i.i.i154 ]
  %96 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i246 = getelementptr i8, i8* %96, i64 112
  %97 = bitcast i8* %add.ptr.i246 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i157, i32* %97) #10, !srcloc !8
  %add.ptr11.i247 = getelementptr i8, i8* %96, i64 116
  %98 = bitcast i8* %add.ptr11.i247 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479088, i32* %98) #10, !srcloc !8
  br label %for.body.i.i.i254

for.cond.i.i.i250:                                ; preds = %for.body.i.i.i254
  %inc.i.i.i248 = add nuw nsw i32 %i.017.i.i.i251, 1
  %cmp.i.i.i249 = icmp ult i32 %i.017.i.i.i251, 99
  br i1 %cmp.i.i.i249, label %for.body.i.i.i254, label %do.body.i.i.i258

for.body.i.i.i254:                                ; preds = %for.cond.i.i.i250, %rtl_w0w1_eri.exit159
  %i.017.i.i.i251 = phi i32 [ 0, %rtl_w0w1_eri.exit159 ], [ %inc.i.i.i248, %for.cond.i.i.i250 ]
  call void @__udelay(i64 100) #9
  %99 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i252 = getelementptr i8, i8* %99, i64 116
  %100 = bitcast i8* %add.ptr.i.i252 to i32*
  %101 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %100) #10, !srcloc !2
  %tobool.i.i253 = icmp slt i32 %101, 0
  br i1 %tobool.i.i253, label %for.cond.i.i.i250, label %rtl_eri_write.exit261

do.body.i.i.i258:                                 ; preds = %for.cond.i.i.i250
  %msg_enable.i.i.i255 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %102 = load i32, i32* %msg_enable.i.i.i255, align 8
  %and.i.i.i256 = and i32 %102, 1
  %tobool4.i.i.i257 = icmp eq i32 %and.i.i.i256, 0
  br i1 %tobool4.i.i.i257, label %rtl_eri_write.exit261, label %if.then5.i.i.i260

if.then5.i.i.i260:                                ; preds = %do.body.i.i.i258
  %dev.i.i.i259 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %103 = load %struct.net_device*, %struct.net_device** %dev.i.i.i259, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %103, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit261

rtl_eri_write.exit261:                            ; preds = %for.body.i.i.i254, %do.body.i.i.i258, %if.then5.i.i.i260
  %104 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i161 = getelementptr i8, i8* %104, i64 112
  %105 = bitcast i8* %add.ptr.i161 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 80, i32* %105) #10, !srcloc !8
  %add.ptr11.i162 = getelementptr i8, i8* %104, i64 116
  %106 = bitcast i8* %add.ptr11.i162 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147422004, i32* %106) #10, !srcloc !8
  br label %for.body.i.i.i169

for.cond.i.i.i165:                                ; preds = %for.body.i.i.i169
  %inc.i.i.i163 = add nuw nsw i32 %i.017.i.i.i166, 1
  %cmp.i.i.i164 = icmp ult i32 %i.017.i.i.i166, 99
  br i1 %cmp.i.i.i164, label %for.body.i.i.i169, label %do.body.i.i.i173

for.body.i.i.i169:                                ; preds = %for.cond.i.i.i165, %rtl_eri_write.exit261
  %i.017.i.i.i166 = phi i32 [ 0, %rtl_eri_write.exit261 ], [ %inc.i.i.i163, %for.cond.i.i.i165 ]
  call void @__udelay(i64 100) #9
  %107 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i167 = getelementptr i8, i8* %107, i64 116
  %108 = bitcast i8* %add.ptr.i.i167 to i32*
  %109 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %108) #10, !srcloc !2
  %tobool.i.i168 = icmp slt i32 %109, 0
  br i1 %tobool.i.i168, label %for.cond.i.i.i165, label %rtl_eri_write.exit176

do.body.i.i.i173:                                 ; preds = %for.cond.i.i.i165
  %msg_enable.i.i.i170 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %110 = load i32, i32* %msg_enable.i.i.i170, align 8
  %and.i.i.i171 = and i32 %110, 1
  %tobool4.i.i.i172 = icmp eq i32 %and.i.i.i171, 0
  br i1 %tobool4.i.i.i172, label %rtl_eri_write.exit176, label %if.then5.i.i.i175

if.then5.i.i.i175:                                ; preds = %do.body.i.i.i173
  %dev.i.i.i174 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %111 = load %struct.net_device*, %struct.net_device** %dev.i.i.i174, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %111, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit176

rtl_eri_write.exit176:                            ; preds = %for.body.i.i.i169, %do.body.i.i.i173, %if.then5.i.i.i175
  %112 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i178 = getelementptr i8, i8* %112, i64 112
  %113 = bitcast i8* %add.ptr.i178 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 96, i32* %113) #10, !srcloc !8
  %add.ptr11.i179 = getelementptr i8, i8* %112, i64 116
  %114 = bitcast i8* %add.ptr11.i179 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147422000, i32* %114) #10, !srcloc !8
  br label %for.body.i.i.i186

for.cond.i.i.i182:                                ; preds = %for.body.i.i.i186
  %inc.i.i.i180 = add nuw nsw i32 %i.017.i.i.i183, 1
  %cmp.i.i.i181 = icmp ult i32 %i.017.i.i.i183, 99
  br i1 %cmp.i.i.i181, label %for.body.i.i.i186, label %do.body.i.i.i190

for.body.i.i.i186:                                ; preds = %for.cond.i.i.i182, %rtl_eri_write.exit176
  %i.017.i.i.i183 = phi i32 [ 0, %rtl_eri_write.exit176 ], [ %inc.i.i.i180, %for.cond.i.i.i182 ]
  call void @__udelay(i64 100) #9
  %115 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i184 = getelementptr i8, i8* %115, i64 116
  %116 = bitcast i8* %add.ptr.i.i184 to i32*
  %117 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %116) #10, !srcloc !2
  %tobool.i.i185 = icmp slt i32 %117, 0
  br i1 %tobool.i.i185, label %for.cond.i.i.i182, label %rtl_eri_write.exit193

do.body.i.i.i190:                                 ; preds = %for.cond.i.i.i182
  %msg_enable.i.i.i187 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %118 = load i32, i32* %msg_enable.i.i.i187, align 8
  %and.i.i.i188 = and i32 %118, 1
  %tobool4.i.i.i189 = icmp eq i32 %and.i.i.i188, 0
  br i1 %tobool4.i.i.i189, label %rtl_eri_write.exit193, label %if.then5.i.i.i192

if.then5.i.i.i192:                                ; preds = %do.body.i.i.i190
  %dev.i.i.i191 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %119 = load %struct.net_device*, %struct.net_device** %dev.i.i.i191, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %119, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit193

rtl_eri_write.exit193:                            ; preds = %for.body.i.i.i186, %do.body.i.i.i190, %if.then5.i.i.i192
  %add.ptr = getelementptr i8, i8* %0, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 39, i8* %add.ptr) #10, !srcloc !5
  %call.i.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %1, i32 16, i16 zeroext 256, i16 zeroext 0) #9
  %add.ptr1 = getelementptr i8, i8* %0, i64 64
  %120 = bitcast i8* %add.ptr1 to i32*
  %121 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %120) #10, !srcloc !2
  %or = or i32 %121, 128
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or, i32* %120) #10, !srcloc !8
  %add.ptr3 = getelementptr i8, i8* %0, i64 211
  %122 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3) #10, !srcloc !6
  %123 = and i8 %122, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %123, i8* %add.ptr3) #10, !srcloc !5
  %add.ptr7 = getelementptr i8, i8* %0, i64 208
  %124 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr7) #10, !srcloc !6
  %125 = or i8 %124, 64
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %125, i8* %add.ptr7) #10, !srcloc !5
  %add.ptr13 = getelementptr i8, i8* %0, i64 240
  %126 = bitcast i8* %add.ptr13 to i32*
  %127 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %126) #10, !srcloc !2
  %or15 = or i32 %127, 4194304
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or15, i32* %126) #10, !srcloc !8
  %add.ptr17 = getelementptr i8, i8* %0, i64 86
  %128 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr17) #10, !srcloc !6
  %129 = and i8 %128, -9
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %129, i8* %add.ptr17) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_hw_start_8168g(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %1 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 64
  %2 = bitcast i8* %add.ptr to i32*
  %3 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %2) #10, !srcloc !2
  %or = or i32 %3, 128
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or, i32* %2) #10, !srcloc !8
  %4 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %4, i64 112
  %5 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 524290, i32* %5) #10, !srcloc !8
  %add.ptr11.i = getelementptr i8, i8* %4, i64 116
  %6 = bitcast i8* %add.ptr11.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147462968, i32* %6) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %entry
  %i.017.i.i.i = phi i32 [ 0, %entry ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %7 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %7, i64 116
  %8 = bitcast i8* %add.ptr.i.i to i32*
  %9 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %8) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %9, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %rtl_eri_write.exit

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %10 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %10, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %rtl_eri_write.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %11 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %11, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit

rtl_eri_write.exit:                               ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  %12 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i34 = getelementptr i8, i8* %12, i64 112
  %13 = bitcast i8* %add.ptr.i34 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 56, i32* %13) #10, !srcloc !8
  %add.ptr11.i35 = getelementptr i8, i8* %12, i64 116
  %14 = bitcast i8* %add.ptr11.i35 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479348, i32* %14) #10, !srcloc !8
  br label %for.body.i.i.i42

for.cond.i.i.i38:                                 ; preds = %for.body.i.i.i42
  %inc.i.i.i36 = add nuw nsw i32 %i.017.i.i.i39, 1
  %cmp.i.i.i37 = icmp ult i32 %i.017.i.i.i39, 99
  br i1 %cmp.i.i.i37, label %for.body.i.i.i42, label %do.body.i.i.i46

for.body.i.i.i42:                                 ; preds = %for.cond.i.i.i38, %rtl_eri_write.exit
  %i.017.i.i.i39 = phi i32 [ 0, %rtl_eri_write.exit ], [ %inc.i.i.i36, %for.cond.i.i.i38 ]
  call void @__udelay(i64 100) #9
  %15 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i40 = getelementptr i8, i8* %15, i64 116
  %16 = bitcast i8* %add.ptr.i.i40 to i32*
  %17 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %16) #10, !srcloc !2
  %tobool.i.i41 = icmp slt i32 %17, 0
  br i1 %tobool.i.i41, label %for.cond.i.i.i38, label %rtl_eri_write.exit49

do.body.i.i.i46:                                  ; preds = %for.cond.i.i.i38
  %msg_enable.i.i.i43 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %18 = load i32, i32* %msg_enable.i.i.i43, align 8
  %and.i.i.i44 = and i32 %18, 1
  %tobool4.i.i.i45 = icmp eq i32 %and.i.i.i44, 0
  br i1 %tobool4.i.i.i45, label %rtl_eri_write.exit49, label %if.then5.i.i.i48

if.then5.i.i.i48:                                 ; preds = %do.body.i.i.i46
  %dev.i.i.i47 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %19 = load %struct.net_device*, %struct.net_device** %dev.i.i.i47, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %19, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit49

rtl_eri_write.exit49:                             ; preds = %for.body.i.i.i42, %do.body.i.i.i46, %if.then5.i.i.i48
  %20 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i51 = getelementptr i8, i8* %20, i64 112
  %21 = bitcast i8* %add.ptr.i51 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 72, i32* %21) #10, !srcloc !8
  %add.ptr11.i52 = getelementptr i8, i8* %20, i64 116
  %22 = bitcast i8* %add.ptr11.i52 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479344, i32* %22) #10, !srcloc !8
  br label %for.body.i.i.i59

for.cond.i.i.i55:                                 ; preds = %for.body.i.i.i59
  %inc.i.i.i53 = add nuw nsw i32 %i.017.i.i.i56, 1
  %cmp.i.i.i54 = icmp ult i32 %i.017.i.i.i56, 99
  br i1 %cmp.i.i.i54, label %for.body.i.i.i59, label %do.body.i.i.i63

for.body.i.i.i59:                                 ; preds = %for.cond.i.i.i55, %rtl_eri_write.exit49
  %i.017.i.i.i56 = phi i32 [ 0, %rtl_eri_write.exit49 ], [ %inc.i.i.i53, %for.cond.i.i.i55 ]
  call void @__udelay(i64 100) #9
  %23 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i57 = getelementptr i8, i8* %23, i64 116
  %24 = bitcast i8* %add.ptr.i.i57 to i32*
  %25 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %24) #10, !srcloc !2
  %tobool.i.i58 = icmp slt i32 %25, 0
  br i1 %tobool.i.i58, label %for.cond.i.i.i55, label %rtl_eri_write.exit66

do.body.i.i.i63:                                  ; preds = %for.cond.i.i.i55
  %msg_enable.i.i.i60 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %26 = load i32, i32* %msg_enable.i.i.i60, align 8
  %and.i.i.i61 = and i32 %26, 1
  %tobool4.i.i.i62 = icmp eq i32 %and.i.i.i61, 0
  br i1 %tobool4.i.i.i62, label %rtl_eri_write.exit66, label %if.then5.i.i.i65

if.then5.i.i.i65:                                 ; preds = %do.body.i.i.i63
  %dev.i.i.i64 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %27 = load %struct.net_device*, %struct.net_device** %dev.i.i.i64, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %27, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit66

rtl_eri_write.exit66:                             ; preds = %for.body.i.i.i59, %do.body.i.i.i63, %if.then5.i.i.i65
  %28 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i68 = getelementptr i8, i8* %28, i64 112
  %29 = bitcast i8* %add.ptr.i68 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1048582, i32* %29) #10, !srcloc !8
  %add.ptr11.i69 = getelementptr i8, i8* %28, i64 116
  %30 = bitcast i8* %add.ptr11.i69 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421976, i32* %30) #10, !srcloc !8
  br label %for.body.i.i.i76

for.cond.i.i.i72:                                 ; preds = %for.body.i.i.i76
  %inc.i.i.i70 = add nuw nsw i32 %i.017.i.i.i73, 1
  %cmp.i.i.i71 = icmp ult i32 %i.017.i.i.i73, 99
  br i1 %cmp.i.i.i71, label %for.body.i.i.i76, label %do.body.i.i.i80

for.body.i.i.i76:                                 ; preds = %for.cond.i.i.i72, %rtl_eri_write.exit66
  %i.017.i.i.i73 = phi i32 [ 0, %rtl_eri_write.exit66 ], [ %inc.i.i.i70, %for.cond.i.i.i72 ]
  call void @__udelay(i64 100) #9
  %31 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i74 = getelementptr i8, i8* %31, i64 116
  %32 = bitcast i8* %add.ptr.i.i74 to i32*
  %33 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %32) #10, !srcloc !2
  %tobool.i.i75 = icmp slt i32 %33, 0
  br i1 %tobool.i.i75, label %for.cond.i.i.i72, label %rtl_eri_write.exit83

do.body.i.i.i80:                                  ; preds = %for.cond.i.i.i72
  %msg_enable.i.i.i77 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %34 = load i32, i32* %msg_enable.i.i.i77, align 8
  %and.i.i.i78 = and i32 %34, 1
  %tobool4.i.i.i79 = icmp eq i32 %and.i.i.i78, 0
  br i1 %tobool4.i.i.i79, label %rtl_eri_write.exit83, label %if.then5.i.i.i82

if.then5.i.i.i82:                                 ; preds = %do.body.i.i.i80
  %dev.i.i.i81 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %35 = load %struct.net_device*, %struct.net_device** %dev.i.i.i81, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %35, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit83

rtl_eri_write.exit83:                             ; preds = %for.body.i.i.i76, %do.body.i.i.i80, %if.then5.i.i.i82
  %read.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 1
  %36 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i.i, align 8
  %tobool.i.i.i = icmp eq i32 (%struct.rtl8169_private*, i32)* %36, null
  br i1 %tobool.i.i.i, label %rtl_csi_read.exit.i.i, label %cond.true.i.i.i

cond.true.i.i.i:                                  ; preds = %rtl_eri_write.exit83
  %call.i.i.i = call i32 %36(%struct.rtl8169_private* nonnull %tp, i32 1804) #9
  %phitmp.i.i = and i32 %call.i.i.i, 16777215
  %phitmp.i = or i32 %phitmp.i.i, 385875968
  br label %rtl_csi_read.exit.i.i

rtl_csi_read.exit.i.i:                            ; preds = %cond.true.i.i.i, %rtl_eri_write.exit83
  %cond.i.i.i = phi i32 [ %phitmp.i, %cond.true.i.i.i ], [ 402653183, %rtl_eri_write.exit83 ]
  %write.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 0
  %37 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i.i, align 8
  %tobool.i3.i.i = icmp eq void (%struct.rtl8169_private*, i32, i32)* %37, null
  br i1 %tobool.i3.i.i, label %rtl_csi_access_enable_1.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %rtl_csi_read.exit.i.i
  call void %37(%struct.rtl8169_private* nonnull %tp, i32 1804, i32 %cond.i.i.i) #9
  br label %rtl_csi_access_enable_1.exit

rtl_csi_access_enable_1.exit:                     ; preds = %rtl_csi_read.exit.i.i, %if.then.i.i.i
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %1, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  %38 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i84 = getelementptr i8, i8* %38, i64 116
  %39 = bitcast i8* %add.ptr.i.i84 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %39) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %rtl_csi_access_enable_1.exit
  %i.017.i.i.i.i = phi i32 [ 0, %rtl_csi_access_enable_1.exit ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %40 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %40, i64 116
  %41 = bitcast i8* %add.ptr.i.i.i to i32*
  %42 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %41) #10, !srcloc !2
  %tobool.i.i.i85 = icmp slt i32 %42, 0
  br i1 %tobool.i.i.i85, label %cond.true.i.i, label %for.cond.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %43 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %43, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_w0w1_eri.exit, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %dev.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %44 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %44, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit

cond.true.i.i:                                    ; preds = %for.body.i.i.i.i
  %add.ptr3.i.i = getelementptr i8, i8* %38, i64 112
  %45 = bitcast i8* %add.ptr3.i.i to i32*
  %46 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %45) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit

rtl_w0w1_eri.exit:                                ; preds = %do.body.i.i.i.i, %if.then5.i.i.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %46, %cond.true.i.i ], [ -1, %do.body.i.i.i.i ], [ -1, %if.then5.i.i.i.i ]
  %and.i = and i32 %cond.i.i, -2
  %47 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i200 = getelementptr i8, i8* %47, i64 112
  %48 = bitcast i8* %add.ptr.i200 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i, i32* %48) #10, !srcloc !8
  %add.ptr11.i201 = getelementptr i8, i8* %47, i64 116
  %49 = bitcast i8* %add.ptr11.i201 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %49) #10, !srcloc !8
  br label %for.body.i.i.i208

for.cond.i.i.i204:                                ; preds = %for.body.i.i.i208
  %inc.i.i.i202 = add nuw nsw i32 %i.017.i.i.i205, 1
  %cmp.i.i.i203 = icmp ult i32 %i.017.i.i.i205, 99
  br i1 %cmp.i.i.i203, label %for.body.i.i.i208, label %do.body.i.i.i212

for.body.i.i.i208:                                ; preds = %for.cond.i.i.i204, %rtl_w0w1_eri.exit
  %i.017.i.i.i205 = phi i32 [ 0, %rtl_w0w1_eri.exit ], [ %inc.i.i.i202, %for.cond.i.i.i204 ]
  call void @__udelay(i64 100) #9
  %50 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i206 = getelementptr i8, i8* %50, i64 116
  %51 = bitcast i8* %add.ptr.i.i206 to i32*
  %52 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %51) #10, !srcloc !2
  %tobool.i.i207 = icmp slt i32 %52, 0
  br i1 %tobool.i.i207, label %for.cond.i.i.i204, label %rtl_eri_write.exit215

do.body.i.i.i212:                                 ; preds = %for.cond.i.i.i204
  %msg_enable.i.i.i209 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %53 = load i32, i32* %msg_enable.i.i.i209, align 8
  %and.i.i.i210 = and i32 %53, 1
  %tobool4.i.i.i211 = icmp eq i32 %and.i.i.i210, 0
  br i1 %tobool4.i.i.i211, label %rtl_eri_write.exit215, label %if.then5.i.i.i214

if.then5.i.i.i214:                                ; preds = %do.body.i.i.i212
  %dev.i.i.i213 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %54 = load %struct.net_device*, %struct.net_device** %dev.i.i.i213, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %54, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit215

rtl_eri_write.exit215:                            ; preds = %for.body.i.i.i208, %do.body.i.i.i212, %if.then5.i.i.i214
  %55 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i87 = getelementptr i8, i8* %55, i64 116
  %56 = bitcast i8* %add.ptr.i.i87 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %56) #10, !srcloc !8
  br label %for.body.i.i.i.i94

for.cond.i.i.i.i90:                               ; preds = %for.body.i.i.i.i94
  %inc.i.i.i.i88 = add nuw nsw i32 %i.017.i.i.i.i91, 1
  %cmp.i.i.i.i89 = icmp ult i32 %i.017.i.i.i.i91, 99
  br i1 %cmp.i.i.i.i89, label %for.body.i.i.i.i94, label %do.body.i.i.i.i98

for.body.i.i.i.i94:                               ; preds = %for.cond.i.i.i.i90, %rtl_eri_write.exit215
  %i.017.i.i.i.i91 = phi i32 [ 0, %rtl_eri_write.exit215 ], [ %inc.i.i.i.i88, %for.cond.i.i.i.i90 ]
  call void @__udelay(i64 100) #9
  %57 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i92 = getelementptr i8, i8* %57, i64 116
  %58 = bitcast i8* %add.ptr.i.i.i92 to i32*
  %59 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %58) #10, !srcloc !2
  %tobool.i.i.i93 = icmp slt i32 %59, 0
  br i1 %tobool.i.i.i93, label %cond.true.i.i102, label %for.cond.i.i.i.i90

do.body.i.i.i.i98:                                ; preds = %for.cond.i.i.i.i90
  %msg_enable.i.i.i.i95 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %60 = load i32, i32* %msg_enable.i.i.i.i95, align 8
  %and.i.i.i.i96 = and i32 %60, 1
  %tobool4.i.i.i.i97 = icmp eq i32 %and.i.i.i.i96, 0
  br i1 %tobool4.i.i.i.i97, label %rtl_w0w1_eri.exit104, label %if.then5.i.i.i.i100

if.then5.i.i.i.i100:                              ; preds = %do.body.i.i.i.i98
  %dev.i.i.i.i99 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %61 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i99, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %61, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit104

cond.true.i.i102:                                 ; preds = %for.body.i.i.i.i94
  %add.ptr3.i.i101 = getelementptr i8, i8* %55, i64 112
  %62 = bitcast i8* %add.ptr3.i.i101 to i32*
  %63 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %62) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit104

rtl_w0w1_eri.exit104:                             ; preds = %do.body.i.i.i.i98, %if.then5.i.i.i.i100, %cond.true.i.i102
  %cond.i.i103 = phi i32 [ %63, %cond.true.i.i102 ], [ -1, %do.body.i.i.i.i98 ], [ -1, %if.then5.i.i.i.i100 ]
  %or.i = or i32 %cond.i.i103, 1
  %64 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i217 = getelementptr i8, i8* %64, i64 112
  %65 = bitcast i8* %add.ptr.i217 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i, i32* %65) #10, !srcloc !8
  %add.ptr11.i218 = getelementptr i8, i8* %64, i64 116
  %66 = bitcast i8* %add.ptr11.i218 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %66) #10, !srcloc !8
  br label %for.body.i.i.i225

for.cond.i.i.i221:                                ; preds = %for.body.i.i.i225
  %inc.i.i.i219 = add nuw nsw i32 %i.017.i.i.i222, 1
  %cmp.i.i.i220 = icmp ult i32 %i.017.i.i.i222, 99
  br i1 %cmp.i.i.i220, label %for.body.i.i.i225, label %do.body.i.i.i229

for.body.i.i.i225:                                ; preds = %for.cond.i.i.i221, %rtl_w0w1_eri.exit104
  %i.017.i.i.i222 = phi i32 [ 0, %rtl_w0w1_eri.exit104 ], [ %inc.i.i.i219, %for.cond.i.i.i221 ]
  call void @__udelay(i64 100) #9
  %67 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i223 = getelementptr i8, i8* %67, i64 116
  %68 = bitcast i8* %add.ptr.i.i223 to i32*
  %69 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %68) #10, !srcloc !2
  %tobool.i.i224 = icmp slt i32 %69, 0
  br i1 %tobool.i.i224, label %for.cond.i.i.i221, label %rtl_eri_write.exit232

do.body.i.i.i229:                                 ; preds = %for.cond.i.i.i221
  %msg_enable.i.i.i226 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %70 = load i32, i32* %msg_enable.i.i.i226, align 8
  %and.i.i.i227 = and i32 %70, 1
  %tobool4.i.i.i228 = icmp eq i32 %and.i.i.i227, 0
  br i1 %tobool4.i.i.i228, label %rtl_eri_write.exit232, label %if.then5.i.i.i231

if.then5.i.i.i231:                                ; preds = %do.body.i.i.i229
  %dev.i.i.i230 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %71 = load %struct.net_device*, %struct.net_device** %dev.i.i.i230, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %71, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit232

rtl_eri_write.exit232:                            ; preds = %for.body.i.i.i225, %do.body.i.i.i229, %if.then5.i.i.i231
  %72 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i106 = getelementptr i8, i8* %72, i64 112
  %73 = bitcast i8* %add.ptr.i106 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 7567, i32* %73) #10, !srcloc !8
  %add.ptr11.i107 = getelementptr i8, i8* %72, i64 116
  %74 = bitcast i8* %add.ptr11.i107 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147470600, i32* %74) #10, !srcloc !8
  br label %for.body.i.i.i114

for.cond.i.i.i110:                                ; preds = %for.body.i.i.i114
  %inc.i.i.i108 = add nuw nsw i32 %i.017.i.i.i111, 1
  %cmp.i.i.i109 = icmp ult i32 %i.017.i.i.i111, 99
  br i1 %cmp.i.i.i109, label %for.body.i.i.i114, label %do.body.i.i.i118

for.body.i.i.i114:                                ; preds = %for.cond.i.i.i110, %rtl_eri_write.exit232
  %i.017.i.i.i111 = phi i32 [ 0, %rtl_eri_write.exit232 ], [ %inc.i.i.i108, %for.cond.i.i.i110 ]
  call void @__udelay(i64 100) #9
  %75 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i112 = getelementptr i8, i8* %75, i64 116
  %76 = bitcast i8* %add.ptr.i.i112 to i32*
  %77 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %76) #10, !srcloc !2
  %tobool.i.i113 = icmp slt i32 %77, 0
  br i1 %tobool.i.i113, label %for.cond.i.i.i110, label %rtl_eri_write.exit121

do.body.i.i.i118:                                 ; preds = %for.cond.i.i.i110
  %msg_enable.i.i.i115 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %78 = load i32, i32* %msg_enable.i.i.i115, align 8
  %and.i.i.i116 = and i32 %78, 1
  %tobool4.i.i.i117 = icmp eq i32 %and.i.i.i116, 0
  br i1 %tobool4.i.i.i117, label %rtl_eri_write.exit121, label %if.then5.i.i.i120

if.then5.i.i.i120:                                ; preds = %do.body.i.i.i118
  %dev.i.i.i119 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %79 = load %struct.net_device*, %struct.net_device** %dev.i.i.i119, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %79, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit121

rtl_eri_write.exit121:                            ; preds = %for.body.i.i.i114, %do.body.i.i.i118, %if.then5.i.i.i120
  %add.ptr2 = getelementptr i8, i8* %0, i64 240
  %80 = bitcast i8* %add.ptr2 to i32*
  %81 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %80) #10, !srcloc !2
  %and = and i32 %81, -524289
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and, i32* %80) #10, !srcloc !8
  %add.ptr5 = getelementptr i8, i8* %0, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 39, i8* %add.ptr5) #10, !srcloc !5
  %82 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i123 = getelementptr i8, i8* %82, i64 112
  %83 = bitcast i8* %add.ptr.i123 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %83) #10, !srcloc !8
  %add.ptr11.i124 = getelementptr i8, i8* %82, i64 116
  %84 = bitcast i8* %add.ptr11.i124 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471168, i32* %84) #10, !srcloc !8
  br label %for.body.i.i.i131

for.cond.i.i.i127:                                ; preds = %for.body.i.i.i131
  %inc.i.i.i125 = add nuw nsw i32 %i.017.i.i.i128, 1
  %cmp.i.i.i126 = icmp ult i32 %i.017.i.i.i128, 99
  br i1 %cmp.i.i.i126, label %for.body.i.i.i131, label %do.body.i.i.i135

for.body.i.i.i131:                                ; preds = %for.cond.i.i.i127, %rtl_eri_write.exit121
  %i.017.i.i.i128 = phi i32 [ 0, %rtl_eri_write.exit121 ], [ %inc.i.i.i125, %for.cond.i.i.i127 ]
  call void @__udelay(i64 100) #9
  %85 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i129 = getelementptr i8, i8* %85, i64 116
  %86 = bitcast i8* %add.ptr.i.i129 to i32*
  %87 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %86) #10, !srcloc !2
  %tobool.i.i130 = icmp slt i32 %87, 0
  br i1 %tobool.i.i130, label %for.cond.i.i.i127, label %rtl_eri_write.exit138

do.body.i.i.i135:                                 ; preds = %for.cond.i.i.i127
  %msg_enable.i.i.i132 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %88 = load i32, i32* %msg_enable.i.i.i132, align 8
  %and.i.i.i133 = and i32 %88, 1
  %tobool4.i.i.i134 = icmp eq i32 %and.i.i.i133, 0
  br i1 %tobool4.i.i.i134, label %rtl_eri_write.exit138, label %if.then5.i.i.i137

if.then5.i.i.i137:                                ; preds = %do.body.i.i.i135
  %dev.i.i.i136 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %89 = load %struct.net_device*, %struct.net_device** %dev.i.i.i136, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %89, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit138

rtl_eri_write.exit138:                            ; preds = %for.body.i.i.i131, %do.body.i.i.i135, %if.then5.i.i.i137
  %90 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i140 = getelementptr i8, i8* %90, i64 112
  %91 = bitcast i8* %add.ptr.i140 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %91) #10, !srcloc !8
  %add.ptr11.i141 = getelementptr i8, i8* %90, i64 116
  %92 = bitcast i8* %add.ptr11.i141 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471176, i32* %92) #10, !srcloc !8
  br label %for.body.i.i.i148

for.cond.i.i.i144:                                ; preds = %for.body.i.i.i148
  %inc.i.i.i142 = add nuw nsw i32 %i.017.i.i.i145, 1
  %cmp.i.i.i143 = icmp ult i32 %i.017.i.i.i145, 99
  br i1 %cmp.i.i.i143, label %for.body.i.i.i148, label %do.body.i.i.i152

for.body.i.i.i148:                                ; preds = %for.cond.i.i.i144, %rtl_eri_write.exit138
  %i.017.i.i.i145 = phi i32 [ 0, %rtl_eri_write.exit138 ], [ %inc.i.i.i142, %for.cond.i.i.i144 ]
  call void @__udelay(i64 100) #9
  %93 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i146 = getelementptr i8, i8* %93, i64 116
  %94 = bitcast i8* %add.ptr.i.i146 to i32*
  %95 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %94) #10, !srcloc !2
  %tobool.i.i147 = icmp slt i32 %95, 0
  br i1 %tobool.i.i147, label %for.cond.i.i.i144, label %rtl_eri_write.exit155

do.body.i.i.i152:                                 ; preds = %for.cond.i.i.i144
  %msg_enable.i.i.i149 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %96 = load i32, i32* %msg_enable.i.i.i149, align 8
  %and.i.i.i150 = and i32 %96, 1
  %tobool4.i.i.i151 = icmp eq i32 %and.i.i.i150, 0
  br i1 %tobool4.i.i.i151, label %rtl_eri_write.exit155, label %if.then5.i.i.i154

if.then5.i.i.i154:                                ; preds = %do.body.i.i.i152
  %dev.i.i.i153 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %97 = load %struct.net_device*, %struct.net_device** %dev.i.i.i153, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %97, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit155

rtl_eri_write.exit155:                            ; preds = %for.body.i.i.i148, %do.body.i.i.i152, %if.then5.i.i.i154
  %add.ptr6 = getelementptr i8, i8* %0, i64 27
  %98 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr6) #10, !srcloc !6
  %99 = and i8 %98, -8
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %99, i8* %add.ptr6) #10, !srcloc !5
  %100 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i157 = getelementptr i8, i8* %100, i64 116
  %101 = bitcast i8* %add.ptr.i.i157 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 62204, i32* %101) #10, !srcloc !8
  br label %for.body.i.i.i.i164

for.cond.i.i.i.i160:                              ; preds = %for.body.i.i.i.i164
  %inc.i.i.i.i158 = add nuw nsw i32 %i.017.i.i.i.i161, 1
  %cmp.i.i.i.i159 = icmp ult i32 %i.017.i.i.i.i161, 99
  br i1 %cmp.i.i.i.i159, label %for.body.i.i.i.i164, label %do.body.i.i.i.i168

for.body.i.i.i.i164:                              ; preds = %for.cond.i.i.i.i160, %rtl_eri_write.exit155
  %i.017.i.i.i.i161 = phi i32 [ 0, %rtl_eri_write.exit155 ], [ %inc.i.i.i.i158, %for.cond.i.i.i.i160 ]
  call void @__udelay(i64 100) #9
  %102 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i162 = getelementptr i8, i8* %102, i64 116
  %103 = bitcast i8* %add.ptr.i.i.i162 to i32*
  %104 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %103) #10, !srcloc !2
  %tobool.i.i.i163 = icmp slt i32 %104, 0
  br i1 %tobool.i.i.i163, label %cond.true.i.i172, label %for.cond.i.i.i.i160

do.body.i.i.i.i168:                               ; preds = %for.cond.i.i.i.i160
  %msg_enable.i.i.i.i165 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %105 = load i32, i32* %msg_enable.i.i.i.i165, align 8
  %and.i.i.i.i166 = and i32 %105, 1
  %tobool4.i.i.i.i167 = icmp eq i32 %and.i.i.i.i166, 0
  br i1 %tobool4.i.i.i.i167, label %rtl_w0w1_eri.exit176, label %if.then5.i.i.i.i170

if.then5.i.i.i.i170:                              ; preds = %do.body.i.i.i.i168
  %dev.i.i.i.i169 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %106 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i169, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %106, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit176

cond.true.i.i172:                                 ; preds = %for.body.i.i.i.i164
  %add.ptr3.i.i171 = getelementptr i8, i8* %100, i64 112
  %107 = bitcast i8* %add.ptr3.i.i171 to i32*
  %108 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %107) #10, !srcloc !2
  %phitmp = and i32 %108, -8
  %phitmp267 = or i32 %phitmp, 1
  br label %rtl_w0w1_eri.exit176

rtl_w0w1_eri.exit176:                             ; preds = %do.body.i.i.i.i168, %if.then5.i.i.i.i170, %cond.true.i.i172
  %cond.i.i173 = phi i32 [ %phitmp267, %cond.true.i.i172 ], [ -7, %do.body.i.i.i.i168 ], [ -7, %if.then5.i.i.i.i170 ]
  %109 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i234 = getelementptr i8, i8* %109, i64 112
  %110 = bitcast i8* %add.ptr.i234 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i173, i32* %110) #10, !srcloc !8
  %add.ptr11.i235 = getelementptr i8, i8* %109, i64 116
  %111 = bitcast i8* %add.ptr11.i235 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147478788, i32* %111) #10, !srcloc !8
  br label %for.body.i.i.i242

for.cond.i.i.i238:                                ; preds = %for.body.i.i.i242
  %inc.i.i.i236 = add nuw nsw i32 %i.017.i.i.i239, 1
  %cmp.i.i.i237 = icmp ult i32 %i.017.i.i.i239, 99
  br i1 %cmp.i.i.i237, label %for.body.i.i.i242, label %do.body.i.i.i246

for.body.i.i.i242:                                ; preds = %for.cond.i.i.i238, %rtl_w0w1_eri.exit176
  %i.017.i.i.i239 = phi i32 [ 0, %rtl_w0w1_eri.exit176 ], [ %inc.i.i.i236, %for.cond.i.i.i238 ]
  call void @__udelay(i64 100) #9
  %112 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i240 = getelementptr i8, i8* %112, i64 116
  %113 = bitcast i8* %add.ptr.i.i240 to i32*
  %114 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %113) #10, !srcloc !2
  %tobool.i.i241 = icmp slt i32 %114, 0
  br i1 %tobool.i.i241, label %for.cond.i.i.i238, label %rtl_eri_write.exit249

do.body.i.i.i246:                                 ; preds = %for.cond.i.i.i238
  %msg_enable.i.i.i243 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %115 = load i32, i32* %msg_enable.i.i.i243, align 8
  %and.i.i.i244 = and i32 %115, 1
  %tobool4.i.i.i245 = icmp eq i32 %and.i.i.i244, 0
  br i1 %tobool4.i.i.i245, label %rtl_eri_write.exit249, label %if.then5.i.i.i248

if.then5.i.i.i248:                                ; preds = %do.body.i.i.i246
  %dev.i.i.i247 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %116 = load %struct.net_device*, %struct.net_device** %dev.i.i.i247, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %116, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit249

rtl_eri_write.exit249:                            ; preds = %for.body.i.i.i242, %do.body.i.i.i246, %if.then5.i.i.i248
  %117 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i178 = getelementptr i8, i8* %117, i64 116
  %118 = bitcast i8* %add.ptr.i.i178 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61872, i32* %118) #10, !srcloc !8
  br label %for.body.i.i.i.i185

for.cond.i.i.i.i181:                              ; preds = %for.body.i.i.i.i185
  %inc.i.i.i.i179 = add nuw nsw i32 %i.017.i.i.i.i182, 1
  %cmp.i.i.i.i180 = icmp ult i32 %i.017.i.i.i.i182, 99
  br i1 %cmp.i.i.i.i180, label %for.body.i.i.i.i185, label %do.body.i.i.i.i189

for.body.i.i.i.i185:                              ; preds = %for.cond.i.i.i.i181, %rtl_eri_write.exit249
  %i.017.i.i.i.i182 = phi i32 [ 0, %rtl_eri_write.exit249 ], [ %inc.i.i.i.i179, %for.cond.i.i.i.i181 ]
  call void @__udelay(i64 100) #9
  %119 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i183 = getelementptr i8, i8* %119, i64 116
  %120 = bitcast i8* %add.ptr.i.i.i183 to i32*
  %121 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %120) #10, !srcloc !2
  %tobool.i.i.i184 = icmp slt i32 %121, 0
  br i1 %tobool.i.i.i184, label %cond.true.i.i193, label %for.cond.i.i.i.i181

do.body.i.i.i.i189:                               ; preds = %for.cond.i.i.i.i181
  %msg_enable.i.i.i.i186 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %122 = load i32, i32* %msg_enable.i.i.i.i186, align 8
  %and.i.i.i.i187 = and i32 %122, 1
  %tobool4.i.i.i.i188 = icmp eq i32 %and.i.i.i.i187, 0
  br i1 %tobool4.i.i.i.i188, label %rtl_w0w1_eri.exit196, label %if.then5.i.i.i.i191

if.then5.i.i.i.i191:                              ; preds = %do.body.i.i.i.i189
  %dev.i.i.i.i190 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %123 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i190, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %123, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit196

cond.true.i.i193:                                 ; preds = %for.body.i.i.i.i185
  %add.ptr3.i.i192 = getelementptr i8, i8* %117, i64 112
  %124 = bitcast i8* %add.ptr3.i.i192 to i32*
  %125 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %124) #10, !srcloc !2
  %phitmp268 = and i32 %125, -4097
  br label %rtl_w0w1_eri.exit196

rtl_w0w1_eri.exit196:                             ; preds = %do.body.i.i.i.i189, %if.then5.i.i.i.i191, %cond.true.i.i193
  %cond.i.i194 = phi i32 [ %phitmp268, %cond.true.i.i193 ], [ -4097, %do.body.i.i.i.i189 ], [ -4097, %if.then5.i.i.i.i191 ]
  %126 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i251 = getelementptr i8, i8* %126, i64 112
  %127 = bitcast i8* %add.ptr.i251 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i194, i32* %127) #10, !srcloc !8
  %add.ptr11.i252 = getelementptr i8, i8* %126, i64 116
  %128 = bitcast i8* %add.ptr11.i252 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147470928, i32* %128) #10, !srcloc !8
  br label %for.body.i.i.i259

for.cond.i.i.i255:                                ; preds = %for.body.i.i.i259
  %inc.i.i.i253 = add nuw nsw i32 %i.017.i.i.i256, 1
  %cmp.i.i.i254 = icmp ult i32 %i.017.i.i.i256, 99
  br i1 %cmp.i.i.i254, label %for.body.i.i.i259, label %do.body.i.i.i263

for.body.i.i.i259:                                ; preds = %for.cond.i.i.i255, %rtl_w0w1_eri.exit196
  %i.017.i.i.i256 = phi i32 [ 0, %rtl_w0w1_eri.exit196 ], [ %inc.i.i.i253, %for.cond.i.i.i255 ]
  call void @__udelay(i64 100) #9
  %129 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i257 = getelementptr i8, i8* %129, i64 116
  %130 = bitcast i8* %add.ptr.i.i257 to i32*
  %131 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %130) #10, !srcloc !2
  %tobool.i.i258 = icmp slt i32 %131, 0
  br i1 %tobool.i.i258, label %for.cond.i.i.i255, label %rtl_eri_write.exit266

do.body.i.i.i263:                                 ; preds = %for.cond.i.i.i255
  %msg_enable.i.i.i260 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %132 = load i32, i32* %msg_enable.i.i.i260, align 8
  %and.i.i.i261 = and i32 %132, 1
  %tobool4.i.i.i262 = icmp eq i32 %and.i.i.i261, 0
  br i1 %tobool4.i.i.i262, label %rtl_eri_write.exit266, label %if.then5.i.i.i265

if.then5.i.i.i265:                                ; preds = %do.body.i.i.i263
  %dev.i.i.i264 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %133 = load %struct.net_device*, %struct.net_device** %dev.i.i.i264, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %133, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit266

rtl_eri_write.exit266:                            ; preds = %for.body.i.i.i259, %do.body.i.i.i263, %if.then5.i.i.i265
  %134 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i198 = getelementptr i8, i8* %134, i64 84
  %135 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i198) #10, !srcloc !6
  %136 = and i8 %135, -3
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %136, i8* %add.ptr.i198) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_hw_start_8168ep(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %1 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  call fastcc void @rtl8168ep_stop_cmac(%struct.rtl8169_private* %tp) #11
  %add.ptr = getelementptr i8, i8* %0, i64 64
  %2 = bitcast i8* %add.ptr to i32*
  %3 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %2) #10, !srcloc !2
  %or = or i32 %3, 128
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or, i32* %2) #10, !srcloc !8
  %4 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %4, i64 112
  %5 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 524290, i32* %5) #10, !srcloc !8
  %add.ptr11.i = getelementptr i8, i8* %4, i64 116
  %6 = bitcast i8* %add.ptr11.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147462968, i32* %6) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %entry
  %i.017.i.i.i = phi i32 [ 0, %entry ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %7 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %7, i64 116
  %8 = bitcast i8* %add.ptr.i.i to i32*
  %9 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %8) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %9, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %rtl_eri_write.exit

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %10 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %10, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %rtl_eri_write.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %11 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %11, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit

rtl_eri_write.exit:                               ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  %12 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i43 = getelementptr i8, i8* %12, i64 112
  %13 = bitcast i8* %add.ptr.i43 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 47, i32* %13) #10, !srcloc !8
  %add.ptr11.i44 = getelementptr i8, i8* %12, i64 116
  %14 = bitcast i8* %add.ptr11.i44 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479348, i32* %14) #10, !srcloc !8
  br label %for.body.i.i.i51

for.cond.i.i.i47:                                 ; preds = %for.body.i.i.i51
  %inc.i.i.i45 = add nuw nsw i32 %i.017.i.i.i48, 1
  %cmp.i.i.i46 = icmp ult i32 %i.017.i.i.i48, 99
  br i1 %cmp.i.i.i46, label %for.body.i.i.i51, label %do.body.i.i.i55

for.body.i.i.i51:                                 ; preds = %for.cond.i.i.i47, %rtl_eri_write.exit
  %i.017.i.i.i48 = phi i32 [ 0, %rtl_eri_write.exit ], [ %inc.i.i.i45, %for.cond.i.i.i47 ]
  call void @__udelay(i64 100) #9
  %15 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i49 = getelementptr i8, i8* %15, i64 116
  %16 = bitcast i8* %add.ptr.i.i49 to i32*
  %17 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %16) #10, !srcloc !2
  %tobool.i.i50 = icmp slt i32 %17, 0
  br i1 %tobool.i.i50, label %for.cond.i.i.i47, label %rtl_eri_write.exit58

do.body.i.i.i55:                                  ; preds = %for.cond.i.i.i47
  %msg_enable.i.i.i52 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %18 = load i32, i32* %msg_enable.i.i.i52, align 8
  %and.i.i.i53 = and i32 %18, 1
  %tobool4.i.i.i54 = icmp eq i32 %and.i.i.i53, 0
  br i1 %tobool4.i.i.i54, label %rtl_eri_write.exit58, label %if.then5.i.i.i57

if.then5.i.i.i57:                                 ; preds = %do.body.i.i.i55
  %dev.i.i.i56 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %19 = load %struct.net_device*, %struct.net_device** %dev.i.i.i56, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %19, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit58

rtl_eri_write.exit58:                             ; preds = %for.body.i.i.i51, %do.body.i.i.i55, %if.then5.i.i.i57
  %20 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i60 = getelementptr i8, i8* %20, i64 112
  %21 = bitcast i8* %add.ptr.i60 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 95, i32* %21) #10, !srcloc !8
  %add.ptr11.i61 = getelementptr i8, i8* %20, i64 116
  %22 = bitcast i8* %add.ptr11.i61 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479344, i32* %22) #10, !srcloc !8
  br label %for.body.i.i.i68

for.cond.i.i.i64:                                 ; preds = %for.body.i.i.i68
  %inc.i.i.i62 = add nuw nsw i32 %i.017.i.i.i65, 1
  %cmp.i.i.i63 = icmp ult i32 %i.017.i.i.i65, 99
  br i1 %cmp.i.i.i63, label %for.body.i.i.i68, label %do.body.i.i.i72

for.body.i.i.i68:                                 ; preds = %for.cond.i.i.i64, %rtl_eri_write.exit58
  %i.017.i.i.i65 = phi i32 [ 0, %rtl_eri_write.exit58 ], [ %inc.i.i.i62, %for.cond.i.i.i64 ]
  call void @__udelay(i64 100) #9
  %23 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i66 = getelementptr i8, i8* %23, i64 116
  %24 = bitcast i8* %add.ptr.i.i66 to i32*
  %25 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %24) #10, !srcloc !2
  %tobool.i.i67 = icmp slt i32 %25, 0
  br i1 %tobool.i.i67, label %for.cond.i.i.i64, label %rtl_eri_write.exit75

do.body.i.i.i72:                                  ; preds = %for.cond.i.i.i64
  %msg_enable.i.i.i69 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %26 = load i32, i32* %msg_enable.i.i.i69, align 8
  %and.i.i.i70 = and i32 %26, 1
  %tobool4.i.i.i71 = icmp eq i32 %and.i.i.i70, 0
  br i1 %tobool4.i.i.i71, label %rtl_eri_write.exit75, label %if.then5.i.i.i74

if.then5.i.i.i74:                                 ; preds = %do.body.i.i.i72
  %dev.i.i.i73 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %27 = load %struct.net_device*, %struct.net_device** %dev.i.i.i73, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %27, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit75

rtl_eri_write.exit75:                             ; preds = %for.body.i.i.i68, %do.body.i.i.i72, %if.then5.i.i.i74
  %28 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i77 = getelementptr i8, i8* %28, i64 112
  %29 = bitcast i8* %add.ptr.i77 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1048582, i32* %29) #10, !srcloc !8
  %add.ptr11.i78 = getelementptr i8, i8* %28, i64 116
  %30 = bitcast i8* %add.ptr11.i78 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421976, i32* %30) #10, !srcloc !8
  br label %for.body.i.i.i85

for.cond.i.i.i81:                                 ; preds = %for.body.i.i.i85
  %inc.i.i.i79 = add nuw nsw i32 %i.017.i.i.i82, 1
  %cmp.i.i.i80 = icmp ult i32 %i.017.i.i.i82, 99
  br i1 %cmp.i.i.i80, label %for.body.i.i.i85, label %do.body.i.i.i89

for.body.i.i.i85:                                 ; preds = %for.cond.i.i.i81, %rtl_eri_write.exit75
  %i.017.i.i.i82 = phi i32 [ 0, %rtl_eri_write.exit75 ], [ %inc.i.i.i79, %for.cond.i.i.i81 ]
  call void @__udelay(i64 100) #9
  %31 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i83 = getelementptr i8, i8* %31, i64 116
  %32 = bitcast i8* %add.ptr.i.i83 to i32*
  %33 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %32) #10, !srcloc !2
  %tobool.i.i84 = icmp slt i32 %33, 0
  br i1 %tobool.i.i84, label %for.cond.i.i.i81, label %rtl_eri_write.exit92

do.body.i.i.i89:                                  ; preds = %for.cond.i.i.i81
  %msg_enable.i.i.i86 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %34 = load i32, i32* %msg_enable.i.i.i86, align 8
  %and.i.i.i87 = and i32 %34, 1
  %tobool4.i.i.i88 = icmp eq i32 %and.i.i.i87, 0
  br i1 %tobool4.i.i.i88, label %rtl_eri_write.exit92, label %if.then5.i.i.i91

if.then5.i.i.i91:                                 ; preds = %do.body.i.i.i89
  %dev.i.i.i90 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %35 = load %struct.net_device*, %struct.net_device** %dev.i.i.i90, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %35, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit92

rtl_eri_write.exit92:                             ; preds = %for.body.i.i.i85, %do.body.i.i.i89, %if.then5.i.i.i91
  %read.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 1
  %36 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i.i, align 8
  %tobool.i.i.i = icmp eq i32 (%struct.rtl8169_private*, i32)* %36, null
  br i1 %tobool.i.i.i, label %rtl_csi_read.exit.i.i, label %cond.true.i.i.i

cond.true.i.i.i:                                  ; preds = %rtl_eri_write.exit92
  %call.i.i.i = call i32 %36(%struct.rtl8169_private* nonnull %tp, i32 1804) #9
  %phitmp.i.i = and i32 %call.i.i.i, 16777215
  %phitmp.i = or i32 %phitmp.i.i, 385875968
  br label %rtl_csi_read.exit.i.i

rtl_csi_read.exit.i.i:                            ; preds = %cond.true.i.i.i, %rtl_eri_write.exit92
  %cond.i.i.i = phi i32 [ %phitmp.i, %cond.true.i.i.i ], [ 402653183, %rtl_eri_write.exit92 ]
  %write.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 24, i32 0
  %37 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i.i, align 8
  %tobool.i3.i.i = icmp eq void (%struct.rtl8169_private*, i32, i32)* %37, null
  br i1 %tobool.i3.i.i, label %rtl_csi_access_enable_1.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %rtl_csi_read.exit.i.i
  call void %37(%struct.rtl8169_private* nonnull %tp, i32 1804, i32 %cond.i.i.i) #9
  br label %rtl_csi_access_enable_1.exit

rtl_csi_access_enable_1.exit:                     ; preds = %rtl_csi_read.exit.i.i, %if.then.i.i.i
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %1, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  %38 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i93 = getelementptr i8, i8* %38, i64 116
  %39 = bitcast i8* %add.ptr.i.i93 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %39) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %rtl_csi_access_enable_1.exit
  %i.017.i.i.i.i = phi i32 [ 0, %rtl_csi_access_enable_1.exit ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %40 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %40, i64 116
  %41 = bitcast i8* %add.ptr.i.i.i to i32*
  %42 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %41) #10, !srcloc !2
  %tobool.i.i.i94 = icmp slt i32 %42, 0
  br i1 %tobool.i.i.i94, label %cond.true.i.i, label %for.cond.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %43 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %43, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_w0w1_eri.exit, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %dev.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %44 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %44, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit

cond.true.i.i:                                    ; preds = %for.body.i.i.i.i
  %add.ptr3.i.i = getelementptr i8, i8* %38, i64 112
  %45 = bitcast i8* %add.ptr3.i.i to i32*
  %46 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %45) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit

rtl_w0w1_eri.exit:                                ; preds = %do.body.i.i.i.i, %if.then5.i.i.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %46, %cond.true.i.i ], [ -1, %do.body.i.i.i.i ], [ -1, %if.then5.i.i.i.i ]
  %and.i = and i32 %cond.i.i, -2
  %47 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i209 = getelementptr i8, i8* %47, i64 112
  %48 = bitcast i8* %add.ptr.i209 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i, i32* %48) #10, !srcloc !8
  %add.ptr11.i210 = getelementptr i8, i8* %47, i64 116
  %49 = bitcast i8* %add.ptr11.i210 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %49) #10, !srcloc !8
  br label %for.body.i.i.i217

for.cond.i.i.i213:                                ; preds = %for.body.i.i.i217
  %inc.i.i.i211 = add nuw nsw i32 %i.017.i.i.i214, 1
  %cmp.i.i.i212 = icmp ult i32 %i.017.i.i.i214, 99
  br i1 %cmp.i.i.i212, label %for.body.i.i.i217, label %do.body.i.i.i221

for.body.i.i.i217:                                ; preds = %for.cond.i.i.i213, %rtl_w0w1_eri.exit
  %i.017.i.i.i214 = phi i32 [ 0, %rtl_w0w1_eri.exit ], [ %inc.i.i.i211, %for.cond.i.i.i213 ]
  call void @__udelay(i64 100) #9
  %50 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i215 = getelementptr i8, i8* %50, i64 116
  %51 = bitcast i8* %add.ptr.i.i215 to i32*
  %52 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %51) #10, !srcloc !2
  %tobool.i.i216 = icmp slt i32 %52, 0
  br i1 %tobool.i.i216, label %for.cond.i.i.i213, label %rtl_eri_write.exit224

do.body.i.i.i221:                                 ; preds = %for.cond.i.i.i213
  %msg_enable.i.i.i218 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %53 = load i32, i32* %msg_enable.i.i.i218, align 8
  %and.i.i.i219 = and i32 %53, 1
  %tobool4.i.i.i220 = icmp eq i32 %and.i.i.i219, 0
  br i1 %tobool4.i.i.i220, label %rtl_eri_write.exit224, label %if.then5.i.i.i223

if.then5.i.i.i223:                                ; preds = %do.body.i.i.i221
  %dev.i.i.i222 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %54 = load %struct.net_device*, %struct.net_device** %dev.i.i.i222, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %54, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit224

rtl_eri_write.exit224:                            ; preds = %for.body.i.i.i217, %do.body.i.i.i221, %if.then5.i.i.i223
  %55 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i96 = getelementptr i8, i8* %55, i64 116
  %56 = bitcast i8* %add.ptr.i.i96 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %56) #10, !srcloc !8
  br label %for.body.i.i.i.i103

for.cond.i.i.i.i99:                               ; preds = %for.body.i.i.i.i103
  %inc.i.i.i.i97 = add nuw nsw i32 %i.017.i.i.i.i100, 1
  %cmp.i.i.i.i98 = icmp ult i32 %i.017.i.i.i.i100, 99
  br i1 %cmp.i.i.i.i98, label %for.body.i.i.i.i103, label %do.body.i.i.i.i107

for.body.i.i.i.i103:                              ; preds = %for.cond.i.i.i.i99, %rtl_eri_write.exit224
  %i.017.i.i.i.i100 = phi i32 [ 0, %rtl_eri_write.exit224 ], [ %inc.i.i.i.i97, %for.cond.i.i.i.i99 ]
  call void @__udelay(i64 100) #9
  %57 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i101 = getelementptr i8, i8* %57, i64 116
  %58 = bitcast i8* %add.ptr.i.i.i101 to i32*
  %59 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %58) #10, !srcloc !2
  %tobool.i.i.i102 = icmp slt i32 %59, 0
  br i1 %tobool.i.i.i102, label %cond.true.i.i111, label %for.cond.i.i.i.i99

do.body.i.i.i.i107:                               ; preds = %for.cond.i.i.i.i99
  %msg_enable.i.i.i.i104 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %60 = load i32, i32* %msg_enable.i.i.i.i104, align 8
  %and.i.i.i.i105 = and i32 %60, 1
  %tobool4.i.i.i.i106 = icmp eq i32 %and.i.i.i.i105, 0
  br i1 %tobool4.i.i.i.i106, label %rtl_w0w1_eri.exit113, label %if.then5.i.i.i.i109

if.then5.i.i.i.i109:                              ; preds = %do.body.i.i.i.i107
  %dev.i.i.i.i108 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %61 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i108, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %61, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit113

cond.true.i.i111:                                 ; preds = %for.body.i.i.i.i103
  %add.ptr3.i.i110 = getelementptr i8, i8* %55, i64 112
  %62 = bitcast i8* %add.ptr3.i.i110 to i32*
  %63 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %62) #10, !srcloc !2
  br label %rtl_w0w1_eri.exit113

rtl_w0w1_eri.exit113:                             ; preds = %do.body.i.i.i.i107, %if.then5.i.i.i.i109, %cond.true.i.i111
  %cond.i.i112 = phi i32 [ %63, %cond.true.i.i111 ], [ -1, %do.body.i.i.i.i107 ], [ -1, %if.then5.i.i.i.i109 ]
  %or.i = or i32 %cond.i.i112, 1
  %64 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i226 = getelementptr i8, i8* %64, i64 112
  %65 = bitcast i8* %add.ptr.i226 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i, i32* %65) #10, !srcloc !8
  %add.ptr11.i227 = getelementptr i8, i8* %64, i64 116
  %66 = bitcast i8* %add.ptr11.i227 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %66) #10, !srcloc !8
  br label %for.body.i.i.i234

for.cond.i.i.i230:                                ; preds = %for.body.i.i.i234
  %inc.i.i.i228 = add nuw nsw i32 %i.017.i.i.i231, 1
  %cmp.i.i.i229 = icmp ult i32 %i.017.i.i.i231, 99
  br i1 %cmp.i.i.i229, label %for.body.i.i.i234, label %do.body.i.i.i238

for.body.i.i.i234:                                ; preds = %for.cond.i.i.i230, %rtl_w0w1_eri.exit113
  %i.017.i.i.i231 = phi i32 [ 0, %rtl_w0w1_eri.exit113 ], [ %inc.i.i.i228, %for.cond.i.i.i230 ]
  call void @__udelay(i64 100) #9
  %67 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i232 = getelementptr i8, i8* %67, i64 116
  %68 = bitcast i8* %add.ptr.i.i232 to i32*
  %69 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %68) #10, !srcloc !2
  %tobool.i.i233 = icmp slt i32 %69, 0
  br i1 %tobool.i.i233, label %for.cond.i.i.i230, label %rtl_eri_write.exit241

do.body.i.i.i238:                                 ; preds = %for.cond.i.i.i230
  %msg_enable.i.i.i235 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %70 = load i32, i32* %msg_enable.i.i.i235, align 8
  %and.i.i.i236 = and i32 %70, 1
  %tobool4.i.i.i237 = icmp eq i32 %and.i.i.i236, 0
  br i1 %tobool4.i.i.i237, label %rtl_eri_write.exit241, label %if.then5.i.i.i240

if.then5.i.i.i240:                                ; preds = %do.body.i.i.i238
  %dev.i.i.i239 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %71 = load %struct.net_device*, %struct.net_device** %dev.i.i.i239, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %71, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit241

rtl_eri_write.exit241:                            ; preds = %for.body.i.i.i234, %do.body.i.i.i238, %if.then5.i.i.i240
  %72 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i115 = getelementptr i8, i8* %72, i64 116
  %73 = bitcast i8* %add.ptr.i.i115 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61652, i32* %73) #10, !srcloc !8
  br label %for.body.i.i.i.i122

for.cond.i.i.i.i118:                              ; preds = %for.body.i.i.i.i122
  %inc.i.i.i.i116 = add nuw nsw i32 %i.017.i.i.i.i119, 1
  %cmp.i.i.i.i117 = icmp ult i32 %i.017.i.i.i.i119, 99
  br i1 %cmp.i.i.i.i117, label %for.body.i.i.i.i122, label %do.body.i.i.i.i126

for.body.i.i.i.i122:                              ; preds = %for.cond.i.i.i.i118, %rtl_eri_write.exit241
  %i.017.i.i.i.i119 = phi i32 [ 0, %rtl_eri_write.exit241 ], [ %inc.i.i.i.i116, %for.cond.i.i.i.i118 ]
  call void @__udelay(i64 100) #9
  %74 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i120 = getelementptr i8, i8* %74, i64 116
  %75 = bitcast i8* %add.ptr.i.i.i120 to i32*
  %76 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %75) #10, !srcloc !2
  %tobool.i.i.i121 = icmp slt i32 %76, 0
  br i1 %tobool.i.i.i121, label %cond.true.i.i130, label %for.cond.i.i.i.i118

do.body.i.i.i.i126:                               ; preds = %for.cond.i.i.i.i118
  %msg_enable.i.i.i.i123 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %77 = load i32, i32* %msg_enable.i.i.i.i123, align 8
  %and.i.i.i.i124 = and i32 %77, 1
  %tobool4.i.i.i.i125 = icmp eq i32 %and.i.i.i.i124, 0
  br i1 %tobool4.i.i.i.i125, label %rtl_w0w1_eri.exit133, label %if.then5.i.i.i.i128

if.then5.i.i.i.i128:                              ; preds = %do.body.i.i.i.i126
  %dev.i.i.i.i127 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %78 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i127, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %78, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit133

cond.true.i.i130:                                 ; preds = %for.body.i.i.i.i122
  %add.ptr3.i.i129 = getelementptr i8, i8* %72, i64 112
  %79 = bitcast i8* %add.ptr3.i.i129 to i32*
  %80 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %79) #10, !srcloc !2
  %phitmp277 = or i32 %80, 8064
  br label %rtl_w0w1_eri.exit133

rtl_w0w1_eri.exit133:                             ; preds = %do.body.i.i.i.i126, %if.then5.i.i.i.i128, %cond.true.i.i130
  %cond.i.i131 = phi i32 [ %phitmp277, %cond.true.i.i130 ], [ -1, %do.body.i.i.i.i126 ], [ -1, %if.then5.i.i.i.i128 ]
  %81 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i243 = getelementptr i8, i8* %81, i64 112
  %82 = bitcast i8* %add.ptr.i243 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i131, i32* %82) #10, !srcloc !8
  %add.ptr11.i244 = getelementptr i8, i8* %81, i64 116
  %83 = bitcast i8* %add.ptr11.i244 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421996, i32* %83) #10, !srcloc !8
  br label %for.body.i.i.i251

for.cond.i.i.i247:                                ; preds = %for.body.i.i.i251
  %inc.i.i.i245 = add nuw nsw i32 %i.017.i.i.i248, 1
  %cmp.i.i.i246 = icmp ult i32 %i.017.i.i.i248, 99
  br i1 %cmp.i.i.i246, label %for.body.i.i.i251, label %do.body.i.i.i255

for.body.i.i.i251:                                ; preds = %for.cond.i.i.i247, %rtl_w0w1_eri.exit133
  %i.017.i.i.i248 = phi i32 [ 0, %rtl_w0w1_eri.exit133 ], [ %inc.i.i.i245, %for.cond.i.i.i247 ]
  call void @__udelay(i64 100) #9
  %84 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i249 = getelementptr i8, i8* %84, i64 116
  %85 = bitcast i8* %add.ptr.i.i249 to i32*
  %86 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %85) #10, !srcloc !2
  %tobool.i.i250 = icmp slt i32 %86, 0
  br i1 %tobool.i.i250, label %for.cond.i.i.i247, label %rtl_eri_write.exit258

do.body.i.i.i255:                                 ; preds = %for.cond.i.i.i247
  %msg_enable.i.i.i252 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %87 = load i32, i32* %msg_enable.i.i.i252, align 8
  %and.i.i.i253 = and i32 %87, 1
  %tobool4.i.i.i254 = icmp eq i32 %and.i.i.i253, 0
  br i1 %tobool4.i.i.i254, label %rtl_eri_write.exit258, label %if.then5.i.i.i257

if.then5.i.i.i257:                                ; preds = %do.body.i.i.i255
  %dev.i.i.i256 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %88 = load %struct.net_device*, %struct.net_device** %dev.i.i.i256, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %88, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit258

rtl_eri_write.exit258:                            ; preds = %for.body.i.i.i251, %do.body.i.i.i255, %if.then5.i.i.i257
  %89 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i135 = getelementptr i8, i8* %89, i64 112
  %90 = bitcast i8* %add.ptr.i135 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 20359, i32* %90) #10, !srcloc !8
  %add.ptr11.i136 = getelementptr i8, i8* %89, i64 116
  %91 = bitcast i8* %add.ptr11.i136 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147469840, i32* %91) #10, !srcloc !8
  br label %for.body.i.i.i143

for.cond.i.i.i139:                                ; preds = %for.body.i.i.i143
  %inc.i.i.i137 = add nuw nsw i32 %i.017.i.i.i140, 1
  %cmp.i.i.i138 = icmp ult i32 %i.017.i.i.i140, 99
  br i1 %cmp.i.i.i138, label %for.body.i.i.i143, label %do.body.i.i.i147

for.body.i.i.i143:                                ; preds = %for.cond.i.i.i139, %rtl_eri_write.exit258
  %i.017.i.i.i140 = phi i32 [ 0, %rtl_eri_write.exit258 ], [ %inc.i.i.i137, %for.cond.i.i.i139 ]
  call void @__udelay(i64 100) #9
  %92 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i141 = getelementptr i8, i8* %92, i64 116
  %93 = bitcast i8* %add.ptr.i.i141 to i32*
  %94 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %93) #10, !srcloc !2
  %tobool.i.i142 = icmp slt i32 %94, 0
  br i1 %tobool.i.i142, label %for.cond.i.i.i139, label %rtl_eri_write.exit150

do.body.i.i.i147:                                 ; preds = %for.cond.i.i.i139
  %msg_enable.i.i.i144 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %95 = load i32, i32* %msg_enable.i.i.i144, align 8
  %and.i.i.i145 = and i32 %95, 1
  %tobool4.i.i.i146 = icmp eq i32 %and.i.i.i145, 0
  br i1 %tobool4.i.i.i146, label %rtl_eri_write.exit150, label %if.then5.i.i.i149

if.then5.i.i.i149:                                ; preds = %do.body.i.i.i147
  %dev.i.i.i148 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %96 = load %struct.net_device*, %struct.net_device** %dev.i.i.i148, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %96, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit150

rtl_eri_write.exit150:                            ; preds = %for.body.i.i.i143, %do.body.i.i.i147, %if.then5.i.i.i149
  %add.ptr2 = getelementptr i8, i8* %0, i64 240
  %97 = bitcast i8* %add.ptr2 to i32*
  %98 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %97) #10, !srcloc !2
  %and = and i32 %98, -524289
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and, i32* %97) #10, !srcloc !8
  %add.ptr5 = getelementptr i8, i8* %0, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 39, i8* %add.ptr5) #10, !srcloc !5
  %99 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i152 = getelementptr i8, i8* %99, i64 112
  %100 = bitcast i8* %add.ptr.i152 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %100) #10, !srcloc !8
  %add.ptr11.i153 = getelementptr i8, i8* %99, i64 116
  %101 = bitcast i8* %add.ptr11.i153 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471168, i32* %101) #10, !srcloc !8
  br label %for.body.i.i.i160

for.cond.i.i.i156:                                ; preds = %for.body.i.i.i160
  %inc.i.i.i154 = add nuw nsw i32 %i.017.i.i.i157, 1
  %cmp.i.i.i155 = icmp ult i32 %i.017.i.i.i157, 99
  br i1 %cmp.i.i.i155, label %for.body.i.i.i160, label %do.body.i.i.i164

for.body.i.i.i160:                                ; preds = %for.cond.i.i.i156, %rtl_eri_write.exit150
  %i.017.i.i.i157 = phi i32 [ 0, %rtl_eri_write.exit150 ], [ %inc.i.i.i154, %for.cond.i.i.i156 ]
  call void @__udelay(i64 100) #9
  %102 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i158 = getelementptr i8, i8* %102, i64 116
  %103 = bitcast i8* %add.ptr.i.i158 to i32*
  %104 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %103) #10, !srcloc !2
  %tobool.i.i159 = icmp slt i32 %104, 0
  br i1 %tobool.i.i159, label %for.cond.i.i.i156, label %rtl_eri_write.exit167

do.body.i.i.i164:                                 ; preds = %for.cond.i.i.i156
  %msg_enable.i.i.i161 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %105 = load i32, i32* %msg_enable.i.i.i161, align 8
  %and.i.i.i162 = and i32 %105, 1
  %tobool4.i.i.i163 = icmp eq i32 %and.i.i.i162, 0
  br i1 %tobool4.i.i.i163, label %rtl_eri_write.exit167, label %if.then5.i.i.i166

if.then5.i.i.i166:                                ; preds = %do.body.i.i.i164
  %dev.i.i.i165 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %106 = load %struct.net_device*, %struct.net_device** %dev.i.i.i165, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %106, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit167

rtl_eri_write.exit167:                            ; preds = %for.body.i.i.i160, %do.body.i.i.i164, %if.then5.i.i.i166
  %107 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i169 = getelementptr i8, i8* %107, i64 112
  %108 = bitcast i8* %add.ptr.i169 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %108) #10, !srcloc !8
  %add.ptr11.i170 = getelementptr i8, i8* %107, i64 116
  %109 = bitcast i8* %add.ptr11.i170 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147471176, i32* %109) #10, !srcloc !8
  br label %for.body.i.i.i177

for.cond.i.i.i173:                                ; preds = %for.body.i.i.i177
  %inc.i.i.i171 = add nuw nsw i32 %i.017.i.i.i174, 1
  %cmp.i.i.i172 = icmp ult i32 %i.017.i.i.i174, 99
  br i1 %cmp.i.i.i172, label %for.body.i.i.i177, label %do.body.i.i.i181

for.body.i.i.i177:                                ; preds = %for.cond.i.i.i173, %rtl_eri_write.exit167
  %i.017.i.i.i174 = phi i32 [ 0, %rtl_eri_write.exit167 ], [ %inc.i.i.i171, %for.cond.i.i.i173 ]
  call void @__udelay(i64 100) #9
  %110 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i175 = getelementptr i8, i8* %110, i64 116
  %111 = bitcast i8* %add.ptr.i.i175 to i32*
  %112 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %111) #10, !srcloc !2
  %tobool.i.i176 = icmp slt i32 %112, 0
  br i1 %tobool.i.i176, label %for.cond.i.i.i173, label %rtl_eri_write.exit184

do.body.i.i.i181:                                 ; preds = %for.cond.i.i.i173
  %msg_enable.i.i.i178 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %113 = load i32, i32* %msg_enable.i.i.i178, align 8
  %and.i.i.i179 = and i32 %113, 1
  %tobool4.i.i.i180 = icmp eq i32 %and.i.i.i179, 0
  br i1 %tobool4.i.i.i180, label %rtl_eri_write.exit184, label %if.then5.i.i.i183

if.then5.i.i.i183:                                ; preds = %do.body.i.i.i181
  %dev.i.i.i182 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %114 = load %struct.net_device*, %struct.net_device** %dev.i.i.i182, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %114, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit184

rtl_eri_write.exit184:                            ; preds = %for.body.i.i.i177, %do.body.i.i.i181, %if.then5.i.i.i183
  %add.ptr6 = getelementptr i8, i8* %0, i64 27
  %115 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr6) #10, !srcloc !6
  %116 = and i8 %115, -8
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %116, i8* %add.ptr6) #10, !srcloc !5
  %117 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i186 = getelementptr i8, i8* %117, i64 116
  %118 = bitcast i8* %add.ptr.i.i186 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 62204, i32* %118) #10, !srcloc !8
  br label %for.body.i.i.i.i193

for.cond.i.i.i.i189:                              ; preds = %for.body.i.i.i.i193
  %inc.i.i.i.i187 = add nuw nsw i32 %i.017.i.i.i.i190, 1
  %cmp.i.i.i.i188 = icmp ult i32 %i.017.i.i.i.i190, 99
  br i1 %cmp.i.i.i.i188, label %for.body.i.i.i.i193, label %do.body.i.i.i.i197

for.body.i.i.i.i193:                              ; preds = %for.cond.i.i.i.i189, %rtl_eri_write.exit184
  %i.017.i.i.i.i190 = phi i32 [ 0, %rtl_eri_write.exit184 ], [ %inc.i.i.i.i187, %for.cond.i.i.i.i189 ]
  call void @__udelay(i64 100) #9
  %119 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i191 = getelementptr i8, i8* %119, i64 116
  %120 = bitcast i8* %add.ptr.i.i.i191 to i32*
  %121 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %120) #10, !srcloc !2
  %tobool.i.i.i192 = icmp slt i32 %121, 0
  br i1 %tobool.i.i.i192, label %cond.true.i.i201, label %for.cond.i.i.i.i189

do.body.i.i.i.i197:                               ; preds = %for.cond.i.i.i.i189
  %msg_enable.i.i.i.i194 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %122 = load i32, i32* %msg_enable.i.i.i.i194, align 8
  %and.i.i.i.i195 = and i32 %122, 1
  %tobool4.i.i.i.i196 = icmp eq i32 %and.i.i.i.i195, 0
  br i1 %tobool4.i.i.i.i196, label %rtl_w0w1_eri.exit205, label %if.then5.i.i.i.i199

if.then5.i.i.i.i199:                              ; preds = %do.body.i.i.i.i197
  %dev.i.i.i.i198 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %123 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i198, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %123, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit205

cond.true.i.i201:                                 ; preds = %for.body.i.i.i.i193
  %add.ptr3.i.i200 = getelementptr i8, i8* %117, i64 112
  %124 = bitcast i8* %add.ptr3.i.i200 to i32*
  %125 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %124) #10, !srcloc !2
  %phitmp = and i32 %125, -8
  %phitmp276 = or i32 %phitmp, 1
  br label %rtl_w0w1_eri.exit205

rtl_w0w1_eri.exit205:                             ; preds = %do.body.i.i.i.i197, %if.then5.i.i.i.i199, %cond.true.i.i201
  %cond.i.i202 = phi i32 [ %phitmp276, %cond.true.i.i201 ], [ -7, %do.body.i.i.i.i197 ], [ -7, %if.then5.i.i.i.i199 ]
  %126 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i260 = getelementptr i8, i8* %126, i64 112
  %127 = bitcast i8* %add.ptr.i260 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i202, i32* %127) #10, !srcloc !8
  %add.ptr11.i261 = getelementptr i8, i8* %126, i64 116
  %128 = bitcast i8* %add.ptr11.i261 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147478788, i32* %128) #10, !srcloc !8
  br label %for.body.i.i.i268

for.cond.i.i.i264:                                ; preds = %for.body.i.i.i268
  %inc.i.i.i262 = add nuw nsw i32 %i.017.i.i.i265, 1
  %cmp.i.i.i263 = icmp ult i32 %i.017.i.i.i265, 99
  br i1 %cmp.i.i.i263, label %for.body.i.i.i268, label %do.body.i.i.i272

for.body.i.i.i268:                                ; preds = %for.cond.i.i.i264, %rtl_w0w1_eri.exit205
  %i.017.i.i.i265 = phi i32 [ 0, %rtl_w0w1_eri.exit205 ], [ %inc.i.i.i262, %for.cond.i.i.i264 ]
  call void @__udelay(i64 100) #9
  %129 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i266 = getelementptr i8, i8* %129, i64 116
  %130 = bitcast i8* %add.ptr.i.i266 to i32*
  %131 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %130) #10, !srcloc !2
  %tobool.i.i267 = icmp slt i32 %131, 0
  br i1 %tobool.i.i267, label %for.cond.i.i.i264, label %rtl_eri_write.exit275

do.body.i.i.i272:                                 ; preds = %for.cond.i.i.i264
  %msg_enable.i.i.i269 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %132 = load i32, i32* %msg_enable.i.i.i269, align 8
  %and.i.i.i270 = and i32 %132, 1
  %tobool4.i.i.i271 = icmp eq i32 %and.i.i.i270, 0
  br i1 %tobool4.i.i.i271, label %rtl_eri_write.exit275, label %if.then5.i.i.i274

if.then5.i.i.i274:                                ; preds = %do.body.i.i.i272
  %dev.i.i.i273 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %133 = load %struct.net_device*, %struct.net_device** %dev.i.i.i273, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %133, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit275

rtl_eri_write.exit275:                            ; preds = %for.body.i.i.i268, %do.body.i.i.i272, %if.then5.i.i.i274
  %add.ptr11 = getelementptr i8, i8* %0, i64 208
  %134 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr11) #10, !srcloc !6
  %135 = and i8 %134, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %135, i8* %add.ptr11) #10, !srcloc !5
  %136 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i207 = getelementptr i8, i8* %136, i64 84
  %137 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i207) #10, !srcloc !6
  %138 = and i8 %137, -3
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %138, i8* %add.ptr.i207) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl8168ep_stop_cmac(%struct.rtl8169_private* nocapture readonly %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 249
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %2 = and i8 %1, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %2, i8* %add.ptr) #10, !srcloc !5
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 1999
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @msleep(i32 50) #9
  %3 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %3, i64 251
  %4 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i) #10, !srcloc !6
  %5 = and i8 %4, 2
  %tobool.i = icmp eq i8 %5, 0
  br i1 %tobool.i, label %rtl_msleep_loop_wait_low.exit, label %for.cond.i.i

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %6 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %6, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %rtl_msleep_loop_wait_low.exit, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %7 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %7, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i64 0, i64 0), i32 1, i32 2000, i32 50) #9
  br label %rtl_msleep_loop_wait_low.exit

rtl_msleep_loop_wait_low.exit:                    ; preds = %for.body.i.i, %do.body.i.i, %if.then5.i.i
  %add.ptr4 = getelementptr i8, i8* %0, i64 251
  %8 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr4) #10, !srcloc !6
  %9 = or i8 %8, 32
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %9, i8* %add.ptr4) #10, !srcloc !5
  %add.ptr9 = getelementptr i8, i8* %0, i64 248
  %10 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr9) #10, !srcloc !6
  %11 = and i8 %10, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %11, i8* %add.ptr9) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone
declare void @msleep(i32) #1

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_hw_start_8105e_1(%struct.rtl8169_private* nocapture readonly %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 240
  %1 = bitcast i8* %add.ptr to i32*
  %2 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %or = or i32 %2, 10240
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or, i32* %1) #10, !srcloc !8
  %3 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %and = and i32 %3, -65537
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and, i32* %1) #10, !srcloc !8
  %add.ptr5 = getelementptr i8, i8* %0, i64 211
  %4 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr5) #10, !srcloc !6
  %5 = or i8 %4, 12
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %5, i8* %add.ptr5) #10, !srcloc !5
  %add.ptr11 = getelementptr i8, i8* %0, i64 208
  %6 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr11) #10, !srcloc !6
  %7 = or i8 %6, 64
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %7, i8* %add.ptr11) #10, !srcloc !5
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  br label %while.body.i

while.body.i:                                     ; preds = %rtl_ephy_write.exit, %entry
  %e.addr.014.i = phi %struct.ephy_info* [ getelementptr inbounds ([8 x %struct.ephy_info], [8 x %struct.ephy_info]* @rtl_hw_start_8105e_1.e_info_8105e_1, i64 0, i64 0), %entry ], [ %incdec.ptr.i, %rtl_ephy_write.exit ]
  %len.addr.013.i = phi i32 [ 8, %entry ], [ %dec.i, %rtl_ephy_write.exit ]
  %dec.i = add nsw i32 %len.addr.013.i, -1
  %offset.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i, i64 0, i32 0
  %8 = load i32, i32* %offset.i, align 4
  %9 = load i8*, i8** %mmio_addr, align 8
  %and.i32 = shl i32 %8, 16
  %shl.i33 = and i32 %and.i32, 2031616
  %add.ptr.i34 = getelementptr i8, i8* %9, i64 128
  %10 = bitcast i8* %add.ptr.i34 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i33, i32* %10) #10, !srcloc !8
  br label %for.body.i.i.i41

for.cond.i.i.i37:                                 ; preds = %for.body.i.i.i41
  %inc.i.i.i35 = add nuw nsw i32 %i.017.i.i.i38, 1
  %cmp.i.i.i36 = icmp ult i32 %i.017.i.i.i38, 99
  br i1 %cmp.i.i.i36, label %for.body.i.i.i41, label %do.body.i.i.i45

for.body.i.i.i41:                                 ; preds = %for.cond.i.i.i37, %while.body.i
  %i.017.i.i.i38 = phi i32 [ 0, %while.body.i ], [ %inc.i.i.i35, %for.cond.i.i.i37 ]
  call void @__udelay(i64 10) #9
  %11 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i39 = getelementptr i8, i8* %11, i64 128
  %12 = bitcast i8* %add.ptr.i.i39 to i32*
  %13 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %12) #10, !srcloc !2
  %tobool.i.i40 = icmp slt i32 %13, 0
  br i1 %tobool.i.i40, label %cond.true.i, label %for.cond.i.i.i37

do.body.i.i.i45:                                  ; preds = %for.cond.i.i.i37
  %14 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i43 = and i32 %14, 1
  %tobool4.i.i.i44 = icmp eq i32 %and.i.i.i43, 0
  br i1 %tobool4.i.i.i44, label %rtl_ephy_read.exit, label %if.then5.i.i.i47

if.then5.i.i.i47:                                 ; preds = %do.body.i.i.i45
  %15 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %15, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %rtl_ephy_read.exit

cond.true.i:                                      ; preds = %for.body.i.i.i41
  %16 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %10) #10, !srcloc !2
  %phitmp.i = trunc i32 %16 to i16
  br label %rtl_ephy_read.exit

rtl_ephy_read.exit:                               ; preds = %do.body.i.i.i45, %if.then5.i.i.i47, %cond.true.i
  %cond.i = phi i16 [ %phitmp.i, %cond.true.i ], [ -1, %do.body.i.i.i45 ], [ -1, %if.then5.i.i.i47 ]
  %mask.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i, i64 0, i32 1
  %17 = load i16, i16* %mask.i, align 4
  %neg.i = xor i16 %17, -1
  %and.i = and i16 %cond.i, %neg.i
  %bits.i = getelementptr inbounds %struct.ephy_info, %struct.ephy_info* %e.addr.014.i, i64 0, i32 2
  %18 = load i16, i16* %bits.i, align 2
  %or.i = or i16 %and.i, %18
  %19 = load i32, i32* %offset.i, align 4
  %conv5.i = zext i16 %or.i to i32
  %20 = load i8*, i8** %mmio_addr, align 8
  %and1.i = shl i32 %19, 16
  %shl.i = and i32 %and1.i, 2031616
  %or.i28 = or i32 %shl.i, %conv5.i
  %or2.i = or i32 %or.i28, -2147483648
  %add.ptr.i = getelementptr i8, i8* %20, i64 128
  %21 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i, i32* %21) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %rtl_ephy_read.exit
  %i.017.i.i.i = phi i32 [ 0, %rtl_ephy_read.exit ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 10) #9
  %22 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %22, i64 128
  %23 = bitcast i8* %add.ptr.i.i to i32*
  %24 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %23) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %24, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %rtl_ephy_write.exit

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %25 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %25, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %rtl_ephy_write.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %26 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %26, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit

rtl_ephy_write.exit:                              ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  call void @__const_udelay(i64 42950) #9
  %incdec.ptr.i = getelementptr %struct.ephy_info, %struct.ephy_info* %e.addr.014.i, i64 1
  %cmp.i = icmp ugt i32 %len.addr.013.i, 1
  br i1 %cmp.i, label %while.body.i, label %rtl_ephy_init.exit

rtl_ephy_init.exit:                               ; preds = %rtl_ephy_write.exit
  %27 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i30 = getelementptr i8, i8* %27, i64 84
  %28 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i30) #10, !srcloc !6
  %29 = and i8 %28, -3
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %29, i8* %add.ptr.i30) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl_open(%struct.net_device* %dev) #0 {
entry:
  %dev.addr.i.i105 = alloca %struct.device*, align 8
  %flag.addr.i.i106 = alloca i32, align 4
  %dev.addr.i.i = alloca %struct.device*, align 8
  %flag.addr.i.i = alloca i32, align 4
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %1 = load i8*, i8** %mmio_addr, align 8
  %pci_dev = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %2 = bitcast i8* %pci_dev to %struct.pci_dev**
  %3 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %dev2 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i64 0, i32 35
  %call.i = call i32 @__pm_runtime_resume(%struct.device* %dev2, i32 4) #9
  %TxPhyAddr = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2408
  %4 = bitcast i8* %TxPhyAddr to i64*
  %5 = bitcast %struct.device** %dev.addr.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = bitcast i32* %flag.addr.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #10
  store %struct.device* %dev2, %struct.device** %dev.addr.i.i, align 8
  store i32 37748928, i32* %flag.addr.i.i, align 4
  %dma_ops.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i64 0, i32 35, i32 22, i32 0
  %7 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i, align 8
  %tobool4.i.i.i = icmp eq %struct.dma_map_ops* %7, null
  br i1 %tobool4.i.i.i, label %get_dma_ops.exit.i.i, label %do.end9.i.i

get_dma_ops.exit.i.i:                             ; preds = %entry
  %8 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %tobool.i.i = icmp eq %struct.dma_map_ops* %8, null
  br i1 %tobool.i.i, label %do.body4.i.i, label %do.end9.i.i, !prof !10

do.body4.i.i:                                     ; preds = %get_dma_ops.exit.i.i
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 252, i64 12) #10, !srcloc !11
  br label %do.body5.i.i

do.body5.i.i:                                     ; preds = %do.body5.i.i, %do.body4.i.i
  br label %do.body5.i.i

do.end9.i.i:                                      ; preds = %get_dma_ops.exit.i.i, %entry
  %retval.0.i2.i.i = phi %struct.dma_map_ops* [ %8, %get_dma_ops.exit.i.i ], [ %7, %entry ]
  %call10.i.i = call zeroext i1 @arch_dma_alloc_attrs(%struct.device** nonnull %dev.addr.i.i, i32* nonnull %flag.addr.i.i) #9
  br i1 %call10.i.i, label %if.end12.i.i, label %dma_alloc_coherent.exit

if.end12.i.i:                                     ; preds = %do.end9.i.i
  %alloc.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i2.i.i, i64 0, i32 0
  %9 = load i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)*, i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)** %alloc.i.i, align 8
  %tobool13.i.i = icmp eq i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)* %9, null
  br i1 %tobool13.i.i, label %dma_alloc_coherent.exit, label %if.end15.i.i

if.end15.i.i:                                     ; preds = %if.end12.i.i
  %10 = load %struct.device*, %struct.device** %dev.addr.i.i, align 8
  %11 = load i32, i32* %flag.addr.i.i, align 4
  %call17.i.i = call i8* %9(%struct.device* %10, i64 1024, i64* %4, i32 %11, %struct.dma_attrs* null) #9
  br label %dma_alloc_coherent.exit

dma_alloc_coherent.exit:                          ; preds = %do.end9.i.i, %if.end12.i.i, %if.end15.i.i
  %retval.0.i.i = phi i8* [ %call17.i.i, %if.end15.i.i ], [ null, %do.end9.i.i ], [ null, %if.end12.i.i ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #10
  %TxDescArray = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2392
  %12 = bitcast i8* %TxDescArray to %struct.TxDesc**
  %13 = bitcast i8* %TxDescArray to i8**
  store i8* %retval.0.i.i, i8** %13, align 8
  %tobool = icmp eq i8* %retval.0.i.i, null
  br i1 %tobool, label %err_pm_runtime_put, label %if.end

if.end:                                           ; preds = %dma_alloc_coherent.exit
  %RxPhyAddr = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2416
  %14 = bitcast i8* %RxPhyAddr to i64*
  %15 = bitcast %struct.device** %dev.addr.i.i105 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10
  %16 = bitcast i32* %flag.addr.i.i106 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #10
  store %struct.device* %dev2, %struct.device** %dev.addr.i.i105, align 8
  store i32 37748928, i32* %flag.addr.i.i106, align 4
  %17 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i, align 8
  %tobool4.i.i.i108 = icmp eq %struct.dma_map_ops* %17, null
  br i1 %tobool4.i.i.i108, label %get_dma_ops.exit.i.i110, label %do.end9.i.i115

get_dma_ops.exit.i.i110:                          ; preds = %if.end
  %18 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %tobool.i.i109 = icmp eq %struct.dma_map_ops* %18, null
  br i1 %tobool.i.i109, label %do.body4.i.i111, label %do.end9.i.i115, !prof !10

do.body4.i.i111:                                  ; preds = %get_dma_ops.exit.i.i110
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 252, i64 12) #10, !srcloc !11
  br label %do.body5.i.i112

do.body5.i.i112:                                  ; preds = %do.body5.i.i112, %do.body4.i.i111
  br label %do.body5.i.i112

do.end9.i.i115:                                   ; preds = %get_dma_ops.exit.i.i110, %if.end
  %retval.0.i2.i.i113 = phi %struct.dma_map_ops* [ %18, %get_dma_ops.exit.i.i110 ], [ %17, %if.end ]
  %call10.i.i114 = call zeroext i1 @arch_dma_alloc_attrs(%struct.device** nonnull %dev.addr.i.i105, i32* nonnull %flag.addr.i.i106) #9
  br i1 %call10.i.i114, label %if.end12.i.i118, label %dma_alloc_coherent.exit122

if.end12.i.i118:                                  ; preds = %do.end9.i.i115
  %alloc.i.i116 = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i2.i.i113, i64 0, i32 0
  %19 = load i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)*, i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)** %alloc.i.i116, align 8
  %tobool13.i.i117 = icmp eq i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)* %19, null
  br i1 %tobool13.i.i117, label %dma_alloc_coherent.exit122, label %if.end15.i.i120

if.end15.i.i120:                                  ; preds = %if.end12.i.i118
  %20 = load %struct.device*, %struct.device** %dev.addr.i.i105, align 8
  %21 = load i32, i32* %flag.addr.i.i106, align 4
  %call17.i.i119 = call i8* %19(%struct.device* %20, i64 4096, i64* %14, i32 %21, %struct.dma_attrs* null) #9
  br label %dma_alloc_coherent.exit122

dma_alloc_coherent.exit122:                       ; preds = %do.end9.i.i115, %if.end12.i.i118, %if.end15.i.i120
  %retval.0.i.i121 = phi i8* [ %call17.i.i119, %if.end15.i.i120 ], [ null, %do.end9.i.i115 ], [ null, %if.end12.i.i118 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #10
  %RxDescArray = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2400
  %22 = bitcast i8* %RxDescArray to %struct.RxDesc**
  %23 = bitcast i8* %RxDescArray to i8**
  store i8* %retval.0.i.i121, i8** %23, align 8
  %tobool10 = icmp eq i8* %retval.0.i.i121, null
  br i1 %tobool10, label %err_free_tx_0, label %if.end12

if.end12:                                         ; preds = %dma_alloc_coherent.exit122
  %cur_rx.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2344
  %24 = bitcast i8* %cur_rx.i.i to i32*
  store i32 0, i32* %24, align 8
  %cur_tx.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2348
  %25 = bitcast i8* %cur_tx.i.i to i32*
  store i32 0, i32* %25, align 4
  %dirty_tx.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2352
  %26 = bitcast i8* %dirty_tx.i.i to i32*
  store i32 0, i32* %26, align 8
  %Rx_databuff.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2424
  %dev2.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %27 = bitcast i8* %dev2.i.i.i to %struct.net_device**
  call void @llvm.memset.p0i8.i64(i8* %Rx_databuff.i, i8 0, i64 3072, i32 8, i1 false) #10
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i, %if.end12
  %indvars.iv.i.i = phi i64 [ 0, %if.end12 ], [ %indvars.iv.next.i.i, %for.inc.i.i ]
  %arrayidx.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 16, i64 %indvars.iv.i.i
  %28 = load i8*, i8** %arrayidx.i.i, align 8
  %tobool.i.i123 = icmp eq i8* %28, null
  br i1 %tobool.i.i123, label %if.end.i.i, label %for.inc.i.i

if.end.i.i:                                       ; preds = %for.body.i.i
  %29 = load %struct.RxDesc*, %struct.RxDesc** %22, align 8
  %30 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %dev.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %30, i64 0, i32 35
  %31 = load %struct.net_device*, %struct.net_device** %27, align 8
  %parent.i.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %31, i64 0, i32 110, i32 0
  %32 = load %struct.device*, %struct.device** %parent.i.i.i, align 8
  %tobool.i.i.i = icmp eq %struct.device* %32, null
  br i1 %tobool.i.i.i, label %cond.end.i.i.i, label %cond.true.i.i.i

cond.true.i.i.i:                                  ; preds = %if.end.i.i
  %numa_node.i.i.i.i = getelementptr inbounds %struct.device, %struct.device* %32, i64 0, i32 15
  %33 = load i32, i32* %numa_node.i.i.i.i, align 8
  br label %cond.end.i.i.i

cond.end.i.i.i:                                   ; preds = %cond.true.i.i.i, %if.end.i.i
  %cond.i.i.i = phi i32 [ %33, %cond.true.i.i.i ], [ -1, %if.end.i.i ]
  %call.i.i.i.i = call i8* @__kmalloc_node(i64 16383, i32 37748928, i32 %cond.i.i.i) #9
  %tobool7.i.i.i = icmp eq i8* %call.i.i.i.i, null
  br i1 %tobool7.i.i.i, label %err_out.i.i, label %if.end.i.i.i125

if.end.i.i.i125:                                  ; preds = %cond.end.i.i.i
  %34 = ptrtoint i8* %call.i.i.i.i to i64
  %add.i.i.i.i = add i64 %34, 15
  %and.i.i.i.i = and i64 %add.i.i.i.i, -16
  %35 = inttoptr i64 %and.i.i.i.i to i8*
  %cmp.i.i.i124 = icmp eq i8* %call.i.i.i.i, %35
  br i1 %cmp.i.i.i124, label %if.end16.i.i.i, label %if.then10.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end.i.i.i125
  call void @kfree(i8* nonnull %call.i.i.i.i) #9
  %call.i58.i.i.i = call i8* @__kmalloc_node(i64 16398, i32 37748928, i32 %cond.i.i.i) #9
  %tobool13.i.i.i = icmp eq i8* %call.i58.i.i.i, null
  br i1 %tobool13.i.i.i, label %err_out.i.i, label %if.end16.i.i.i

if.end16.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end.i.i.i125
  %data.0.i.i.i = phi i8* [ %call.i58.i.i.i, %if.then10.i.i.i ], [ %call.i.i.i.i, %if.end.i.i.i125 ]
  %36 = ptrtoint i8* %data.0.i.i.i to i64
  %add.i59.i.i.i = add i64 %36, 15
  %and.i60.i.i.i = and i64 %add.i59.i.i.i, -16
  %37 = inttoptr i64 %and.i60.i.i.i to i8*
  %dma_ops.i.i61.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %30, i64 0, i32 35, i32 22, i32 0
  %38 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i61.i.i.i, align 8
  %tobool4.i.i62.i.i.i = icmp eq %struct.dma_map_ops* %38, null
  %39 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i.i.i = select i1 %tobool4.i.i62.i.i.i, %struct.dma_map_ops* %39, %struct.dma_map_ops* %38
  %map_page.i.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i.i.i, i64 0, i32 4
  %40 = load i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)** %map_page.i.i.i.i, align 8
  %sub.i.i.i.i.i = add i64 %and.i60.i.i.i, 2147483648
  %cmp.i.i.i.i.i = icmp ugt i8* %37, inttoptr (i64 -2147483649 to i8*)
  %41 = load i64, i64* @phys_base, align 8
  %cond.i.i.i.i.i = select i1 %cmp.i.i.i.i.i, i64 %41, i64 131939247849472
  %add.i.i.i.i.i = add i64 %sub.i.i.i.i.i, %cond.i.i.i.i.i
  %shr.i.i.i.i = lshr i64 %add.i.i.i.i.i, 12
  %add.ptr.i.i.i.i = getelementptr %struct.page, %struct.page* inttoptr (i64 -24189255811072 to %struct.page*), i64 %shr.i.i.i.i
  %and.i66.i.i.i = and i64 %add.i59.i.i.i, 4080
  %call13.i.i.i.i = call i64 %40(%struct.device* nonnull %dev.i.i.i, %struct.page* %add.ptr.i.i.i.i, i64 %and.i66.i.i.i, i64 16383, i32 2, %struct.dma_attrs* null) #9
  %42 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i61.i.i.i, align 8
  %tobool4.i.i.i.i.i = icmp eq %struct.dma_map_ops* %42, null
  %43 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %retval.0.i.i.i.i.i = select i1 %tobool4.i.i.i.i.i, %struct.dma_map_ops* %43, %struct.dma_map_ops* %42
  %mapping_error.i.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i.i.i.i.i, i64 0, i32 12
  %44 = load i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)** %mapping_error.i.i.i.i, align 8
  %tobool.i.i.i.i = icmp eq i32 (%struct.device*, i64)* %44, null
  br i1 %tobool.i.i.i.i, label %if.end.i.i.i.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %if.end16.i.i.i
  %call3.i.i.i.i = call i32 %44(%struct.device* nonnull %dev.i.i.i, i64 %call13.i.i.i.i) #9
  br label %dma_mapping_error.exit.i.i.i

if.end.i.i.i.i:                                   ; preds = %if.end16.i.i.i
  %cmp.i.i.i.i = icmp eq i64 %call13.i.i.i.i, 0
  %conv.i.i.i.i = zext i1 %cmp.i.i.i.i to i32
  br label %dma_mapping_error.exit.i.i.i

dma_mapping_error.exit.i.i.i:                     ; preds = %if.end.i.i.i.i, %if.then.i.i.i.i
  %retval.0.i.i.i.i = phi i32 [ %call3.i.i.i.i, %if.then.i.i.i.i ], [ %conv.i.i.i.i, %if.end.i.i.i.i ]
  %tobool21.i.i.i = icmp eq i32 %retval.0.i.i.i.i, 0
  br i1 %tobool21.i.i.i, label %if.end6.i.i, label %if.then25.i.i.i, !prof !9

if.then25.i.i.i:                                  ; preds = %dma_mapping_error.exit.i.i.i
  %call26.i.i.i = call i32 @net_ratelimit() #9
  %tobool27.i.i.i = icmp eq i32 %call26.i.i.i, 0
  br i1 %tobool27.i.i.i, label %err_out.i.i.i, label %do.body.i.i.i

do.body.i.i.i:                                    ; preds = %if.then25.i.i.i
  %msg_enable.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %45 = bitcast i8* %msg_enable.i.i.i to i32*
  %46 = load i32, i32* %45, align 8
  %and.i.i.i = and i32 %46, 1
  %tobool29.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool29.i.i.i, label %err_out.i.i.i, label %if.then30.i.i.i

if.then30.i.i.i:                                  ; preds = %do.body.i.i.i
  %47 = load %struct.net_device*, %struct.net_device** %27, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %47, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #9
  br label %err_out.i.i.i

err_out.i.i.i:                                    ; preds = %if.then30.i.i.i, %do.body.i.i.i, %if.then25.i.i.i
  call void @kfree(i8* nonnull %data.0.i.i.i) #9
  br label %err_out.i.i

if.end6.i.i:                                      ; preds = %dma_mapping_error.exit.i.i.i
  %addr.i.i.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %29, i64 %indvars.iv.i.i, i32 2
  store i64 %call13.i.i.i.i, i64* %addr.i.i.i.i, align 8
  %opts1.i.i.i.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %29, i64 %indvars.iv.i.i, i32 0
  %48 = load i32, i32* %opts1.i.i.i.i.i, align 8
  %and.i.i.i.i.i = and i32 %48, 1073741824
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !24
  %or1.i.i.i.i.i = or i32 %and.i.i.i.i.i, -2147467265
  store i32 %or1.i.i.i.i.i, i32* %opts1.i.i.i.i.i, align 8
  store i8* %data.0.i.i.i, i8** %arrayidx.i.i, align 8
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %if.end6.i.i, %for.body.i.i
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %cmp.i.i = icmp ult i64 %indvars.iv.next.i.i, 256
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body

err_out.i.i:                                      ; preds = %if.then10.i.i.i, %cond.end.i.i.i, %err_out.i.i.i
  %49 = load %struct.RxDesc*, %struct.RxDesc** %22, align 8
  %addr.i.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %49, i64 %indvars.iv.i.i, i32 2
  store i64 841534158063459245, i64* %addr.i.i.i, align 8
  %opts1.i.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %49, i64 %indvars.iv.i.i, i32 0
  %50 = load i32, i32* %opts1.i.i.i, align 8
  %and.i28.i.i = and i32 %50, 1073758207
  store i32 %and.i28.i.i, i32* %opts1.i.i.i, align 8
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i, %err_out.i.i
  %indvars.iv.i.i.i = phi i64 [ 0, %err_out.i.i ], [ %indvars.iv.next.i.i.i, %for.inc.i.i.i ]
  %arrayidx.i.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 16, i64 %indvars.iv.i.i.i
  %51 = load i8*, i8** %arrayidx.i.i.i, align 8
  %tobool.i30.i.i = icmp eq i8* %51, null
  br i1 %tobool.i30.i.i, label %for.inc.i.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.body.i.i.i
  %52 = load %struct.RxDesc*, %struct.RxDesc** %22, align 8
  %53 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %addr.i.i31.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %52, i64 %indvars.iv.i.i.i, i32 2
  %dma_ops.i.i.i.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %53, i64 0, i32 35, i32 22, i32 0
  %54 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i.i.i.i, align 8
  %tobool4.i.i.i.i.i.i = icmp eq %struct.dma_map_ops* %54, null
  %55 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i.i.i.i = select i1 %tobool4.i.i.i.i.i.i, %struct.dma_map_ops* %55, %struct.dma_map_ops* %54
  %unmap_page.i.i.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i.i.i.i, i64 0, i32 5
  %56 = load void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)** %unmap_page.i.i.i.i.i, align 8
  %tobool11.i.i.i.i.i = icmp eq void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)* %56, null
  br i1 %tobool11.i.i.i.i.i, label %rtl8169_free_rx_databuff.exit.i.i.i, label %if.then12.i.i.i.i.i

if.then12.i.i.i.i.i:                              ; preds = %if.then.i.i.i
  %dev.i.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %53, i64 0, i32 35
  %57 = load i64, i64* %addr.i.i31.i.i, align 8
  call void %56(%struct.device* %dev.i.i.i.i, i64 %57, i64 16383, i32 2, %struct.dma_attrs* null) #9
  %.pre.i.i.i = load i8*, i8** %arrayidx.i.i.i, align 8
  br label %rtl8169_free_rx_databuff.exit.i.i.i

rtl8169_free_rx_databuff.exit.i.i.i:              ; preds = %if.then12.i.i.i.i.i, %if.then.i.i.i
  %58 = phi i8* [ %51, %if.then.i.i.i ], [ %.pre.i.i.i, %if.then12.i.i.i.i.i ]
  call void @kfree(i8* %58) #9
  store i8* null, i8** %arrayidx.i.i.i, align 8
  store i64 841534158063459245, i64* %addr.i.i31.i.i, align 8
  %opts1.i.i.i32.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %52, i64 %indvars.iv.i.i.i, i32 0
  %59 = load i32, i32* %opts1.i.i.i32.i.i, align 8
  %and.i.i.i33.i.i = and i32 %59, 1073758207
  store i32 %and.i.i.i33.i.i, i32* %opts1.i.i.i32.i.i, align 8
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %rtl8169_free_rx_databuff.exit.i.i.i, %for.body.i.i.i
  %indvars.iv.next.i.i.i = add nuw nsw i64 %indvars.iv.i.i.i, 1
  %exitcond.i.i.i = icmp eq i64 %indvars.iv.next.i.i.i, 256
  br i1 %exitcond.i.i.i, label %err_free_rx_1, label %for.body.i.i.i

do.body:                                          ; preds = %for.inc.i.i
  %60 = load %struct.RxDesc*, %struct.RxDesc** %22, align 8
  %opts1.i29.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %60, i64 255, i32 0
  %61 = load i32, i32* %opts1.i29.i.i, align 8
  %or.i.i.i = or i32 %61, 1073741824
  store i32 %or.i.i.i, i32* %opts1.i29.i.i, align 8
  %.compoundliteral.sroa.0.0..sroa_idx = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5760
  %62 = bitcast i8* %.compoundliteral.sroa.0.0..sroa_idx to i64*
  store i64 68719476704, i64* %62, align 8
  %entry20 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5768
  %63 = bitcast i8* %entry20 to i8**
  store i8* %entry20, i8** %63, align 8
  %prev.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5776
  %64 = bitcast i8* %prev.i to i8**
  store i8* %entry20, i8** %64, align 8
  %func = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5784
  %65 = bitcast i8* %func to void (%struct.work_struct*)**
  store void (%struct.work_struct*)* @rtl_task, void (%struct.work_struct*)** %65, align 8
  call void asm sideeffect "mfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !32
  %rtl_fw.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5896
  %66 = bitcast i8* %rtl_fw.i to %struct.rtl_fw**
  %67 = bitcast i8* %rtl_fw.i to i8**
  %68 = load i8*, i8** %67, align 8
  %cmp.i.i127 = icmp ugt i8* %68, inttoptr (i64 -4096 to i8*)
  br i1 %cmp.i.i127, label %if.then.i, label %rtl_request_firmware.exit

if.then.i:                                        ; preds = %do.body
  %mac_version.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %69 = bitcast i8* %mac_version.i.i.i to i16*
  %70 = load i16, i16* %69, align 2
  %idxprom.i.i.i = zext i16 %70 to i64
  %fw_name.i.i.i = getelementptr [51 x %struct.anon.113], [51 x %struct.anon.113]* @rtl_chip_infos, i64 0, i64 %idxprom.i.i.i, i32 2
  %71 = load i8*, i8** %fw_name.i.i.i, align 16
  %72 = lshr i64 1971425640447999, %idxprom.i.i.i
  %73 = and i64 %72, 1
  %tobool.i.i128 = icmp eq i64 %73, 0
  br i1 %tobool.i.i128, label %if.end.i.i130, label %rtl_request_uncached_firmware.exit.i

if.end.i.i130:                                    ; preds = %if.then.i
  %call.i.i.i.i129 = call i8* @__kmalloc(i64 56, i32 37781696) #9
  %74 = bitcast i8* %call.i.i.i.i129 to %struct.rtl_fw*
  %tobool2.i.i = icmp eq i8* %call.i.i.i.i129, null
  br i1 %tobool2.i.i, label %do.body.i.i, label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end.i.i130
  %fw.i.i = bitcast i8* %call.i.i.i.i129 to %struct.firmware**
  %75 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %dev.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %75, i64 0, i32 35
  %call5.i.i = call i32 @request_firmware(%struct.firmware** %fw.i.i, i8* nonnull %71, %struct.device* %dev.i.i) #9
  %cmp.i2.i = icmp slt i32 %call5.i.i, 0
  br i1 %cmp.i2.i, label %err_free.i.i, label %if.end7.i.i

if.end7.i.i:                                      ; preds = %if.end4.i.i
  %76 = load %struct.net_device*, %struct.net_device** %27, align 8
  %77 = load %struct.firmware*, %struct.firmware** %fw.i.i, align 8
  %data.i.i.i.i = getelementptr inbounds %struct.firmware, %struct.firmware* %77, i64 0, i32 1
  %78 = bitcast i8** %data.i.i.i.i to %struct.fw_info**
  %79 = load %struct.fw_info*, %struct.fw_info** %78, align 8
  %phy_action.i.i.i.i = getelementptr inbounds i8, i8* %call.i.i.i.i129, i64 40
  %80 = getelementptr inbounds i8, i8* %call.i.i.i.i129, i64 8
  %size.i.i.i.i = getelementptr inbounds %struct.firmware, %struct.firmware* %77, i64 0, i32 0
  %81 = load i64, i64* %size.i.i.i.i, align 8
  %cmp.i.i.i.i131 = icmp ult i64 %81, 4
  %82 = bitcast %struct.fw_info* %79 to i8*
  br i1 %cmp.i.i.i.i131, label %do.body.i.i.i140, label %if.end.i.i.i.i133

if.end.i.i.i.i133:                                ; preds = %if.end7.i.i
  %magic.i.i.i.i = getelementptr inbounds %struct.fw_info, %struct.fw_info* %79, i64 0, i32 0
  %83 = load i32, i32* %magic.i.i.i.i, align 1
  %tobool.i.i.i.i132 = icmp eq i32 %83, 0
  br i1 %tobool.i.i.i.i132, label %if.then3.i.i.i.i, label %if.else44.i.i.i.i

if.then3.i.i.i.i:                                 ; preds = %if.end.i.i.i.i133
  %cmp6.i.i.i.i = icmp ult i64 %81, 45
  br i1 %cmp6.i.i.i.i, label %do.body.i.i.i140, label %for.body.for.body_crit_edge.i.i.i.i.preheader

for.body.for.body_crit_edge.i.i.i.i.preheader:    ; preds = %if.then3.i.i.i.i
  %84 = add i64 %81, -1
  %85 = add i64 %81, -2
  %xtraiter = and i64 %84, 3
  %86 = icmp ult i64 %85, 3
  br i1 %86, label %for.end.i.i.i.i.unr-lcssa, label %for.body.for.body_crit_edge.i.i.i.i.preheader.new

for.body.for.body_crit_edge.i.i.i.i.preheader.new: ; preds = %for.body.for.body_crit_edge.i.i.i.i.preheader
  %unroll_iter = sub i64 %84, %xtraiter
  br label %for.body.for.body_crit_edge.i.i.i.i

for.body.for.body_crit_edge.i.i.i.i:              ; preds = %for.body.for.body_crit_edge.i.i.i.i, %for.body.for.body_crit_edge.i.i.i.i.preheader.new
  %phitmp.i30.i.i.i = phi i32 [ 0, %for.body.for.body_crit_edge.i.i.i.i.preheader.new ], [ %phitmp.i.i.i.i.3, %for.body.for.body_crit_edge.i.i.i.i ]
  %inc.i29.i.i.i = phi i64 [ 1, %for.body.for.body_crit_edge.i.i.i.i.preheader.new ], [ %inc.i.i.i.i.3, %for.body.for.body_crit_edge.i.i.i.i ]
  %niter = phi i64 [ %unroll_iter, %for.body.for.body_crit_edge.i.i.i.i.preheader.new ], [ %niter.nsub.3, %for.body.for.body_crit_edge.i.i.i.i ]
  %arrayidx.phi.trans.insert.i.i.i.i = getelementptr i8, i8* %82, i64 %inc.i29.i.i.i
  %.pre.i.i.i.i = load i8, i8* %arrayidx.phi.trans.insert.i.i.i.i, align 1
  %conv.i.i.i.i134 = zext i8 %.pre.i.i.i.i to i32
  %add.i.i.i.i135 = add nuw nsw i32 %phitmp.i30.i.i.i, %conv.i.i.i.i134
  %inc.i.i.i.i = add nuw nsw i64 %inc.i29.i.i.i, 1
  %arrayidx.phi.trans.insert.i.i.i.i.1 = getelementptr i8, i8* %82, i64 %inc.i.i.i.i
  %.pre.i.i.i.i.1 = load i8, i8* %arrayidx.phi.trans.insert.i.i.i.i.1, align 1
  %conv.i.i.i.i134.1 = zext i8 %.pre.i.i.i.i.1 to i32
  %add.i.i.i.i135.1 = add nuw nsw i32 %add.i.i.i.i135, %conv.i.i.i.i134.1
  %inc.i.i.i.i.1 = add nsw i64 %inc.i29.i.i.i, 2
  %arrayidx.phi.trans.insert.i.i.i.i.2 = getelementptr i8, i8* %82, i64 %inc.i.i.i.i.1
  %.pre.i.i.i.i.2 = load i8, i8* %arrayidx.phi.trans.insert.i.i.i.i.2, align 1
  %conv.i.i.i.i134.2 = zext i8 %.pre.i.i.i.i.2 to i32
  %add.i.i.i.i135.2 = add nuw nsw i32 %add.i.i.i.i135.1, %conv.i.i.i.i134.2
  %inc.i.i.i.i.2 = add i64 %inc.i29.i.i.i, 3
  %arrayidx.phi.trans.insert.i.i.i.i.3 = getelementptr i8, i8* %82, i64 %inc.i.i.i.i.2
  %.pre.i.i.i.i.3 = load i8, i8* %arrayidx.phi.trans.insert.i.i.i.i.3, align 1
  %conv.i.i.i.i134.3 = zext i8 %.pre.i.i.i.i.3 to i32
  %add.i.i.i.i135.3 = add nuw nsw i32 %add.i.i.i.i135.2, %conv.i.i.i.i134.3
  %inc.i.i.i.i.3 = add i64 %inc.i29.i.i.i, 4
  %phitmp.i.i.i.i.3 = and i32 %add.i.i.i.i135.3, 255
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.end.i.i.i.i.unr-lcssa, label %for.body.for.body_crit_edge.i.i.i.i

for.end.i.i.i.i.unr-lcssa:                        ; preds = %for.body.for.body_crit_edge.i.i.i.i, %for.body.for.body_crit_edge.i.i.i.i.preheader
  %phitmp.i.i.i.i.lcssa.ph = phi i32 [ undef, %for.body.for.body_crit_edge.i.i.i.i.preheader ], [ %phitmp.i.i.i.i.3, %for.body.for.body_crit_edge.i.i.i.i ]
  %phitmp.i30.i.i.i.unr = phi i32 [ 0, %for.body.for.body_crit_edge.i.i.i.i.preheader ], [ %phitmp.i.i.i.i.3, %for.body.for.body_crit_edge.i.i.i.i ]
  %inc.i29.i.i.i.unr = phi i64 [ 1, %for.body.for.body_crit_edge.i.i.i.i.preheader ], [ %inc.i.i.i.i.3, %for.body.for.body_crit_edge.i.i.i.i ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.end.i.i.i.i, label %for.body.for.body_crit_edge.i.i.i.i.epil.preheader

for.body.for.body_crit_edge.i.i.i.i.epil.preheader: ; preds = %for.end.i.i.i.i.unr-lcssa
  br label %for.body.for.body_crit_edge.i.i.i.i.epil

for.body.for.body_crit_edge.i.i.i.i.epil:         ; preds = %for.body.for.body_crit_edge.i.i.i.i.epil, %for.body.for.body_crit_edge.i.i.i.i.epil.preheader
  %phitmp.i30.i.i.i.epil = phi i32 [ %phitmp.i.i.i.i.epil, %for.body.for.body_crit_edge.i.i.i.i.epil ], [ %phitmp.i30.i.i.i.unr, %for.body.for.body_crit_edge.i.i.i.i.epil.preheader ]
  %inc.i29.i.i.i.epil = phi i64 [ %inc.i.i.i.i.epil, %for.body.for.body_crit_edge.i.i.i.i.epil ], [ %inc.i29.i.i.i.unr, %for.body.for.body_crit_edge.i.i.i.i.epil.preheader ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.for.body_crit_edge.i.i.i.i.epil ], [ %xtraiter, %for.body.for.body_crit_edge.i.i.i.i.epil.preheader ]
  %arrayidx.phi.trans.insert.i.i.i.i.epil = getelementptr i8, i8* %82, i64 %inc.i29.i.i.i.epil
  %.pre.i.i.i.i.epil = load i8, i8* %arrayidx.phi.trans.insert.i.i.i.i.epil, align 1
  %conv.i.i.i.i134.epil = zext i8 %.pre.i.i.i.i.epil to i32
  %add.i.i.i.i135.epil = add nuw nsw i32 %phitmp.i30.i.i.i.epil, %conv.i.i.i.i134.epil
  %inc.i.i.i.i.epil = add nuw i64 %inc.i29.i.i.i.epil, 1
  %phitmp.i.i.i.i.epil = and i32 %add.i.i.i.i135.epil, 255
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %for.end.i.i.i.i, label %for.body.for.body_crit_edge.i.i.i.i.epil, !llvm.loop !33

for.end.i.i.i.i:                                  ; preds = %for.body.for.body_crit_edge.i.i.i.i.epil, %for.end.i.i.i.i.unr-lcssa
  %phitmp.i.i.i.i.lcssa = phi i32 [ %phitmp.i.i.i.i.lcssa.ph, %for.end.i.i.i.i.unr-lcssa ], [ %phitmp.i.i.i.i.epil, %for.body.for.body_crit_edge.i.i.i.i.epil ]
  %phitmp.i.i.i = icmp eq i32 %phitmp.i.i.i.i.lcssa, 0
  br i1 %phitmp.i.i.i, label %if.end18.i.i.i.i, label %do.body.i.i.i140

if.end18.i.i.i.i:                                 ; preds = %for.end.i.i.i.i
  %fw_start.i.i.i.i = getelementptr inbounds %struct.fw_info, %struct.fw_info* %79, i64 0, i32 2
  %87 = load i32, i32* %fw_start.i.i.i.i, align 1
  %conv19.i.i.i.i = zext i32 %87 to i64
  %cmp21.i.i.i.i = icmp ult i64 %81, %conv19.i.i.i.i
  br i1 %cmp21.i.i.i.i, label %do.body.i.i.i140, label %if.end24.i.i.i.i

if.end24.i.i.i.i:                                 ; preds = %if.end18.i.i.i.i
  %fw_len.i.i.i.i = getelementptr inbounds %struct.fw_info, %struct.fw_info* %79, i64 0, i32 3
  %88 = load i32, i32* %fw_len.i.i.i.i, align 1
  %conv25.i.i.i.i = zext i32 %88 to i64
  %sub.i.i.i.i = sub i64 %81, %conv19.i.i.i.i
  %div.i.i.i.i = lshr i64 %sub.i.i.i.i, 2
  %cmp27.i.i.i.i = icmp ult i64 %div.i.i.i.i, %conv25.i.i.i.i
  br i1 %cmp27.i.i.i.i, label %do.body.i.i.i140, label %cleanup.i.i.i.i

cleanup.i.i.i.i:                                  ; preds = %if.end24.i.i.i.i
  %arraydecay35.i.i.i.i = getelementptr inbounds %struct.fw_info, %struct.fw_info* %79, i64 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %80, i8* %arraydecay35.i.i.i.i, i64 32, i32 1, i1 false) #10
  %89 = load i8*, i8** %data.i.i.i.i, align 8
  %add.ptr.i.i.i.i136 = getelementptr i8, i8* %89, i64 %conv19.i.i.i.i
  %90 = bitcast i8* %phy_action.i.i.i.i to i8**
  store i8* %add.ptr.i.i.i.i136, i8** %90, align 8
  %91 = bitcast i8* %add.ptr.i.i.i.i136 to i32*
  br label %if.end3.i.i.i

if.else44.i.i.i.i:                                ; preds = %if.end.i.i.i.i133
  %rem.i.i.i.i = and i64 %81, 3
  %tobool46.i.i.i.i = icmp eq i64 %rem.i.i.i.i, 0
  br i1 %tobool46.i.i.i.i, label %if.end48.i.i.i.i, label %do.body.i.i.i140

if.end48.i.i.i.i:                                 ; preds = %if.else44.i.i.i.i
  %92 = load i16, i16* %69, align 2
  %idxprom.i.i.i.i.i = zext i16 %92 to i64
  %fw_name.i.i.i.i.i = getelementptr [51 x %struct.anon.113], [51 x %struct.anon.113]* @rtl_chip_infos, i64 0, i64 %idxprom.i.i.i.i.i, i32 2
  %93 = load i8*, i8** %fw_name.i.i.i.i.i, align 16
  %call50.i.i.i.i = call i64 @strlcpy(i8* %80, i8* %93, i64 32) #9
  %94 = bitcast i8** %data.i.i.i.i to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast i8* %phy_action.i.i.i.i to i64*
  store i64 %95, i64* %96, align 8
  %97 = load i64, i64* %size.i.i.i.i, align 8
  %div54.i.i.i.i = lshr i64 %97, 2
  %98 = inttoptr i64 %95 to i32*
  br label %if.end3.i.i.i

do.body.i.i.i140:                                 ; preds = %if.else44.i.i.i.i, %if.end24.i.i.i.i, %if.end18.i.i.i.i, %for.end.i.i.i.i, %if.then3.i.i.i.i, %if.end7.i.i
  %msg_enable.i.i.i137 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %99 = bitcast i8* %msg_enable.i.i.i137 to i32*
  %100 = load i32, i32* %99, align 8
  %and.i.i.i138 = and i32 %100, 32
  %tobool.i.i.i139 = icmp eq i32 %and.i.i.i138, 0
  br i1 %tobool.i.i.i139, label %err_release_firmware.i.i, label %if.then2.i.i.i

if.then2.i.i.i:                                   ; preds = %do.body.i.i.i140
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %76, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.35, i64 0, i64 0)) #9
  br label %err_release_firmware.i.i

if.end3.i.i.i:                                    ; preds = %if.end48.i.i.i.i, %cleanup.i.i.i.i
  %101 = phi i32* [ %91, %cleanup.i.i.i.i ], [ %98, %if.end48.i.i.i.i ]
  %conv25.sink.i.i.i.i = phi i64 [ %conv25.i.i.i.i, %cleanup.i.i.i.i ], [ %div54.i.i.i.i, %if.end48.i.i.i.i ]
  %size40.i.i.i.i = getelementptr inbounds i8, i8* %call.i.i.i.i129, i64 48
  %102 = bitcast i8* %size40.i.i.i.i to i64*
  store i64 %conv25.sink.i.i.i.i, i64* %102, align 8
  %103 = getelementptr i8, i8* %call.i.i.i.i129, i64 39
  store i8 0, i8* %103, align 1
  %cmp7.i.i.i.i = icmp eq i64 %conv25.sink.i.i.i.i, 0
  br i1 %cmp7.i.i.i.i, label %rtl_request_uncached_firmware.exit.i, label %for.body.i15.i.i.i.preheader

for.body.i15.i.i.i.preheader:                     ; preds = %if.end3.i.i.i
  br label %for.body.i15.i.i.i

for.body.i15.i.i.i:                               ; preds = %for.body.i15.i.i.i.preheader, %for.inc.i.i.i.i
  %index.08.i.i.i.i = phi i64 [ %inc.i19.i.i.i, %for.inc.i.i.i.i ], [ 0, %for.body.i15.i.i.i.preheader ]
  %arrayidx.i.i.i.i = getelementptr i32, i32* %101, i64 %index.08.i.i.i.i
  %104 = load i32, i32* %arrayidx.i.i.i.i, align 4
  %and.i.i.i.i141 = lshr i32 %104, 16
  %shr.i.i.i.i142 = and i32 %and.i.i.i.i141, 4095
  %105 = lshr i32 %104, 28
  %106 = xor i32 %105, 8
  %trunc.i.i.i.i = trunc i32 %106 to i4
  switch i4 %trunc.i.i.i.i, label %do.body42.i.i.i.i [
    i4 -8, label %for.inc.i.i.i.i
    i4 -7, label %for.inc.i.i.i.i
    i4 -6, label %for.inc.i.i.i.i
    i4 -4, label %for.inc.i.i.i.i
    i4 -1, label %for.inc.i.i.i.i
    i4 0, label %for.inc.i.i.i.i
    i4 4, label %for.inc.i.i.i.i
    i4 6, label %for.inc.i.i.i.i
    i4 -5, label %sw.bb2.i.i.i.i
    i4 1, label %sw.bb9.i.i.i.i
    i4 2, label %sw.bb24.i.i.i.i
    i4 3, label %sw.bb24.i.i.i.i
    i4 5, label %sw.bb24.i.i.i.i
  ]

sw.bb2.i.i.i.i:                                   ; preds = %for.body.i15.i.i.i
  %conv.i16.i.i.i = zext i32 %shr.i.i.i.i142 to i64
  %cmp3.i.i.i.i = icmp ult i64 %index.08.i.i.i.i, %conv.i16.i.i.i
  br i1 %cmp3.i.i.i.i, label %do.body.i.i.i.i, label %for.inc.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %sw.bb2.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %107 = bitcast i8* %msg_enable.i.i.i.i to i32*
  %108 = load i32, i32* %107, align 8
  %and5.i.i.i.i = and i32 %108, 32
  %tobool.i17.i.i.i = icmp eq i32 %and5.i.i.i.i, 0
  br i1 %tobool.i17.i.i.i, label %err_release_firmware.i.i, label %if.then6.i.i.i.i

if.then6.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %109 = load %struct.net_device*, %struct.net_device** %27, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %109, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.36, i64 0, i64 0)) #9
  br label %err_release_firmware.i.i

sw.bb9.i.i.i.i:                                   ; preds = %for.body.i15.i.i.i
  %add.i18.i.i.i = add nuw nsw i64 %index.08.i.i.i.i, 2
  %cmp11.i.i.i.i = icmp ult i64 %add.i18.i.i.i, %conv25.sink.i.i.i.i
  br i1 %cmp11.i.i.i.i, label %for.inc.i.i.i.i, label %do.body14.i.i.i.i

do.body14.i.i.i.i:                                ; preds = %sw.bb9.i.i.i.i
  %msg_enable15.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %110 = bitcast i8* %msg_enable15.i.i.i.i to i32*
  %111 = load i32, i32* %110, align 8
  %and16.i.i.i.i = and i32 %111, 32
  %tobool17.i.i.i.i = icmp eq i32 %and16.i.i.i.i, 0
  br i1 %tobool17.i.i.i.i, label %err_release_firmware.i.i, label %if.then18.i.i.i.i

if.then18.i.i.i.i:                                ; preds = %do.body14.i.i.i.i
  %112 = load %struct.net_device*, %struct.net_device** %27, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %112, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.36, i64 0, i64 0)) #9
  br label %err_release_firmware.i.i

sw.bb24.i.i.i.i:                                  ; preds = %for.body.i15.i.i.i, %for.body.i15.i.i.i, %for.body.i15.i.i.i
  %add25.i.i.i.i = add nuw nsw i64 %index.08.i.i.i.i, 1
  %conv26.i.i.i.i = zext i32 %shr.i.i.i.i142 to i64
  %add27.i.i.i.i = add i64 %add25.i.i.i.i, %conv26.i.i.i.i
  %cmp29.i.i.i.i = icmp ult i64 %add27.i.i.i.i, %conv25.sink.i.i.i.i
  br i1 %cmp29.i.i.i.i, label %for.inc.i.i.i.i, label %do.body32.i.i.i.i

do.body32.i.i.i.i:                                ; preds = %sw.bb24.i.i.i.i
  %msg_enable33.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %113 = bitcast i8* %msg_enable33.i.i.i.i to i32*
  %114 = load i32, i32* %113, align 8
  %and34.i.i.i.i = and i32 %114, 32
  %tobool35.i.i.i.i = icmp eq i32 %and34.i.i.i.i, 0
  br i1 %tobool35.i.i.i.i, label %err_release_firmware.i.i, label %if.then36.i.i.i.i

if.then36.i.i.i.i:                                ; preds = %do.body32.i.i.i.i
  %115 = load %struct.net_device*, %struct.net_device** %27, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %115, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.36, i64 0, i64 0)) #9
  br label %err_release_firmware.i.i

do.body42.i.i.i.i:                                ; preds = %for.body.i15.i.i.i
  %msg_enable43.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %116 = bitcast i8* %msg_enable43.i.i.i.i to i32*
  %117 = load i32, i32* %116, align 8
  %and44.i.i.i.i = and i32 %117, 32
  %tobool45.i.i.i.i = icmp eq i32 %and44.i.i.i.i, 0
  br i1 %tobool45.i.i.i.i, label %err_release_firmware.i.i, label %if.then46.i.i.i.i

if.then46.i.i.i.i:                                ; preds = %do.body42.i.i.i.i
  %118 = load %struct.net_device*, %struct.net_device** %27, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %118, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.37, i64 0, i64 0), i32 %104) #9
  br label %err_release_firmware.i.i

for.inc.i.i.i.i:                                  ; preds = %sw.bb24.i.i.i.i, %sw.bb9.i.i.i.i, %sw.bb2.i.i.i.i, %for.body.i15.i.i.i, %for.body.i15.i.i.i, %for.body.i15.i.i.i, %for.body.i15.i.i.i, %for.body.i15.i.i.i, %for.body.i15.i.i.i, %for.body.i15.i.i.i, %for.body.i15.i.i.i
  %inc.i19.i.i.i = add nuw nsw i64 %index.08.i.i.i.i, 1
  %cmp.i20.i.i.i = icmp ult i64 %inc.i19.i.i.i, %conv25.sink.i.i.i.i
  br i1 %cmp.i20.i.i.i, label %for.body.i15.i.i.i, label %rtl_request_uncached_firmware.exit.i

err_release_firmware.i.i:                         ; preds = %if.then46.i.i.i.i, %do.body42.i.i.i.i, %if.then36.i.i.i.i, %do.body32.i.i.i.i, %if.then18.i.i.i.i, %do.body14.i.i.i.i, %if.then6.i.i.i.i, %do.body.i.i.i.i, %if.then2.i.i.i, %do.body.i.i.i140
  %119 = load %struct.firmware*, %struct.firmware** %fw.i.i, align 8
  call void @release_firmware(%struct.firmware* %119) #9
  br label %err_free.i.i

err_free.i.i:                                     ; preds = %err_release_firmware.i.i, %if.end4.i.i
  %rc.0.i.i = phi i32 [ %call5.i.i, %if.end4.i.i ], [ -22, %err_release_firmware.i.i ]
  call void @kfree(i8* nonnull %call.i.i.i.i129) #9
  br label %do.body.i.i

do.body.i.i:                                      ; preds = %err_free.i.i, %if.end.i.i130
  %rc.1.i.i = phi i32 [ %rc.0.i.i, %err_free.i.i ], [ -12, %if.end.i.i130 ]
  %msg_enable.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %120 = bitcast i8* %msg_enable.i.i to i32*
  %121 = load i32, i32* %120, align 8
  %and.i.i = and i32 %121, 32
  %tobool14.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool14.i.i, label %rtl_request_uncached_firmware.exit.i, label %if.then15.i.i

if.then15.i.i:                                    ; preds = %do.body.i.i
  %122 = load %struct.net_device*, %struct.net_device** %27, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_warn(%struct.net_device* %122, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.34, i64 0, i64 0), i8* nonnull %71, i32 %rc.1.i.i) #9
  br label %rtl_request_uncached_firmware.exit.i

rtl_request_uncached_firmware.exit.i:             ; preds = %for.inc.i.i.i.i, %if.then15.i.i, %do.body.i.i, %if.end3.i.i.i, %if.then.i
  %.sink.i.i = phi %struct.rtl_fw* [ null, %do.body.i.i ], [ null, %if.then.i ], [ null, %if.then15.i.i ], [ %74, %if.end3.i.i.i ], [ %74, %for.inc.i.i.i.i ]
  store %struct.rtl_fw* %.sink.i.i, %struct.rtl_fw** %66, align 8
  br label %rtl_request_firmware.exit

rtl_request_firmware.exit:                        ; preds = %do.body, %rtl_request_uncached_firmware.exit.i
  %irq = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i64 0, i32 37
  %123 = load i32, i32* %irq, align 4
  %features = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5792
  %124 = bitcast i8* %features to i32*
  %125 = load i32, i32* %124, align 8
  %and = shl i32 %125, 6
  %126 = and i32 %and, 128
  %127 = xor i32 %126, 128
  %128 = zext i32 %127 to i64
  %arraydecay = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 0
  %call.i143 = call i32 @request_threaded_irq(i32 %123, i32 (i32, i8*)* nonnull @rtl8169_interrupt, i32 (i32, i8*)* null, i64 %128, i8* %arraydecay, i8* %arraydecay) #9
  %cmp25 = icmp slt i32 %call.i143, 0
  br i1 %cmp25, label %err_release_fw_2, label %if.end28

if.end28:                                         ; preds = %rtl_request_firmware.exit
  %wk = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5712
  %mutex.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5720
  %129 = bitcast i8* %mutex.i to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %129) #9
  %arraydecay30 = bitcast i8* %wk to i64*
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay30, i64 0, i64* %arraydecay30) #10, !srcloc !19
  %state.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2152
  %130 = bitcast i8* %state.i to i64*
  %131 = load volatile i64, i64* %130, align 8
  %132 = and i64 %131, 1
  %tobool.i = icmp eq i64 %132, 0
  br i1 %tobool.i, label %do.body4.i, label %napi_enable.exit, !prof !10

do.body4.i:                                       ; preds = %if.end28
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.38, i64 0, i64 0), i32 511, i64 12) #10, !srcloc !35
  br label %do.body5.i

do.body5.i:                                       ; preds = %do.body5.i, %do.body4.i
  br label %do.body5.i

napi_enable.exit:                                 ; preds = %if.end28
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !36
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %130, i64 0, i64* %130) #10, !srcloc !20
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %130, i64 2, i64* %130) #10, !srcloc !20
  call fastcc void @rtl8169_init_phy(%struct.net_device* nonnull %dev, %struct.rtl8169_private* nonnull %0) #11
  %features31 = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 17
  %133 = load i64, i64* %features31, align 16
  %134 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i145 = getelementptr i8, i8* %134, i64 68
  %135 = bitcast i8* %add.ptr.i145 to i32*
  %136 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %135) #10, !srcloc !2
  %and.i = and i64 %133, 274877906944
  %tobool.i146 = icmp eq i64 %and.i, 0
  %or.i = or i32 %136, 48
  %and2.i = and i32 %136, -49
  %rx_config.0.i = select i1 %tobool.i146, i32 %and2.i, i32 %or.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %rx_config.0.i, i32* %135) #10, !srcloc !8
  %and4.i = and i64 %133, 17179869184
  %tobool5.i = icmp eq i64 %and4.i, 0
  %cp_cmd.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5576
  %137 = bitcast i8* %cp_cmd.i to i16*
  %138 = load i16, i16* %137, align 8
  %and12.i = and i16 %138, -33
  %or7.i = or i16 %138, 32
  %and12.sink.i = select i1 %tobool5.i, i16 %and12.i, i16 %or7.i
  %and15.i = and i64 %133, 256
  %tobool16.i = icmp eq i64 %and15.i, 0
  %and25.i = and i16 %and12.sink.i, -65
  %or20.i = or i16 %and12.sink.i, 64
  %and25.sink.i = select i1 %tobool16.i, i16 %and25.i, i16 %or20.i
  store i16 %and25.sink.i, i16* %137, align 8
  %add.ptr28.i = getelementptr i8, i8* %134, i64 224
  %139 = bitcast i8* %add.ptr28.i to i16*
  %140 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %139) #10, !srcloc !21
  %141 = and i16 %140, -97
  %142 = load i16, i16* %137, align 8
  %or3454.i = or i16 %142, %141
  store i16 %or3454.i, i16* %137, align 8
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %or3454.i, i16* %139) #10, !srcloc !3
  %143 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %139) #10, !srcloc !21
  %up.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5608
  %144 = bitcast i8* %up.i to void (%struct.rtl8169_private*)**
  %145 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %144, align 8
  %tobool.i.i147 = icmp eq void (%struct.rtl8169_private*)* %145, null
  br i1 %tobool.i.i147, label %rtl_pll_power_up.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %napi_enable.exit
  call void %145(%struct.rtl8169_private* nonnull %0) #9
  br label %rtl_pll_power_up.exit

rtl_pll_power_up.exit:                            ; preds = %napi_enable.exit, %if.then.i.i
  %hw_start.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5672
  %146 = bitcast i8* %hw_start.i to void (%struct.net_device*)**
  %147 = load void (%struct.net_device*)*, void (%struct.net_device*)** %146, align 8
  call void %147(%struct.net_device* nonnull %dev) #9
  %event_slow.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5578
  %148 = bitcast i8* %event_slow.i.i to i16*
  %149 = load i16, i16* %148, align 2
  %150 = or i16 %149, 15
  %151 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %151, i64 60
  %152 = bitcast i8* %add.ptr.i.i.i to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %150, i16* %152) #10, !srcloc !3
  %counters1.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5856
  %153 = bitcast i8* %counters1.i to %struct.rtl8169_counters**
  %154 = load %struct.rtl8169_counters*, %struct.rtl8169_counters** %153, align 8
  %tc_offset.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5864
  %155 = load i8, i8* %tc_offset.i, align 8, !range !37
  %tobool.i150 = icmp eq i8 %155, 0
  br i1 %tobool.i150, label %if.end.i, label %if.end41

if.end.i:                                         ; preds = %rtl_pll_power_up.exit
  %mac_version.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %156 = bitcast i8* %mac_version.i.i to i16*
  %157 = load i16, i16* %156, align 2
  %cmp.i.i151 = icmp ult i16 %157, 18
  br i1 %cmp.i.i151, label %rtl8169_init_counter_offsets.exit, label %if.end.i.i154

if.end.i.i154:                                    ; preds = %if.end.i
  %158 = load i8*, i8** %mmio_addr, align 8
  %counters_phys_addr.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5848
  %159 = bitcast i8* %counters_phys_addr.i.i.i to i64*
  %160 = load i64, i64* %159, align 8
  %shr.i.i.i = lshr i64 %160, 32
  %conv.i.i.i = trunc i64 %shr.i.i.i to i32
  %add.ptr.i5.i.i = getelementptr i8, i8* %158, i64 20
  %161 = bitcast i8* %add.ptr.i5.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv.i.i.i, i32* %161) #10, !srcloc !8
  %conv1.i.i.i = trunc i64 %160 to i32
  %add.ptr2.i.i.i = getelementptr i8, i8* %158, i64 16
  %162 = bitcast i8* %add.ptr2.i.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv1.i.i.i, i32* %162) #10, !srcloc !8
  %or.i.i.i153 = or i32 %conv1.i.i.i, 1
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i.i.i153, i32* %162) #10, !srcloc !8
  br label %for.body.i.i.i.i.i

for.cond.i.i.i.i.i:                               ; preds = %for.body.i.i.i.i.i
  %inc.i.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i.i, 1
  %cmp.i.i.i.i.i155 = icmp ult i32 %i.017.i.i.i.i.i, 999
  br i1 %cmp.i.i.i.i.i155, label %for.body.i.i.i.i.i, label %do.body.i.i.i.i.i

for.body.i.i.i.i.i:                               ; preds = %for.cond.i.i.i.i.i, %if.end.i.i154
  %i.017.i.i.i.i.i = phi i32 [ 0, %if.end.i.i154 ], [ %inc.i.i.i.i.i, %for.cond.i.i.i.i.i ]
  call void @__udelay(i64 10) #9
  %163 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i19.i.i.i = getelementptr i8, i8* %163, i64 16
  %164 = bitcast i8* %add.ptr.i19.i.i.i to i32*
  %165 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %164) #10, !srcloc !2
  %and.i.i.i.i156 = and i32 %165, 9
  %tobool.i.i.i.i157 = icmp eq i32 %and.i.i.i.i156, 0
  br i1 %tobool.i.i.i.i157, label %rtl8169_reset_counters.exit.i, label %for.cond.i.i.i.i.i

do.body.i.i.i.i.i:                                ; preds = %for.cond.i.i.i.i.i
  %msg_enable.i.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %166 = bitcast i8* %msg_enable.i.i.i.i.i to i32*
  %167 = load i32, i32* %166, align 8
  %and.i.i.i.i.i158 = and i32 %167, 1
  %tobool4.i.i.i.i.i159 = icmp eq i32 %and.i.i.i.i.i158, 0
  br i1 %tobool4.i.i.i.i.i159, label %.critedge.i, label %if.then5.i.i.i.i.i

if.then5.i.i.i.i.i:                               ; preds = %do.body.i.i.i.i.i
  %168 = load %struct.net_device*, %struct.net_device** %27, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %168, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.45, i64 0, i64 0), i32 1, i32 1000, i32 10) #9
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %162) #10, !srcloc !8
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %161) #10, !srcloc !8
  br label %rtl8169_init_counter_offsets.exit

rtl8169_reset_counters.exit.i:                    ; preds = %for.body.i.i.i.i.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %162) #10, !srcloc !8
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %161) #10, !srcloc !8
  br label %rtl8169_init_counter_offsets.exit

.critedge.i:                                      ; preds = %do.body.i.i.i.i.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %162) #10, !srcloc !8
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %161) #10, !srcloc !8
  br label %rtl8169_init_counter_offsets.exit

rtl8169_init_counter_offsets.exit:                ; preds = %if.end.i, %if.then5.i.i.i.i.i, %rtl8169_reset_counters.exit.i, %.critedge.i
  %169 = phi i1 [ false, %.critedge.i ], [ false, %if.then5.i.i.i.i.i ], [ true, %rtl8169_reset_counters.exit.i ], [ true, %if.end.i ]
  %call5.i = call fastcc zeroext i1 @rtl8169_update_counters(%struct.net_device* nonnull %dev) #9
  %ret.1.i = or i1 %169, %call5.i
  %tx_errors.i = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %154, i64 0, i32 2
  %170 = load i64, i64* %tx_errors.i, align 8
  %tx_errors9.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5872
  %171 = bitcast i8* %tx_errors9.i to i64*
  store i64 %170, i64* %171, align 8
  %tx_multi_collision.i = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %154, i64 0, i32 7
  %172 = load i32, i32* %tx_multi_collision.i, align 4
  %tx_multi_collision11.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5880
  %173 = bitcast i8* %tx_multi_collision11.i to i32*
  store i32 %172, i32* %173, align 8
  %tx_aborted.i = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %154, i64 0, i32 11
  %174 = load i16, i16* %tx_aborted.i, align 4
  %tx_aborted13.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5884
  %175 = bitcast i8* %tx_aborted13.i to i16*
  store i16 %174, i16* %175, align 4
  store i8 1, i8* %tc_offset.i, align 8
  br i1 %ret.1.i, label %if.end41, label %do.body34

do.body34:                                        ; preds = %rtl8169_init_counter_offsets.exit
  %msg_enable = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %176 = bitcast i8* %msg_enable to i32*
  %177 = load i32, i32* %176, align 8
  %and35 = and i32 %177, 8192
  %tobool36 = icmp eq i32 %and35, 0
  br i1 %tobool36, label %if.end41, label %if.then37

if.then37:                                        ; preds = %do.body34
  call void (%struct.net_device*, i8*, ...) @netdev_warn(%struct.net_device* nonnull %dev, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.24, i64 0, i64 0)) #9
  br label %if.end41

if.end41:                                         ; preds = %rtl_pll_power_up.exit, %do.body34, %if.then37, %rtl8169_init_counter_offsets.exit
  %_tx.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 88
  %178 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i, align 64
  %state.i.i = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %178, i64 0, i32 10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %state.i.i, i64 0, i64* %state.i.i) #10, !srcloc !20
  call void @mutex_unlock(%struct.mutex* nonnull %129) #9
  %saved_wolopts = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5888
  %179 = bitcast i8* %saved_wolopts to i32*
  store i32 0, i32* %179, align 8
  %180 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i64 0, i32 35, i32 10, i32 12, i32 0
  %181 = load volatile i32, i32* %180, align 4
  %cmp1.i.i.i161 = icmp eq i32 %181, 0
  br i1 %cmp1.i.i.i161, label %pm_runtime_put_noidle.exit169, label %if.end.i.i.i168.preheader, !prof !10

if.end.i.i.i168.preheader:                        ; preds = %if.end41
  br label %if.end.i.i.i168

if.end.i.i.i168:                                  ; preds = %if.end.i.i.i168.preheader, %if.end.i.i.i168
  %c.02.i.i.i163 = phi i32 [ %182, %if.end.i.i.i168 ], [ %181, %if.end.i.i.i168.preheader ]
  %add.i.i.i164 = add i32 %c.02.i.i.i163, -1
  %182 = call i32 asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; cmpxchgl $2,$1", "={ax},=*m,r,0,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %180, i32 %add.i.i.i164, i32 %c.02.i.i.i163, i32* %180) #10, !srcloc !13
  %cmp3.i.i.i165 = icmp eq i32 %182, %c.02.i.i.i163
  %cmp.i.i.i166 = icmp eq i32 %182, 0
  %or.cond.i.i167 = or i1 %cmp3.i.i.i165, %cmp.i.i.i166
  br i1 %or.cond.i.i167, label %pm_runtime_put_noidle.exit169, label %if.end.i.i.i168, !prof !14

pm_runtime_put_noidle.exit169:                    ; preds = %if.end.i.i.i168, %if.end41
  call fastcc void @__rtl8169_check_link_status(%struct.net_device* %dev, %struct.rtl8169_private* %0, i8* %1, i1 zeroext false) #9
  br label %out

out:                                              ; preds = %if.end.i.i.i, %err_pm_runtime_put, %pm_runtime_put_noidle.exit169
  %retval1.0 = phi i32 [ %call.i143, %pm_runtime_put_noidle.exit169 ], [ %retval1.3, %err_pm_runtime_put ], [ %retval1.3, %if.end.i.i.i ]
  ret i32 %retval1.0

err_release_fw_2:                                 ; preds = %rtl_request_firmware.exit
  %183 = load i8*, i8** %67, align 8
  %tobool.i.i171 = icmp eq i8* %183, null
  %cmp.i.i172 = icmp ugt i8* %183, inttoptr (i64 -4096 to i8*)
  %.cmp.i.i = or i1 %tobool.i.i171, %cmp.i.i172
  br i1 %.cmp.i.i, label %rtl_release_firmware.exit, label %if.then.i173

if.then.i173:                                     ; preds = %err_release_fw_2
  %fw.i = bitcast i8* %183 to %struct.firmware**
  %184 = load %struct.firmware*, %struct.firmware** %fw.i, align 8
  call void @release_firmware(%struct.firmware* %184) #9
  %185 = load i8*, i8** %67, align 8
  call void @kfree(i8* %185) #9
  br label %rtl_release_firmware.exit

rtl_release_firmware.exit:                        ; preds = %err_release_fw_2, %if.then.i173
  store %struct.rtl_fw* inttoptr (i64 -11 to %struct.rtl_fw*), %struct.rtl_fw** %66, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %rtl_release_firmware.exit
  %indvars.iv.i = phi i64 [ 0, %rtl_release_firmware.exit ], [ %indvars.iv.next.i, %for.inc.i ]
  %arrayidx.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 16, i64 %indvars.iv.i
  %186 = load i8*, i8** %arrayidx.i, align 8
  %tobool.i176 = icmp eq i8* %186, null
  br i1 %tobool.i176, label %for.inc.i, label %if.then.i177

if.then.i177:                                     ; preds = %for.body.i
  %187 = load %struct.RxDesc*, %struct.RxDesc** %22, align 8
  %188 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %addr.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %187, i64 %indvars.iv.i, i32 2
  %dma_ops.i.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %188, i64 0, i32 35, i32 22, i32 0
  %189 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i.i, align 8
  %tobool4.i.i.i.i = icmp eq %struct.dma_map_ops* %189, null
  %190 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i.i = select i1 %tobool4.i.i.i.i, %struct.dma_map_ops* %190, %struct.dma_map_ops* %189
  %unmap_page.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i.i, i64 0, i32 5
  %191 = load void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)** %unmap_page.i.i.i, align 8
  %tobool11.i.i.i = icmp eq void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)* %191, null
  br i1 %tobool11.i.i.i, label %rtl8169_free_rx_databuff.exit.i, label %if.then12.i.i.i

if.then12.i.i.i:                                  ; preds = %if.then.i177
  %dev.i.i178 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %188, i64 0, i32 35
  %192 = load i64, i64* %addr.i.i, align 8
  call void %191(%struct.device* %dev.i.i178, i64 %192, i64 16383, i32 2, %struct.dma_attrs* null) #9
  %.pre.i = load i8*, i8** %arrayidx.i, align 8
  br label %rtl8169_free_rx_databuff.exit.i

rtl8169_free_rx_databuff.exit.i:                  ; preds = %if.then12.i.i.i, %if.then.i177
  %193 = phi i8* [ %186, %if.then.i177 ], [ %.pre.i, %if.then12.i.i.i ]
  call void @kfree(i8* %193) #9
  store i8* null, i8** %arrayidx.i, align 8
  store i64 841534158063459245, i64* %addr.i.i, align 8
  %opts1.i.i.i179 = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %187, i64 %indvars.iv.i, i32 0
  %194 = load i32, i32* %opts1.i.i.i179, align 8
  %and.i.i.i180 = and i32 %194, 1073758207
  store i32 %and.i.i.i180, i32* %opts1.i.i.i179, align 8
  br label %for.inc.i

for.inc.i:                                        ; preds = %rtl8169_free_rx_databuff.exit.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, 256
  br i1 %exitcond.i, label %err_free_rx_1, label %for.body.i

err_free_rx_1:                                    ; preds = %for.inc.i, %for.inc.i.i.i
  %retval1.1 = phi i32 [ -12, %for.inc.i.i.i ], [ %call.i143, %for.inc.i ]
  %195 = load i8*, i8** %23, align 8
  %196 = load i64, i64* %14, align 8
  %197 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i, align 8
  %tobool4.i.i.i182 = icmp eq %struct.dma_map_ops* %197, null
  br i1 %tobool4.i.i.i182, label %get_dma_ops.exit.i.i184, label %do.end9.i.i188

get_dma_ops.exit.i.i184:                          ; preds = %err_free_rx_1
  %198 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %tobool.i.i183 = icmp eq %struct.dma_map_ops* %198, null
  br i1 %tobool.i.i183, label %do.body4.i.i185, label %do.end9.i.i188, !prof !10

do.body4.i.i185:                                  ; preds = %get_dma_ops.exit.i.i184
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 273, i64 12) #10, !srcloc !15
  br label %do.body5.i.i186

do.body5.i.i186:                                  ; preds = %do.body5.i.i186, %do.body4.i.i185
  br label %do.body5.i.i186

do.end9.i.i188:                                   ; preds = %get_dma_ops.exit.i.i184, %err_free_rx_1
  %retval.0.i2.i.i187 = phi %struct.dma_map_ops* [ %198, %get_dma_ops.exit.i.i184 ], [ %197, %err_free_rx_1 ]
  %199 = call i64 asm sideeffect "771:\0A\09call *${2:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${1:c}\0A  .byte 772b-771b\0A  .short ${3:c}\0A.popsection\0A", "={ax},i,i,i,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i64 40, i8** getelementptr inbounds (%struct.pv_irq_ops, %struct.pv_irq_ops* @pv_irq_ops, i64 0, i32 0, i32 0), i32 1) #10, !srcloc !16
  %200 = and i64 %199, 512
  %tobool23.i.i = icmp eq i64 %200, 0
  br i1 %tobool23.i.i, label %if.then36.i.i, label %if.end37.i.i, !prof !10

if.then36.i.i:                                    ; preds = %do.end9.i.i188
  call void @warn_slowpath_null(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 274) #9
  br label %if.end37.i.i

if.end37.i.i:                                     ; preds = %if.then36.i.i, %do.end9.i.i188
  %free.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i2.i.i187, i64 0, i32 1
  %201 = load void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)** %free.i.i, align 8
  %tobool46.i.i = icmp eq void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)* %201, null
  br i1 %tobool46.i.i, label %dma_free_coherent.exit, label %if.end48.i.i

if.end48.i.i:                                     ; preds = %if.end37.i.i
  call void %201(%struct.device* nonnull %dev2, i64 4096, i8* %195, i64 %196, %struct.dma_attrs* null) #9
  br label %dma_free_coherent.exit

dma_free_coherent.exit:                           ; preds = %if.end37.i.i, %if.end48.i.i
  store %struct.RxDesc* null, %struct.RxDesc** %22, align 8
  br label %err_free_tx_0

err_free_tx_0:                                    ; preds = %dma_alloc_coherent.exit122, %dma_free_coherent.exit
  %retval1.2 = phi i32 [ %retval1.1, %dma_free_coherent.exit ], [ -12, %dma_alloc_coherent.exit122 ]
  %202 = load i8*, i8** %13, align 8
  %203 = load i64, i64* %4, align 8
  %204 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i, align 8
  %tobool4.i.i.i190 = icmp eq %struct.dma_map_ops* %204, null
  br i1 %tobool4.i.i.i190, label %get_dma_ops.exit.i.i192, label %do.end9.i.i197

get_dma_ops.exit.i.i192:                          ; preds = %err_free_tx_0
  %205 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %tobool.i.i191 = icmp eq %struct.dma_map_ops* %205, null
  br i1 %tobool.i.i191, label %do.body4.i.i193, label %do.end9.i.i197, !prof !10

do.body4.i.i193:                                  ; preds = %get_dma_ops.exit.i.i192
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 273, i64 12) #10, !srcloc !15
  br label %do.body5.i.i194

do.body5.i.i194:                                  ; preds = %do.body5.i.i194, %do.body4.i.i193
  br label %do.body5.i.i194

do.end9.i.i197:                                   ; preds = %get_dma_ops.exit.i.i192, %err_free_tx_0
  %retval.0.i2.i.i195 = phi %struct.dma_map_ops* [ %205, %get_dma_ops.exit.i.i192 ], [ %204, %err_free_tx_0 ]
  %206 = call i64 asm sideeffect "771:\0A\09call *${2:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${1:c}\0A  .byte 772b-771b\0A  .short ${3:c}\0A.popsection\0A", "={ax},i,i,i,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i64 40, i8** getelementptr inbounds (%struct.pv_irq_ops, %struct.pv_irq_ops* @pv_irq_ops, i64 0, i32 0, i32 0), i32 1) #10, !srcloc !16
  %207 = and i64 %206, 512
  %tobool23.i.i196 = icmp eq i64 %207, 0
  br i1 %tobool23.i.i196, label %if.then36.i.i198, label %if.end37.i.i201, !prof !10

if.then36.i.i198:                                 ; preds = %do.end9.i.i197
  call void @warn_slowpath_null(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 274) #9
  br label %if.end37.i.i201

if.end37.i.i201:                                  ; preds = %if.then36.i.i198, %do.end9.i.i197
  %free.i.i199 = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i2.i.i195, i64 0, i32 1
  %208 = load void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)** %free.i.i199, align 8
  %tobool46.i.i200 = icmp eq void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)* %208, null
  br i1 %tobool46.i.i200, label %dma_free_coherent.exit203, label %if.end48.i.i202

if.end48.i.i202:                                  ; preds = %if.end37.i.i201
  call void %208(%struct.device* nonnull %dev2, i64 1024, i8* %202, i64 %203, %struct.dma_attrs* null) #9
  br label %dma_free_coherent.exit203

dma_free_coherent.exit203:                        ; preds = %if.end37.i.i201, %if.end48.i.i202
  store %struct.TxDesc* null, %struct.TxDesc** %12, align 8
  br label %err_pm_runtime_put

err_pm_runtime_put:                               ; preds = %dma_alloc_coherent.exit, %dma_free_coherent.exit203
  %retval1.3 = phi i32 [ %retval1.2, %dma_free_coherent.exit203 ], [ -12, %dma_alloc_coherent.exit ]
  %209 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i64 0, i32 35, i32 10, i32 12, i32 0
  %210 = load volatile i32, i32* %209, align 4
  %cmp1.i.i.i = icmp eq i32 %210, 0
  br i1 %cmp1.i.i.i, label %out, label %if.end.i.i.i.preheader, !prof !10

if.end.i.i.i.preheader:                           ; preds = %err_pm_runtime_put
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.end.i.i.i.preheader, %if.end.i.i.i
  %c.02.i.i.i = phi i32 [ %211, %if.end.i.i.i ], [ %210, %if.end.i.i.i.preheader ]
  %add.i.i.i = add i32 %c.02.i.i.i, -1
  %211 = call i32 asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; cmpxchgl $2,$1", "={ax},=*m,r,0,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %209, i32 %add.i.i.i, i32 %c.02.i.i.i, i32* %209) #10, !srcloc !13
  %cmp3.i.i.i = icmp eq i32 %211, %c.02.i.i.i
  %cmp.i.i.i = icmp eq i32 %211, 0
  %or.cond.i.i = or i1 %cmp3.i.i.i, %cmp.i.i.i
  br i1 %or.cond.i.i, label %out, label %if.end.i.i.i, !prof !14
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_close(%struct.net_device* %dev) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %pci_dev = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %1 = bitcast i8* %pci_dev to %struct.pci_dev**
  %2 = load %struct.pci_dev*, %struct.pci_dev** %1, align 8
  %dev1 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %2, i64 0, i32 35
  %call.i31 = call i32 @__pm_runtime_resume(%struct.device* %dev1, i32 4) #9
  %call3 = call fastcc zeroext i1 @rtl8169_update_counters(%struct.net_device* %dev) #11
  %mutex.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5720
  %3 = bitcast i8* %mutex.i to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %3) #9
  %wk = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5712
  %arraydecay = bitcast i8* %wk to i64*
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay, i64 0, i64* %arraydecay) #10, !srcloc !20
  %mmio_addr.i = bitcast i8* %add.ptr.i to i8**
  %4 = load i8*, i8** %mmio_addr.i, align 8
  %timer.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5496
  %5 = bitcast i8* %timer.i to %struct.timer_list*
  %call1.i = call i32 @del_timer_sync(%struct.timer_list* %5) #9
  %napi.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2136
  %6 = bitcast i8* %napi.i to %struct.napi_struct*
  call void @napi_disable(%struct.napi_struct* %6) #9
  %_tx.i.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 88
  %7 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i.i, align 64
  %state.i.i.i = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %7, i64 0, i32 10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %state.i.i.i, i64 0, i64* %state.i.i.i) #10, !srcloc !19
  call fastcc void @rtl8169_hw_reset(%struct.rtl8169_private* %0) #9
  %mac_version.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %8 = bitcast i8* %mac_version.i.i to i16*
  %9 = load i16, i16* %8, align 2
  %cmp.i.i = icmp ugt i16 %9, 5
  br i1 %cmp.i.i, label %rtl8169_rx_missed.exit.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  %add.ptr.i12.i = getelementptr i8, i8* %4, i64 76
  %10 = bitcast i8* %add.ptr.i12.i to i32*
  %11 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %10) #10, !srcloc !2
  %and.i.i = and i32 %11, 16777215
  %conv3.i.i = zext i32 %and.i.i to i64
  %rx_missed_errors.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 15
  %12 = load i64, i64* %rx_missed_errors.i.i, align 8
  %add.i.i = add i64 %12, %conv3.i.i
  store i64 %add.i.i, i64* %rx_missed_errors.i.i, align 8
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %10) #10, !srcloc !8
  br label %rtl8169_rx_missed.exit.i

rtl8169_rx_missed.exit.i:                         ; preds = %if.end.i.i, %entry
  call void @synchronize_sched() #9
  %dirty_tx.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2352
  %13 = bitcast i8* %dirty_tx.i.i to i32*
  %14 = load i32, i32* %13, align 8
  %TxDescArray.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2392
  %15 = bitcast i8* %TxDescArray.i.i.i to %struct.TxDesc**
  %dev9.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %16 = bitcast i8* %dev9.i.i.i to %struct.net_device**
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %if.end11.i.i.i, %rtl8169_rx_missed.exit.i
  %i.029.i.i.i = phi i32 [ 0, %rtl8169_rx_missed.exit.i ], [ %inc12.i.i.i, %if.end11.i.i.i ]
  %add.i.i.i = add i32 %i.029.i.i.i, %14
  %rem.i.i.i = and i32 %add.i.i.i, 63
  %idx.ext.i.i.i = zext i32 %rem.i.i.i to i64
  %len3.i.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 17, i64 %idx.ext.i.i.i, i32 1
  %17 = load i32, i32* %len3.i.i.i, align 8
  %tobool.i.i13.i = icmp eq i32 %17, 0
  br i1 %tobool.i.i13.i, label %if.end11.i.i.i, label %if.then.i.i14.i

if.then.i.i14.i:                                  ; preds = %for.body.i.i.i
  %skb4.i.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 17, i64 %idx.ext.i.i.i, i32 0
  %18 = load %struct.sk_buff*, %struct.sk_buff** %skb4.i.i.i, align 8
  %19 = load %struct.pci_dev*, %struct.pci_dev** %1, align 8
  %20 = load %struct.TxDesc*, %struct.TxDesc** %15, align 8
  %add.ptr6.i.i.i = getelementptr %struct.TxDesc, %struct.TxDesc* %20, i64 %idx.ext.i.i.i
  %dma_ops.i.i.i.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %19, i64 0, i32 35, i32 22, i32 0
  %21 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i.i.i.i, align 8
  %tobool4.i.i.i.i.i.i = icmp eq %struct.dma_map_ops* %21, null
  %22 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i.i.i = select i1 %tobool4.i.i.i.i.i.i, %struct.dma_map_ops* %22, %struct.dma_map_ops* %21
  %unmap_page.i.i.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i.i.i, i64 0, i32 5
  %23 = load void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)** %unmap_page.i.i.i.i.i, align 8
  %tobool11.i.i.i.i.i = icmp eq void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)* %23, null
  br i1 %tobool11.i.i.i.i.i, label %rtl8169_unmap_tx_skb.exit.i.i.i, label %if.then12.i.i.i.i.i

if.then12.i.i.i.i.i:                              ; preds = %if.then.i.i14.i
  %dev.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %19, i64 0, i32 35
  %conv.i.i.i.i = zext i32 %17 to i64
  %addr.i.i.i.i = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %20, i64 %idx.ext.i.i.i, i32 2
  %24 = load i64, i64* %addr.i.i.i.i, align 8
  call void %23(%struct.device* %dev.i.i.i, i64 %24, i64 %conv.i.i.i.i, i32 1, %struct.dma_attrs* null) #9
  br label %rtl8169_unmap_tx_skb.exit.i.i.i

rtl8169_unmap_tx_skb.exit.i.i.i:                  ; preds = %if.then12.i.i.i.i.i, %if.then.i.i14.i
  %25 = bitcast %struct.TxDesc* %add.ptr6.i.i.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 16, i32 8, i1 false) #10
  store i32 0, i32* %len3.i.i.i, align 8
  %tobool7.i.i.i = icmp eq %struct.sk_buff* %18, null
  br i1 %tobool7.i.i.i, label %if.end11.i.i.i, label %if.then8.i.i.i

if.then8.i.i.i:                                   ; preds = %rtl8169_unmap_tx_skb.exit.i.i.i
  %26 = load %struct.net_device*, %struct.net_device** %16, align 8
  %tx_dropped.i.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %26, i64 0, i32 25, i32 7
  %27 = load i64, i64* %tx_dropped.i.i.i, align 8
  %inc.i.i.i = add i64 %27, 1
  store i64 %inc.i.i.i, i64* %tx_dropped.i.i.i, align 8
  call void @__dev_kfree_skb_any(%struct.sk_buff* nonnull %18, i32 1) #9
  store %struct.sk_buff* null, %struct.sk_buff** %skb4.i.i.i, align 8
  br label %if.end11.i.i.i

if.end11.i.i.i:                                   ; preds = %if.then8.i.i.i, %rtl8169_unmap_tx_skb.exit.i.i.i, %for.body.i.i.i
  %inc12.i.i.i = add nuw nsw i32 %i.029.i.i.i, 1
  %exitcond.i.i.i = icmp eq i32 %inc12.i.i.i, 64
  br i1 %exitcond.i.i.i, label %rtl8169_tx_clear.exit.i, label %for.body.i.i.i

rtl8169_tx_clear.exit.i:                          ; preds = %if.end11.i.i.i
  store i32 0, i32* %13, align 8
  %cur_tx.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2348
  %28 = bitcast i8* %cur_tx.i.i to i32*
  store i32 0, i32* %28, align 4
  %RxDescArray.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2400
  %29 = bitcast i8* %RxDescArray.i.i to %struct.RxDesc**
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i, %rtl8169_tx_clear.exit.i
  %indvars.iv.i.i = phi i64 [ 0, %rtl8169_tx_clear.exit.i ], [ %indvars.iv.next.i.i, %for.inc.i.i ]
  %arrayidx.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 16, i64 %indvars.iv.i.i
  %30 = load i8*, i8** %arrayidx.i.i, align 8
  %tobool.i.i = icmp eq i8* %30, null
  br i1 %tobool.i.i, label %for.inc.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %31 = load %struct.RxDesc*, %struct.RxDesc** %29, align 8
  %32 = load %struct.pci_dev*, %struct.pci_dev** %1, align 8
  %addr.i.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %31, i64 %indvars.iv.i.i, i32 2
  %dma_ops.i.i.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %32, i64 0, i32 35, i32 22, i32 0
  %33 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i.i.i, align 8
  %tobool4.i.i.i.i.i = icmp eq %struct.dma_map_ops* %33, null
  %34 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i.i16.i = select i1 %tobool4.i.i.i.i.i, %struct.dma_map_ops* %34, %struct.dma_map_ops* %33
  %unmap_page.i.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i.i16.i, i64 0, i32 5
  %35 = load void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)** %unmap_page.i.i.i.i, align 8
  %tobool11.i.i.i.i = icmp eq void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)* %35, null
  br i1 %tobool11.i.i.i.i, label %rtl8169_free_rx_databuff.exit.i.i, label %if.then12.i.i.i.i

if.then12.i.i.i.i:                                ; preds = %if.then.i.i
  %dev.i.i17.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %32, i64 0, i32 35
  %36 = load i64, i64* %addr.i.i.i, align 8
  call void %35(%struct.device* %dev.i.i17.i, i64 %36, i64 16383, i32 2, %struct.dma_attrs* null) #9
  %.pre.i.i = load i8*, i8** %arrayidx.i.i, align 8
  br label %rtl8169_free_rx_databuff.exit.i.i

rtl8169_free_rx_databuff.exit.i.i:                ; preds = %if.then12.i.i.i.i, %if.then.i.i
  %37 = phi i8* [ %30, %if.then.i.i ], [ %.pre.i.i, %if.then12.i.i.i.i ]
  call void @kfree(i8* %37) #9
  store i8* null, i8** %arrayidx.i.i, align 8
  store i64 841534158063459245, i64* %addr.i.i.i, align 8
  %opts1.i.i.i.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %31, i64 %indvars.iv.i.i, i32 0
  %38 = load i32, i32* %opts1.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %38, 1073758207
  store i32 %and.i.i.i.i, i32* %opts1.i.i.i.i, align 8
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %rtl8169_free_rx_databuff.exit.i.i, %for.body.i.i
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.i.i = icmp eq i64 %indvars.iv.next.i.i, 256
  br i1 %exitcond.i.i, label %rtl8169_rx_clear.exit.i, label %for.body.i.i

rtl8169_rx_clear.exit.i:                          ; preds = %for.inc.i.i
  %down.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5600
  %39 = bitcast i8* %down.i.i to void (%struct.rtl8169_private*)**
  %40 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %39, align 8
  %tobool.i.i.i = icmp eq void (%struct.rtl8169_private*)* %40, null
  br i1 %tobool.i.i.i, label %rtl8169_down.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %rtl8169_rx_clear.exit.i
  call void %40(%struct.rtl8169_private* nonnull %0) #9
  br label %rtl8169_down.exit

rtl8169_down.exit:                                ; preds = %rtl8169_rx_clear.exit.i, %if.then.i.i.i
  call void @mutex_unlock(%struct.mutex* nonnull %3) #9
  %work = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5760
  %41 = bitcast i8* %work to %struct.work_struct*
  %call5 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %41) #9
  %irq = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %2, i64 0, i32 37
  %42 = load i32, i32* %irq, align 4
  %43 = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 0
  call void @free_irq(i32 %42, i8* %43) #9
  %44 = bitcast i8* %RxDescArray.i.i to i8**
  %45 = load i8*, i8** %44, align 8
  %RxPhyAddr = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2416
  %46 = bitcast i8* %RxPhyAddr to i64*
  %47 = load i64, i64* %46, align 8
  %dma_ops.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %2, i64 0, i32 35, i32 22, i32 0
  %48 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i, align 8
  %tobool4.i.i.i = icmp eq %struct.dma_map_ops* %48, null
  br i1 %tobool4.i.i.i, label %get_dma_ops.exit.i.i, label %do.end9.i.i

get_dma_ops.exit.i.i:                             ; preds = %rtl8169_down.exit
  %49 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %tobool.i.i33 = icmp eq %struct.dma_map_ops* %49, null
  br i1 %tobool.i.i33, label %do.body4.i.i, label %do.end9.i.i, !prof !10

do.body4.i.i:                                     ; preds = %get_dma_ops.exit.i.i
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 273, i64 12) #10, !srcloc !15
  br label %do.body5.i.i

do.body5.i.i:                                     ; preds = %do.body5.i.i, %do.body4.i.i
  br label %do.body5.i.i

do.end9.i.i:                                      ; preds = %get_dma_ops.exit.i.i, %rtl8169_down.exit
  %retval.0.i2.i.i = phi %struct.dma_map_ops* [ %49, %get_dma_ops.exit.i.i ], [ %48, %rtl8169_down.exit ]
  %50 = call i64 asm sideeffect "771:\0A\09call *${2:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${1:c}\0A  .byte 772b-771b\0A  .short ${3:c}\0A.popsection\0A", "={ax},i,i,i,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i64 40, i8** getelementptr inbounds (%struct.pv_irq_ops, %struct.pv_irq_ops* @pv_irq_ops, i64 0, i32 0, i32 0), i32 1) #10, !srcloc !16
  %51 = and i64 %50, 512
  %tobool23.i.i = icmp eq i64 %51, 0
  br i1 %tobool23.i.i, label %if.then36.i.i, label %if.end37.i.i, !prof !10

if.then36.i.i:                                    ; preds = %do.end9.i.i
  call void @warn_slowpath_null(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 274) #9
  br label %if.end37.i.i

if.end37.i.i:                                     ; preds = %if.then36.i.i, %do.end9.i.i
  %free.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i2.i.i, i64 0, i32 1
  %52 = load void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)** %free.i.i, align 8
  %tobool46.i.i = icmp eq void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)* %52, null
  br i1 %tobool46.i.i, label %dma_free_coherent.exit, label %if.end48.i.i

if.end48.i.i:                                     ; preds = %if.end37.i.i
  call void %52(%struct.device* nonnull %dev1, i64 4096, i8* %45, i64 %47, %struct.dma_attrs* null) #9
  br label %dma_free_coherent.exit

dma_free_coherent.exit:                           ; preds = %if.end37.i.i, %if.end48.i.i
  %53 = bitcast i8* %TxDescArray.i.i.i to i8**
  %54 = load i8*, i8** %53, align 8
  %TxPhyAddr = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2408
  %55 = bitcast i8* %TxPhyAddr to i64*
  %56 = load i64, i64* %55, align 8
  %57 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i, align 8
  %tobool4.i.i.i35 = icmp eq %struct.dma_map_ops* %57, null
  br i1 %tobool4.i.i.i35, label %get_dma_ops.exit.i.i37, label %do.end9.i.i42

get_dma_ops.exit.i.i37:                           ; preds = %dma_free_coherent.exit
  %58 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %tobool.i.i36 = icmp eq %struct.dma_map_ops* %58, null
  br i1 %tobool.i.i36, label %do.body4.i.i38, label %do.end9.i.i42, !prof !10

do.body4.i.i38:                                   ; preds = %get_dma_ops.exit.i.i37
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 273, i64 12) #10, !srcloc !15
  br label %do.body5.i.i39

do.body5.i.i39:                                   ; preds = %do.body5.i.i39, %do.body4.i.i38
  br label %do.body5.i.i39

do.end9.i.i42:                                    ; preds = %get_dma_ops.exit.i.i37, %dma_free_coherent.exit
  %retval.0.i2.i.i40 = phi %struct.dma_map_ops* [ %58, %get_dma_ops.exit.i.i37 ], [ %57, %dma_free_coherent.exit ]
  %59 = call i64 asm sideeffect "771:\0A\09call *${2:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${1:c}\0A  .byte 772b-771b\0A  .short ${3:c}\0A.popsection\0A", "={ax},i,i,i,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i64 40, i8** getelementptr inbounds (%struct.pv_irq_ops, %struct.pv_irq_ops* @pv_irq_ops, i64 0, i32 0, i32 0), i32 1) #10, !srcloc !16
  %60 = and i64 %59, 512
  %tobool23.i.i41 = icmp eq i64 %60, 0
  br i1 %tobool23.i.i41, label %if.then36.i.i43, label %if.end37.i.i46, !prof !10

if.then36.i.i43:                                  ; preds = %do.end9.i.i42
  call void @warn_slowpath_null(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.26, i64 0, i64 0), i32 274) #9
  br label %if.end37.i.i46

if.end37.i.i46:                                   ; preds = %if.then36.i.i43, %do.end9.i.i42
  %free.i.i44 = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i2.i.i40, i64 0, i32 1
  %61 = load void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)** %free.i.i44, align 8
  %tobool46.i.i45 = icmp eq void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)* %61, null
  br i1 %tobool46.i.i45, label %dma_free_coherent.exit48, label %if.end48.i.i47

if.end48.i.i47:                                   ; preds = %if.end37.i.i46
  call void %61(%struct.device* nonnull %dev1, i64 1024, i8* %54, i64 %56, %struct.dma_attrs* null) #9
  br label %dma_free_coherent.exit48

dma_free_coherent.exit48:                         ; preds = %if.end37.i.i46, %if.end48.i.i47
  call void @llvm.memset.p0i8.i64(i8* nonnull %TxDescArray.i.i.i, i8 0, i64 16, i32 8, i1 false)
  %call.i = call i32 @__pm_runtime_idle(%struct.device* nonnull %dev1, i32 4) #9
  ret i32 0
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_start_xmit(%struct.sk_buff* %skb, %struct.net_device* %dev) #0 {
entry:
  %opts = alloca [2 x i32], align 4
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %cur_tx = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2348
  %1 = bitcast i8* %cur_tx to i32*
  %2 = load i32, i32* %1, align 4
  %rem = and i32 %2, 63
  %TxDescArray = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2392
  %3 = bitcast i8* %TxDescArray to %struct.TxDesc**
  %4 = load %struct.TxDesc*, %struct.TxDesc** %3, align 8
  %idx.ext = zext i32 %rem to i64
  %add.ptr = getelementptr %struct.TxDesc, %struct.TxDesc* %4, i64 %idx.ext
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %5 = load i8*, i8** %mmio_addr, align 8
  %pci_dev = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %6 = bitcast i8* %pci_dev to %struct.pci_dev**
  %7 = load %struct.pci_dev*, %struct.pci_dev** %6, align 8
  %dev2 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %7, i64 0, i32 35
  %8 = bitcast [2 x i32]* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  %dirty_tx = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2352
  %9 = bitcast i8* %dirty_tx to i32*
  %10 = load i32, i32* %9, align 8
  %add = sub i32 64, %2
  %sub = add i32 %add, %10
  %head.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 40
  %11 = load i8*, i8** %head.i, align 8
  %end.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 39
  %12 = load i32, i32* %end.i, align 4
  %idx.ext.i = zext i32 %12 to i64
  %add.ptr.i181 = getelementptr i8, i8* %11, i64 %idx.ext.i
  %13 = load i8, i8* %add.ptr.i181, align 8
  %conv = zext i8 %13 to i32
  %cmp = icmp ugt i32 %sub, %conv
  br i1 %cmp, label %if.end12, label %do.body, !prof !9

do.body:                                          ; preds = %entry
  %msg_enable = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %14 = bitcast i8* %msg_enable to i32*
  %15 = load i32, i32* %14, align 8
  %and = and i32 %15, 1
  %tobool10 = icmp eq i32 %and, 0
  br i1 %tobool10, label %err_stop_0, label %if.then11

if.then11:                                        ; preds = %do.body
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* nonnull %dev, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.46, i64 0, i64 0)) #9
  br label %err_stop_0

if.end12:                                         ; preds = %entry
  %opts1 = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %add.ptr, i64 0, i32 0
  %16 = load i32, i32* %opts1, align 8
  %tobool21 = icmp slt i32 %16, 0
  br i1 %tobool21, label %err_stop_0, label %if.end23, !prof !10

if.end23:                                         ; preds = %if.end12
  %vlan_tci.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 25
  %17 = load i16, i16* %vlan_tci.i, align 2
  %18 = and i16 %17, 4096
  %tobool.i = icmp eq i16 %18, 0
  br i1 %tobool.i, label %rtl8169_tx_vlan_tag.exit, label %cond.true.i

cond.true.i:                                      ; preds = %if.end23
  %and3.i = and i16 %17, -4097
  %rev.i.i = call i16 @llvm.bswap.i16(i16 %and3.i) #10
  %conv5.i = zext i16 %rev.i.i to i32
  %or.i = or i32 %conv5.i, 131072
  br label %rtl8169_tx_vlan_tag.exit

rtl8169_tx_vlan_tag.exit:                         ; preds = %if.end23, %cond.true.i
  %cond.i = phi i32 [ %or.i, %cond.true.i ], [ 0, %if.end23 ]
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %opts, i64 0, i64 1
  store i32 %cond.i, i32* %arrayidx, align 4
  %arrayidx25 = getelementptr inbounds [2 x i32], [2 x i32]* %opts, i64 0, i64 0
  store i32 -2147483648, i32* %arrayidx25, align 4
  %tso_csum = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5704
  %19 = bitcast i8* %tso_csum to i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)**
  %20 = load i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)*, i1 (%struct.rtl8169_private*, %struct.sk_buff*, i32*)** %19, align 8
  %call26 = call zeroext i1 %20(%struct.rtl8169_private* %0, %struct.sk_buff* nonnull %skb, i32* nonnull %arrayidx25) #9
  br i1 %call26, label %if.end28, label %if.then27

if.then27:                                        ; preds = %rtl8169_tx_vlan_tag.exit
  %21 = load i8*, i8** %head.i, align 8
  %22 = load i32, i32* %end.i, align 4
  %idx.ext.i.i211 = zext i32 %22 to i64
  %add.ptr.i.i212 = getelementptr i8, i8* %21, i64 %idx.ext.i.i211
  %gso_size.i = getelementptr inbounds i8, i8* %add.ptr.i.i212, i64 2
  %23 = bitcast i8* %gso_size.i to i16*
  %24 = load i16, i16* %23, align 2
  %tobool.i213 = icmp eq i16 %24, 0
  br i1 %tobool.i213, label %if.else.i, label %if.then.i217

if.then.i217:                                     ; preds = %if.then27
  %dev.i214 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %25 = bitcast i8* %dev.i214 to %struct.net_device**
  %26 = load %struct.net_device*, %struct.net_device** %25, align 8
  %features1.i = getelementptr inbounds %struct.net_device, %struct.net_device* %26, i64 0, i32 17
  %27 = load i64, i64* %features1.i, align 16
  %and.i215 = and i64 %27, -1048594
  %call.i.i = call %struct.sk_buff* @__skb_gso_segment(%struct.sk_buff* nonnull %skb, i64 %and.i215, i1 zeroext true) #9
  %cmp.i.i216 = icmp ule %struct.sk_buff* %call.i.i, inttoptr (i64 -4096 to %struct.sk_buff*)
  %tobool4.i = icmp ne %struct.sk_buff* %call.i.i, null
  %or.cond.i = and i1 %tobool4.i, %cmp.i.i216
  br i1 %or.cond.i, label %do.body.i219.preheader, label %drop.i

do.body.i219.preheader:                           ; preds = %if.then.i217
  br label %do.body.i219

do.body.i219:                                     ; preds = %do.body.i219.preheader, %do.body.i219
  %segs.0.i = phi %struct.sk_buff* [ %28, %do.body.i219 ], [ %call.i.i, %do.body.i219.preheader ]
  %next.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %segs.0.i, i64 0, i32 0, i32 0, i32 0
  %28 = load %struct.sk_buff*, %struct.sk_buff** %next.i, align 8
  store %struct.sk_buff* null, %struct.sk_buff** %next.i, align 8
  %29 = load %struct.net_device*, %struct.net_device** %25, align 8
  %call8.i = call i32 @rtl8169_start_xmit(%struct.sk_buff* nonnull %segs.0.i, %struct.net_device* %29) #9
  %tobool9.i = icmp eq %struct.sk_buff* %28, null
  br i1 %tobool9.i, label %do.end.i, label %do.body.i219

do.end.i:                                         ; preds = %do.body.i219
  call void @__dev_kfree_skb_any(%struct.sk_buff* %skb, i32 0) #9
  br label %cleanup

if.else.i:                                        ; preds = %if.then27
  %ip_summed.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 17
  %bf.load.i = load i32, i32* %ip_summed.i, align 8
  %bf.cast.i = and i32 %bf.load.i, 1536
  %cmp.i220 = icmp eq i32 %bf.cast.i, 1536
  br i1 %cmp.i220, label %if.then13.i, label %drop.i

if.then13.i:                                      ; preds = %if.else.i
  %call14.i = call i32 @skb_checksum_help(%struct.sk_buff* nonnull %skb) #9
  %cmp15.i = icmp slt i32 %call14.i, 0
  br i1 %cmp15.i, label %drop.i, label %if.end18.i

if.end18.i:                                       ; preds = %if.then13.i
  %dev19.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %30 = bitcast i8* %dev19.i to %struct.net_device**
  %31 = load %struct.net_device*, %struct.net_device** %30, align 8
  %call20.i = call i32 @rtl8169_start_xmit(%struct.sk_buff* nonnull %skb, %struct.net_device* %31) #9
  br label %cleanup

drop.i:                                           ; preds = %if.then13.i, %if.else.i, %if.then.i217
  %dev22.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %32 = bitcast i8* %dev22.i to %struct.net_device**
  %33 = load %struct.net_device*, %struct.net_device** %32, align 8
  %tx_dropped.i = getelementptr inbounds %struct.net_device, %struct.net_device* %33, i64 0, i32 25, i32 7
  %34 = load i64, i64* %tx_dropped.i, align 8
  %inc.i221 = add i64 %34, 1
  store i64 %inc.i221, i64* %tx_dropped.i, align 8
  call void @__dev_kfree_skb_any(%struct.sk_buff* nonnull %skb, i32 1) #9
  br label %cleanup

if.end28:                                         ; preds = %rtl8169_tx_vlan_tag.exit
  %len.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 9
  %35 = load i32, i32* %len.i, align 8
  %data_len.i = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 10
  %36 = load i32, i32* %data_len.i, align 4
  %sub.i = sub i32 %35, %36
  %data = getelementptr inbounds %struct.sk_buff, %struct.sk_buff* %skb, i64 0, i32 41
  %37 = load i8*, i8** %data, align 8
  %conv30 = zext i32 %sub.i to i64
  %dma_ops.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %7, i64 0, i32 35, i32 22, i32 0
  %38 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i, align 8
  %tobool4.i.i = icmp eq %struct.dma_map_ops* %38, null
  %39 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %. = select i1 %tobool4.i.i, %struct.dma_map_ops* %39, %struct.dma_map_ops* %38
  %map_page.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %., i64 0, i32 4
  %40 = load i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)** %map_page.i, align 8
  %41 = ptrtoint i8* %37 to i64
  %sub.i.i = add i64 %41, 2147483648
  %cmp.i.i = icmp ugt i8* %37, inttoptr (i64 -2147483649 to i8*)
  %42 = load i64, i64* @phys_base, align 8
  %cond.i.i = select i1 %cmp.i.i, i64 %42, i64 131939247849472
  %add.i.i = add i64 %sub.i.i, %cond.i.i
  %shr.i = lshr i64 %add.i.i, 12
  %add.ptr.i182 = getelementptr %struct.page, %struct.page* inttoptr (i64 -24189255811072 to %struct.page*), i64 %shr.i
  %and.i = and i64 %41, 4095
  %call13.i = call i64 %40(%struct.device* nonnull %dev2, %struct.page* %add.ptr.i182, i64 %and.i, i64 %conv30, i32 1, %struct.dma_attrs* null) #9
  %43 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i, align 8
  %tobool4.i.i184 = icmp eq %struct.dma_map_ops* %43, null
  %44 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %retval.0.i.i186 = select i1 %tobool4.i.i184, %struct.dma_map_ops* %44, %struct.dma_map_ops* %43
  %mapping_error.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i.i186, i64 0, i32 12
  %45 = load i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)** %mapping_error.i, align 8
  %tobool.i187 = icmp eq i32 (%struct.device*, i64)* %45, null
  br i1 %tobool.i187, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.end28
  %call3.i = call i32 %45(%struct.device* nonnull %dev2, i64 %call13.i) #9
  br label %dma_mapping_error.exit

if.end.i:                                         ; preds = %if.end28
  %cmp.i = icmp eq i64 %call13.i, 0
  %conv.i188 = zext i1 %cmp.i to i32
  br label %dma_mapping_error.exit

dma_mapping_error.exit:                           ; preds = %if.then.i, %if.end.i
  %retval.0.i = phi i32 [ %call3.i, %if.then.i ], [ %conv.i188, %if.end.i ]
  %tobool33 = icmp eq i32 %retval.0.i, 0
  br i1 %tobool33, label %if.end54, label %if.then41, !prof !9

if.then41:                                        ; preds = %dma_mapping_error.exit
  %call42 = call i32 @net_ratelimit() #9
  %tobool43 = icmp eq i32 %call42, 0
  br i1 %tobool43, label %err_dma_0, label %do.body45

do.body45:                                        ; preds = %if.then41
  %msg_enable46 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %46 = bitcast i8* %msg_enable46 to i32*
  %47 = load i32, i32* %46, align 8
  %and47 = and i32 %47, 1
  %tobool48 = icmp eq i32 %and47, 0
  br i1 %tobool48, label %err_dma_0, label %if.then49

if.then49:                                        ; preds = %do.body45
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* nonnull %dev, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.47, i64 0, i64 0)) #9
  br label %err_dma_0

if.end54:                                         ; preds = %dma_mapping_error.exit
  %tx_skb = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 4472
  %48 = bitcast i8* %tx_skb to [64 x %struct.ring_info]*
  %len56 = getelementptr [64 x %struct.ring_info], [64 x %struct.ring_info]* %48, i64 0, i64 %idx.ext, i32 1
  store i32 %sub.i, i32* %len56, align 8
  %addr = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %4, i64 %idx.ext, i32 2
  store i64 %call13.i, i64* %addr, align 8
  %49 = load i8*, i8** %head.i, align 8
  %50 = load i32, i32* %end.i, align 4
  %idx.ext.i.i = zext i32 %50 to i64
  %add.ptr.i.i = getelementptr i8, i8* %49, i64 %idx.ext.i.i
  %51 = load %struct.pci_dev*, %struct.pci_dev** %6, align 8
  %dev.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %51, i64 0, i32 35
  %52 = load i8, i8* %add.ptr.i.i, align 8
  %cmp107.i = icmp eq i8 %52, 0
  br i1 %cmp107.i, label %if.else.thread, label %for.body.lr.ph.i

if.else.thread:                                   ; preds = %if.end54
  %53 = load i32, i32* %arrayidx25, align 4
  %or67 = or i32 %53, 805306368
  store i32 %or67, i32* %arrayidx25, align 4
  %skb71 = getelementptr [64 x %struct.ring_info], [64 x %struct.ring_info]* %48, i64 0, i64 %idx.ext, i32 0
  store %struct.sk_buff* %skb, %struct.sk_buff** %skb71, align 8
  br label %if.end73

for.body.lr.ph.i:                                 ; preds = %if.end54
  %54 = load i32, i32* %1, align 4
  %frags.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 48
  %arraydecay.i = bitcast i8* %frags.i to %struct.skb_frag_struct*
  %dma_ops.i.i95.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %51, i64 0, i32 35, i32 22, i32 0
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %cur_frag.0109.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %entry1.0108.i = phi i32 [ %54, %for.body.lr.ph.i ], [ %rem.i, %for.inc.i ]
  %idx.ext.i189 = zext i32 %cur_frag.0109.i to i64
  %add.ptr.i190 = getelementptr %struct.skb_frag_struct, %struct.skb_frag_struct* %arraydecay.i, i64 %idx.ext.i189
  %add.i = add i32 %entry1.0108.i, 1
  %rem.i = and i32 %add.i, 63
  %55 = load %struct.TxDesc*, %struct.TxDesc** %3, align 8
  %idx.ext3.i = zext i32 %rem.i to i64
  %size.i.i = getelementptr inbounds %struct.skb_frag_struct, %struct.skb_frag_struct* %arraydecay.i, i64 %idx.ext.i189, i32 2
  %56 = load i32, i32* %size.i.i, align 4
  %57 = bitcast %struct.skb_frag_struct* %add.ptr.i190 to i64*
  %58 = load i64, i64* %57, align 8
  %sub.ptr.sub.i.i.i = shl i64 %58, 6
  %add.i.i.i = add i64 %sub.ptr.sub.i.i.i, 1416170976575488
  %59 = inttoptr i64 %add.i.i.i to i8*
  %page_offset.i.i = getelementptr inbounds %struct.skb_frag_struct, %struct.skb_frag_struct* %arraydecay.i, i64 %idx.ext.i189, i32 1
  %60 = load i32, i32* %page_offset.i.i, align 8
  %idx.ext.i91.i = zext i32 %60 to i64
  %add.ptr.i92.i = getelementptr i8, i8* %59, i64 %idx.ext.i91.i
  %conv7.i = zext i32 %56 to i64
  %61 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i95.i, align 8
  %tobool4.i.i96.i = icmp eq %struct.dma_map_ops* %61, null
  %62 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i = select i1 %tobool4.i.i96.i, %struct.dma_map_ops* %62, %struct.dma_map_ops* %61
  %map_page.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i, i64 0, i32 4
  %63 = load i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)** %map_page.i.i, align 8
  %64 = ptrtoint i8* %add.ptr.i92.i to i64
  %sub.i.i.i = add i64 %64, 2147483648
  %cmp.i.i.i = icmp ugt i8* %add.ptr.i92.i, inttoptr (i64 -2147483649 to i8*)
  %65 = load i64, i64* @phys_base, align 8
  %cond.i.i.i = select i1 %cmp.i.i.i, i64 %65, i64 131939247849472
  %add.i.i100.i = add i64 %sub.i.i.i, %cond.i.i.i
  %shr.i.i = lshr i64 %add.i.i100.i, 12
  %add.ptr.i101.i = getelementptr %struct.page, %struct.page* inttoptr (i64 -24189255811072 to %struct.page*), i64 %shr.i.i
  %and.i.i = and i64 %64, 4095
  %call13.i.i = call i64 %63(%struct.device* nonnull %dev.i, %struct.page* %add.ptr.i101.i, i64 %and.i.i, i64 %conv7.i, i32 1, %struct.dma_attrs* null) #9
  %66 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i95.i, align 8
  %tobool4.i.i.i191 = icmp eq %struct.dma_map_ops* %66, null
  %67 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %retval.0.i.i.i192 = select i1 %tobool4.i.i.i191, %struct.dma_map_ops* %67, %struct.dma_map_ops* %66
  %mapping_error.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %retval.0.i.i.i192, i64 0, i32 12
  %68 = load i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)** %mapping_error.i.i, align 8
  %tobool.i93.i = icmp eq i32 (%struct.device*, i64)* %68, null
  br i1 %tobool.i93.i, label %if.end.i.i, label %if.then.i94.i

if.then.i94.i:                                    ; preds = %for.body.i
  %call3.i.i = call i32 %68(%struct.device* nonnull %dev.i, i64 %call13.i.i) #9
  br label %dma_mapping_error.exit.i

if.end.i.i:                                       ; preds = %for.body.i
  %cmp.i.i193 = icmp eq i64 %call13.i.i, 0
  %conv.i.i = zext i1 %cmp.i.i193 to i32
  br label %dma_mapping_error.exit.i

dma_mapping_error.exit.i:                         ; preds = %if.end.i.i, %if.then.i94.i
  %retval.0.i.i194 = phi i32 [ %call3.i.i, %if.then.i94.i ], [ %conv.i.i, %if.end.i.i ]
  %tobool.i195 = icmp eq i32 %retval.0.i.i194, 0
  br i1 %tobool.i195, label %for.inc.i, label %if.then.i197, !prof !9

if.then.i197:                                     ; preds = %dma_mapping_error.exit.i
  %call13.i196 = call i32 @net_ratelimit() #9
  %tobool14.i = icmp eq i32 %call13.i196, 0
  br i1 %tobool14.i, label %err_out.i, label %do.body.i

do.body.i:                                        ; preds = %if.then.i197
  %msg_enable.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %69 = bitcast i8* %msg_enable.i to i32*
  %70 = load i32, i32* %69, align 8
  %and.i198 = and i32 %70, 1
  %tobool16.i = icmp eq i32 %and.i198, 0
  br i1 %tobool16.i, label %err_out.i, label %if.then17.i

if.then17.i:                                      ; preds = %do.body.i
  %dev18.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %71 = bitcast i8* %dev18.i to %struct.net_device**
  %72 = load %struct.net_device*, %struct.net_device** %71, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %72, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.48, i64 0, i64 0)) #9
  br label %err_out.i

for.inc.i:                                        ; preds = %dma_mapping_error.exit.i
  %73 = load i32, i32* %arrayidx25, align 4
  %add21.i = add i32 %entry1.0108.i, 2
  %rem22.i = and i32 %add21.i, 63
  %tobool23.i = icmp eq i32 %rem22.i, 0
  %lnot.ext25.i = zext i1 %tobool23.i to i32
  %mul.i = shl nuw nsw i32 %lnot.ext25.i, 30
  %or.i199 = or i32 %mul.i, %56
  %or26.i = or i32 %or.i199, %73
  %opts1.i = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %55, i64 %idx.ext3.i, i32 0
  store i32 %or26.i, i32* %opts1.i, align 8
  %74 = load i32, i32* %arrayidx, align 4
  %opts2.i = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %55, i64 %idx.ext3.i, i32 1
  store i32 %74, i32* %opts2.i, align 4
  %addr28.i = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %55, i64 %idx.ext3.i, i32 2
  store i64 %call13.i.i, i64* %addr28.i, align 8
  %len30.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 17, i64 %idx.ext3.i, i32 1
  store i32 %56, i32* %len30.i, align 8
  %inc.i = add i32 %cur_frag.0109.i, 1
  %75 = load i8, i8* %add.ptr.i.i, align 8
  %conv.i200 = zext i8 %75 to i32
  %cmp.i201 = icmp ult i32 %inc.i, %conv.i200
  br i1 %cmp.i201, label %for.body.i, label %rtl8169_xmit_frags.exit

err_out.i:                                        ; preds = %if.then17.i, %do.body.i, %if.then.i197
  %76 = load i32, i32* %1, align 4
  %add45.i = add i32 %76, 1
  %cmp28.i.i = icmp eq i32 %cur_frag.0109.i, 0
  br i1 %cmp28.i.i, label %err_dma_1, label %for.body.lr.ph.i.i

for.body.lr.ph.i.i:                               ; preds = %err_out.i
  %dev9.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %77 = bitcast i8* %dev9.i.i to %struct.net_device**
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end11.i.i, %for.body.lr.ph.i.i
  %i.029.i.i = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc12.i.i, %if.end11.i.i ]
  %add.i.i202 = add i32 %add45.i, %i.029.i.i
  %rem.i.i = and i32 %add.i.i202, 63
  %idx.ext.i90.i = zext i32 %rem.i.i to i64
  %len3.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 17, i64 %idx.ext.i90.i, i32 1
  %78 = load i32, i32* %len3.i.i, align 8
  %tobool.i.i = icmp eq i32 %78, 0
  br i1 %tobool.i.i, label %if.end11.i.i, label %if.then.i.i203

if.then.i.i203:                                   ; preds = %for.body.i.i
  %skb4.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 17, i64 %idx.ext.i90.i, i32 0
  %79 = load %struct.sk_buff*, %struct.sk_buff** %skb4.i.i, align 8
  %80 = load %struct.pci_dev*, %struct.pci_dev** %6, align 8
  %81 = load %struct.TxDesc*, %struct.TxDesc** %3, align 8
  %add.ptr6.i.i = getelementptr %struct.TxDesc, %struct.TxDesc* %81, i64 %idx.ext.i90.i
  %dma_ops.i.i.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %80, i64 0, i32 35, i32 22, i32 0
  %82 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i.i.i, align 8
  %tobool4.i.i.i.i.i = icmp eq %struct.dma_map_ops* %82, null
  %83 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i.i = select i1 %tobool4.i.i.i.i.i, %struct.dma_map_ops* %83, %struct.dma_map_ops* %82
  %unmap_page.i.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i.i, i64 0, i32 5
  %84 = load void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)** %unmap_page.i.i.i.i, align 8
  %tobool11.i.i.i.i = icmp eq void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)* %84, null
  br i1 %tobool11.i.i.i.i, label %rtl8169_unmap_tx_skb.exit.i.i, label %if.then12.i.i.i.i

if.then12.i.i.i.i:                                ; preds = %if.then.i.i203
  %dev.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %80, i64 0, i32 35
  %conv.i.i.i = zext i32 %78 to i64
  %addr.i.i.i = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %81, i64 %idx.ext.i90.i, i32 2
  %85 = load i64, i64* %addr.i.i.i, align 8
  call void %84(%struct.device* %dev.i.i, i64 %85, i64 %conv.i.i.i, i32 1, %struct.dma_attrs* null) #9
  br label %rtl8169_unmap_tx_skb.exit.i.i

rtl8169_unmap_tx_skb.exit.i.i:                    ; preds = %if.then12.i.i.i.i, %if.then.i.i203
  %86 = bitcast %struct.TxDesc* %add.ptr6.i.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %86, i8 0, i64 16, i32 8, i1 false) #10
  store i32 0, i32* %len3.i.i, align 8
  %tobool7.i.i = icmp eq %struct.sk_buff* %79, null
  br i1 %tobool7.i.i, label %if.end11.i.i, label %if.then8.i.i

if.then8.i.i:                                     ; preds = %rtl8169_unmap_tx_skb.exit.i.i
  %87 = load %struct.net_device*, %struct.net_device** %77, align 8
  %tx_dropped.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %87, i64 0, i32 25, i32 7
  %88 = load i64, i64* %tx_dropped.i.i, align 8
  %inc.i.i = add i64 %88, 1
  store i64 %inc.i.i, i64* %tx_dropped.i.i, align 8
  call void @__dev_kfree_skb_any(%struct.sk_buff* nonnull %79, i32 1) #9
  store %struct.sk_buff* null, %struct.sk_buff** %skb4.i.i, align 8
  br label %if.end11.i.i

if.end11.i.i:                                     ; preds = %if.then8.i.i, %rtl8169_unmap_tx_skb.exit.i.i, %for.body.i.i
  %inc12.i.i = add nuw i32 %i.029.i.i, 1
  %exitcond.i.i = icmp eq i32 %inc12.i.i, %cur_frag.0109.i
  br i1 %exitcond.i.i, label %err_dma_1, label %for.body.i.i

rtl8169_xmit_frags.exit:                          ; preds = %for.inc.i
  %skb40.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %0, i64 0, i32 17, i64 %idx.ext3.i, i32 0
  store %struct.sk_buff* %skb, %struct.sk_buff** %skb40.i, align 8
  %89 = load i32, i32* %opts1.i, align 8
  %or42.i = or i32 %89, 268435456
  store i32 %or42.i, i32* %opts1.i, align 8
  %cmp59 = icmp slt i32 %inc.i, 0
  br i1 %cmp59, label %err_dma_1, label %if.else

if.else:                                          ; preds = %rtl8169_xmit_frags.exit
  %90 = load i32, i32* %arrayidx25, align 4
  %or = or i32 %90, 536870912
  store i32 %or, i32* %arrayidx25, align 4
  %phitmp = add i32 %cur_frag.0109.i, 2
  br label %if.end73

if.end73:                                         ; preds = %if.else, %if.else.thread
  %retval.0.i204225227 = phi i32 [ %phitmp, %if.else ], [ 1, %if.else.thread ]
  %91 = load i32, i32* %arrayidx, align 4
  %opts2 = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %4, i64 %idx.ext, i32 1
  store i32 %91, i32* %opts2, align 4
  %92 = load i8*, i8** %head.i, align 8
  %93 = load i32, i32* %end.i, align 4
  %idx.ext.i.i.i = zext i32 %93 to i64
  %add.ptr.i.i.i = getelementptr i8, i8* %92, i64 %idx.ext.i.i.i
  %94 = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 1
  %95 = load i8, i8* %94, align 1
  %96 = and i8 %95, 6
  %97 = icmp eq i8 %96, 2
  br i1 %97, label %if.then.i.i205, label %skb_tx_timestamp.exit

if.then.i.i205:                                   ; preds = %if.end73
  call void @skb_tstamp_tx(%struct.sk_buff* nonnull %skb, %struct.skb_shared_hwtstamps* null) #9
  br label %skb_tx_timestamp.exit

skb_tx_timestamp.exit:                            ; preds = %if.end73, %if.then.i.i205
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !38
  %98 = load i32, i32* %arrayidx25, align 4
  %add77 = add i32 %2, 1
  %rem78 = and i32 %add77, 63
  %tobool79 = icmp eq i32 %rem78, 0
  %lnot.ext81 = zext i1 %tobool79 to i32
  %mul = shl nuw nsw i32 %lnot.ext81, 30
  %or76 = or i32 %sub.i, %mul
  %or82 = or i32 %or76, %98
  store i32 %or82, i32* %opts1, align 8
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !39
  %99 = load i32, i32* %1, align 4
  %add86 = add i32 %99, %retval.0.i204225227
  store i32 %add86, i32* %1, align 4
  %add.ptr87 = getelementptr i8, i8* %5, i64 56
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 64, i8* %add.ptr87) #10, !srcloc !5
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !40
  %100 = load i32, i32* %9, align 8
  %add89 = add i32 %100, 64
  %101 = load i32, i32* %1, align 4
  %sub91 = sub i32 %add89, %101
  %cmp93 = icmp ugt i32 %sub91, 17
  br i1 %cmp93, label %cleanup, label %if.then95

if.then95:                                        ; preds = %skb_tx_timestamp.exit
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !41
  %_tx.i.i206 = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 88
  %102 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i206, align 64
  %state.i.i207 = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %102, i64 0, i32 10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %state.i.i207, i64 0, i64* %state.i.i207) #10, !srcloc !19
  call void asm sideeffect "mfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !42
  %103 = load i32, i32* %9, align 8
  %add97 = add i32 %103, 64
  %104 = load i32, i32* %1, align 4
  %sub99 = sub i32 %add97, %104
  %cmp101 = icmp ugt i32 %sub99, 17
  br i1 %cmp101, label %if.then103, label %cleanup

if.then103:                                       ; preds = %if.then95
  %105 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i206, align 64
  call void @netif_tx_wake_queue(%struct.netdev_queue* %105) #9
  br label %cleanup

err_dma_1:                                        ; preds = %if.end11.i.i, %err_out.i, %rtl8169_xmit_frags.exit
  %arraydecay107 = bitcast i8* %tx_skb to %struct.ring_info*
  %len1.i = getelementptr inbounds %struct.ring_info, %struct.ring_info* %arraydecay107, i64 %idx.ext, i32 1
  %106 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i, align 8
  %tobool4.i.i.i = icmp eq %struct.dma_map_ops* %106, null
  %107 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %.230 = select i1 %tobool4.i.i.i, %struct.dma_map_ops* %107, %struct.dma_map_ops* %106
  %unmap_page.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %.230, i64 0, i32 5
  %108 = load void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)** %unmap_page.i.i, align 8
  %tobool11.i.i = icmp eq void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)* %108, null
  br i1 %tobool11.i.i, label %rtl8169_unmap_tx_skb.exit, label %if.then12.i.i

if.then12.i.i:                                    ; preds = %err_dma_1
  %109 = load i32, i32* %len1.i, align 8
  %conv.i = zext i32 %109 to i64
  %110 = load i64, i64* %addr, align 8
  call void %108(%struct.device* nonnull %dev2, i64 %110, i64 %conv.i, i32 1, %struct.dma_attrs* null) #9
  br label %rtl8169_unmap_tx_skb.exit

rtl8169_unmap_tx_skb.exit:                        ; preds = %err_dma_1, %if.then12.i.i
  %111 = bitcast %struct.TxDesc* %add.ptr to i8*
  call void @llvm.memset.p0i8.i64(i8* %111, i8 0, i64 16, i32 8, i1 false) #10
  store i32 0, i32* %len1.i, align 8
  br label %err_dma_0

err_dma_0:                                        ; preds = %do.body45, %if.then41, %if.then49, %rtl8169_unmap_tx_skb.exit
  call void @__dev_kfree_skb_any(%struct.sk_buff* %skb, i32 1) #9
  %tx_dropped = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 7
  %112 = load i64, i64* %tx_dropped, align 8
  %inc = add i64 %112, 1
  store i64 %inc, i64* %tx_dropped, align 8
  br label %cleanup

err_stop_0:                                       ; preds = %do.body, %if.end12, %if.then11
  %_tx.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 88
  %113 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i, align 64
  %state.i.i = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %113, i64 0, i32 10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %state.i.i, i64 0, i64* %state.i.i) #10, !srcloc !19
  %tx_dropped111 = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 7
  %114 = load i64, i64* %tx_dropped111, align 8
  %inc112 = add i64 %114, 1
  store i64 %inc112, i64* %tx_dropped111, align 8
  br label %cleanup

cleanup:                                          ; preds = %drop.i, %if.end18.i, %do.end.i, %skb_tx_timestamp.exit, %if.then103, %if.then95, %err_stop_0, %err_dma_0
  %retval.0 = phi i32 [ 16, %err_stop_0 ], [ 0, %err_dma_0 ], [ 0, %if.then95 ], [ 0, %if.then103 ], [ 0, %skb_tx_timestamp.exit ], [ 0, %do.end.i ], [ 0, %if.end18.i ], [ 0, %drop.i ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  ret i32 %retval.0
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl_set_mac_address(%struct.net_device* %dev, i8* nocapture readonly %p) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %sa_data = getelementptr inbounds i8, i8* %p, i64 2
  %0 = bitcast i8* %sa_data to i32*
  %1 = load i32, i32* %0, align 4
  %and.i.i = and i32 %1, 1
  %tobool.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.i.i, label %is_valid_ether_addr.exit, label %cleanup

is_valid_ether_addr.exit:                         ; preds = %entry
  %add.ptr.i.i = getelementptr i8, i8* %p, i64 6
  %2 = bitcast i8* %add.ptr.i.i to i16*
  %3 = load i16, i16* %2, align 2
  %conv.i.i = zext i16 %3 to i32
  %or.i.i = or i32 %1, %conv.i.i
  %cmp.i.i = icmp eq i32 %or.i.i, 0
  br i1 %cmp.i.i, label %cleanup, label %if.end

if.end:                                           ; preds = %is_valid_ether_addr.exit
  %4 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %addr_len = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 50
  %5 = load i8, i8* %addr_len, align 1
  %conv = zext i8 %5 to i64
  %dev_addr = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 74
  %6 = load i8*, i8** %dev_addr, align 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* nonnull %sa_data, i64 %conv, i32 1, i1 false)
  %7 = load i8*, i8** %dev_addr, align 32
  call fastcc void @rtl_rar_set(%struct.rtl8169_private* %4, i8* %7) #11
  br label %cleanup

cleanup:                                          ; preds = %is_valid_ether_addr.exit, %entry, %if.end
  %retval.0 = phi i32 [ 0, %if.end ], [ -99, %is_valid_ether_addr.exit ], [ -99, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noredzone
declare i32 @eth_validate_addr(%struct.net_device*) #1

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_ioctl(%struct.net_device* %dev, %struct.ifreq* %ifr, i32 %cmd) #0 {
entry:
  %state.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 8
  %0 = load volatile i64, i64* %state.i, align 8
  %and1.i.i = and i64 %0, 1
  %cmp.i.i = icmp eq i64 %and1.i.i, 0
  br i1 %cmp.i.i, label %cond.end, label %cond.true

cond.true:                                        ; preds = %entry
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %ifr_ifru.i = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr, i64 0, i32 1
  %1 = bitcast %union.anon.95* %ifr_ifru.i to %struct.mii_ioctl_data*
  %2 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %do_ioctl = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5696
  %3 = bitcast i8* %do_ioctl to i32 (%struct.rtl8169_private*, %struct.mii_ioctl_data*, i32)**
  %4 = load i32 (%struct.rtl8169_private*, %struct.mii_ioctl_data*, i32)*, i32 (%struct.rtl8169_private*, %struct.mii_ioctl_data*, i32)** %3, align 8
  %call3 = call i32 %4(%struct.rtl8169_private* %2, %struct.mii_ioctl_data* %1, i32 %cmd) #9
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ -19, %entry ]
  ret i32 %cond
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_change_mtu(%struct.net_device* %dev, i32 %new_mtu) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %cmp = icmp slt i32 %new_mtu, 60
  br i1 %cmp, label %cleanup, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %mac_version = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %1 = bitcast i8* %mac_version to i16*
  %2 = load i16, i16* %1, align 2
  %idxprom = zext i16 %2 to i64
  %jumbo_max = getelementptr [51 x %struct.anon.113], [51 x %struct.anon.113]* @rtl_chip_infos, i64 0, i64 %idxprom, i32 3
  %3 = load i16, i16* %jumbo_max, align 8
  %conv = zext i16 %3 to i32
  %cmp1 = icmp slt i32 %conv, %new_mtu
  br i1 %cmp1, label %cleanup, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %cmp3 = icmp sgt i32 %new_mtu, 1500
  %mmio_addr.i15 = bitcast i8* %add.ptr.i to i8**
  %4 = load i8*, i8** %mmio_addr.i15, align 8
  %add.ptr.i16 = getelementptr i8, i8* %4, i64 80
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 -64, i8* %add.ptr.i16) #10
  br i1 %cmp3, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %enable.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5616
  %5 = bitcast i8* %enable.i to void (%struct.rtl8169_private*)**
  %6 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %5, align 8
  %tobool.i.i17 = icmp eq void (%struct.rtl8169_private*)* %6, null
  br i1 %tobool.i.i17, label %rtl_hw_jumbo_enable.exit, label %if.then.i.i18

if.then.i.i18:                                    ; preds = %if.then5
  call void %6(%struct.rtl8169_private* nonnull %0) #9
  br label %rtl_hw_jumbo_enable.exit

rtl_hw_jumbo_enable.exit:                         ; preds = %if.then5, %if.then.i.i18
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 0, i8* %add.ptr.i16) #10, !srcloc !5
  br label %if.end6

if.else:                                          ; preds = %if.end
  %disable.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5624
  %7 = bitcast i8* %disable.i to void (%struct.rtl8169_private*)**
  %8 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %7, align 8
  %tobool.i.i = icmp eq void (%struct.rtl8169_private*)* %8, null
  br i1 %tobool.i.i, label %rtl_hw_jumbo_disable.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.else
  call void %8(%struct.rtl8169_private* nonnull %0) #9
  br label %rtl_hw_jumbo_disable.exit

rtl_hw_jumbo_disable.exit:                        ; preds = %if.else, %if.then.i.i
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 0, i8* %add.ptr.i16) #10, !srcloc !5
  br label %if.end6

if.end6:                                          ; preds = %rtl_hw_jumbo_disable.exit, %rtl_hw_jumbo_enable.exit
  %mtu = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 42
  store i32 %new_mtu, i32* %mtu, align 16
  call void @netdev_update_features(%struct.net_device* nonnull %dev) #9
  br label %cleanup

cleanup:                                          ; preds = %entry, %lor.lhs.false, %if.end6
  %retval.0 = phi i32 [ 0, %if.end6 ], [ -22, %lor.lhs.false ], [ -22, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_tx_timeout(%struct.net_device* %dev) #0 {
entry:
  %c.i.i = alloca i8, align 1
  %arraydecay.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5712
  %0 = bitcast i8* %arraydecay.i to i64*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %0, i8* nonnull %c.i.i, i64 2, i64* %0) #10, !srcloc !23
  %1 = load i8, i8* %c.i.i, align 1
  %cmp.i.i = icmp eq i8 %1, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i.i) #10
  br i1 %cmp.i.i, label %if.then.i, label %rtl_schedule_task.exit

if.then.i:                                        ; preds = %entry
  %work.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5760
  %2 = bitcast i8* %work.i to %struct.work_struct*
  %3 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %call.i.i.i = call zeroext i1 @queue_work_on(i32 512, %struct.workqueue_struct* %3, %struct.work_struct* %2) #9
  br label %rtl_schedule_task.exit

rtl_schedule_task.exit:                           ; preds = %entry, %if.then.i
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal %struct.rtnl_link_stats64* @rtl8169_get_stats64(%struct.net_device* %dev, %struct.rtnl_link_stats64* returned %stats) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %0 = load i8*, i8** %mmio_addr, align 8
  %counters1 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5856
  %1 = bitcast i8* %counters1 to %struct.rtl8169_counters**
  %2 = load %struct.rtl8169_counters*, %struct.rtl8169_counters** %1, align 8
  %state.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 8
  %3 = load volatile i64, i64* %state.i, align 8
  %and1.i.i = and i64 %3, 1
  %cmp.i.i = icmp eq i64 %and1.i.i, 0
  br i1 %cmp.i.i, label %do.body, label %if.then

if.then:                                          ; preds = %entry
  %mac_version.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %4 = bitcast i8* %mac_version.i to i16*
  %5 = load i16, i16* %4, align 2
  %cmp.i = icmp ugt i16 %5, 5
  br i1 %cmp.i, label %do.body, label %if.end.i

if.end.i:                                         ; preds = %if.then
  %add.ptr.i94 = getelementptr i8, i8* %0, i64 76
  %6 = bitcast i8* %add.ptr.i94 to i32*
  %7 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %6) #10, !srcloc !2
  %and.i = and i32 %7, 16777215
  %conv3.i = zext i32 %and.i to i64
  %rx_missed_errors.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 15
  %8 = load i64, i64* %rx_missed_errors.i, align 8
  %add.i = add i64 %8, %conv3.i
  store i64 %add.i, i64* %rx_missed_errors.i, align 8
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %6) #10, !srcloc !8
  br label %do.body

do.body:                                          ; preds = %entry, %if.end.i, %if.then
  %rx_stats = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2360
  %packets = bitcast i8* %rx_stats to i64*
  %9 = load i64, i64* %packets, align 8
  %rx_packets = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 0
  store i64 %9, i64* %rx_packets, align 8
  %bytes = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2368
  %10 = bitcast i8* %bytes to i64*
  %11 = load i64, i64* %10, align 8
  %rx_bytes = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 2
  store i64 %11, i64* %rx_bytes, align 8
  %tx_stats = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2376
  %packets13 = bitcast i8* %tx_stats to i64*
  %12 = load i64, i64* %packets13, align 8
  %tx_packets = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 1
  store i64 %12, i64* %tx_packets, align 8
  %bytes15 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2384
  %13 = bitcast i8* %bytes15 to i64*
  %14 = load i64, i64* %13, align 8
  %tx_bytes = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 3
  store i64 %14, i64* %tx_bytes, align 8
  %rx_dropped = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 6
  %15 = load i64, i64* %rx_dropped, align 8
  %rx_dropped22 = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 6
  store i64 %15, i64* %rx_dropped22, align 8
  %tx_dropped = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 7
  %16 = load i64, i64* %tx_dropped, align 8
  %tx_dropped24 = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 7
  store i64 %16, i64* %tx_dropped24, align 8
  %rx_length_errors = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 10
  %17 = load i64, i64* %rx_length_errors, align 8
  %rx_length_errors26 = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 10
  store i64 %17, i64* %rx_length_errors26, align 8
  %rx_errors = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 4
  %18 = load i64, i64* %rx_errors, align 8
  %rx_errors28 = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 4
  store i64 %18, i64* %rx_errors28, align 8
  %rx_crc_errors = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 12
  %19 = load i64, i64* %rx_crc_errors, align 8
  %rx_crc_errors30 = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 12
  store i64 %19, i64* %rx_crc_errors30, align 8
  %rx_fifo_errors = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 14
  %20 = load i64, i64* %rx_fifo_errors, align 8
  %rx_fifo_errors32 = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 14
  store i64 %20, i64* %rx_fifo_errors32, align 8
  %rx_missed_errors = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 15
  %21 = load i64, i64* %rx_missed_errors, align 8
  %rx_missed_errors34 = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 15
  store i64 %21, i64* %rx_missed_errors34, align 8
  %multicast = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 25, i32 8
  %22 = load i64, i64* %multicast, align 8
  %multicast36 = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 8
  store i64 %22, i64* %multicast36, align 8
  %call37 = call fastcc zeroext i1 @rtl8169_update_counters(%struct.net_device* nonnull %dev) #11
  %tx_errors = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %2, i64 0, i32 2
  %23 = load i64, i64* %tx_errors, align 8
  %tx_errors38 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5872
  %24 = bitcast i8* %tx_errors38 to i64*
  %25 = load i64, i64* %24, align 8
  %sub = sub i64 %23, %25
  %tx_errors39 = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 5
  store i64 %sub, i64* %tx_errors39, align 8
  %tx_multi_collision = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %2, i64 0, i32 7
  %26 = load i32, i32* %tx_multi_collision, align 4
  %tx_multi_collision41 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5880
  %27 = bitcast i8* %tx_multi_collision41 to i32*
  %28 = load i32, i32* %27, align 8
  %sub42 = sub i32 %26, %28
  %conv = zext i32 %sub42 to i64
  %collisions = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 9
  store i64 %conv, i64* %collisions, align 8
  %tx_aborted = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %2, i64 0, i32 11
  %29 = load i16, i16* %tx_aborted, align 4
  %conv43 = zext i16 %29 to i64
  %tx_aborted45 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5884
  %30 = bitcast i8* %tx_aborted45 to i16*
  %31 = load i16, i16* %30, align 4
  %conv46 = zext i16 %31 to i64
  %sub47 = sub nsw i64 %conv43, %conv46
  %tx_aborted_errors = getelementptr inbounds %struct.rtnl_link_stats64, %struct.rtnl_link_stats64* %stats, i64 0, i32 16
  store i64 %sub47, i64* %tx_aborted_errors, align 8
  ret %struct.rtnl_link_stats64* %stats
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_netpoll(%struct.net_device* %dev) #0 {
entry:
  %c.i.i.i.i = alloca i8, align 1
  %0 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %mmio_addr.i.i = bitcast i8* %0 to i8**
  %1 = load i8*, i8** %mmio_addr.i.i, align 8
  %add.ptr.i22.i = getelementptr i8, i8* %1, i64 62
  %2 = bitcast i8* %add.ptr.i22.i to i16*
  %3 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %2) #10, !srcloc !21
  switch i16 %3, label %if.then.i [
    i16 0, label %rtl8169_interrupt.exit
    i16 -1, label %rtl8169_interrupt.exit
  ]

if.then.i:                                        ; preds = %entry
  %event_slow.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5578
  %4 = bitcast i8* %event_slow.i to i16*
  %5 = load i16, i16* %4, align 2
  %6 = or i16 %5, 15
  %and21.i = and i16 %6, %3
  %tobool7.i = icmp eq i16 %and21.i, 0
  br i1 %tobool7.i, label %rtl8169_interrupt.exit, label %if.then8.i

if.then8.i:                                       ; preds = %if.then.i
  %7 = load i8*, i8** %mmio_addr.i.i, align 8
  %add.ptr.i24.i = getelementptr i8, i8* %7, i64 60
  %8 = bitcast i8* %add.ptr.i24.i to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 0, i16* %8) #10, !srcloc !3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  %napi.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2136
  %9 = bitcast i8* %napi.i to %struct.napi_struct*
  %state.i.i.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2152
  %10 = bitcast i8* %state.i.i.i.i to i64*
  %11 = load volatile i64, i64* %10, align 8
  %and1.i.i.i.i.i = and i64 %11, 2
  %cmp.i.i.i.i.i = icmp eq i64 %and1.i.i.i.i.i, 0
  br i1 %cmp.i.i.i.i.i, label %napi_schedule_prep.exit.i.i, label %rtl8169_interrupt.exit

napi_schedule_prep.exit.i.i:                      ; preds = %if.then8.i
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i.i.i.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %10, i8* nonnull %c.i.i.i.i, i64 0, i64* %10) #10, !srcloc !23
  %12 = load i8, i8* %c.i.i.i.i, align 1
  %cmp.i.i.i.i = icmp eq i8 %12, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i.i.i.i) #10
  br i1 %cmp.i.i.i.i, label %if.then.i.i, label %rtl8169_interrupt.exit

if.then.i.i:                                      ; preds = %napi_schedule_prep.exit.i.i
  call void @__napi_schedule(%struct.napi_struct* nonnull %9) #9
  br label %rtl8169_interrupt.exit

rtl8169_interrupt.exit:                           ; preds = %entry, %entry, %if.then.i, %if.then8.i, %napi_schedule_prep.exit.i.i, %if.then.i.i
  ret void
}

; Function Attrs: norecurse noredzone nounwind readonly sspstrong
define internal i64 @rtl8169_fix_features(%struct.net_device* nocapture readonly %dev, i64 %features) #5 {
entry:
  %mtu = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 42
  %0 = load i32, i32* %mtu, align 16
  %cmp = icmp ugt i32 %0, 2047
  %and = and i64 %features, -1638401
  %and.features = select i1 %cmp, i64 %and, i64 %features
  %cmp2 = icmp ugt i32 %0, 1500
  br i1 %cmp2, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %entry
  %mac_version = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %1 = bitcast i8* %mac_version to i16*
  %2 = load i16, i16* %1, align 2
  %idxprom = zext i16 %2 to i64
  %3 = lshr i64 4742449263615, %idxprom
  %4 = and i64 %3, 1
  %tobool = icmp eq i64 %4, 0
  %and4 = and i64 %and.features, -3
  %and4.and.features = select i1 %tobool, i64 %and4, i64 %and.features
  ret i64 %and4.and.features

if.end5:                                          ; preds = %entry
  ret i64 %and.features
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_set_features(%struct.net_device* %dev, i64 %features) #0 {
entry:
  %and = and i64 %features, 292057776384
  %mutex.i8 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5720
  %0 = bitcast i8* %mutex.i8 to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %0) #9
  %features1 = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 17
  %1 = load i64, i64* %features1, align 16
  %tobool = icmp eq i64 %and, %1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %mmio_addr.i = bitcast i8* %add.ptr.i to i8**
  %2 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i9 = getelementptr i8, i8* %2, i64 68
  %3 = bitcast i8* %add.ptr.i9 to i32*
  %4 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %3) #10, !srcloc !2
  %and.i = and i64 %features, 274877906944
  %tobool.i = icmp eq i64 %and.i, 0
  %or.i = or i32 %4, 48
  %and2.i = and i32 %4, -49
  %rx_config.0.i = select i1 %tobool.i, i32 %and2.i, i32 %or.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %rx_config.0.i, i32* %3) #10, !srcloc !8
  %and4.i = and i64 %features, 17179869184
  %tobool5.i = icmp eq i64 %and4.i, 0
  %cp_cmd.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5576
  %5 = bitcast i8* %cp_cmd.i to i16*
  %6 = load i16, i16* %5, align 8
  %and12.i = and i16 %6, -33
  %or7.i = or i16 %6, 32
  %and12.sink.i = select i1 %tobool5.i, i16 %and12.i, i16 %or7.i
  %and15.i = and i64 %features, 256
  %tobool16.i = icmp eq i64 %and15.i, 0
  %and25.i = and i16 %and12.sink.i, -65
  %or20.i = or i16 %and12.sink.i, 64
  %and25.sink.i = select i1 %tobool16.i, i16 %and25.i, i16 %or20.i
  store i16 %and25.sink.i, i16* %5, align 8
  %add.ptr28.i = getelementptr i8, i8* %2, i64 224
  %7 = bitcast i8* %add.ptr28.i to i16*
  %8 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %7) #10, !srcloc !21
  %9 = and i16 %8, -97
  %10 = load i16, i16* %5, align 8
  %or3454.i = or i16 %10, %9
  store i16 %or3454.i, i16* %5, align 8
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %or3454.i, i16* %7) #10, !srcloc !3
  %11 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %7) #10, !srcloc !21
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  call void @mutex_unlock(%struct.mutex* %0) #9
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_task(%struct.work_struct* %work) #0 {
entry:
  %c.i = alloca i8, align 1
  %add.ptr32 = getelementptr %struct.work_struct, %struct.work_struct* %work, i64 -114
  %0 = bitcast %struct.work_struct* %add.ptr32 to %struct.rtl8169_private*
  %dev1 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work, i64 -114, i32 1, i32 1
  %1 = bitcast %struct.list_head** %dev1 to %struct.net_device**
  %2 = load %struct.net_device*, %struct.net_device** %1, align 8
  %mutex.i = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work, i64 -2, i32 2
  %3 = bitcast void (%struct.work_struct*)** %mutex.i to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %3) #9
  %state.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 8
  %4 = load volatile i64, i64* %state.i, align 8
  %and1.i.i = and i64 %4, 1
  %cmp.i.i = icmp eq i64 %and1.i.i, 0
  br i1 %cmp.i.i, label %out_unlock, label %cond.true

cond.true:                                        ; preds = %entry
  %wk = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work, i64 -2, i32 1, i32 1
  %arraydecay = bitcast %struct.list_head** %wk to i64*
  %5 = load volatile i64, i64* %arraydecay, align 8
  %6 = and i64 %5, 1
  %tobool = icmp eq i64 %6, 0
  br i1 %tobool, label %out_unlock, label %if.end

if.end:                                           ; preds = %cond.true
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay, i8* nonnull %c.i, i64 1, i64* %arraydecay) #10, !srcloc !43
  %7 = load i8, i8* %c.i, align 1
  %cmp.i34 = icmp eq i8 %7, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i) #10
  br i1 %cmp.i34, label %if.end19, label %if.then16

if.then16:                                        ; preds = %if.end
  call void @rtl_slow_event_work(%struct.rtl8169_private* nonnull %0) #9
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then16
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay, i8* nonnull %c.i, i64 2, i64* %arraydecay) #10, !srcloc !43
  %8 = load i8, i8* %c.i, align 1
  %cmp.i34.1 = icmp eq i8 %8, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i) #10
  br i1 %cmp.i34.1, label %if.end19.1, label %if.then16.1

out_unlock:                                       ; preds = %out_mod_timer.i, %if.end.i, %if.end19.1, %entry, %cond.true
  call void @mutex_unlock(%struct.mutex* %3) #9
  ret void

if.then16.1:                                      ; preds = %if.end19
  call void @rtl_reset_work(%struct.rtl8169_private* nonnull %0) #9
  br label %if.end19.1

if.end19.1:                                       ; preds = %if.then16.1, %if.end19
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay, i8* nonnull %c.i, i64 3, i64* %arraydecay) #10, !srcloc !43
  %9 = load i8, i8* %c.i, align 1
  %cmp.i34.2 = icmp eq i8 %9, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i) #10
  br i1 %cmp.i34.2, label %out_unlock, label %if.then16.2

if.then16.2:                                      ; preds = %if.end19.1
  %timer1.i = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work, i64 -9, i32 2
  %10 = bitcast void (%struct.work_struct*)** %timer1.i to %struct.timer_list*
  %mmio_addr.i = bitcast %struct.work_struct* %add.ptr32 to i8**
  %11 = load i8*, i8** %mmio_addr.i, align 8
  %phy_reset_pending.i = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work, i64 -3, i32 1, i32 1
  %12 = bitcast %struct.list_head** %phy_reset_pending.i to i32 (%struct.rtl8169_private*)**
  %13 = load i32 (%struct.rtl8169_private*)*, i32 (%struct.rtl8169_private*)** %12, align 8
  %call.i = call i32 %13(%struct.rtl8169_private* nonnull %0) #9
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %if.end.i, label %out_mod_timer.i

if.end.i:                                         ; preds = %if.then16.2
  %link_ok.i = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work, i64 -3, i32 2
  %14 = bitcast void (%struct.work_struct*)** %link_ok.i to i32 (i8*)**
  %15 = load i32 (i8*)*, i32 (i8*)** %14, align 8
  %call2.i = call i32 %15(i8* %11) #9
  %tobool3.i = icmp eq i32 %call2.i, 0
  br i1 %tobool3.i, label %do.body6.i, label %out_unlock

do.body6.i:                                       ; preds = %if.end.i
  %msg_enable.i = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work, i64 -107
  %16 = bitcast %struct.work_struct* %msg_enable.i to i32*
  %17 = load i32, i32* %16, align 8
  %and.i = and i32 %17, 4
  %tobool7.i = icmp eq i32 %and.i, 0
  br i1 %tobool7.i, label %do.end20.i, label %do.body9.i

do.body9.i:                                       ; preds = %do.body6.i
  %bf.load.i = load i32, i32* bitcast (i8* getelementptr inbounds ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }, { i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @rtl_phy_work.descriptor, i64 0, i32 4) to i32*), align 8
  %and10.i = and i32 %bf.load.i, 262144
  %tobool13.i = icmp eq i32 %and10.i, 0
  br i1 %tobool13.i, label %do.end20.i, label %if.then14.i, !prof !9

if.then14.i:                                      ; preds = %do.body9.i
  %18 = load %struct.net_device*, %struct.net_device** %1, align 8
  call void (%struct._ddebug*, %struct.net_device*, i8*, ...) @__dynamic_netdev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @rtl_phy_work.descriptor to %struct._ddebug*), %struct.net_device* %18, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.33, i64 0, i64 0)) #9
  br label %do.end20.i

do.end20.i:                                       ; preds = %if.then14.i, %do.body9.i, %do.body6.i
  %phy_reset_enable.i = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work, i64 -3
  %19 = bitcast %struct.work_struct* %phy_reset_enable.i to void (%struct.rtl8169_private*)**
  %20 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %19, align 8
  call void %20(%struct.rtl8169_private* nonnull %0) #9
  br label %out_mod_timer.i

out_mod_timer.i:                                  ; preds = %do.end20.i, %if.then16.2
  %timeout.0.i = phi i64 [ 2500, %do.end20.i ], [ 25, %if.then16.2 ]
  %21 = load volatile i64, i64* @jiffies, align 8
  %add.i = add i64 %21, %timeout.0.i
  %call21.i = call i32 @mod_timer(%struct.timer_list* %10, i64 %add.i) #9
  br label %out_unlock
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_interrupt(i32 %irq, i8* %dev_instance) #0 {
entry:
  %c.i.i.i = alloca i8, align 1
  %0 = getelementptr i8, i8* %dev_instance, i64 2112
  %mmio_addr.i = bitcast i8* %0 to i8**
  %1 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i22 = getelementptr i8, i8* %1, i64 62
  %2 = bitcast i8* %add.ptr.i22 to i16*
  %3 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %2) #10, !srcloc !21
  switch i16 %3, label %if.then [
    i16 0, label %if.end9
    i16 -1, label %if.end9
  ]

if.then:                                          ; preds = %entry
  %event_slow = getelementptr inbounds i8, i8* %dev_instance, i64 5578
  %4 = bitcast i8* %event_slow to i16*
  %5 = load i16, i16* %4, align 2
  %6 = or i16 %5, 15
  %and21 = and i16 %6, %3
  %tobool7 = icmp eq i16 %and21, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then
  %7 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i24 = getelementptr i8, i8* %7, i64 60
  %8 = bitcast i8* %add.ptr.i24 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 0, i16* %8) #10, !srcloc !3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  %napi = getelementptr inbounds i8, i8* %dev_instance, i64 2136
  %9 = bitcast i8* %napi to %struct.napi_struct*
  %state.i.i.i = getelementptr inbounds i8, i8* %dev_instance, i64 2152
  %10 = bitcast i8* %state.i.i.i to i64*
  %11 = load volatile i64, i64* %10, align 8
  %and1.i.i.i.i = and i64 %11, 2
  %cmp.i.i.i.i = icmp eq i64 %and1.i.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %napi_schedule_prep.exit.i, label %if.end9

napi_schedule_prep.exit.i:                        ; preds = %if.then8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i.i.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %10, i8* nonnull %c.i.i.i, i64 0, i64* %10) #10, !srcloc !23
  %12 = load i8, i8* %c.i.i.i, align 1
  %cmp.i.i.i = icmp eq i8 %12, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i.i.i) #10
  br i1 %cmp.i.i.i, label %if.then.i, label %if.end9

if.then.i:                                        ; preds = %napi_schedule_prep.exit.i
  call void @__napi_schedule(%struct.napi_struct* nonnull %9) #9
  br label %if.end9

if.end9:                                          ; preds = %if.then.i, %napi_schedule_prep.exit.i, %if.then8, %entry, %entry, %if.then
  %handled.0 = phi i32 [ 0, %if.then ], [ 0, %entry ], [ 0, %entry ], [ 1, %if.then8 ], [ 1, %napi_schedule_prep.exit.i ], [ 1, %if.then.i ]
  ret i32 %handled.0
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl8169_init_phy(%struct.net_device* %dev, %struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  call fastcc void @rtl_hw_phy_config(%struct.net_device* %dev) #11
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %1 = load i16, i16* %mac_version, align 2
  %cmp = icmp ult i16 %1, 6
  br i1 %cmp, label %do.end, label %if.end

do.end:                                           ; preds = %entry
  %add.ptr = getelementptr i8, i8* %0, i64 130
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 1, i8* %add.ptr) #10, !srcloc !5
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %2 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %bus.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %2, i64 0, i32 1
  %3 = load %struct.pci_bus*, %struct.pci_bus** %bus.i, align 8
  %devfn.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %2, i64 0, i32 6
  %4 = load i32, i32* %devfn.i, align 8
  %call.i = call i32 @pci_bus_write_config_byte(%struct.pci_bus* %3, i32 %4, i32 13, i8 zeroext 64) #9
  %5 = load i16, i16* %mac_version, align 2
  %cmp4 = icmp ult i16 %5, 6
  br i1 %cmp4, label %if.end9, label %if.end22

if.end9:                                          ; preds = %if.end
  %6 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %bus.i49 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %6, i64 0, i32 1
  %7 = load %struct.pci_bus*, %struct.pci_bus** %bus.i49, align 8
  %devfn.i50 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %6, i64 0, i32 6
  %8 = load i32, i32* %devfn.i50, align 8
  %call.i51 = call i32 @pci_bus_write_config_byte(%struct.pci_bus* %7, i32 %8, i32 12, i8 zeroext 8) #9
  %.pr = load i16, i16* %mac_version, align 2
  %cmp12 = icmp eq i16 %.pr, 1
  br i1 %cmp12, label %do.end17, label %if.end22

do.end17:                                         ; preds = %if.end9
  %add.ptr18 = getelementptr i8, i8* %0, i64 130
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 1, i8* %add.ptr18) #10, !srcloc !5
  %write.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %9 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %9(%struct.rtl8169_private* nonnull %tp, i32 11, i32 0) #9
  br label %if.end22

if.end22:                                         ; preds = %if.end, %do.end17, %if.end9
  %phy_reset_enable.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 27
  %10 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %phy_reset_enable.i, align 8
  call void %10(%struct.rtl8169_private* nonnull %tp) #9
  %phy_reset_pending.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 29
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %if.end22
  %i.017.i.i.i = phi i32 [ 0, %if.end22 ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @msleep(i32 1) #9
  %11 = load i32 (%struct.rtl8169_private*)*, i32 (%struct.rtl8169_private*)** %phy_reset_pending.i.i, align 8
  %call.i.i = call i32 %11(%struct.rtl8169_private* nonnull %tp) #9
  %tobool.i.i = icmp eq i32 %call.i.i, 0
  br i1 %tobool.i.i, label %rtl8169_phy_reset.exit, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %12 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %12, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %rtl8169_phy_reset.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %13 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %13, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.44, i64 0, i64 0), i32 1, i32 100, i32 1) #9
  br label %rtl8169_phy_reset.exit

rtl8169_phy_reset.exit:                           ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  %supports_gmii = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 35, i32 4
  %bf.load = load i8, i8* %supports_gmii, align 8
  %bf.clear = and i8 %bf.load, 4
  %tobool = icmp eq i8 %bf.clear, 0
  %conv23 = select i1 %tobool, i32 15, i32 63
  %set_speed.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5648
  %14 = bitcast i8* %set_speed.i to i32 (%struct.net_device*, i8, i16, i8, i32)**
  %15 = load i32 (%struct.net_device*, i8, i16, i8, i32)*, i32 (%struct.net_device*, i8, i16, i8, i32)** %14, align 8
  %call1.i = call i32 %15(%struct.net_device* %dev, i8 zeroext 1, i16 zeroext 1000, i8 zeroext 1, i32 %conv23) #9
  %cmp.i = icmp slt i32 %call1.i, 0
  br i1 %cmp.i, label %rtl8169_set_speed.exit, label %if.end.i

if.end.i:                                         ; preds = %rtl8169_phy_reset.exit
  %state.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 8
  %16 = load volatile i64, i64* %state.i.i, align 8
  %and1.i.i.i = and i64 %16, 1
  %cmp.i.i.i52 = icmp eq i64 %and1.i.i.i, 0
  %17 = and i32 %conv23, 32
  %tobool.i = icmp eq i32 %17, 0
  %or.cond18.i = or i1 %tobool.i, %cmp.i.i.i52
  br i1 %or.cond18.i, label %rtl8169_set_speed.exit, label %if.then7.i

if.then7.i:                                       ; preds = %if.end.i
  %timer.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5496
  %18 = bitcast i8* %timer.i to %struct.timer_list*
  %19 = load volatile i64, i64* @jiffies, align 8
  %add.i = add i64 %19, 2500
  %call8.i = call i32 @mod_timer(%struct.timer_list* %18, i64 %add.i) #9
  br label %rtl8169_set_speed.exit

rtl8169_set_speed.exit:                           ; preds = %rtl8169_phy_reset.exit, %if.end.i, %if.then7.i
  %20 = load i16, i16* %mac_version, align 2
  %cmp.i53 = icmp eq i16 %20, 0
  br i1 %cmp.i53, label %rtl_tbi_enabled.exit, label %if.end33

rtl_tbi_enabled.exit:                             ; preds = %rtl8169_set_speed.exit
  %21 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %21, i64 108
  %22 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i) #10, !srcloc !6
  %tobool.i54 = icmp slt i8 %22, 0
  br i1 %tobool.i54, label %do.body27, label %if.end33

do.body27:                                        ; preds = %rtl_tbi_enabled.exit
  %msg_enable = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %23 = load i32, i32* %msg_enable, align 8
  %and = and i32 %23, 4
  %tobool28 = icmp eq i32 %and, 0
  br i1 %tobool28, label %if.end33, label %if.then29

if.then29:                                        ; preds = %do.body27
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* nonnull %dev, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.39, i64 0, i64 0)) #9
  br label %if.end33

if.end33:                                         ; preds = %rtl8169_set_speed.exit, %do.body27, %if.then29, %rtl_tbi_enabled.exit
  ret void
}

; Function Attrs: noredzone
declare void @netdev_warn(%struct.net_device*, i8*, ...) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @__pm_runtime_resume(%struct.device*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #2

; Function Attrs: noredzone
declare void @kfree(i8*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @net_ratelimit() local_unnamed_addr #1

; Function Attrs: noredzone
declare i8* @__kmalloc_node(i64, i32, i32) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_slow_event_work(%struct.rtl8169_private* %tp) #0 {
entry:
  %c.i.i.i = alloca i8, align 1
  %pci_status.i = alloca i16, align 2
  %pci_cmd.i = alloca i16, align 2
  %dev1 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %0 = load %struct.net_device*, %struct.net_device** %dev1, align 8
  %mmio_addr.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %1 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i = getelementptr i8, i8* %1, i64 62
  %2 = bitcast i8* %add.ptr.i to i16*
  %3 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %2) #10, !srcloc !21
  %event_slow = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 20
  %4 = load i16, i16* %event_slow, align 2
  %and42 = and i16 %4, %3
  %5 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i44 = getelementptr i8, i8* %5, i64 62
  %6 = bitcast i8* %add.ptr.i44 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %and42, i16* %6) #10, !srcloc !3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !7
  %conv4 = zext i16 %and42 to i32
  %and5.lobit = and i32 %conv4, 64
  %tobool8 = icmp eq i32 %and5.lobit, 0
  br i1 %tobool8, label %if.end, label %if.then, !prof !9

if.then:                                          ; preds = %entry
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %7 = load i16, i16* %mac_version, align 2
  %cond = icmp eq i16 %7, 10
  br i1 %cond, label %sw.bb, label %if.end

sw.bb:                                            ; preds = %if.then
  %_tx.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i64 0, i32 88
  %8 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i, align 64
  %state.i.i = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %8, i64 0, i32 10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %state.i.i, i64 0, i64* %state.i.i) #10, !srcloc !19
  %arraydecay = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 33, i32 0, i64 0
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay, i64 2, i64* %arraydecay) #10, !srcloc !19
  br label %if.end

if.end:                                           ; preds = %entry, %if.then, %sw.bb
  %tobool19 = icmp slt i16 %and42, 0
  br i1 %tobool19, label %if.then20, label %if.end21, !prof !10

if.then20:                                        ; preds = %if.end
  %add.ptr.i.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 2112
  %9 = bitcast i8* %add.ptr.i.i to %struct.rtl8169_private*
  %pci_dev.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 2120
  %10 = bitcast i8* %pci_dev.i to %struct.pci_dev**
  %11 = load %struct.pci_dev*, %struct.pci_dev** %10, align 8
  %12 = bitcast i16* %pci_status.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %12) #10
  %13 = bitcast i16* %pci_cmd.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %13) #10
  %bus.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %11, i64 0, i32 1
  %14 = load %struct.pci_bus*, %struct.pci_bus** %bus.i.i, align 8
  %devfn.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %11, i64 0, i32 6
  %15 = load i32, i32* %devfn.i.i, align 8
  %call.i.i = call i32 @pci_bus_read_config_word(%struct.pci_bus* %14, i32 %15, i32 4, i16* nonnull %pci_cmd.i) #9
  %16 = load %struct.pci_bus*, %struct.pci_bus** %bus.i.i, align 8
  %17 = load i32, i32* %devfn.i.i, align 8
  %call.i58.i = call i32 @pci_bus_read_config_word(%struct.pci_bus* %16, i32 %17, i32 6, i16* nonnull %pci_status.i) #9
  %msg_enable.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 2336
  %18 = bitcast i8* %msg_enable.i to i32*
  %19 = load i32, i32* %18, align 8
  %and.i = and i32 %19, 512
  %tobool.i = icmp eq i32 %and.i, 0
  br i1 %tobool.i, label %do.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then20
  %20 = load i16, i16* %pci_cmd.i, align 2
  %conv.i = zext i16 %20 to i32
  %21 = load i16, i16* %pci_status.i, align 2
  %conv3.i = zext i16 %21 to i32
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* nonnull %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.27, i64 0, i64 0), i32 %conv.i, i32 %conv3.i) #9
  br label %do.end.i

do.end.i:                                         ; preds = %if.then.i, %if.then20
  %broken_parity_status.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %11, i64 0, i32 40
  %bf.load.i = load i32, i32* %broken_parity_status.i, align 1
  %22 = trunc i32 %bf.load.i to i8
  %tobool4.i = icmp slt i8 %22, 0
  %23 = load i16, i16* %pci_cmd.i, align 2
  %or.i = or i16 %23, 320
  %24 = and i16 %23, -65
  %storemerge.i = select i1 %tobool4.i, i16 %24, i16 %or.i
  store i16 %storemerge.i, i16* %pci_cmd.i, align 2
  %25 = load %struct.pci_bus*, %struct.pci_bus** %bus.i.i, align 8
  %26 = load i32, i32* %devfn.i.i, align 8
  %call.i61.i = call i32 @pci_bus_write_config_word(%struct.pci_bus* %25, i32 %26, i32 4, i16 zeroext %storemerge.i) #9
  %27 = load i16, i16* %pci_status.i, align 2
  %28 = and i16 %27, -2048
  %29 = load %struct.pci_bus*, %struct.pci_bus** %bus.i.i, align 8
  %30 = load i32, i32* %devfn.i.i, align 8
  %call.i64.i = call i32 @pci_bus_write_config_word(%struct.pci_bus* %29, i32 %30, i32 6, i16 zeroext %28) #9
  %cp_cmd.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 5576
  %31 = bitcast i8* %cp_cmd.i to i16*
  %32 = load i16, i16* %31, align 8
  %33 = and i16 %32, 16
  %tobool19.i = icmp eq i16 %33, 0
  br i1 %tobool19.i, label %if.end36.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %do.end.i
  %cur_rx.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 2344
  %34 = bitcast i8* %cur_rx.i to i32*
  %35 = load i32, i32* %34, align 8
  %tobool20.i = icmp eq i32 %35, 0
  br i1 %tobool20.i, label %if.then21.i, label %if.end36.i

if.then21.i:                                      ; preds = %land.lhs.true.i
  %mmio_addr.i45 = bitcast i8* %add.ptr.i.i to i8**
  %36 = load i8*, i8** %mmio_addr.i45, align 8
  %37 = load i32, i32* %18, align 8
  %and24.i = and i32 %37, 512
  %tobool25.i = icmp eq i32 %and24.i, 0
  br i1 %tobool25.i, label %do.end29.i, label %if.then26.i

if.then26.i:                                      ; preds = %if.then21.i
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* nonnull %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.28, i64 0, i64 0)) #9
  %.pre.i = load i16, i16* %31, align 8
  br label %do.end29.i

do.end29.i:                                       ; preds = %if.then26.i, %if.then21.i
  %38 = phi i16 [ %32, %if.then21.i ], [ %.pre.i, %if.then26.i ]
  %39 = and i16 %38, -17
  store i16 %39, i16* %31, align 8
  %add.ptr.i46 = getelementptr i8, i8* %36, i64 224
  %40 = bitcast i8* %add.ptr.i46 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %39, i16* %40) #10, !srcloc !3
  %features.i = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i64 0, i32 17
  %41 = load i64, i64* %features.i, align 16
  %and35.i = and i64 %41, -33
  store i64 %and35.i, i64* %features.i, align 16
  br label %if.end36.i

if.end36.i:                                       ; preds = %do.end29.i, %land.lhs.true.i, %do.end.i
  call fastcc void @rtl8169_hw_reset(%struct.rtl8169_private* nonnull %9) #9
  %arraydecay.i.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 5712
  %42 = bitcast i8* %arraydecay.i.i to i64*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i.i.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %42, i8* nonnull %c.i.i.i, i64 2, i64* %42) #10, !srcloc !23
  %43 = load i8, i8* %c.i.i.i, align 1
  %cmp.i.i.i = icmp eq i8 %43, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i.i.i) #10
  br i1 %cmp.i.i.i, label %if.then.i.i, label %rtl8169_pcierr_interrupt.exit

if.then.i.i:                                      ; preds = %if.end36.i
  %work.i.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 5760
  %44 = bitcast i8* %work.i.i to %struct.work_struct*
  %45 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %call.i.i.i.i = call zeroext i1 @queue_work_on(i32 512, %struct.workqueue_struct* %45, %struct.work_struct* %44) #9
  br label %rtl8169_pcierr_interrupt.exit

rtl8169_pcierr_interrupt.exit:                    ; preds = %if.end36.i, %if.then.i.i
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %13) #10
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %12) #10
  br label %if.end21

if.end21:                                         ; preds = %rtl8169_pcierr_interrupt.exit, %if.end
  %and23 = and i32 %conv4, 32
  %tobool24 = icmp eq i32 %and23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %if.end21
  %46 = load i8*, i8** %mmio_addr.i, align 8
  call fastcc void @__rtl8169_check_link_status(%struct.net_device* %0, %struct.rtl8169_private* nonnull %tp, i8* %46, i1 zeroext true) #11
  br label %if.end26

if.end26:                                         ; preds = %if.end21, %if.then25
  %47 = load i16, i16* %event_slow, align 2
  %48 = or i16 %47, 15
  %49 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i47 = getelementptr i8, i8* %49, i64 60
  %50 = bitcast i8* %add.ptr.i.i47 to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %48, i16* %50) #10, !srcloc !3
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl_reset_work(%struct.rtl8169_private* %tp) #0 {
entry:
  %dev1 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %0 = load %struct.net_device*, %struct.net_device** %dev1, align 8
  %napi = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 3
  call void @napi_disable(%struct.napi_struct* %napi) #9
  %_tx.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i64 0, i32 88
  %1 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i, align 64
  %state.i.i = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %1, i64 0, i32 10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %state.i.i, i64 0, i64* %state.i.i) #10, !srcloc !19
  call void @synchronize_sched() #9
  call fastcc void @rtl8169_hw_reset(%struct.rtl8169_private* %tp) #11
  %RxDescArray = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 13
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.RxDesc*, %struct.RxDesc** %RxDescArray, align 8
  %opts1.i = getelementptr inbounds %struct.RxDesc, %struct.RxDesc* %2, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %opts1.i, align 8
  %and.i = and i32 %3, 1073741824
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !24
  %or1.i = or i32 %and.i, -2147467265
  store i32 %or1.i, i32* %opts1.i, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %dirty_tx.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 9
  %4 = load i32, i32* %dirty_tx.i, align 8
  %pci_dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %TxDescArray.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 12
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end11.i.i, %for.end
  %i.029.i.i = phi i32 [ 0, %for.end ], [ %inc12.i.i, %if.end11.i.i ]
  %add.i.i = add i32 %i.029.i.i, %4
  %rem.i.i = and i32 %add.i.i, 63
  %idx.ext.i.i = zext i32 %rem.i.i to i64
  %len3.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 17, i64 %idx.ext.i.i, i32 1
  %5 = load i32, i32* %len3.i.i, align 8
  %tobool.i.i = icmp eq i32 %5, 0
  br i1 %tobool.i.i, label %if.end11.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %skb4.i.i = getelementptr %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 17, i64 %idx.ext.i.i, i32 0
  %6 = load %struct.sk_buff*, %struct.sk_buff** %skb4.i.i, align 8
  %7 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev.i.i, align 8
  %8 = load %struct.TxDesc*, %struct.TxDesc** %TxDescArray.i.i, align 8
  %add.ptr6.i.i = getelementptr %struct.TxDesc, %struct.TxDesc* %8, i64 %idx.ext.i.i
  %dma_ops.i.i.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %7, i64 0, i32 35, i32 22, i32 0
  %9 = load %struct.dma_map_ops*, %struct.dma_map_ops** %dma_ops.i.i.i.i.i, align 8
  %tobool4.i.i.i.i.i = icmp eq %struct.dma_map_ops* %9, null
  %10 = load %struct.dma_map_ops*, %struct.dma_map_ops** @dma_ops, align 8
  %..i.i = select i1 %tobool4.i.i.i.i.i, %struct.dma_map_ops* %10, %struct.dma_map_ops* %9
  %unmap_page.i.i.i.i = getelementptr inbounds %struct.dma_map_ops, %struct.dma_map_ops* %..i.i, i64 0, i32 5
  %11 = load void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)** %unmap_page.i.i.i.i, align 8
  %tobool11.i.i.i.i = icmp eq void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)* %11, null
  br i1 %tobool11.i.i.i.i, label %rtl8169_unmap_tx_skb.exit.i.i, label %if.then12.i.i.i.i

if.then12.i.i.i.i:                                ; preds = %if.then.i.i
  %dev.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %7, i64 0, i32 35
  %conv.i.i.i = zext i32 %5 to i64
  %addr.i.i.i = getelementptr inbounds %struct.TxDesc, %struct.TxDesc* %8, i64 %idx.ext.i.i, i32 2
  %12 = load i64, i64* %addr.i.i.i, align 8
  call void %11(%struct.device* %dev.i.i, i64 %12, i64 %conv.i.i.i, i32 1, %struct.dma_attrs* null) #9
  br label %rtl8169_unmap_tx_skb.exit.i.i

rtl8169_unmap_tx_skb.exit.i.i:                    ; preds = %if.then12.i.i.i.i, %if.then.i.i
  %13 = bitcast %struct.TxDesc* %add.ptr6.i.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i32 8, i1 false) #10
  store i32 0, i32* %len3.i.i, align 8
  %tobool7.i.i = icmp eq %struct.sk_buff* %6, null
  br i1 %tobool7.i.i, label %if.end11.i.i, label %if.then8.i.i

if.then8.i.i:                                     ; preds = %rtl8169_unmap_tx_skb.exit.i.i
  %14 = load %struct.net_device*, %struct.net_device** %dev1, align 8
  %tx_dropped.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %14, i64 0, i32 25, i32 7
  %15 = load i64, i64* %tx_dropped.i.i, align 8
  %inc.i.i = add i64 %15, 1
  store i64 %inc.i.i, i64* %tx_dropped.i.i, align 8
  call void @__dev_kfree_skb_any(%struct.sk_buff* nonnull %6, i32 1) #9
  store %struct.sk_buff* null, %struct.sk_buff** %skb4.i.i, align 8
  br label %if.end11.i.i

if.end11.i.i:                                     ; preds = %if.then8.i.i, %rtl8169_unmap_tx_skb.exit.i.i, %for.body.i.i
  %inc12.i.i = add nuw nsw i32 %i.029.i.i, 1
  %exitcond.i.i = icmp eq i32 %inc12.i.i, 64
  br i1 %exitcond.i.i, label %rtl8169_tx_clear.exit, label %for.body.i.i

rtl8169_tx_clear.exit:                            ; preds = %if.end11.i.i
  %cur_rx.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 7
  %state.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 3, i32 1
  %16 = bitcast i32* %cur_rx.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 12, i32 8, i1 false)
  %17 = load volatile i64, i64* %state.i, align 8
  %18 = and i64 %17, 1
  %tobool.i = icmp eq i64 %18, 0
  br i1 %tobool.i, label %do.body4.i, label %napi_enable.exit, !prof !10

do.body4.i:                                       ; preds = %rtl8169_tx_clear.exit
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.38, i64 0, i64 0), i32 511, i64 12) #10, !srcloc !35
  br label %do.body5.i

do.body5.i:                                       ; preds = %do.body5.i, %do.body4.i
  br label %do.body5.i

napi_enable.exit:                                 ; preds = %rtl8169_tx_clear.exit
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !36
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %state.i, i64 0, i64* %state.i) #10, !srcloc !20
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %state.i, i64 2, i64* %state.i) #10, !srcloc !20
  %add.ptr.i.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 2112
  %hw_start.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 5672
  %19 = bitcast i8* %hw_start.i to void (%struct.net_device*)**
  %20 = load void (%struct.net_device*)*, void (%struct.net_device*)** %19, align 8
  call void %20(%struct.net_device* %0) #9
  %event_slow.i.i = getelementptr %struct.net_device, %struct.net_device* %0, i64 0, i32 0, i64 5578
  %21 = bitcast i8* %event_slow.i.i to i16*
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %22, 15
  %mmio_addr.i.i.i = bitcast i8* %add.ptr.i.i to i8**
  %24 = load i8*, i8** %mmio_addr.i.i.i, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %24, i64 60
  %25 = bitcast i8* %add.ptr.i.i.i to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %23, i16* %25) #10, !srcloc !3
  %26 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i, align 64
  call void @netif_tx_wake_queue(%struct.netdev_queue* %26) #9
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %27 = load i8*, i8** %mmio_addr, align 8
  call fastcc void @__rtl8169_check_link_status(%struct.net_device* %0, %struct.rtl8169_private* nonnull %tp, i8* %27, i1 zeroext false) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @__rtl8169_check_link_status(%struct.net_device* %dev, %struct.rtl8169_private* readonly %tp, i8* %ioaddr, i1 zeroext %pm) unnamed_addr #0 {
entry:
  %link_ok = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 30
  %0 = load i32 (i8*)*, i32 (i8*)** %link_ok, align 8
  %call = call i32 %0(i8* %ioaddr) #9
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %mmio_addr.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %1 = load i8*, i8** %mmio_addr.i, align 8
  %dev1.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %2 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  %state.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i64 0, i32 8
  %3 = load volatile i64, i64* %state.i.i, align 8
  %and1.i.i.i = and i64 %3, 1
  %cmp.i.i.i = icmp eq i64 %and1.i.i.i, 0
  br i1 %cmp.i.i.i, label %rtl_link_chg_patch.exit, label %if.end.i

if.end.i:                                         ; preds = %if.then
  %mac_version.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %4 = load i16, i16* %mac_version.i, align 2
  switch i16 %4, label %rtl_link_chg_patch.exit [
    i16 33, label %if.then7.i
    i16 37, label %if.then7.i
    i16 34, label %if.then30.i
    i16 35, label %if.then30.i
    i16 36, label %if.then44.i
  ]

if.then7.i:                                       ; preds = %if.end.i, %if.end.i
  %add.ptr.i = getelementptr i8, i8* %1, i64 108
  %5 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i) #10, !srcloc !6
  %6 = and i8 %5, 16
  %tobool.i = icmp eq i8 %6, 0
  br i1 %tobool.i, label %if.else.i, label %if.then10.i

if.then10.i:                                      ; preds = %if.then7.i
  %7 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i80.i = getelementptr i8, i8* %7, i64 112
  %8 = bitcast i8* %add.ptr.i80.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 17, i32* %8) #10, !srcloc !8
  %add.ptr11.i81.i = getelementptr i8, i8* %7, i64 116
  %9 = bitcast i8* %add.ptr11.i81.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421764, i32* %9) #10, !srcloc !8
  br label %for.body.i.i.i88.i

for.cond.i.i.i84.i:                               ; preds = %for.body.i.i.i88.i
  %inc.i.i.i82.i = add nuw nsw i32 %i.017.i.i.i85.i, 1
  %cmp.i.i.i83.i = icmp ult i32 %i.017.i.i.i85.i, 99
  br i1 %cmp.i.i.i83.i, label %for.body.i.i.i88.i, label %do.body.i.i.i92.i

for.body.i.i.i88.i:                               ; preds = %for.cond.i.i.i84.i, %if.then10.i
  %i.017.i.i.i85.i = phi i32 [ 0, %if.then10.i ], [ %inc.i.i.i82.i, %for.cond.i.i.i84.i ]
  call void @__udelay(i64 100) #9
  %10 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i86.i = getelementptr i8, i8* %10, i64 116
  %11 = bitcast i8* %add.ptr.i.i86.i to i32*
  %12 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %11) #10, !srcloc !2
  %tobool.i.i87.i = icmp slt i32 %12, 0
  br i1 %tobool.i.i87.i, label %for.cond.i.i.i84.i, label %rtl_eri_write.exit95.i

do.body.i.i.i92.i:                                ; preds = %for.cond.i.i.i84.i
  %msg_enable.i.i.i89.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %13 = load i32, i32* %msg_enable.i.i.i89.i, align 8
  %and.i.i.i90.i = and i32 %13, 1
  %tobool4.i.i.i91.i = icmp eq i32 %and.i.i.i90.i, 0
  br i1 %tobool4.i.i.i91.i, label %rtl_eri_write.exit95.i, label %if.then5.i.i.i94.i

if.then5.i.i.i94.i:                               ; preds = %do.body.i.i.i92.i
  %14 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %14, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit95.i

rtl_eri_write.exit95.i:                           ; preds = %for.body.i.i.i88.i, %if.then5.i.i.i94.i, %do.body.i.i.i92.i
  %15 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i97.i = getelementptr i8, i8* %15, i64 112
  %16 = bitcast i8* %add.ptr.i97.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 5, i32* %16) #10, !srcloc !8
  %add.ptr11.i98.i = getelementptr i8, i8* %15, i64 116
  %17 = bitcast i8* %add.ptr11.i98.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421732, i32* %17) #10, !srcloc !8
  br label %for.body.i.i.i105.i

for.cond.i.i.i101.i:                              ; preds = %for.body.i.i.i105.i
  %inc.i.i.i99.i = add nuw nsw i32 %i.017.i.i.i102.i, 1
  %cmp.i.i.i100.i = icmp ult i32 %i.017.i.i.i102.i, 99
  br i1 %cmp.i.i.i100.i, label %for.body.i.i.i105.i, label %do.body.i.i.i109.i

for.body.i.i.i105.i:                              ; preds = %for.cond.i.i.i101.i, %rtl_eri_write.exit95.i
  %i.017.i.i.i102.i = phi i32 [ 0, %rtl_eri_write.exit95.i ], [ %inc.i.i.i99.i, %for.cond.i.i.i101.i ]
  call void @__udelay(i64 100) #9
  %18 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i103.i = getelementptr i8, i8* %18, i64 116
  %19 = bitcast i8* %add.ptr.i.i103.i to i32*
  %20 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %19) #10, !srcloc !2
  %tobool.i.i104.i = icmp slt i32 %20, 0
  br i1 %tobool.i.i104.i, label %for.cond.i.i.i101.i, label %if.end19.i

do.body.i.i.i109.i:                               ; preds = %for.cond.i.i.i101.i
  %msg_enable.i.i.i106.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %21 = load i32, i32* %msg_enable.i.i.i106.i, align 8
  %and.i.i.i107.i = and i32 %21, 1
  %tobool4.i.i.i108.i = icmp eq i32 %and.i.i.i107.i, 0
  br i1 %tobool4.i.i.i108.i, label %if.end19.i, label %if.then5.i.i.i111.i

if.then5.i.i.i111.i:                              ; preds = %do.body.i.i.i109.i
  %22 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %22, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %if.end19.i

if.else.i:                                        ; preds = %if.then7.i
  %23 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i) #10, !srcloc !6
  %24 = and i8 %23, 8
  %tobool15.i = icmp eq i8 %24, 0
  %25 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i114.i = getelementptr i8, i8* %25, i64 112
  %26 = bitcast i8* %add.ptr.i114.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 31, i32* %26) #10, !srcloc !8
  %add.ptr11.i115.i = getelementptr i8, i8* %25, i64 116
  %27 = bitcast i8* %add.ptr11.i115.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421764, i32* %27) #10, !srcloc !8
  br label %for.body.i.i.i122.i

for.cond.i.i.i118.i:                              ; preds = %for.body.i.i.i122.i
  %inc.i.i.i116.i = add nuw nsw i32 %i.017.i.i.i119.i, 1
  %cmp.i.i.i117.i = icmp ult i32 %i.017.i.i.i119.i, 99
  br i1 %cmp.i.i.i117.i, label %for.body.i.i.i122.i, label %do.body.i.i.i126.i

for.body.i.i.i122.i:                              ; preds = %for.cond.i.i.i118.i, %if.else.i
  %i.017.i.i.i119.i = phi i32 [ 0, %if.else.i ], [ %inc.i.i.i116.i, %for.cond.i.i.i118.i ]
  call void @__udelay(i64 100) #9
  %28 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i120.i = getelementptr i8, i8* %28, i64 116
  %29 = bitcast i8* %add.ptr.i.i120.i to i32*
  %30 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %29) #10, !srcloc !2
  %tobool.i.i121.i = icmp slt i32 %30, 0
  br i1 %tobool.i.i121.i, label %for.cond.i.i.i118.i, label %rtl_eri_write.exit129.i

do.body.i.i.i126.i:                               ; preds = %for.cond.i.i.i118.i
  %msg_enable.i.i.i123.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %31 = load i32, i32* %msg_enable.i.i.i123.i, align 8
  %and.i.i.i124.i = and i32 %31, 1
  %tobool4.i.i.i125.i = icmp eq i32 %and.i.i.i124.i, 0
  br i1 %tobool4.i.i.i125.i, label %rtl_eri_write.exit129.i, label %if.then5.i.i.i128.i

if.then5.i.i.i128.i:                              ; preds = %do.body.i.i.i126.i
  %32 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %32, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit129.i

rtl_eri_write.exit129.i:                          ; preds = %for.body.i.i.i122.i, %if.then5.i.i.i128.i, %do.body.i.i.i126.i
  %33 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i148.i = getelementptr i8, i8* %33, i64 112
  %34 = bitcast i8* %add.ptr.i148.i to i32*
  br i1 %tobool15.i, label %if.else17.i, label %if.then16.i

if.then16.i:                                      ; preds = %rtl_eri_write.exit129.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 5, i32* %34) #10, !srcloc !8
  %add.ptr11.i132.i = getelementptr i8, i8* %33, i64 116
  %35 = bitcast i8* %add.ptr11.i132.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421732, i32* %35) #10, !srcloc !8
  br label %for.body.i.i.i139.i

for.cond.i.i.i135.i:                              ; preds = %for.body.i.i.i139.i
  %inc.i.i.i133.i = add nuw nsw i32 %i.017.i.i.i136.i, 1
  %cmp.i.i.i134.i = icmp ult i32 %i.017.i.i.i136.i, 99
  br i1 %cmp.i.i.i134.i, label %for.body.i.i.i139.i, label %do.body.i.i.i143.i

for.body.i.i.i139.i:                              ; preds = %for.cond.i.i.i135.i, %if.then16.i
  %i.017.i.i.i136.i = phi i32 [ 0, %if.then16.i ], [ %inc.i.i.i133.i, %for.cond.i.i.i135.i ]
  call void @__udelay(i64 100) #9
  %36 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i137.i = getelementptr i8, i8* %36, i64 116
  %37 = bitcast i8* %add.ptr.i.i137.i to i32*
  %38 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %37) #10, !srcloc !2
  %tobool.i.i138.i = icmp slt i32 %38, 0
  br i1 %tobool.i.i138.i, label %for.cond.i.i.i135.i, label %if.end19.i

do.body.i.i.i143.i:                               ; preds = %for.cond.i.i.i135.i
  %msg_enable.i.i.i140.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %39 = load i32, i32* %msg_enable.i.i.i140.i, align 8
  %and.i.i.i141.i = and i32 %39, 1
  %tobool4.i.i.i142.i = icmp eq i32 %and.i.i.i141.i, 0
  br i1 %tobool4.i.i.i142.i, label %if.end19.i, label %if.then5.i.i.i145.i

if.then5.i.i.i145.i:                              ; preds = %do.body.i.i.i143.i
  %40 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %40, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %if.end19.i

if.else17.i:                                      ; preds = %rtl_eri_write.exit129.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 63, i32* %34) #10, !srcloc !8
  %add.ptr11.i149.i = getelementptr i8, i8* %33, i64 116
  %41 = bitcast i8* %add.ptr11.i149.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421732, i32* %41) #10, !srcloc !8
  br label %for.body.i.i.i156.i

for.cond.i.i.i152.i:                              ; preds = %for.body.i.i.i156.i
  %inc.i.i.i150.i = add nuw nsw i32 %i.017.i.i.i153.i, 1
  %cmp.i.i.i151.i = icmp ult i32 %i.017.i.i.i153.i, 99
  br i1 %cmp.i.i.i151.i, label %for.body.i.i.i156.i, label %do.body.i.i.i160.i

for.body.i.i.i156.i:                              ; preds = %for.cond.i.i.i152.i, %if.else17.i
  %i.017.i.i.i153.i = phi i32 [ 0, %if.else17.i ], [ %inc.i.i.i150.i, %for.cond.i.i.i152.i ]
  call void @__udelay(i64 100) #9
  %42 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i154.i = getelementptr i8, i8* %42, i64 116
  %43 = bitcast i8* %add.ptr.i.i154.i to i32*
  %44 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %43) #10, !srcloc !2
  %tobool.i.i155.i = icmp slt i32 %44, 0
  br i1 %tobool.i.i155.i, label %for.cond.i.i.i152.i, label %if.end19.i

do.body.i.i.i160.i:                               ; preds = %for.cond.i.i.i152.i
  %msg_enable.i.i.i157.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %45 = load i32, i32* %msg_enable.i.i.i157.i, align 8
  %and.i.i.i158.i = and i32 %45, 1
  %tobool4.i.i.i159.i = icmp eq i32 %and.i.i.i158.i, 0
  br i1 %tobool4.i.i.i159.i, label %if.end19.i, label %if.then5.i.i.i162.i

if.then5.i.i.i162.i:                              ; preds = %do.body.i.i.i160.i
  %46 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %46, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %if.end19.i

if.end19.i:                                       ; preds = %for.body.i.i.i105.i, %for.body.i.i.i139.i, %for.body.i.i.i156.i, %if.then5.i.i.i162.i, %do.body.i.i.i160.i, %if.then5.i.i.i145.i, %do.body.i.i.i143.i, %if.then5.i.i.i111.i, %do.body.i.i.i109.i
  %47 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i164.i = getelementptr i8, i8* %47, i64 116
  %48 = bitcast i8* %add.ptr.i.i164.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %48) #10, !srcloc !8
  br label %for.body.i.i.i.i.i

for.cond.i.i.i.i.i:                               ; preds = %for.body.i.i.i.i.i
  %inc.i.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i.i, 1
  %cmp.i.i.i.i.i = icmp ult i32 %i.017.i.i.i.i.i, 99
  br i1 %cmp.i.i.i.i.i, label %for.body.i.i.i.i.i, label %do.body.i.i.i.i.i

for.body.i.i.i.i.i:                               ; preds = %for.cond.i.i.i.i.i, %if.end19.i
  %i.017.i.i.i.i.i = phi i32 [ 0, %if.end19.i ], [ %inc.i.i.i.i.i, %for.cond.i.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %49 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i.i.i = getelementptr i8, i8* %49, i64 116
  %50 = bitcast i8* %add.ptr.i.i.i.i to i32*
  %51 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %50) #10, !srcloc !2
  %tobool.i.i.i.i = icmp slt i32 %51, 0
  br i1 %tobool.i.i.i.i, label %cond.true.i.i.i, label %for.cond.i.i.i.i.i

do.body.i.i.i.i.i:                                ; preds = %for.cond.i.i.i.i.i
  %msg_enable.i.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %52 = load i32, i32* %msg_enable.i.i.i.i.i, align 8
  %and.i.i.i.i.i = and i32 %52, 1
  %tobool4.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i.i, label %rtl_w0w1_eri.exit.i, label %if.then5.i.i.i.i.i

if.then5.i.i.i.i.i:                               ; preds = %do.body.i.i.i.i.i
  %53 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %53, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit.i

cond.true.i.i.i:                                  ; preds = %for.body.i.i.i.i.i
  %add.ptr3.i.i.i = getelementptr i8, i8* %47, i64 112
  %54 = bitcast i8* %add.ptr3.i.i.i to i32*
  %55 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %54) #10, !srcloc !2
  %phitmp.i = and i32 %55, -2
  br label %rtl_w0w1_eri.exit.i

rtl_w0w1_eri.exit.i:                              ; preds = %cond.true.i.i.i, %if.then5.i.i.i.i.i, %do.body.i.i.i.i.i
  %cond.i.i.i = phi i32 [ %phitmp.i, %cond.true.i.i.i ], [ -2, %do.body.i.i.i.i.i ], [ -2, %if.then5.i.i.i.i.i ]
  %56 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i287.i = getelementptr i8, i8* %56, i64 112
  %57 = bitcast i8* %add.ptr.i287.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i.i, i32* %57) #10, !srcloc !8
  %add.ptr11.i288.i = getelementptr i8, i8* %56, i64 116
  %58 = bitcast i8* %add.ptr11.i288.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %58) #10, !srcloc !8
  br label %for.body.i.i.i295.i

for.cond.i.i.i291.i:                              ; preds = %for.body.i.i.i295.i
  %inc.i.i.i289.i = add nuw nsw i32 %i.017.i.i.i292.i, 1
  %cmp.i.i.i290.i = icmp ult i32 %i.017.i.i.i292.i, 99
  br i1 %cmp.i.i.i290.i, label %for.body.i.i.i295.i, label %do.body.i.i.i299.i

for.body.i.i.i295.i:                              ; preds = %for.cond.i.i.i291.i, %rtl_w0w1_eri.exit.i
  %i.017.i.i.i292.i = phi i32 [ 0, %rtl_w0w1_eri.exit.i ], [ %inc.i.i.i289.i, %for.cond.i.i.i291.i ]
  call void @__udelay(i64 100) #9
  %59 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i293.i = getelementptr i8, i8* %59, i64 116
  %60 = bitcast i8* %add.ptr.i.i293.i to i32*
  %61 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %60) #10, !srcloc !2
  %tobool.i.i294.i = icmp slt i32 %61, 0
  br i1 %tobool.i.i294.i, label %for.cond.i.i.i291.i, label %rtl_eri_write.exit302.i

do.body.i.i.i299.i:                               ; preds = %for.cond.i.i.i291.i
  %msg_enable.i.i.i296.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %62 = load i32, i32* %msg_enable.i.i.i296.i, align 8
  %and.i.i.i297.i = and i32 %62, 1
  %tobool4.i.i.i298.i = icmp eq i32 %and.i.i.i297.i, 0
  br i1 %tobool4.i.i.i298.i, label %rtl_eri_write.exit302.i, label %if.then5.i.i.i301.i

if.then5.i.i.i301.i:                              ; preds = %do.body.i.i.i299.i
  %63 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %63, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit302.i

rtl_eri_write.exit302.i:                          ; preds = %for.body.i.i.i295.i, %if.then5.i.i.i301.i, %do.body.i.i.i299.i
  %64 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i166.i = getelementptr i8, i8* %64, i64 116
  %65 = bitcast i8* %add.ptr.i.i166.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %65) #10, !srcloc !8
  br label %for.body.i.i.i.i173.i

for.cond.i.i.i.i169.i:                            ; preds = %for.body.i.i.i.i173.i
  %inc.i.i.i.i167.i = add nuw nsw i32 %i.017.i.i.i.i170.i, 1
  %cmp.i.i.i.i168.i = icmp ult i32 %i.017.i.i.i.i170.i, 99
  br i1 %cmp.i.i.i.i168.i, label %for.body.i.i.i.i173.i, label %do.body.i.i.i.i177.i

for.body.i.i.i.i173.i:                            ; preds = %for.cond.i.i.i.i169.i, %rtl_eri_write.exit302.i
  %i.017.i.i.i.i170.i = phi i32 [ 0, %rtl_eri_write.exit302.i ], [ %inc.i.i.i.i167.i, %for.cond.i.i.i.i169.i ]
  call void @__udelay(i64 100) #9
  %66 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i.i171.i = getelementptr i8, i8* %66, i64 116
  %67 = bitcast i8* %add.ptr.i.i.i171.i to i32*
  %68 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %67) #10, !srcloc !2
  %tobool.i.i.i172.i = icmp slt i32 %68, 0
  br i1 %tobool.i.i.i172.i, label %cond.true.i.i181.i, label %for.cond.i.i.i.i169.i

do.body.i.i.i.i177.i:                             ; preds = %for.cond.i.i.i.i169.i
  %msg_enable.i.i.i.i174.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %69 = load i32, i32* %msg_enable.i.i.i.i174.i, align 8
  %and.i.i.i.i175.i = and i32 %69, 1
  %tobool4.i.i.i.i176.i = icmp eq i32 %and.i.i.i.i175.i, 0
  br i1 %tobool4.i.i.i.i176.i, label %rtl_w0w1_eri.exit183.i, label %if.then5.i.i.i.i179.i

if.then5.i.i.i.i179.i:                            ; preds = %do.body.i.i.i.i177.i
  %70 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %70, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit183.i

cond.true.i.i181.i:                               ; preds = %for.body.i.i.i.i173.i
  %add.ptr3.i.i180.i = getelementptr i8, i8* %64, i64 112
  %71 = bitcast i8* %add.ptr3.i.i180.i to i32*
  %72 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %71) #10, !srcloc !2
  %phitmp320.i = or i32 %72, 1
  br label %rtl_w0w1_eri.exit183.i

rtl_w0w1_eri.exit183.i:                           ; preds = %cond.true.i.i181.i, %if.then5.i.i.i.i179.i, %do.body.i.i.i.i177.i
  %cond.i.i182.i = phi i32 [ %phitmp320.i, %cond.true.i.i181.i ], [ -1, %do.body.i.i.i.i177.i ], [ -1, %if.then5.i.i.i.i179.i ]
  %73 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i304.i = getelementptr i8, i8* %73, i64 112
  %74 = bitcast i8* %add.ptr.i304.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i182.i, i32* %74) #10, !srcloc !8
  %add.ptr11.i305.i = getelementptr i8, i8* %73, i64 116
  %75 = bitcast i8* %add.ptr11.i305.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479332, i32* %75) #10, !srcloc !8
  br label %for.body.i.i.i312.i

for.cond.i.i.i308.i:                              ; preds = %for.body.i.i.i312.i
  %inc.i.i.i306.i = add nuw nsw i32 %i.017.i.i.i309.i, 1
  %cmp.i.i.i307.i = icmp ult i32 %i.017.i.i.i309.i, 99
  br i1 %cmp.i.i.i307.i, label %for.body.i.i.i312.i, label %do.body.i.i.i316.i

for.body.i.i.i312.i:                              ; preds = %for.cond.i.i.i308.i, %rtl_w0w1_eri.exit183.i
  %i.017.i.i.i309.i = phi i32 [ 0, %rtl_w0w1_eri.exit183.i ], [ %inc.i.i.i306.i, %for.cond.i.i.i308.i ]
  call void @__udelay(i64 100) #9
  %76 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i310.i = getelementptr i8, i8* %76, i64 116
  %77 = bitcast i8* %add.ptr.i.i310.i to i32*
  %78 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %77) #10, !srcloc !2
  %tobool.i.i311.i = icmp slt i32 %78, 0
  br i1 %tobool.i.i311.i, label %for.cond.i.i.i308.i, label %rtl_link_chg_patch.exit

do.body.i.i.i316.i:                               ; preds = %for.cond.i.i.i308.i
  %msg_enable.i.i.i313.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %79 = load i32, i32* %msg_enable.i.i.i313.i, align 8
  %and.i.i.i314.i = and i32 %79, 1
  %tobool4.i.i.i315.i = icmp eq i32 %and.i.i.i314.i, 0
  br i1 %tobool4.i.i.i315.i, label %rtl_link_chg_patch.exit, label %if.then5.i.i.i318.i

if.then5.i.i.i318.i:                              ; preds = %do.body.i.i.i316.i
  %80 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %80, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_link_chg_patch.exit

if.then30.i:                                      ; preds = %if.end.i, %if.end.i
  %add.ptr31.i = getelementptr i8, i8* %1, i64 108
  %81 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr31.i) #10, !srcloc !6
  %82 = and i8 %81, 16
  %tobool35.i = icmp eq i8 %82, 0
  %83 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i219.i = getelementptr i8, i8* %83, i64 112
  %84 = bitcast i8* %add.ptr.i219.i to i32*
  br i1 %tobool35.i, label %if.else37.i, label %if.then36.i

if.then36.i:                                      ; preds = %if.then30.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 17, i32* %84) #10, !srcloc !8
  %add.ptr11.i186.i = getelementptr i8, i8* %83, i64 116
  %85 = bitcast i8* %add.ptr11.i186.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421764, i32* %85) #10, !srcloc !8
  br label %for.body.i.i.i193.i

for.cond.i.i.i189.i:                              ; preds = %for.body.i.i.i193.i
  %inc.i.i.i187.i = add nuw nsw i32 %i.017.i.i.i190.i, 1
  %cmp.i.i.i188.i = icmp ult i32 %i.017.i.i.i190.i, 99
  br i1 %cmp.i.i.i188.i, label %for.body.i.i.i193.i, label %do.body.i.i.i197.i

for.body.i.i.i193.i:                              ; preds = %for.cond.i.i.i189.i, %if.then36.i
  %i.017.i.i.i190.i = phi i32 [ 0, %if.then36.i ], [ %inc.i.i.i187.i, %for.cond.i.i.i189.i ]
  call void @__udelay(i64 100) #9
  %86 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i191.i = getelementptr i8, i8* %86, i64 116
  %87 = bitcast i8* %add.ptr.i.i191.i to i32*
  %88 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %87) #10, !srcloc !2
  %tobool.i.i192.i = icmp slt i32 %88, 0
  br i1 %tobool.i.i192.i, label %for.cond.i.i.i189.i, label %rtl_eri_write.exit200.i

do.body.i.i.i197.i:                               ; preds = %for.cond.i.i.i189.i
  %msg_enable.i.i.i194.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %89 = load i32, i32* %msg_enable.i.i.i194.i, align 8
  %and.i.i.i195.i = and i32 %89, 1
  %tobool4.i.i.i196.i = icmp eq i32 %and.i.i.i195.i, 0
  br i1 %tobool4.i.i.i196.i, label %rtl_eri_write.exit200.i, label %if.then5.i.i.i199.i

if.then5.i.i.i199.i:                              ; preds = %do.body.i.i.i197.i
  %90 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %90, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit200.i

rtl_eri_write.exit200.i:                          ; preds = %for.body.i.i.i193.i, %if.then5.i.i.i199.i, %do.body.i.i.i197.i
  %91 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i202.i = getelementptr i8, i8* %91, i64 112
  %92 = bitcast i8* %add.ptr.i202.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 5, i32* %92) #10, !srcloc !8
  %add.ptr11.i203.i = getelementptr i8, i8* %91, i64 116
  %93 = bitcast i8* %add.ptr11.i203.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421732, i32* %93) #10, !srcloc !8
  br label %for.body.i.i.i210.i

for.cond.i.i.i206.i:                              ; preds = %for.body.i.i.i210.i
  %inc.i.i.i204.i = add nuw nsw i32 %i.017.i.i.i207.i, 1
  %cmp.i.i.i205.i = icmp ult i32 %i.017.i.i.i207.i, 99
  br i1 %cmp.i.i.i205.i, label %for.body.i.i.i210.i, label %do.body.i.i.i214.i

for.body.i.i.i210.i:                              ; preds = %for.cond.i.i.i206.i, %rtl_eri_write.exit200.i
  %i.017.i.i.i207.i = phi i32 [ 0, %rtl_eri_write.exit200.i ], [ %inc.i.i.i204.i, %for.cond.i.i.i206.i ]
  call void @__udelay(i64 100) #9
  %94 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i208.i = getelementptr i8, i8* %94, i64 116
  %95 = bitcast i8* %add.ptr.i.i208.i to i32*
  %96 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %95) #10, !srcloc !2
  %tobool.i.i209.i = icmp slt i32 %96, 0
  br i1 %tobool.i.i209.i, label %for.cond.i.i.i206.i, label %rtl_link_chg_patch.exit

do.body.i.i.i214.i:                               ; preds = %for.cond.i.i.i206.i
  %msg_enable.i.i.i211.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %97 = load i32, i32* %msg_enable.i.i.i211.i, align 8
  %and.i.i.i212.i = and i32 %97, 1
  %tobool4.i.i.i213.i = icmp eq i32 %and.i.i.i212.i, 0
  br i1 %tobool4.i.i.i213.i, label %rtl_link_chg_patch.exit, label %if.then5.i.i.i216.i

if.then5.i.i.i216.i:                              ; preds = %do.body.i.i.i214.i
  %98 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %98, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_link_chg_patch.exit

if.else37.i:                                      ; preds = %if.then30.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 31, i32* %84) #10, !srcloc !8
  %add.ptr11.i220.i = getelementptr i8, i8* %83, i64 116
  %99 = bitcast i8* %add.ptr11.i220.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421764, i32* %99) #10, !srcloc !8
  br label %for.body.i.i.i227.i

for.cond.i.i.i223.i:                              ; preds = %for.body.i.i.i227.i
  %inc.i.i.i221.i = add nuw nsw i32 %i.017.i.i.i224.i, 1
  %cmp.i.i.i222.i = icmp ult i32 %i.017.i.i.i224.i, 99
  br i1 %cmp.i.i.i222.i, label %for.body.i.i.i227.i, label %do.body.i.i.i231.i

for.body.i.i.i227.i:                              ; preds = %for.cond.i.i.i223.i, %if.else37.i
  %i.017.i.i.i224.i = phi i32 [ 0, %if.else37.i ], [ %inc.i.i.i221.i, %for.cond.i.i.i223.i ]
  call void @__udelay(i64 100) #9
  %100 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i225.i = getelementptr i8, i8* %100, i64 116
  %101 = bitcast i8* %add.ptr.i.i225.i to i32*
  %102 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %101) #10, !srcloc !2
  %tobool.i.i226.i = icmp slt i32 %102, 0
  br i1 %tobool.i.i226.i, label %for.cond.i.i.i223.i, label %rtl_eri_write.exit234.i

do.body.i.i.i231.i:                               ; preds = %for.cond.i.i.i223.i
  %msg_enable.i.i.i228.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %103 = load i32, i32* %msg_enable.i.i.i228.i, align 8
  %and.i.i.i229.i = and i32 %103, 1
  %tobool4.i.i.i230.i = icmp eq i32 %and.i.i.i229.i, 0
  br i1 %tobool4.i.i.i230.i, label %rtl_eri_write.exit234.i, label %if.then5.i.i.i233.i

if.then5.i.i.i233.i:                              ; preds = %do.body.i.i.i231.i
  %104 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %104, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit234.i

rtl_eri_write.exit234.i:                          ; preds = %for.body.i.i.i227.i, %if.then5.i.i.i233.i, %do.body.i.i.i231.i
  %105 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i236.i = getelementptr i8, i8* %105, i64 112
  %106 = bitcast i8* %add.ptr.i236.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 63, i32* %106) #10, !srcloc !8
  %add.ptr11.i237.i = getelementptr i8, i8* %105, i64 116
  %107 = bitcast i8* %add.ptr11.i237.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421732, i32* %107) #10, !srcloc !8
  br label %for.body.i.i.i244.i

for.cond.i.i.i240.i:                              ; preds = %for.body.i.i.i244.i
  %inc.i.i.i238.i = add nuw nsw i32 %i.017.i.i.i241.i, 1
  %cmp.i.i.i239.i = icmp ult i32 %i.017.i.i.i241.i, 99
  br i1 %cmp.i.i.i239.i, label %for.body.i.i.i244.i, label %do.body.i.i.i248.i

for.body.i.i.i244.i:                              ; preds = %for.cond.i.i.i240.i, %rtl_eri_write.exit234.i
  %i.017.i.i.i241.i = phi i32 [ 0, %rtl_eri_write.exit234.i ], [ %inc.i.i.i238.i, %for.cond.i.i.i240.i ]
  call void @__udelay(i64 100) #9
  %108 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i242.i = getelementptr i8, i8* %108, i64 116
  %109 = bitcast i8* %add.ptr.i.i242.i to i32*
  %110 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %109) #10, !srcloc !2
  %tobool.i.i243.i = icmp slt i32 %110, 0
  br i1 %tobool.i.i243.i, label %for.cond.i.i.i240.i, label %rtl_link_chg_patch.exit

do.body.i.i.i248.i:                               ; preds = %for.cond.i.i.i240.i
  %msg_enable.i.i.i245.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %111 = load i32, i32* %msg_enable.i.i.i245.i, align 8
  %and.i.i.i246.i = and i32 %111, 1
  %tobool4.i.i.i247.i = icmp eq i32 %and.i.i.i246.i, 0
  br i1 %tobool4.i.i.i247.i, label %rtl_link_chg_patch.exit, label %if.then5.i.i.i250.i

if.then5.i.i.i250.i:                              ; preds = %do.body.i.i.i248.i
  %112 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %112, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_link_chg_patch.exit

if.then44.i:                                      ; preds = %if.end.i
  %add.ptr45.i = getelementptr i8, i8* %1, i64 108
  %113 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr45.i) #10, !srcloc !6
  %114 = and i8 %113, 4
  %tobool49.i = icmp eq i8 %114, 0
  %115 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i = getelementptr i8, i8* %115, i64 112
  %116 = bitcast i8* %add.ptr.i.i to i32*
  br i1 %tobool49.i, label %if.else51.i, label %if.then50.i

if.then50.i:                                      ; preds = %if.then44.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 19714, i32* %116) #10, !srcloc !8
  %add.ptr11.i254.i = getelementptr i8, i8* %115, i64 116
  %117 = bitcast i8* %add.ptr11.i254.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147470896, i32* %117) #10, !srcloc !8
  br label %for.body.i.i.i261.i

for.cond.i.i.i257.i:                              ; preds = %for.body.i.i.i261.i
  %inc.i.i.i255.i = add nuw nsw i32 %i.017.i.i.i258.i, 1
  %cmp.i.i.i256.i = icmp ult i32 %i.017.i.i.i258.i, 99
  br i1 %cmp.i.i.i256.i, label %for.body.i.i.i261.i, label %do.body.i.i.i265.i

for.body.i.i.i261.i:                              ; preds = %for.cond.i.i.i257.i, %if.then50.i
  %i.017.i.i.i258.i = phi i32 [ 0, %if.then50.i ], [ %inc.i.i.i255.i, %for.cond.i.i.i257.i ]
  call void @__udelay(i64 100) #9
  %118 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i259.i = getelementptr i8, i8* %118, i64 116
  %119 = bitcast i8* %add.ptr.i.i259.i to i32*
  %120 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %119) #10, !srcloc !2
  %tobool.i.i260.i = icmp slt i32 %120, 0
  br i1 %tobool.i.i260.i, label %for.cond.i.i.i257.i, label %rtl_eri_write.exit268.i

do.body.i.i.i265.i:                               ; preds = %for.cond.i.i.i257.i
  %msg_enable.i.i.i262.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %121 = load i32, i32* %msg_enable.i.i.i262.i, align 8
  %and.i.i.i263.i = and i32 %121, 1
  %tobool4.i.i.i264.i = icmp eq i32 %and.i.i.i263.i, 0
  br i1 %tobool4.i.i.i264.i, label %rtl_eri_write.exit268.i, label %if.then5.i.i.i267.i

if.then5.i.i.i267.i:                              ; preds = %do.body.i.i.i265.i
  %122 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %122, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit268.i

rtl_eri_write.exit268.i:                          ; preds = %for.body.i.i.i261.i, %if.then5.i.i.i267.i, %do.body.i.i.i265.i
  %123 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i270.i = getelementptr i8, i8* %123, i64 112
  %124 = bitcast i8* %add.ptr.i270.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 96, i32* %124) #10, !srcloc !8
  %add.ptr11.i271.i = getelementptr i8, i8* %123, i64 116
  %125 = bitcast i8* %add.ptr11.i271.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147470884, i32* %125) #10, !srcloc !8
  br label %for.body.i.i.i278.i

for.cond.i.i.i274.i:                              ; preds = %for.body.i.i.i278.i
  %inc.i.i.i272.i = add nuw nsw i32 %i.017.i.i.i275.i, 1
  %cmp.i.i.i273.i = icmp ult i32 %i.017.i.i.i275.i, 99
  br i1 %cmp.i.i.i273.i, label %for.body.i.i.i278.i, label %do.body.i.i.i282.i

for.body.i.i.i278.i:                              ; preds = %for.cond.i.i.i274.i, %rtl_eri_write.exit268.i
  %i.017.i.i.i275.i = phi i32 [ 0, %rtl_eri_write.exit268.i ], [ %inc.i.i.i272.i, %for.cond.i.i.i274.i ]
  call void @__udelay(i64 100) #9
  %126 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i276.i = getelementptr i8, i8* %126, i64 116
  %127 = bitcast i8* %add.ptr.i.i276.i to i32*
  %128 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %127) #10, !srcloc !2
  %tobool.i.i277.i = icmp slt i32 %128, 0
  br i1 %tobool.i.i277.i, label %for.cond.i.i.i274.i, label %rtl_link_chg_patch.exit

do.body.i.i.i282.i:                               ; preds = %for.cond.i.i.i274.i
  %msg_enable.i.i.i279.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %129 = load i32, i32* %msg_enable.i.i.i279.i, align 8
  %and.i.i.i280.i = and i32 %129, 1
  %tobool4.i.i.i281.i = icmp eq i32 %and.i.i.i280.i, 0
  br i1 %tobool4.i.i.i281.i, label %rtl_link_chg_patch.exit, label %if.then5.i.i.i284.i

if.then5.i.i.i284.i:                              ; preds = %do.body.i.i.i282.i
  %130 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %130, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_link_chg_patch.exit

if.else51.i:                                      ; preds = %if.then44.i
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %116) #10, !srcloc !8
  %add.ptr11.i.i = getelementptr i8, i8* %115, i64 116
  %131 = bitcast i8* %add.ptr11.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147470896, i32* %131) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %if.else51.i
  %i.017.i.i.i.i = phi i32 [ 0, %if.else51.i ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %132 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %132, i64 116
  %133 = bitcast i8* %add.ptr.i.i.i to i32*
  %134 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %133) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %134, 0
  br i1 %tobool.i.i.i, label %for.cond.i.i.i.i, label %rtl_link_chg_patch.exit

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %135 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %135, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_link_chg_patch.exit, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %136 = load %struct.net_device*, %struct.net_device** %dev1.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %136, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_link_chg_patch.exit

rtl_link_chg_patch.exit:                          ; preds = %for.body.i.i.i278.i, %for.body.i.i.i.i, %for.body.i.i.i210.i, %for.body.i.i.i244.i, %for.body.i.i.i312.i, %if.then, %if.end.i, %do.body.i.i.i316.i, %if.then5.i.i.i318.i, %do.body.i.i.i214.i, %if.then5.i.i.i216.i, %do.body.i.i.i248.i, %if.then5.i.i.i250.i, %do.body.i.i.i282.i, %if.then5.i.i.i284.i, %do.body.i.i.i.i, %if.then5.i.i.i.i
  br i1 %pm, label %if.then2, label %if.end

if.then2:                                         ; preds = %rtl_link_chg_patch.exit
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %137 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %dev3 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %137, i64 0, i32 35
  %call.i = call i32 @__pm_runtime_resume(%struct.device* %dev3, i32 1) #9
  br label %if.end

if.end:                                           ; preds = %if.then2, %rtl_link_chg_patch.exit
  call void @netif_carrier_on(%struct.net_device* %dev) #9
  %call5 = call i32 @net_ratelimit() #9
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %if.end25, label %do.body

do.body:                                          ; preds = %if.end
  %msg_enable = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %138 = load i32, i32* %msg_enable, align 8
  %and = and i32 %138, 32
  %tobool8 = icmp eq i32 %and, 0
  br i1 %tobool8, label %if.end25, label %if.then9

if.then9:                                         ; preds = %do.body
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* %dev, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31, i64 0, i64 0)) #9
  br label %if.end25

if.else:                                          ; preds = %entry
  call void @netif_carrier_off(%struct.net_device* %dev) #9
  %msg_enable13 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %139 = load i32, i32* %msg_enable13, align 8
  %and14 = and i32 %139, 16
  %tobool15 = icmp eq i32 %and14, 0
  br i1 %tobool15, label %do.end18, label %if.then16

if.then16:                                        ; preds = %if.else
  call void (%struct.net_device*, i8*, ...) @netdev_info(%struct.net_device* %dev, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.32, i64 0, i64 0)) #9
  br label %do.end18

do.end18:                                         ; preds = %if.else, %if.then16
  br i1 %pm, label %if.then20, label %if.end25

if.then20:                                        ; preds = %do.end18
  %pci_dev21 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %140 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev21, align 8
  %dev22 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %140, i64 0, i32 35
  %call23 = call i32 @pm_schedule_suspend(%struct.device* %dev22, i32 5000) #9
  br label %if.end25

if.end25:                                         ; preds = %do.body, %if.end, %do.end18, %if.then20, %if.then9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl8169_hw_reset(%struct.rtl8169_private* nocapture readonly %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %0, i64 60
  %1 = bitcast i8* %add.ptr.i.i to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 0, i16* %1) #10, !srcloc !3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  %event_slow.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 20
  %2 = load i16, i16* %event_slow.i, align 2
  %3 = or i16 %2, 15
  %4 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i7.i = getelementptr i8, i8* %4, i64 62
  %5 = bitcast i8* %add.ptr.i7.i to i16*
  call void asm sideeffect "movw $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16 %3, i16* %5) #10, !srcloc !3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !7
  %add.ptr.i = getelementptr i8, i8* %0, i64 55
  %6 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i) #10, !srcloc !6
  %7 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i139 = getelementptr i8, i8* %7, i64 68
  %8 = bitcast i8* %add.ptr.i139 to i32*
  %9 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %8) #10, !srcloc !2
  %and.i = and i32 %9, -64
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i, i32* %8) #10, !srcloc !8
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %10 = load i16, i16* %mac_version, align 2
  switch i16 %10, label %if.else101 [
    i16 26, label %for.body.i.i.preheader
    i16 27, label %for.body.i.i.preheader
    i16 30, label %for.body.i.i.preheader
    i16 33, label %if.then95
    i16 34, label %if.then95
    i16 35, label %if.then95
    i16 36, label %if.then95
    i16 37, label %if.then95
    i16 39, label %if.then95
    i16 40, label %if.then95
    i16 41, label %if.then95
    i16 42, label %if.then95
    i16 43, label %if.then95
    i16 44, label %if.then95
    i16 45, label %if.then95
    i16 46, label %if.then95
    i16 47, label %if.then95
    i16 48, label %if.then95
    i16 49, label %if.then95
    i16 50, label %if.then95
  ]

for.body.i.i.preheader:                           ; preds = %entry, %entry, %entry
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 1763
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %for.cond.i.i
  %i.017.i.i = phi i32 [ %inc.i.i, %for.cond.i.i ], [ 0, %for.body.i.i.preheader ]
  call void @__udelay(i64 20) #9
  %11 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i141 = getelementptr i8, i8* %11, i64 56
  %12 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i141) #10, !srcloc !6
  %13 = and i8 %12, 64
  %tobool.i = icmp eq i8 %13, 0
  br i1 %tobool.i, label %if.end108, label %for.cond.i.i

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %14 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %14, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %if.end108, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %15 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %15, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.29, i64 0, i64 0), i32 1, i32 1764, i32 20) #9
  br label %if.end108

if.then95:                                        ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %16 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i) #10, !srcloc !6
  %17 = or i8 %16, -128
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %17, i8* %add.ptr.i) #10, !srcloc !5
  br label %for.body.i.i146

for.cond.i.i143:                                  ; preds = %for.body.i.i146
  %inc.i.i145 = add nuw nsw i32 %i.017.i.i144, 1
  %cmp.i.i142 = icmp ult i32 %i.017.i.i144, 665
  br i1 %cmp.i.i142, label %for.body.i.i146, label %do.body.i.i150

for.body.i.i146:                                  ; preds = %for.cond.i.i143, %if.then95
  %i.017.i.i144 = phi i32 [ 0, %if.then95 ], [ %inc.i.i145, %for.cond.i.i143 ]
  call void @__udelay(i64 100) #9
  %18 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i155 = getelementptr i8, i8* %18, i64 64
  %19 = bitcast i8* %add.ptr.i155 to i32*
  %20 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %19) #10, !srcloc !2
  %and.i156 = and i32 %20, 2048
  %tobool.i157 = icmp eq i32 %and.i156, 0
  br i1 %tobool.i157, label %for.cond.i.i143, label %if.end108

do.body.i.i150:                                   ; preds = %for.cond.i.i143
  %msg_enable.i.i147 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %21 = load i32, i32* %msg_enable.i.i147, align 8
  %and.i.i148 = and i32 %21, 1
  %tobool4.i.i149 = icmp eq i32 %and.i.i148, 0
  br i1 %tobool4.i.i149, label %if.end108, label %if.then5.i.i152

if.then5.i.i152:                                  ; preds = %do.body.i.i150
  %dev.i.i151 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %22 = load %struct.net_device*, %struct.net_device** %dev.i.i151, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %22, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.30, i64 0, i64 0), i32 0, i32 666, i32 100) #9
  br label %if.end108

if.else101:                                       ; preds = %entry
  %23 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i) #10, !srcloc !6
  %24 = or i8 %23, -128
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %24, i8* %add.ptr.i) #10, !srcloc !5
  call void @__const_udelay(i64 429500) #9
  br label %if.end108

if.end108:                                        ; preds = %for.body.i.i146, %for.body.i.i, %if.then5.i.i152, %do.body.i.i150, %if.then5.i.i, %do.body.i.i, %if.else101
  %25 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i159 = getelementptr i8, i8* %25, i64 55
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 16, i8* %add.ptr.i159) #10, !srcloc !5
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %if.end108
  %i.017.i.i.i = phi i32 [ 0, %if.end108 ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %26 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i160 = getelementptr i8, i8* %26, i64 55
  %27 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i.i160) #10, !srcloc !6
  %28 = and i8 %27, 16
  %tobool.i.i = icmp eq i8 %28, 0
  br i1 %tobool.i.i, label %rtl_hw_reset.exit, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %29 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %29, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %rtl_hw_reset.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %30 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %30, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.52, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_hw_reset.exit

rtl_hw_reset.exit:                                ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  ret void
}

; Function Attrs: noredzone
declare i32 @pci_bus_read_config_word(%struct.pci_bus*, i32, i32, i16*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @pci_bus_write_config_word(%struct.pci_bus*, i32, i32, i16 zeroext) local_unnamed_addr #1

; Function Attrs: noredzone
declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @netif_carrier_on(%struct.net_device*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @pm_schedule_suspend(%struct.device*, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @napi_disable(%struct.napi_struct*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @synchronize_sched() local_unnamed_addr #1

; Function Attrs: noredzone
declare void @__dev_kfree_skb_any(%struct.sk_buff*, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @netif_tx_wake_queue(%struct.netdev_queue*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @__dynamic_netdev_dbg(%struct._ddebug*, %struct.net_device*, i8*, ...) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @mod_timer(%struct.timer_list*, i64) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @request_firmware(%struct.firmware**, i8*, %struct.device*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @release_firmware(%struct.firmware*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i8* @__kmalloc(i64, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare i8* @__memcpy(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: noredzone
declare i64 @strlcpy(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @request_threaded_irq(i32, i32 (i32, i8*)*, i32 (i32, i8*)*, i64, i8*, i8*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @__napi_schedule(%struct.napi_struct*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @mutex_lock(%struct.mutex*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_hw_phy_config(%struct.net_device* %dev) unnamed_addr #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %mac_version = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %1 = bitcast i8* %mac_version to i16*
  %2 = load i16, i16* %1, align 2
  switch i16 %2, label %sw.epilog [
    i16 50, label %sw.bb31
    i16 1, label %sw.bb
    i16 2, label %sw.bb
    i16 3, label %sw.bb1
    i16 4, label %sw.bb2
    i16 5, label %sw.bb3
    i16 6, label %sw.bb4
    i16 7, label %sw.bb4
    i16 8, label %sw.bb4
    i16 10, label %sw.bb5
    i16 11, label %sw.bb6
    i16 16, label %sw.bb7
    i16 17, label %sw.bb8
    i16 18, label %sw.bb9
    i16 19, label %sw.bb10
    i16 20, label %sw.bb11
    i16 21, label %sw.bb12
    i16 22, label %sw.bb13
    i16 23, label %sw.bb13
    i16 24, label %sw.bb14
    i16 25, label %sw.bb15
    i16 26, label %sw.bb16
    i16 27, label %sw.bb17
    i16 28, label %sw.bb18
    i16 29, label %sw.bb18
    i16 49, label %sw.bb31
    i16 31, label %sw.bb19
    i16 32, label %sw.bb19
    i16 33, label %sw.bb20
    i16 34, label %sw.bb21
    i16 35, label %sw.bb22
    i16 36, label %sw.bb23
    i16 37, label %sw.bb24
    i16 38, label %sw.bb25
    i16 39, label %sw.bb26
    i16 41, label %sw.bb27
    i16 42, label %sw.bb27
    i16 43, label %sw.bb27
    i16 44, label %sw.bb28
    i16 46, label %sw.bb28
    i16 45, label %sw.bb29
    i16 47, label %sw.bb29
    i16 48, label %sw.bb30
  ]

sw.bb:                                            ; preds = %entry, %entry
  %write.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %3 = bitcast i8* %write.i.i.i to void (%struct.rtl8169_private*, i32, i32)**
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %sw.bb
  %len.addr.06.i.i = phi i32 [ 51, %sw.bb ], [ %dec.i.i, %while.body.i.i ]
  %regs.addr.05.i.i = phi %struct.phy_reg* [ getelementptr inbounds ([51 x %struct.phy_reg], [51 x %struct.phy_reg]* @rtl8169s_hw_phy_config.phy_reg_init, i64 0, i64 0), %sw.bb ], [ %incdec.ptr.i.i, %while.body.i.i ]
  %dec.i.i = add nsw i32 %len.addr.06.i.i, -1
  %reg.i.i = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i, i64 0, i32 0
  %4 = load i16, i16* %reg.i.i, align 2
  %conv.i.i = zext i16 %4 to i32
  %val.i.i = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i, i64 0, i32 1
  %5 = load i16, i16* %val.i.i, align 2
  %conv1.i.i = zext i16 %5 to i32
  %6 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %3, align 8
  call void %6(%struct.rtl8169_private* %0, i32 %conv.i.i, i32 %conv1.i.i) #9
  %incdec.ptr.i.i = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i, i64 1
  %cmp.i.i = icmp ugt i32 %len.addr.06.i.i, 1
  br i1 %cmp.i.i, label %while.body.i.i, label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %write.i.i.i67 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %7 = bitcast i8* %write.i.i.i67 to void (%struct.rtl8169_private*, i32, i32)**
  %8 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %7, align 8
  call void %8(%struct.rtl8169_private* %0, i32 31, i32 2) #9
  %9 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %7, align 8
  call void %9(%struct.rtl8169_private* %0, i32 1, i32 37072) #9
  %10 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %7, align 8
  call void %10(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  %write.i.i.i68 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %11 = bitcast i8* %write.i.i.i68 to void (%struct.rtl8169_private*, i32, i32)**
  br label %while.body.i.i78

while.body.i.i78:                                 ; preds = %while.body.i.i78, %sw.bb2
  %len.addr.06.i.i69 = phi i32 [ 35, %sw.bb2 ], [ %dec.i.i71, %while.body.i.i78 ]
  %regs.addr.05.i.i70 = phi %struct.phy_reg* [ getelementptr inbounds ([35 x %struct.phy_reg], [35 x %struct.phy_reg]* @rtl8169scd_hw_phy_config.phy_reg_init, i64 0, i64 0), %sw.bb2 ], [ %incdec.ptr.i.i76, %while.body.i.i78 ]
  %dec.i.i71 = add nsw i32 %len.addr.06.i.i69, -1
  %reg.i.i72 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i70, i64 0, i32 0
  %12 = load i16, i16* %reg.i.i72, align 2
  %conv.i.i73 = zext i16 %12 to i32
  %val.i.i74 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i70, i64 0, i32 1
  %13 = load i16, i16* %val.i.i74, align 2
  %conv1.i.i75 = zext i16 %13 to i32
  %14 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %11, align 8
  call void %14(%struct.rtl8169_private* %0, i32 %conv.i.i73, i32 %conv1.i.i75) #9
  %incdec.ptr.i.i76 = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i70, i64 1
  %cmp.i.i77 = icmp ugt i32 %len.addr.06.i.i69, 1
  br i1 %cmp.i.i77, label %while.body.i.i78, label %rtl_writephy_batch.exit.i

rtl_writephy_batch.exit.i:                        ; preds = %while.body.i.i78
  %pci_dev.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %15 = bitcast i8* %pci_dev.i.i to %struct.pci_dev**
  %16 = load %struct.pci_dev*, %struct.pci_dev** %15, align 8
  %subsystem_vendor.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %16, i64 0, i32 9
  %17 = load i16, i16* %subsystem_vendor.i.i, align 8
  %cmp.i2.i = icmp eq i16 %17, 5208
  br i1 %cmp.i2.i, label %lor.lhs.false.i.i, label %sw.epilog

lor.lhs.false.i.i:                                ; preds = %rtl_writephy_batch.exit.i
  %subsystem_device.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %16, i64 0, i32 10
  %18 = load i16, i16* %subsystem_device.i.i, align 2
  %cmp3.i.i = icmp eq i16 %18, -8192
  br i1 %cmp3.i.i, label %if.end.i.i, label %sw.epilog

if.end.i.i:                                       ; preds = %lor.lhs.false.i.i
  %19 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %11, align 8
  call void %19(%struct.rtl8169_private* nonnull %0, i32 31, i32 1) #9
  %20 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %11, align 8
  call void %20(%struct.rtl8169_private* nonnull %0, i32 16, i32 61467) #9
  %21 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %11, align 8
  call void %21(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %write.i.i.i79 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %22 = bitcast i8* %write.i.i.i79 to void (%struct.rtl8169_private*, i32, i32)**
  br label %while.body.i.i89

while.body.i.i89:                                 ; preds = %while.body.i.i89, %sw.bb3
  %len.addr.06.i.i80 = phi i32 [ 42, %sw.bb3 ], [ %dec.i.i82, %while.body.i.i89 ]
  %regs.addr.05.i.i81 = phi %struct.phy_reg* [ getelementptr inbounds ([42 x %struct.phy_reg], [42 x %struct.phy_reg]* @rtl8169sce_hw_phy_config.phy_reg_init, i64 0, i64 0), %sw.bb3 ], [ %incdec.ptr.i.i87, %while.body.i.i89 ]
  %dec.i.i82 = add nsw i32 %len.addr.06.i.i80, -1
  %reg.i.i83 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i81, i64 0, i32 0
  %23 = load i16, i16* %reg.i.i83, align 2
  %conv.i.i84 = zext i16 %23 to i32
  %val.i.i85 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i81, i64 0, i32 1
  %24 = load i16, i16* %val.i.i85, align 2
  %conv1.i.i86 = zext i16 %24 to i32
  %25 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %22, align 8
  call void %25(%struct.rtl8169_private* %0, i32 %conv.i.i84, i32 %conv1.i.i86) #9
  %incdec.ptr.i.i87 = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i81, i64 1
  %cmp.i.i88 = icmp ugt i32 %len.addr.06.i.i80, 1
  br i1 %cmp.i.i88, label %while.body.i.i89, label %sw.epilog

sw.bb4:                                           ; preds = %entry, %entry, %entry
  %write.i.i91 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %26 = bitcast i8* %write.i.i91 to void (%struct.rtl8169_private*, i32, i32)**
  %27 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %26, align 8
  call void %27(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %read.i.i.i92 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %28 = bitcast i8* %read.i.i.i92 to i32 (%struct.rtl8169_private*, i32)**
  %29 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %28, align 8
  %call.i.i.i93 = call i32 %29(%struct.rtl8169_private* %0, i32 17) #9
  %or.i.i94 = or i32 %call.i.i.i93, 4096
  %30 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %26, align 8
  call void %30(%struct.rtl8169_private* %0, i32 17, i32 %or.i.i94) #9
  %31 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %28, align 8
  %call.i.i6.i = call i32 %31(%struct.rtl8169_private* %0, i32 25) #9
  %or.i7.i = or i32 %call.i.i6.i, 8192
  %32 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %26, align 8
  call void %32(%struct.rtl8169_private* %0, i32 25, i32 %or.i7.i) #9
  %33 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %28, align 8
  %call.i.i10.i = call i32 %33(%struct.rtl8169_private* %0, i32 16) #9
  %or.i11.i = or i32 %call.i.i10.i, 32768
  %34 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %26, align 8
  call void %34(%struct.rtl8169_private* %0, i32 16, i32 %or.i11.i) #9
  %35 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %26, align 8
  call void %35(%struct.rtl8169_private* nonnull %0, i32 31, i32 3) #9
  %36 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %26, align 8
  call void %36(%struct.rtl8169_private* nonnull %0, i32 8, i32 17437) #9
  %37 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %26, align 8
  call void %37(%struct.rtl8169_private* nonnull %0, i32 1, i32 37120) #9
  %38 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %26, align 8
  call void %38(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb5:                                           ; preds = %entry
  %write.i.i95 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %39 = bitcast i8* %write.i.i95 to void (%struct.rtl8169_private*, i32, i32)**
  %40 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %39, align 8
  call void %40(%struct.rtl8169_private* %0, i32 31, i32 1) #9
  %read.i.i.i96 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %41 = bitcast i8* %read.i.i.i96 to i32 (%struct.rtl8169_private*, i32)**
  %42 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %41, align 8
  %call.i.i.i97 = call i32 %42(%struct.rtl8169_private* %0, i32 22) #9
  %or.i.i98 = or i32 %call.i.i.i97, 1
  %43 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %39, align 8
  call void %43(%struct.rtl8169_private* %0, i32 22, i32 %or.i.i98) #9
  %44 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %39, align 8
  call void %44(%struct.rtl8169_private* nonnull %0, i32 16, i32 62491) #9
  %45 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %39, align 8
  call void %45(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb6:                                           ; preds = %entry
  %write.i.i.i99 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %46 = bitcast i8* %write.i.i.i99 to void (%struct.rtl8169_private*, i32, i32)**
  %47 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %46, align 8
  call void %47(%struct.rtl8169_private* %0, i32 31, i32 1) #9
  %48 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %46, align 8
  call void %48(%struct.rtl8169_private* %0, i32 16, i32 62491) #9
  %49 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %46, align 8
  call void %49(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb7:                                           ; preds = %entry
  %write.i.i.i100 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %50 = bitcast i8* %write.i.i.i100 to void (%struct.rtl8169_private*, i32, i32)**
  %51 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %50, align 8
  call void %51(%struct.rtl8169_private* %0, i32 31, i32 1) #9
  %52 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %50, align 8
  call void %52(%struct.rtl8169_private* %0, i32 16, i32 62491) #9
  %53 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %50, align 8
  call void %53(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  %write.i.i.i101 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %54 = bitcast i8* %write.i.i.i101 to void (%struct.rtl8169_private*, i32, i32)**
  %55 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %54, align 8
  call void %55(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %56 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %54, align 8
  call void %56(%struct.rtl8169_private* %0, i32 29, i32 3840) #9
  %57 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %54, align 8
  call void %57(%struct.rtl8169_private* %0, i32 31, i32 2) #9
  %58 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %54, align 8
  call void %58(%struct.rtl8169_private* %0, i32 12, i32 7880) #9
  %59 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %54, align 8
  call void %59(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb9:                                           ; preds = %entry
  %write.i.i.i102 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %60 = bitcast i8* %write.i.i.i102 to void (%struct.rtl8169_private*, i32, i32)**
  %61 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %61(%struct.rtl8169_private* %0, i32 31, i32 1) #9
  %62 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %62(%struct.rtl8169_private* %0, i32 18, i32 8960) #9
  %63 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %63(%struct.rtl8169_private* %0, i32 31, i32 2) #9
  %64 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %64(%struct.rtl8169_private* %0, i32 0, i32 35028) #9
  %65 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %65(%struct.rtl8169_private* %0, i32 1, i32 33457) #9
  %66 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %66(%struct.rtl8169_private* %0, i32 3, i32 28674) #9
  %67 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %67(%struct.rtl8169_private* %0, i32 8, i32 40496) #9
  %68 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %68(%struct.rtl8169_private* %0, i32 9, i32 496) #9
  %69 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %69(%struct.rtl8169_private* %0, i32 10, i32 21760) #9
  %70 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %70(%struct.rtl8169_private* %0, i32 12, i32 200) #9
  %71 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %71(%struct.rtl8169_private* %0, i32 31, i32 3) #9
  %72 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %72(%struct.rtl8169_private* %0, i32 18, i32 49302) #9
  %73 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %73(%struct.rtl8169_private* %0, i32 22, i32 10) #9
  %74 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %74(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %75 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %75(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %76 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %76(%struct.rtl8169_private* %0, i32 9, i32 8192) #9
  %77 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %77(%struct.rtl8169_private* %0, i32 9, i32 0) #9
  %read.i.i.i103 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %78 = bitcast i8* %read.i.i.i103 to i32 (%struct.rtl8169_private*, i32)**
  %79 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %78, align 8
  %call.i.i.i104 = call i32 %79(%struct.rtl8169_private* nonnull %0, i32 20) #9
  %or.i.i105 = or i32 %call.i.i.i104, 32
  %80 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %80(%struct.rtl8169_private* nonnull %0, i32 20, i32 %or.i.i105) #9
  %81 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %78, align 8
  %call.i.i6.i106 = call i32 %81(%struct.rtl8169_private* nonnull %0, i32 13) #9
  %or.i7.i107 = or i32 %call.i.i6.i106, 32
  %82 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %82(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.i7.i107) #9
  %83 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %60, align 8
  call void %83(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb10:                                          ; preds = %entry
  %write.i.i.i108 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %84 = bitcast i8* %write.i.i.i108 to void (%struct.rtl8169_private*, i32, i32)**
  %85 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %85(%struct.rtl8169_private* %0, i32 31, i32 1) #9
  %86 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %86(%struct.rtl8169_private* %0, i32 18, i32 8960) #9
  %87 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %87(%struct.rtl8169_private* %0, i32 3, i32 32815) #9
  %88 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %88(%struct.rtl8169_private* %0, i32 2, i32 20226) #9
  %89 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %89(%struct.rtl8169_private* %0, i32 1, i32 1033) #9
  %90 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %90(%struct.rtl8169_private* %0, i32 0, i32 61593) #9
  %91 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %91(%struct.rtl8169_private* %0, i32 4, i32 38912) #9
  %92 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %92(%struct.rtl8169_private* %0, i32 4, i32 36864) #9
  %93 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %93(%struct.rtl8169_private* %0, i32 29, i32 15768) #9
  %94 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %94(%struct.rtl8169_private* %0, i32 31, i32 2) #9
  %95 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %95(%struct.rtl8169_private* %0, i32 12, i32 32440) #9
  %96 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %96(%struct.rtl8169_private* %0, i32 6, i32 1889) #9
  %97 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %97(%struct.rtl8169_private* %0, i32 31, i32 3) #9
  %98 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %98(%struct.rtl8169_private* %0, i32 22, i32 3850) #9
  %99 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %99(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %read.i.i.i109 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %100 = bitcast i8* %read.i.i.i109 to i32 (%struct.rtl8169_private*, i32)**
  %101 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %100, align 8
  %call.i.i.i110 = call i32 %101(%struct.rtl8169_private* nonnull %0, i32 22) #9
  %or.i.i111 = or i32 %call.i.i.i110, 1
  %102 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %102(%struct.rtl8169_private* nonnull %0, i32 22, i32 %or.i.i111) #9
  %103 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %100, align 8
  %call.i.i7.i = call i32 %103(%struct.rtl8169_private* nonnull %0, i32 20) #9
  %or.i8.i = or i32 %call.i.i7.i, 32
  %104 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %104(%struct.rtl8169_private* nonnull %0, i32 20, i32 %or.i8.i) #9
  %105 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %100, align 8
  %call.i.i11.i = call i32 %105(%struct.rtl8169_private* nonnull %0, i32 13) #9
  %or.i12.i = or i32 %call.i.i11.i, 32
  %106 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %106(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.i12.i) #9
  %107 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %84, align 8
  call void %107(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb11:                                          ; preds = %entry
  call fastcc void @rtl8168c_3_hw_phy_config(%struct.rtl8169_private* %0) #11
  br label %sw.epilog

sw.bb12:                                          ; preds = %entry
  call fastcc void @rtl8168c_3_hw_phy_config(%struct.rtl8169_private* %0) #9
  br label %sw.epilog

sw.bb13:                                          ; preds = %entry, %entry
  %write.i.i112 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %108 = bitcast i8* %write.i.i112 to void (%struct.rtl8169_private*, i32, i32)**
  %109 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %108, align 8
  call void %109(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %read.i.i.i113 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %110 = bitcast i8* %read.i.i.i113 to i32 (%struct.rtl8169_private*, i32)**
  %111 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %110, align 8
  %call.i.i.i114 = call i32 %111(%struct.rtl8169_private* %0, i32 20) #9
  %or.i.i115 = or i32 %call.i.i.i114, 32
  %112 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %108, align 8
  call void %112(%struct.rtl8169_private* %0, i32 20, i32 %or.i.i115) #9
  %113 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %110, align 8
  %call.i.i5.i = call i32 %113(%struct.rtl8169_private* %0, i32 13) #9
  %or.i6.i = or i32 %call.i.i5.i, 32
  %114 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %108, align 8
  call void %114(%struct.rtl8169_private* %0, i32 13, i32 %or.i6.i) #9
  %115 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %108, align 8
  call void %115(%struct.rtl8169_private* nonnull %0, i32 31, i32 1) #9
  %116 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %108, align 8
  call void %116(%struct.rtl8169_private* nonnull %0, i32 29, i32 15768) #9
  %117 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %108, align 8
  call void %117(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb14:                                          ; preds = %entry
  %write.i.i.i116 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %118 = bitcast i8* %write.i.i.i116 to void (%struct.rtl8169_private*, i32, i32)**
  br label %while.body.i.i126

while.body.i.i126:                                ; preds = %while.body.i.i126, %sw.bb14
  %len.addr.06.i.i117 = phi i32 [ 26, %sw.bb14 ], [ %dec.i.i119, %while.body.i.i126 ]
  %regs.addr.05.i.i118 = phi %struct.phy_reg* [ getelementptr inbounds ([26 x %struct.phy_reg], [26 x %struct.phy_reg]* @rtl8168d_1_hw_phy_config.phy_reg_init_0, i64 0, i64 0), %sw.bb14 ], [ %incdec.ptr.i.i124, %while.body.i.i126 ]
  %dec.i.i119 = add nsw i32 %len.addr.06.i.i117, -1
  %reg.i.i120 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i118, i64 0, i32 0
  %119 = load i16, i16* %reg.i.i120, align 2
  %conv.i.i121 = zext i16 %119 to i32
  %val.i.i122 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i118, i64 0, i32 1
  %120 = load i16, i16* %val.i.i122, align 2
  %conv1.i.i123 = zext i16 %120 to i32
  %121 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %121(%struct.rtl8169_private* %0, i32 %conv.i.i121, i32 %conv1.i.i123) #9
  %incdec.ptr.i.i124 = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i118, i64 1
  %cmp.i.i125 = icmp ugt i32 %len.addr.06.i.i117, 1
  br i1 %cmp.i.i125, label %while.body.i.i126, label %rtl_writephy_batch.exit.i131

rtl_writephy_batch.exit.i131:                     ; preds = %while.body.i.i126
  %122 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %122(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %read.i.i.i127 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %123 = bitcast i8* %read.i.i.i127 to i32 (%struct.rtl8169_private*, i32)**
  %124 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %123, align 8
  %call.i.i.i128 = call i32 %124(%struct.rtl8169_private* nonnull %0, i32 11) #9
  %and.i.i129 = and i32 %call.i.i.i128, -256
  %or.i.i130 = or i32 %and.i.i129, 16
  %125 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %125(%struct.rtl8169_private* nonnull %0, i32 11, i32 %or.i.i130) #9
  %126 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %123, align 8
  %call.i.i38.i = call i32 %126(%struct.rtl8169_private* nonnull %0, i32 12) #9
  %and.i39.i = and i32 %call.i.i38.i, -65281
  %or.i40.i = or i32 %and.i39.i, 41472
  %127 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %127(%struct.rtl8169_private* nonnull %0, i32 12, i32 %or.i40.i) #9
  %mmio_addr.i.i = bitcast i8* %add.ptr.i to i8**
  %128 = load i8*, i8** %mmio_addr.i.i, align 8
  %add.ptr.i.i = getelementptr i8, i8* %128, i64 220
  %129 = bitcast i8* %add.ptr.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 256, i32* %129) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 299
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %rtl_writephy_batch.exit.i131
  %i.017.i.i.i.i = phi i32 [ 0, %rtl_writephy_batch.exit.i131 ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %130 = load i8*, i8** %mmio_addr.i.i, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %130, i64 220
  %131 = bitcast i8* %add.ptr.i.i.i to i32*
  %132 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %131) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %132, 0
  br i1 %tobool.i.i.i, label %rtl8168d_efuse_read.exit.i, label %for.cond.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %133 = bitcast i8* %msg_enable.i.i.i.i to i32*
  %134 = load i32, i32* %133, align 8
  %and.i.i.i.i = and i32 %134, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %if.else.i, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %dev.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %135 = bitcast i8* %dev.i.i.i.i to %struct.net_device**
  %136 = load %struct.net_device*, %struct.net_device** %135, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %136, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.41, i64 0, i64 0), i32 0, i32 300, i32 100) #9
  br label %if.else.i

rtl8168d_efuse_read.exit.i:                       ; preds = %for.body.i.i.i.i
  %137 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %129) #10, !srcloc !2
  %phitmp.i.i = trunc i32 %137 to i8
  %cmp.i = icmp eq i8 %phitmp.i.i, -79
  br i1 %cmp.i, label %if.then.i134, label %if.else.i

if.then.i134:                                     ; preds = %rtl8168d_efuse_read.exit.i
  %138 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %138(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %139 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %139(%struct.rtl8169_private* nonnull %0, i32 5, i32 26266) #9
  %140 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %140(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %141 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %141(%struct.rtl8169_private* nonnull %0, i32 5, i32 33584) #9
  %142 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %142(%struct.rtl8169_private* nonnull %0, i32 6, i32 26266) #9
  %143 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %143(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %144 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %123, align 8
  %call.i.i132 = call i32 %144(%struct.rtl8169_private* nonnull %0, i32 13) #9
  %and.i133 = and i32 %call.i.i132, 255
  %cmp3.i = icmp eq i32 %and.i133, 108
  br i1 %cmp3.i, label %if.end10.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i134
  %145 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %145(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %and6.i = and i32 %call.i.i132, 65280
  %or.i = or i32 %and6.i, 101
  %146 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %146(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.i) #9
  %or.1.i = or i32 %and6.i, 102
  %147 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %147(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.1.i) #9
  %or.2.i = or i32 %and6.i, 103
  %148 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %148(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.2.i) #9
  %or.3.i = or i32 %and6.i, 104
  %149 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %149(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.3.i) #9
  %or.4.i = or i32 %and6.i, 105
  %150 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %150(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.4.i) #9
  %or.5.i = or i32 %and6.i, 106
  %151 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %151(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.5.i) #9
  %or.6.i = or i32 %and6.i, 107
  %152 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %152(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.6.i) #9
  %or.7.i = or i32 %and6.i, 108
  %153 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %153(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.7.i) #9
  br label %if.end10.i

if.else.i:                                        ; preds = %rtl8168d_efuse_read.exit.i, %if.then5.i.i.i.i, %do.body.i.i.i.i
  %154 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %154(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %155 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %155(%struct.rtl8169_private* nonnull %0, i32 5, i32 26210) #9
  %156 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %156(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %157 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %157(%struct.rtl8169_private* nonnull %0, i32 5, i32 33584) #9
  %158 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %158(%struct.rtl8169_private* nonnull %0, i32 6, i32 26210) #9
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.else.i, %if.then5.i, %if.then.i134
  %159 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %159(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %160 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %123, align 8
  %call.i.i70.i = call i32 %160(%struct.rtl8169_private* nonnull %0, i32 13) #9
  %or.i71.i = or i32 %call.i.i70.i, 768
  %161 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %161(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.i71.i) #9
  %162 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %123, align 8
  %call.i.i74.i = call i32 %162(%struct.rtl8169_private* nonnull %0, i32 15) #9
  %or.i75.i = or i32 %call.i.i74.i, 16
  %163 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %163(%struct.rtl8169_private* nonnull %0, i32 15, i32 %or.i75.i) #9
  %164 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %164(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %165 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %123, align 8
  %call.i.i79.i = call i32 %165(%struct.rtl8169_private* nonnull %0, i32 2) #9
  %and.i80.i = and i32 %call.i.i79.i, -1793
  %or.i81.i = or i32 %and.i80.i, 256
  %166 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %166(%struct.rtl8169_private* nonnull %0, i32 2, i32 %or.i81.i) #9
  %167 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %123, align 8
  %call.i.i84.i = call i32 %167(%struct.rtl8169_private* nonnull %0, i32 3) #9
  %and.i85.i = and i32 %call.i.i84.i, -57345
  %168 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %168(%struct.rtl8169_private* nonnull %0, i32 3, i32 %and.i85.i) #9
  %169 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %169(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %170 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %170(%struct.rtl8169_private* nonnull %0, i32 5, i32 27) #9
  %171 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %123, align 8
  %call.i.i90.i = call i32 %171(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %cmp.i91.i = icmp eq i32 %call.i.i90.i, 48896
  br i1 %cmp.i91.i, label %if.else.i.i, label %do.body.i.i

do.body.i.i:                                      ; preds = %if.end10.i
  %msg_enable.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %172 = bitcast i8* %msg_enable.i.i to i32*
  %173 = load i32, i32* %172, align 8
  %and.i92.i = and i32 %173, 8192
  %tobool.i.i = icmp eq i32 %and.i92.i, 0
  br i1 %tobool.i.i, label %rtl8168d_1_hw_phy_config.exit, label %if.then3.i.i

if.then3.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %174 = bitcast i8* %dev.i.i to %struct.net_device**
  %175 = load %struct.net_device*, %struct.net_device** %174, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_warn(%struct.net_device* %175, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.42, i64 0, i64 0)) #9
  br label %rtl8168d_1_hw_phy_config.exit

if.else.i.i:                                      ; preds = %if.end10.i
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* nonnull %0) #9
  br label %rtl8168d_1_hw_phy_config.exit

rtl8168d_1_hw_phy_config.exit:                    ; preds = %do.body.i.i, %if.then3.i.i, %if.else.i.i
  %176 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %118, align 8
  call void %176(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb15:                                          ; preds = %entry
  %write.i.i.i135 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %177 = bitcast i8* %write.i.i.i135 to void (%struct.rtl8169_private*, i32, i32)**
  br label %while.body.i.i145

while.body.i.i145:                                ; preds = %while.body.i.i145, %sw.bb15
  %len.addr.06.i.i136 = phi i32 [ 26, %sw.bb15 ], [ %dec.i.i138, %while.body.i.i145 ]
  %regs.addr.05.i.i137 = phi %struct.phy_reg* [ getelementptr inbounds ([26 x %struct.phy_reg], [26 x %struct.phy_reg]* @rtl8168d_2_hw_phy_config.phy_reg_init_0, i64 0, i64 0), %sw.bb15 ], [ %incdec.ptr.i.i143, %while.body.i.i145 ]
  %dec.i.i138 = add nsw i32 %len.addr.06.i.i136, -1
  %reg.i.i139 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i137, i64 0, i32 0
  %178 = load i16, i16* %reg.i.i139, align 2
  %conv.i.i140 = zext i16 %178 to i32
  %val.i.i141 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i137, i64 0, i32 1
  %179 = load i16, i16* %val.i.i141, align 2
  %conv1.i.i142 = zext i16 %179 to i32
  %180 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %180(%struct.rtl8169_private* %0, i32 %conv.i.i140, i32 %conv1.i.i142) #9
  %incdec.ptr.i.i143 = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i137, i64 1
  %cmp.i.i144 = icmp ugt i32 %len.addr.06.i.i136, 1
  br i1 %cmp.i.i144, label %while.body.i.i145, label %rtl_writephy_batch.exit.i148

rtl_writephy_batch.exit.i148:                     ; preds = %while.body.i.i145
  %mmio_addr.i.i146 = bitcast i8* %add.ptr.i to i8**
  %181 = load i8*, i8** %mmio_addr.i.i146, align 8
  %add.ptr.i.i147 = getelementptr i8, i8* %181, i64 220
  %182 = bitcast i8* %add.ptr.i.i147 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 256, i32* %182) #10, !srcloc !8
  br label %for.body.i.i.i.i155

for.cond.i.i.i.i151:                              ; preds = %for.body.i.i.i.i155
  %inc.i.i.i.i149 = add nuw nsw i32 %i.017.i.i.i.i152, 1
  %cmp.i.i.i.i150 = icmp ult i32 %i.017.i.i.i.i152, 299
  br i1 %cmp.i.i.i.i150, label %for.body.i.i.i.i155, label %do.body.i.i.i.i159

for.body.i.i.i.i155:                              ; preds = %for.cond.i.i.i.i151, %rtl_writephy_batch.exit.i148
  %i.017.i.i.i.i152 = phi i32 [ 0, %rtl_writephy_batch.exit.i148 ], [ %inc.i.i.i.i149, %for.cond.i.i.i.i151 ]
  call void @__udelay(i64 100) #9
  %183 = load i8*, i8** %mmio_addr.i.i146, align 8
  %add.ptr.i.i.i153 = getelementptr i8, i8* %183, i64 220
  %184 = bitcast i8* %add.ptr.i.i.i153 to i32*
  %185 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %184) #10, !srcloc !2
  %tobool.i.i.i154 = icmp slt i32 %185, 0
  br i1 %tobool.i.i.i154, label %rtl8168d_efuse_read.exit.i164, label %for.cond.i.i.i.i151

do.body.i.i.i.i159:                               ; preds = %for.cond.i.i.i.i151
  %msg_enable.i.i.i.i156 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %186 = bitcast i8* %msg_enable.i.i.i.i156 to i32*
  %187 = load i32, i32* %186, align 8
  %and.i.i.i.i157 = and i32 %187, 1
  %tobool4.i.i.i.i158 = icmp eq i32 %and.i.i.i.i157, 0
  br i1 %tobool4.i.i.i.i158, label %if.else.i179, label %if.then5.i.i.i.i161

if.then5.i.i.i.i161:                              ; preds = %do.body.i.i.i.i159
  %dev.i.i.i.i160 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %188 = bitcast i8* %dev.i.i.i.i160 to %struct.net_device**
  %189 = load %struct.net_device*, %struct.net_device** %188, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %189, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.41, i64 0, i64 0), i32 0, i32 300, i32 100) #9
  br label %if.else.i179

rtl8168d_efuse_read.exit.i164:                    ; preds = %for.body.i.i.i.i155
  %190 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %182) #10, !srcloc !2
  %phitmp.i.i162 = trunc i32 %190 to i8
  %cmp.i163 = icmp eq i8 %phitmp.i.i162, -79
  br i1 %cmp.i163, label %if.then.i168, label %if.else.i179

if.then.i168:                                     ; preds = %rtl8168d_efuse_read.exit.i164
  %191 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %191(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %192 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %192(%struct.rtl8169_private* nonnull %0, i32 5, i32 26266) #9
  %193 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %193(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %194 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %194(%struct.rtl8169_private* nonnull %0, i32 5, i32 33584) #9
  %195 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %195(%struct.rtl8169_private* nonnull %0, i32 6, i32 26266) #9
  %196 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %196(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %read.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %197 = bitcast i8* %read.i.i to i32 (%struct.rtl8169_private*, i32)**
  %198 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %197, align 8
  %call.i.i165 = call i32 %198(%struct.rtl8169_private* nonnull %0, i32 13) #9
  %and.i166 = and i32 %call.i.i165, 255
  %cmp3.i167 = icmp eq i32 %and.i166, 108
  br i1 %cmp3.i167, label %if.end10.i183, label %if.then5.i178

if.then5.i178:                                    ; preds = %if.then.i168
  %199 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %199(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %and6.i169 = and i32 %call.i.i165, 65280
  %or.i170 = or i32 %and6.i169, 101
  %200 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %200(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.i170) #9
  %or.1.i171 = or i32 %and6.i169, 102
  %201 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %201(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.1.i171) #9
  %or.2.i172 = or i32 %and6.i169, 103
  %202 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %202(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.2.i172) #9
  %or.3.i173 = or i32 %and6.i169, 104
  %203 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %203(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.3.i173) #9
  %or.4.i174 = or i32 %and6.i169, 105
  %204 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %204(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.4.i174) #9
  %or.5.i175 = or i32 %and6.i169, 106
  %205 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %205(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.5.i175) #9
  %or.6.i176 = or i32 %and6.i169, 107
  %206 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %206(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.6.i176) #9
  %or.7.i177 = or i32 %and6.i169, 108
  %207 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %207(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.7.i177) #9
  br label %if.end10.i183

if.else.i179:                                     ; preds = %rtl8168d_efuse_read.exit.i164, %if.then5.i.i.i.i161, %do.body.i.i.i.i159
  %208 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %208(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %209 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %209(%struct.rtl8169_private* nonnull %0, i32 5, i32 9794) #9
  %210 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %210(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %211 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %211(%struct.rtl8169_private* nonnull %0, i32 5, i32 33584) #9
  %212 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %212(%struct.rtl8169_private* nonnull %0, i32 6, i32 9794) #9
  %.pre.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %213 = bitcast i8* %.pre.i to i32 (%struct.rtl8169_private*, i32)**
  br label %if.end10.i183

if.end10.i183:                                    ; preds = %if.else.i179, %if.then5.i178, %if.then.i168
  %read.i.i.pre-phi.i = phi i32 (%struct.rtl8169_private*, i32)** [ %213, %if.else.i179 ], [ %197, %if.then5.i178 ], [ %197, %if.then.i168 ]
  %214 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %214(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %215 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i.pre-phi.i, align 8
  %call.i.i.i180 = call i32 %215(%struct.rtl8169_private* nonnull %0, i32 2) #9
  %and.i.i181 = and i32 %call.i.i.i180, -1793
  %or.i.i182 = or i32 %and.i.i181, 256
  %216 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %216(%struct.rtl8169_private* nonnull %0, i32 2, i32 %or.i.i182) #9
  %217 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i.pre-phi.i, align 8
  %call.i.i60.i = call i32 %217(%struct.rtl8169_private* nonnull %0, i32 3) #9
  %and.i61.i = and i32 %call.i.i60.i, -57345
  %218 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %218(%struct.rtl8169_private* nonnull %0, i32 3, i32 %and.i61.i) #9
  %219 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %219(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %220 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i.pre-phi.i, align 8
  %call.i.i65.i = call i32 %220(%struct.rtl8169_private* nonnull %0, i32 15) #9
  %or.i66.i = or i32 %call.i.i65.i, 23
  %221 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %221(%struct.rtl8169_private* nonnull %0, i32 15, i32 %or.i66.i) #9
  %222 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %222(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %223 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %223(%struct.rtl8169_private* nonnull %0, i32 5, i32 27) #9
  %224 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i.pre-phi.i, align 8
  %call.i.i71.i = call i32 %224(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %cmp.i72.i = icmp eq i32 %call.i.i71.i, 45824
  br i1 %cmp.i72.i, label %if.else.i.i189, label %do.body.i.i186

do.body.i.i186:                                   ; preds = %if.end10.i183
  %msg_enable.i.i184 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %225 = bitcast i8* %msg_enable.i.i184 to i32*
  %226 = load i32, i32* %225, align 8
  %and.i73.i = and i32 %226, 8192
  %tobool.i.i185 = icmp eq i32 %and.i73.i, 0
  br i1 %tobool.i.i185, label %rtl8168d_2_hw_phy_config.exit, label %if.then3.i.i188

if.then3.i.i188:                                  ; preds = %do.body.i.i186
  %dev.i.i187 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %227 = bitcast i8* %dev.i.i187 to %struct.net_device**
  %228 = load %struct.net_device*, %struct.net_device** %227, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_warn(%struct.net_device* %228, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.42, i64 0, i64 0)) #9
  br label %rtl8168d_2_hw_phy_config.exit

if.else.i.i189:                                   ; preds = %if.end10.i183
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* nonnull %0) #9
  br label %rtl8168d_2_hw_phy_config.exit

rtl8168d_2_hw_phy_config.exit:                    ; preds = %do.body.i.i186, %if.then3.i.i188, %if.else.i.i189
  %229 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %177, align 8
  call void %229(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %write.i.i.i190 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %230 = bitcast i8* %write.i.i.i190 to void (%struct.rtl8169_private*, i32, i32)**
  br label %while.body.i.i200

while.body.i.i200:                                ; preds = %while.body.i.i200, %sw.bb16
  %len.addr.06.i.i191 = phi i32 [ 48, %sw.bb16 ], [ %dec.i.i193, %while.body.i.i200 ]
  %regs.addr.05.i.i192 = phi %struct.phy_reg* [ getelementptr inbounds ([48 x %struct.phy_reg], [48 x %struct.phy_reg]* @rtl8168d_3_hw_phy_config.phy_reg_init, i64 0, i64 0), %sw.bb16 ], [ %incdec.ptr.i.i198, %while.body.i.i200 ]
  %dec.i.i193 = add nsw i32 %len.addr.06.i.i191, -1
  %reg.i.i194 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i192, i64 0, i32 0
  %231 = load i16, i16* %reg.i.i194, align 2
  %conv.i.i195 = zext i16 %231 to i32
  %val.i.i196 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i192, i64 0, i32 1
  %232 = load i16, i16* %val.i.i196, align 2
  %conv1.i.i197 = zext i16 %232 to i32
  %233 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %230, align 8
  call void %233(%struct.rtl8169_private* %0, i32 %conv.i.i195, i32 %conv1.i.i197) #9
  %incdec.ptr.i.i198 = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i192, i64 1
  %cmp.i.i199 = icmp ugt i32 %len.addr.06.i.i191, 1
  br i1 %cmp.i.i199, label %while.body.i.i200, label %sw.epilog

sw.bb17:                                          ; preds = %entry
  %write.i.i.i202 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %234 = bitcast i8* %write.i.i.i202 to void (%struct.rtl8169_private*, i32, i32)**
  %235 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %234, align 8
  call void %235(%struct.rtl8169_private* %0, i32 31, i32 1) #9
  %236 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %234, align 8
  call void %236(%struct.rtl8169_private* %0, i32 23, i32 3264) #9
  %237 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %234, align 8
  call void %237(%struct.rtl8169_private* %0, i32 31, i32 7) #9
  %238 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %234, align 8
  call void %238(%struct.rtl8169_private* %0, i32 30, i32 45) #9
  %239 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %234, align 8
  call void %239(%struct.rtl8169_private* %0, i32 24, i32 64) #9
  %240 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %234, align 8
  call void %240(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %read.i.i.i203 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %241 = bitcast i8* %read.i.i.i203 to i32 (%struct.rtl8169_private*, i32)**
  %242 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %241, align 8
  %call.i.i.i204 = call i32 %242(%struct.rtl8169_private* nonnull %0, i32 13) #9
  %or.i.i205 = or i32 %call.i.i.i204, 32
  %243 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %234, align 8
  call void %243(%struct.rtl8169_private* nonnull %0, i32 13, i32 %or.i.i205) #9
  br label %sw.epilog

sw.bb18:                                          ; preds = %entry, %entry
  %write.i.i206 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %244 = bitcast i8* %write.i.i206 to void (%struct.rtl8169_private*, i32, i32)**
  %245 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %245(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %246 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %246(%struct.rtl8169_private* %0, i32 24, i32 784) #9
  call void @msleep(i32 100) #9
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  %247 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %247(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %248 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %248(%struct.rtl8169_private* nonnull %0, i32 26, i32 0) #9
  %249 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %249(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %250 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %250(%struct.rtl8169_private* nonnull %0, i32 31, i32 4) #9
  %251 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %251(%struct.rtl8169_private* nonnull %0, i32 28, i32 0) #9
  %252 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %252(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %253 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %253(%struct.rtl8169_private* nonnull %0, i32 31, i32 1) #9
  %254 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %254(%struct.rtl8169_private* nonnull %0, i32 21, i32 30465) #9
  %255 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %244, align 8
  call void %255(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb19:                                          ; preds = %entry, %entry
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  %write.i.i.i207 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %256 = bitcast i8* %write.i.i.i207 to void (%struct.rtl8169_private*, i32, i32)**
  br label %while.body.i.i217

while.body.i.i217:                                ; preds = %while.body.i.i217, %sw.bb19
  %len.addr.06.i.i208 = phi i32 [ 19, %sw.bb19 ], [ %dec.i.i210, %while.body.i.i217 ]
  %regs.addr.05.i.i209 = phi %struct.phy_reg* [ getelementptr inbounds ([19 x %struct.phy_reg], [19 x %struct.phy_reg]* @rtl8168e_1_hw_phy_config.phy_reg_init, i64 0, i64 0), %sw.bb19 ], [ %incdec.ptr.i.i215, %while.body.i.i217 ]
  %dec.i.i210 = add nsw i32 %len.addr.06.i.i208, -1
  %reg.i.i211 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i209, i64 0, i32 0
  %257 = load i16, i16* %reg.i.i211, align 2
  %conv.i.i212 = zext i16 %257 to i32
  %val.i.i213 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i209, i64 0, i32 1
  %258 = load i16, i16* %val.i.i213, align 2
  %conv1.i.i214 = zext i16 %258 to i32
  %259 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %259(%struct.rtl8169_private* %0, i32 %conv.i.i212, i32 %conv1.i.i214) #9
  %incdec.ptr.i.i215 = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i209, i64 1
  %cmp.i.i216 = icmp ugt i32 %len.addr.06.i.i208, 1
  br i1 %cmp.i.i216, label %while.body.i.i217, label %rtl8168e_1_hw_phy_config.exit

rtl8168e_1_hw_phy_config.exit:                    ; preds = %while.body.i.i217
  %260 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %260(%struct.rtl8169_private* nonnull %0, i32 31, i32 7) #9
  %261 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %261(%struct.rtl8169_private* nonnull %0, i32 30, i32 35) #9
  %read.i.i.i218 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %262 = bitcast i8* %read.i.i.i218 to i32 (%struct.rtl8169_private*, i32)**
  %263 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %262, align 8
  %call.i.i.i219 = call i32 %263(%struct.rtl8169_private* nonnull %0, i32 23) #9
  %or.i.i220 = or i32 %call.i.i.i219, 6
  %264 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %264(%struct.rtl8169_private* nonnull %0, i32 23, i32 %or.i.i220) #9
  %265 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %265(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %266 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %266(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %267 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %262, align 8
  %call.i.i37.i = call i32 %267(%struct.rtl8169_private* nonnull %0, i32 8) #9
  %and.i.i221 = and i32 %call.i.i37.i, -65281
  %or.i38.i = or i32 %and.i.i221, 32768
  %268 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %268(%struct.rtl8169_private* nonnull %0, i32 8, i32 %or.i38.i) #9
  %269 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %269(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %270 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %270(%struct.rtl8169_private* nonnull %0, i32 31, i32 7) #9
  %271 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %271(%struct.rtl8169_private* nonnull %0, i32 30, i32 45) #9
  %272 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %262, align 8
  %call.i.i44.i = call i32 %272(%struct.rtl8169_private* nonnull %0, i32 24) #9
  %or.i45.i = or i32 %call.i.i44.i, 80
  %273 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %273(%struct.rtl8169_private* nonnull %0, i32 24, i32 %or.i45.i) #9
  %274 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %274(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %275 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %262, align 8
  %call.i.i49.i = call i32 %275(%struct.rtl8169_private* nonnull %0, i32 20) #9
  %or.i50.i = or i32 %call.i.i49.i, 32768
  %276 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %276(%struct.rtl8169_private* nonnull %0, i32 20, i32 %or.i50.i) #9
  %277 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %277(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %278 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %278(%struct.rtl8169_private* nonnull %0, i32 5, i32 35718) #9
  %279 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %262, align 8
  %call.i.i55.i = call i32 %279(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %or.i56.i = or i32 %call.i.i55.i, 1
  %280 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %280(%struct.rtl8169_private* nonnull %0, i32 6, i32 %or.i56.i) #9
  %281 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %281(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %282 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %282(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %283 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %283(%struct.rtl8169_private* nonnull %0, i32 5, i32 35717) #9
  %284 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %262, align 8
  %call.i.i62.i = call i32 %284(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %and.i63.i = and i32 %call.i.i62.i, -8193
  %285 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %285(%struct.rtl8169_private* nonnull %0, i32 6, i32 %and.i63.i) #9
  %286 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %286(%struct.rtl8169_private* nonnull %0, i32 31, i32 7) #9
  %287 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %287(%struct.rtl8169_private* nonnull %0, i32 30, i32 32) #9
  %288 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %262, align 8
  %call.i.i68.i = call i32 %288(%struct.rtl8169_private* nonnull %0, i32 21) #9
  %and.i69.i = and i32 %call.i.i68.i, -4353
  %289 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %289(%struct.rtl8169_private* nonnull %0, i32 21, i32 %and.i69.i) #9
  %290 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %290(%struct.rtl8169_private* nonnull %0, i32 31, i32 6) #9
  %291 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %291(%struct.rtl8169_private* nonnull %0, i32 0, i32 23040) #9
  %292 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %292(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %293 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %293(%struct.rtl8169_private* nonnull %0, i32 13, i32 7) #9
  %294 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %294(%struct.rtl8169_private* nonnull %0, i32 14, i32 60) #9
  %295 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %295(%struct.rtl8169_private* nonnull %0, i32 13, i32 16391) #9
  %296 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %296(%struct.rtl8169_private* nonnull %0, i32 14, i32 0) #9
  %297 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %256, align 8
  call void %297(%struct.rtl8169_private* nonnull %0, i32 13, i32 0) #9
  br label %sw.epilog

sw.bb20:                                          ; preds = %entry
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  %write.i.i.i223 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %298 = bitcast i8* %write.i.i.i223 to void (%struct.rtl8169_private*, i32, i32)**
  br label %while.body.i.i233

while.body.i.i233:                                ; preds = %while.body.i.i233, %sw.bb20
  %len.addr.06.i.i224 = phi i32 [ 19, %sw.bb20 ], [ %dec.i.i226, %while.body.i.i233 ]
  %regs.addr.05.i.i225 = phi %struct.phy_reg* [ getelementptr inbounds ([19 x %struct.phy_reg], [19 x %struct.phy_reg]* @rtl8168e_2_hw_phy_config.phy_reg_init, i64 0, i64 0), %sw.bb20 ], [ %incdec.ptr.i.i231, %while.body.i.i233 ]
  %dec.i.i226 = add nsw i32 %len.addr.06.i.i224, -1
  %reg.i.i227 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i225, i64 0, i32 0
  %299 = load i16, i16* %reg.i.i227, align 2
  %conv.i.i228 = zext i16 %299 to i32
  %val.i.i229 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i225, i64 0, i32 1
  %300 = load i16, i16* %val.i.i229, align 2
  %conv1.i.i230 = zext i16 %300 to i32
  %301 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %301(%struct.rtl8169_private* %0, i32 %conv.i.i228, i32 %conv1.i.i230) #9
  %incdec.ptr.i.i231 = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i225, i64 1
  %cmp.i.i232 = icmp ugt i32 %len.addr.06.i.i224, 1
  br i1 %cmp.i.i232, label %while.body.i.i233, label %rtl_writephy_batch.exit.i243

rtl_writephy_batch.exit.i243:                     ; preds = %while.body.i.i233
  %302 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %302(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %303 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %303(%struct.rtl8169_private* nonnull %0, i32 5, i32 35712) #9
  %read.i.i.i234 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %304 = bitcast i8* %read.i.i.i234 to i32 (%struct.rtl8169_private*, i32)**
  %305 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %304, align 8
  %call.i.i.i235 = call i32 %305(%struct.rtl8169_private* nonnull %0, i32 23) #9
  %or.i.i236 = or i32 %call.i.i.i235, 6
  %306 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %306(%struct.rtl8169_private* nonnull %0, i32 23, i32 %or.i.i236) #9
  %307 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %307(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %308 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %308(%struct.rtl8169_private* nonnull %0, i32 31, i32 4) #9
  %309 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %309(%struct.rtl8169_private* nonnull %0, i32 31, i32 7) #9
  %310 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %310(%struct.rtl8169_private* nonnull %0, i32 30, i32 45) #9
  %311 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %304, align 8
  %call.i.i49.i237 = call i32 %311(%struct.rtl8169_private* nonnull %0, i32 24) #9
  %or.i50.i238 = or i32 %call.i.i49.i237, 16
  %312 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %312(%struct.rtl8169_private* nonnull %0, i32 24, i32 %or.i50.i238) #9
  %313 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %313(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %314 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %314(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %315 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %304, align 8
  %call.i.i55.i239 = call i32 %315(%struct.rtl8169_private* nonnull %0, i32 20) #9
  %or.i56.i240 = or i32 %call.i.i55.i239, 32768
  %316 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %316(%struct.rtl8169_private* nonnull %0, i32 20, i32 %or.i56.i240) #9
  %317 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %317(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %318 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %318(%struct.rtl8169_private* nonnull %0, i32 5, i32 35718) #9
  %319 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %304, align 8
  %call.i.i61.i = call i32 %319(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %or.i62.i = or i32 %call.i.i61.i, 1
  %320 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %320(%struct.rtl8169_private* nonnull %0, i32 6, i32 %or.i62.i) #9
  %321 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %321(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %322 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %322(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %323 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %323(%struct.rtl8169_private* nonnull %0, i32 5, i32 35717) #9
  %324 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %304, align 8
  %call.i.i68.i241 = call i32 %324(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %or.i69.i = or i32 %call.i.i68.i241, 16384
  %325 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %325(%struct.rtl8169_private* nonnull %0, i32 6, i32 %or.i69.i) #9
  %326 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %326(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %mmio_addr.i.i.i = bitcast i8* %add.ptr.i to i8**
  %327 = load i8*, i8** %mmio_addr.i.i.i, align 8
  %add.ptr.i.i.i242 = getelementptr i8, i8* %327, i64 116
  %328 = bitcast i8* %add.ptr.i.i.i242 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61872, i32* %328) #10, !srcloc !8
  br label %for.body.i.i.i.i.i

for.cond.i.i.i.i.i:                               ; preds = %for.body.i.i.i.i.i
  %inc.i.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i.i, 1
  %cmp.i.i.i.i.i = icmp ult i32 %i.017.i.i.i.i.i, 99
  br i1 %cmp.i.i.i.i.i, label %for.body.i.i.i.i.i, label %do.body.i.i.i.i.i

for.body.i.i.i.i.i:                               ; preds = %for.cond.i.i.i.i.i, %rtl_writephy_batch.exit.i243
  %i.017.i.i.i.i.i = phi i32 [ 0, %rtl_writephy_batch.exit.i243 ], [ %inc.i.i.i.i.i, %for.cond.i.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %329 = load i8*, i8** %mmio_addr.i.i.i, align 8
  %add.ptr.i.i.i.i = getelementptr i8, i8* %329, i64 116
  %330 = bitcast i8* %add.ptr.i.i.i.i to i32*
  %331 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %330) #10, !srcloc !2
  %tobool.i.i.i.i = icmp slt i32 %331, 0
  br i1 %tobool.i.i.i.i, label %cond.true.i.i.i, label %for.cond.i.i.i.i.i

do.body.i.i.i.i.i:                                ; preds = %for.cond.i.i.i.i.i
  %msg_enable.i.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %332 = bitcast i8* %msg_enable.i.i.i.i.i to i32*
  %333 = load i32, i32* %332, align 8
  %and.i.i.i.i.i = and i32 %333, 1
  %tobool4.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i.i, label %rtl_w0w1_eri.exit.i, label %if.then5.i.i.i.i.i

if.then5.i.i.i.i.i:                               ; preds = %do.body.i.i.i.i.i
  %dev.i.i.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %334 = bitcast i8* %dev.i.i.i.i.i to %struct.net_device**
  %335 = load %struct.net_device*, %struct.net_device** %334, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %335, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit.i

cond.true.i.i.i:                                  ; preds = %for.body.i.i.i.i.i
  %add.ptr3.i.i.i = getelementptr i8, i8* %327, i64 112
  %336 = bitcast i8* %add.ptr3.i.i.i to i32*
  %337 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %336) #10, !srcloc !2
  %phitmp.i = and i32 %337, -4
  br label %rtl_w0w1_eri.exit.i

rtl_w0w1_eri.exit.i:                              ; preds = %cond.true.i.i.i, %if.then5.i.i.i.i.i, %do.body.i.i.i.i.i
  %cond.i.i.i = phi i32 [ %phitmp.i, %cond.true.i.i.i ], [ -4, %do.body.i.i.i.i.i ], [ -4, %if.then5.i.i.i.i.i ]
  %338 = load i8*, i8** %mmio_addr.i.i.i, align 8
  %add.ptr.i.i244 = getelementptr i8, i8* %338, i64 112
  %339 = bitcast i8* %add.ptr.i.i244 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i.i, i32* %339) #10, !srcloc !8
  %add.ptr11.i.i = getelementptr i8, i8* %338, i64 116
  %340 = bitcast i8* %add.ptr11.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421776, i32* %340) #10, !srcloc !8
  br label %for.body.i.i.i.i250

for.cond.i.i.i.i247:                              ; preds = %for.body.i.i.i.i250
  %inc.i.i.i.i245 = add nuw nsw i32 %i.017.i.i.i.i248, 1
  %cmp.i.i.i.i246 = icmp ult i32 %i.017.i.i.i.i248, 99
  br i1 %cmp.i.i.i.i246, label %for.body.i.i.i.i250, label %do.body.i.i.i.i254

for.body.i.i.i.i250:                              ; preds = %for.cond.i.i.i.i247, %rtl_w0w1_eri.exit.i
  %i.017.i.i.i.i248 = phi i32 [ 0, %rtl_w0w1_eri.exit.i ], [ %inc.i.i.i.i245, %for.cond.i.i.i.i247 ]
  call void @__udelay(i64 100) #9
  %341 = load i8*, i8** %mmio_addr.i.i.i, align 8
  %add.ptr.i.i102.i = getelementptr i8, i8* %341, i64 116
  %342 = bitcast i8* %add.ptr.i.i102.i to i32*
  %343 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %342) #10, !srcloc !2
  %tobool.i.i.i249 = icmp slt i32 %343, 0
  br i1 %tobool.i.i.i249, label %for.cond.i.i.i.i247, label %rtl8168e_2_hw_phy_config.exit

do.body.i.i.i.i254:                               ; preds = %for.cond.i.i.i.i247
  %msg_enable.i.i.i.i251 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %344 = bitcast i8* %msg_enable.i.i.i.i251 to i32*
  %345 = load i32, i32* %344, align 8
  %and.i.i.i.i252 = and i32 %345, 1
  %tobool4.i.i.i.i253 = icmp eq i32 %and.i.i.i.i252, 0
  br i1 %tobool4.i.i.i.i253, label %rtl8168e_2_hw_phy_config.exit, label %if.then5.i.i.i.i256

if.then5.i.i.i.i256:                              ; preds = %do.body.i.i.i.i254
  %dev.i.i.i.i255 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %346 = bitcast i8* %dev.i.i.i.i255 to %struct.net_device**
  %347 = load %struct.net_device*, %struct.net_device** %346, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %347, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl8168e_2_hw_phy_config.exit

rtl8168e_2_hw_phy_config.exit:                    ; preds = %for.body.i.i.i.i250, %do.body.i.i.i.i254, %if.then5.i.i.i.i256
  %348 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %348(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %349 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %349(%struct.rtl8169_private* nonnull %0, i32 5, i32 35717) #9
  %350 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %304, align 8
  %call.i.i75.i = call i32 %350(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %and.i76.i = and i32 %call.i.i75.i, -8193
  %351 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %351(%struct.rtl8169_private* nonnull %0, i32 6, i32 %and.i76.i) #9
  %352 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %352(%struct.rtl8169_private* nonnull %0, i32 31, i32 4) #9
  %353 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %353(%struct.rtl8169_private* nonnull %0, i32 31, i32 7) #9
  %354 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %354(%struct.rtl8169_private* nonnull %0, i32 30, i32 32) #9
  %355 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %304, align 8
  %call.i.i82.i257 = call i32 %355(%struct.rtl8169_private* nonnull %0, i32 21) #9
  %and.i83.i258 = and i32 %call.i.i82.i257, -257
  %356 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %356(%struct.rtl8169_private* nonnull %0, i32 21, i32 %and.i83.i258) #9
  %357 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %357(%struct.rtl8169_private* nonnull %0, i32 31, i32 2) #9
  %358 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %358(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %359 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %359(%struct.rtl8169_private* nonnull %0, i32 13, i32 7) #9
  %360 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %360(%struct.rtl8169_private* nonnull %0, i32 14, i32 60) #9
  %361 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %361(%struct.rtl8169_private* nonnull %0, i32 13, i32 16391) #9
  %362 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %362(%struct.rtl8169_private* nonnull %0, i32 14, i32 0) #9
  %363 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %363(%struct.rtl8169_private* nonnull %0, i32 13, i32 0) #9
  %364 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %364(%struct.rtl8169_private* nonnull %0, i32 31, i32 3) #9
  %365 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %304, align 8
  %call.i.i94.i = call i32 %365(%struct.rtl8169_private* nonnull %0, i32 25) #9
  %and.i95.i = and i32 %call.i.i94.i, -2
  %366 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %366(%struct.rtl8169_private* nonnull %0, i32 25, i32 %and.i95.i) #9
  %367 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %304, align 8
  %call.i.i98.i = call i32 %367(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %and.i99.i = and i32 %call.i.i98.i, -1025
  %368 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %368(%struct.rtl8169_private* nonnull %0, i32 16, i32 %and.i99.i) #9
  %369 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %298, align 8
  call void %369(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %dev.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %370 = bitcast i8* %dev.i to %struct.net_device**
  %371 = load %struct.net_device*, %struct.net_device** %370, align 8
  %dev_addr.i = getelementptr inbounds %struct.net_device, %struct.net_device* %371, i64 0, i32 74
  %372 = load i8*, i8** %dev_addr.i, align 32
  call fastcc void @rtl_rar_exgmac_set(%struct.rtl8169_private* nonnull %0, i8* %372) #9
  br label %sw.epilog

sw.bb21:                                          ; preds = %entry
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  %write.i.i.i259 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %373 = bitcast i8* %write.i.i.i259 to void (%struct.rtl8169_private*, i32, i32)**
  br label %while.body.i.i269

while.body.i.i269:                                ; preds = %while.body.i.i269, %sw.bb21
  %len.addr.06.i.i260 = phi i32 [ 25, %sw.bb21 ], [ %dec.i.i262, %while.body.i.i269 ]
  %regs.addr.05.i.i261 = phi %struct.phy_reg* [ getelementptr inbounds ([25 x %struct.phy_reg], [25 x %struct.phy_reg]* @rtl8168f_1_hw_phy_config.phy_reg_init, i64 0, i64 0), %sw.bb21 ], [ %incdec.ptr.i.i267, %while.body.i.i269 ]
  %dec.i.i262 = add nsw i32 %len.addr.06.i.i260, -1
  %reg.i.i263 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i261, i64 0, i32 0
  %374 = load i16, i16* %reg.i.i263, align 2
  %conv.i.i264 = zext i16 %374 to i32
  %val.i.i265 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i261, i64 0, i32 1
  %375 = load i16, i16* %val.i.i265, align 2
  %conv1.i.i266 = zext i16 %375 to i32
  %376 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %373, align 8
  call void %376(%struct.rtl8169_private* %0, i32 %conv.i.i264, i32 %conv1.i.i266) #9
  %incdec.ptr.i.i267 = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i261, i64 1
  %cmp.i.i268 = icmp ugt i32 %len.addr.06.i.i260, 1
  br i1 %cmp.i.i268, label %while.body.i.i269, label %rtl8168f_1_hw_phy_config.exit

rtl8168f_1_hw_phy_config.exit:                    ; preds = %while.body.i.i269
  call fastcc void @rtl8168f_hw_phy_config(%struct.rtl8169_private* nonnull %0) #9
  %377 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %373, align 8
  call void %377(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %378 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %373, align 8
  call void %378(%struct.rtl8169_private* nonnull %0, i32 5, i32 35717) #9
  %read.i.i.i270 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %379 = bitcast i8* %read.i.i.i270 to i32 (%struct.rtl8169_private*, i32)**
  %380 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %379, align 8
  %call.i.i.i271 = call i32 %380(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %or.i.i272 = or i32 %call.i.i.i271, 16384
  %381 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %373, align 8
  call void %381(%struct.rtl8169_private* nonnull %0, i32 6, i32 %or.i.i272) #9
  %382 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %373, align 8
  call void %382(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb22:                                          ; preds = %entry
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  call fastcc void @rtl8168f_hw_phy_config(%struct.rtl8169_private* %0) #9
  br label %sw.epilog

sw.bb23:                                          ; preds = %entry
  %write.i.i274 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %383 = bitcast i8* %write.i.i274 to void (%struct.rtl8169_private*, i32, i32)**
  %384 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %383, align 8
  call void %384(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %385 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %383, align 8
  call void %385(%struct.rtl8169_private* %0, i32 24, i32 784) #9
  call void @msleep(i32 20) #9
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  %mmio_addr.i.i275 = bitcast i8* %add.ptr.i to i8**
  %386 = load i8*, i8** %mmio_addr.i.i275, align 8
  %add.ptr.i.i276 = getelementptr i8, i8* %386, i64 112
  %387 = bitcast i8* %add.ptr.i.i276 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %387) #10, !srcloc !8
  %add.ptr11.i.i277 = getelementptr i8, i8* %386, i64 116
  %388 = bitcast i8* %add.ptr11.i.i277 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147470928, i32* %388) #10, !srcloc !8
  br label %for.body.i.i.i.i284

for.cond.i.i.i.i280:                              ; preds = %for.body.i.i.i.i284
  %inc.i.i.i.i278 = add nuw nsw i32 %i.017.i.i.i.i281, 1
  %cmp.i.i.i.i279 = icmp ult i32 %i.017.i.i.i.i281, 99
  br i1 %cmp.i.i.i.i279, label %for.body.i.i.i.i284, label %do.body.i.i.i.i288

for.body.i.i.i.i284:                              ; preds = %for.cond.i.i.i.i280, %sw.bb23
  %i.017.i.i.i.i281 = phi i32 [ 0, %sw.bb23 ], [ %inc.i.i.i.i278, %for.cond.i.i.i.i280 ]
  call void @__udelay(i64 100) #9
  %389 = load i8*, i8** %mmio_addr.i.i275, align 8
  %add.ptr.i.i.i282 = getelementptr i8, i8* %389, i64 116
  %390 = bitcast i8* %add.ptr.i.i.i282 to i32*
  %391 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %390) #10, !srcloc !2
  %tobool.i.i.i283 = icmp slt i32 %391, 0
  br i1 %tobool.i.i.i283, label %for.cond.i.i.i.i280, label %rtl8402_hw_phy_config.exit

do.body.i.i.i.i288:                               ; preds = %for.cond.i.i.i.i280
  %msg_enable.i.i.i.i285 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %392 = bitcast i8* %msg_enable.i.i.i.i285 to i32*
  %393 = load i32, i32* %392, align 8
  %and.i.i.i.i286 = and i32 %393, 1
  %tobool4.i.i.i.i287 = icmp eq i32 %and.i.i.i.i286, 0
  br i1 %tobool4.i.i.i.i287, label %rtl8402_hw_phy_config.exit, label %if.then5.i.i.i.i290

if.then5.i.i.i.i290:                              ; preds = %do.body.i.i.i.i288
  %dev.i.i.i.i289 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %394 = bitcast i8* %dev.i.i.i.i289 to %struct.net_device**
  %395 = load %struct.net_device*, %struct.net_device** %394, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %395, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl8402_hw_phy_config.exit

rtl8402_hw_phy_config.exit:                       ; preds = %for.body.i.i.i.i284, %do.body.i.i.i.i288, %if.then5.i.i.i.i290
  %396 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %383, align 8
  call void %396(%struct.rtl8169_private* nonnull %0, i32 31, i32 4) #9
  %397 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %383, align 8
  call void %397(%struct.rtl8169_private* nonnull %0, i32 16, i32 16415) #9
  %398 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %383, align 8
  call void %398(%struct.rtl8169_private* nonnull %0, i32 25, i32 28720) #9
  %399 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %383, align 8
  call void %399(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb24:                                          ; preds = %entry
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  call fastcc void @rtl8168f_hw_phy_config(%struct.rtl8169_private* %0) #9
  %write.i.i291 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %400 = bitcast i8* %write.i.i291 to void (%struct.rtl8169_private*, i32, i32)**
  %401 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %401(%struct.rtl8169_private* %0, i32 31, i32 5) #9
  %402 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %402(%struct.rtl8169_private* %0, i32 5, i32 35717) #9
  %read.i.i.i292 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %403 = bitcast i8* %read.i.i.i292 to i32 (%struct.rtl8169_private*, i32)**
  %404 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i.i293 = call i32 %404(%struct.rtl8169_private* %0, i32 6) #9
  %or.i.i294 = or i32 %call.i.i.i293, 16384
  %405 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %405(%struct.rtl8169_private* %0, i32 6, i32 %or.i.i294) #9
  %406 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %406(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  br label %while.body.i.i304

while.body.i.i304:                                ; preds = %while.body.i.i304, %sw.bb24
  %len.addr.06.i.i295 = phi i32 [ 25, %sw.bb24 ], [ %dec.i.i297, %while.body.i.i304 ]
  %regs.addr.05.i.i296 = phi %struct.phy_reg* [ getelementptr inbounds ([25 x %struct.phy_reg], [25 x %struct.phy_reg]* @rtl8411_hw_phy_config.phy_reg_init, i64 0, i64 0), %sw.bb24 ], [ %incdec.ptr.i.i302, %while.body.i.i304 ]
  %dec.i.i297 = add nsw i32 %len.addr.06.i.i295, -1
  %reg.i.i298 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i296, i64 0, i32 0
  %407 = load i16, i16* %reg.i.i298, align 2
  %conv.i.i299 = zext i16 %407 to i32
  %val.i.i300 = getelementptr inbounds %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i296, i64 0, i32 1
  %408 = load i16, i16* %val.i.i300, align 2
  %conv1.i.i301 = zext i16 %408 to i32
  %409 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %409(%struct.rtl8169_private* nonnull %0, i32 %conv.i.i299, i32 %conv1.i.i301) #9
  %incdec.ptr.i.i302 = getelementptr %struct.phy_reg, %struct.phy_reg* %regs.addr.05.i.i296, i64 1
  %cmp.i.i303 = icmp ugt i32 %len.addr.06.i.i295, 1
  br i1 %cmp.i.i303, label %while.body.i.i304, label %rtl_writephy_batch.exit.i316

rtl_writephy_batch.exit.i316:                     ; preds = %while.body.i.i304
  %410 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %410(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %411 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %411(%struct.rtl8169_private* nonnull %0, i32 5, i32 35668) #9
  %412 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i51.i = call i32 %412(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %and.i.i305 = and i32 %call.i.i51.i, -2049
  %413 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %413(%struct.rtl8169_private* nonnull %0, i32 6, i32 %and.i.i305) #9
  %414 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %414(%struct.rtl8169_private* nonnull %0, i32 5, i32 35677) #9
  %415 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i55.i306 = call i32 %415(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %and.i56.i = and i32 %call.i.i55.i306, -2049
  %416 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %416(%struct.rtl8169_private* nonnull %0, i32 6, i32 %and.i56.i) #9
  %417 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %417(%struct.rtl8169_private* nonnull %0, i32 5, i32 35452) #9
  %418 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i60.i307 = call i32 %418(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %and.i61.i308 = and i32 %call.i.i60.i307, -257
  %419 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %419(%struct.rtl8169_private* nonnull %0, i32 6, i32 %and.i61.i308) #9
  %420 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %420(%struct.rtl8169_private* nonnull %0, i32 5, i32 35455) #9
  %421 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i65.i309 = call i32 %421(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %or.i66.i310 = or i32 %call.i.i65.i309, 256
  %422 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %422(%struct.rtl8169_private* nonnull %0, i32 6, i32 %or.i66.i310) #9
  %423 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %423(%struct.rtl8169_private* nonnull %0, i32 5, i32 35458) #9
  %424 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i70.i311 = call i32 %424(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %and.i71.i = and i32 %call.i.i70.i311, -257
  %425 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %425(%struct.rtl8169_private* nonnull %0, i32 6, i32 %and.i71.i) #9
  %426 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %426(%struct.rtl8169_private* nonnull %0, i32 5, i32 35461) #9
  %427 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i75.i312 = call i32 %427(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %and.i76.i313 = and i32 %call.i.i75.i312, -257
  %428 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %428(%struct.rtl8169_private* nonnull %0, i32 6, i32 %and.i76.i313) #9
  %429 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %429(%struct.rtl8169_private* nonnull %0, i32 5, i32 35464) #9
  %430 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i80.i = call i32 %430(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %and.i81.i = and i32 %call.i.i80.i, -257
  %431 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %431(%struct.rtl8169_private* nonnull %0, i32 6, i32 %and.i81.i) #9
  %432 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %432(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %433 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %433(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %434 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %434(%struct.rtl8169_private* nonnull %0, i32 5, i32 35717) #9
  %435 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i87.i = call i32 %435(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %or.i88.i = or i32 %call.i.i87.i, 32768
  %436 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %436(%struct.rtl8169_private* nonnull %0, i32 6, i32 %or.i88.i) #9
  %437 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %437(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %mmio_addr.i.i.i314 = bitcast i8* %add.ptr.i to i8**
  %438 = load i8*, i8** %mmio_addr.i.i.i314, align 8
  %add.ptr.i.i.i315 = getelementptr i8, i8* %438, i64 116
  %439 = bitcast i8* %add.ptr.i.i.i315 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61872, i32* %439) #10, !srcloc !8
  br label %for.body.i.i.i.i.i323

for.cond.i.i.i.i.i319:                            ; preds = %for.body.i.i.i.i.i323
  %inc.i.i.i.i.i317 = add nuw nsw i32 %i.017.i.i.i.i.i320, 1
  %cmp.i.i.i.i.i318 = icmp ult i32 %i.017.i.i.i.i.i320, 99
  br i1 %cmp.i.i.i.i.i318, label %for.body.i.i.i.i.i323, label %do.body.i.i.i.i.i327

for.body.i.i.i.i.i323:                            ; preds = %for.cond.i.i.i.i.i319, %rtl_writephy_batch.exit.i316
  %i.017.i.i.i.i.i320 = phi i32 [ 0, %rtl_writephy_batch.exit.i316 ], [ %inc.i.i.i.i.i317, %for.cond.i.i.i.i.i319 ]
  call void @__udelay(i64 100) #9
  %440 = load i8*, i8** %mmio_addr.i.i.i314, align 8
  %add.ptr.i.i.i.i321 = getelementptr i8, i8* %440, i64 116
  %441 = bitcast i8* %add.ptr.i.i.i.i321 to i32*
  %442 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %441) #10, !srcloc !2
  %tobool.i.i.i.i322 = icmp slt i32 %442, 0
  br i1 %tobool.i.i.i.i322, label %cond.true.i.i.i332, label %for.cond.i.i.i.i.i319

do.body.i.i.i.i.i327:                             ; preds = %for.cond.i.i.i.i.i319
  %msg_enable.i.i.i.i.i324 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %443 = bitcast i8* %msg_enable.i.i.i.i.i324 to i32*
  %444 = load i32, i32* %443, align 8
  %and.i.i.i.i.i325 = and i32 %444, 1
  %tobool4.i.i.i.i.i326 = icmp eq i32 %and.i.i.i.i.i325, 0
  br i1 %tobool4.i.i.i.i.i326, label %rtl_w0w1_eri.exit.i336, label %if.then5.i.i.i.i.i329

if.then5.i.i.i.i.i329:                            ; preds = %do.body.i.i.i.i.i327
  %dev.i.i.i.i.i328 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %445 = bitcast i8* %dev.i.i.i.i.i328 to %struct.net_device**
  %446 = load %struct.net_device*, %struct.net_device** %445, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %446, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit.i336

cond.true.i.i.i332:                               ; preds = %for.body.i.i.i.i.i323
  %add.ptr3.i.i.i330 = getelementptr i8, i8* %438, i64 112
  %447 = bitcast i8* %add.ptr3.i.i.i330 to i32*
  %448 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %447) #10, !srcloc !2
  %phitmp.i331 = and i32 %448, -4
  br label %rtl_w0w1_eri.exit.i336

rtl_w0w1_eri.exit.i336:                           ; preds = %cond.true.i.i.i332, %if.then5.i.i.i.i.i329, %do.body.i.i.i.i.i327
  %cond.i.i.i333 = phi i32 [ %phitmp.i331, %cond.true.i.i.i332 ], [ -4, %do.body.i.i.i.i.i327 ], [ -4, %if.then5.i.i.i.i.i329 ]
  %449 = load i8*, i8** %mmio_addr.i.i.i314, align 8
  %add.ptr.i.i334 = getelementptr i8, i8* %449, i64 112
  %450 = bitcast i8* %add.ptr.i.i334 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i.i333, i32* %450) #10, !srcloc !8
  %add.ptr11.i.i335 = getelementptr i8, i8* %449, i64 116
  %451 = bitcast i8* %add.ptr11.i.i335 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147479120, i32* %451) #10, !srcloc !8
  br label %for.body.i.i.i.i342

for.cond.i.i.i.i339:                              ; preds = %for.body.i.i.i.i342
  %inc.i.i.i.i337 = add nuw nsw i32 %i.017.i.i.i.i340, 1
  %cmp.i.i.i.i338 = icmp ult i32 %i.017.i.i.i.i340, 99
  br i1 %cmp.i.i.i.i338, label %for.body.i.i.i.i342, label %do.body.i.i.i.i346

for.body.i.i.i.i342:                              ; preds = %for.cond.i.i.i.i339, %rtl_w0w1_eri.exit.i336
  %i.017.i.i.i.i340 = phi i32 [ 0, %rtl_w0w1_eri.exit.i336 ], [ %inc.i.i.i.i337, %for.cond.i.i.i.i339 ]
  call void @__udelay(i64 100) #9
  %452 = load i8*, i8** %mmio_addr.i.i.i314, align 8
  %add.ptr.i.i121.i = getelementptr i8, i8* %452, i64 116
  %453 = bitcast i8* %add.ptr.i.i121.i to i32*
  %454 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %453) #10, !srcloc !2
  %tobool.i.i.i341 = icmp slt i32 %454, 0
  br i1 %tobool.i.i.i341, label %for.cond.i.i.i.i339, label %rtl8411_hw_phy_config.exit

do.body.i.i.i.i346:                               ; preds = %for.cond.i.i.i.i339
  %msg_enable.i.i.i.i343 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %455 = bitcast i8* %msg_enable.i.i.i.i343 to i32*
  %456 = load i32, i32* %455, align 8
  %and.i.i.i.i344 = and i32 %456, 1
  %tobool4.i.i.i.i345 = icmp eq i32 %and.i.i.i.i344, 0
  br i1 %tobool4.i.i.i.i345, label %rtl8411_hw_phy_config.exit, label %if.then5.i.i.i.i348

if.then5.i.i.i.i348:                              ; preds = %do.body.i.i.i.i346
  %dev.i.i.i.i347 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %457 = bitcast i8* %dev.i.i.i.i347 to %struct.net_device**
  %458 = load %struct.net_device*, %struct.net_device** %457, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %458, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl8411_hw_phy_config.exit

rtl8411_hw_phy_config.exit:                       ; preds = %for.body.i.i.i.i342, %do.body.i.i.i.i346, %if.then5.i.i.i.i348
  %459 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %459(%struct.rtl8169_private* nonnull %0, i32 31, i32 5) #9
  %460 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %460(%struct.rtl8169_private* nonnull %0, i32 5, i32 35717) #9
  %461 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i95.i = call i32 %461(%struct.rtl8169_private* nonnull %0, i32 6) #9
  %and.i96.i = and i32 %call.i.i95.i, -8193
  %462 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %462(%struct.rtl8169_private* nonnull %0, i32 6, i32 %and.i96.i) #9
  %463 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %463(%struct.rtl8169_private* nonnull %0, i32 31, i32 4) #9
  %464 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %464(%struct.rtl8169_private* nonnull %0, i32 31, i32 7) #9
  %465 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %465(%struct.rtl8169_private* nonnull %0, i32 30, i32 32) #9
  %466 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i102.i = call i32 %466(%struct.rtl8169_private* nonnull %0, i32 21) #9
  %and.i103.i = and i32 %call.i.i102.i, -257
  %467 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %467(%struct.rtl8169_private* nonnull %0, i32 21, i32 %and.i103.i) #9
  %468 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %468(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %469 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %469(%struct.rtl8169_private* nonnull %0, i32 13, i32 7) #9
  %470 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %470(%struct.rtl8169_private* nonnull %0, i32 14, i32 60) #9
  %471 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %471(%struct.rtl8169_private* nonnull %0, i32 13, i32 16391) #9
  %472 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %472(%struct.rtl8169_private* nonnull %0, i32 14, i32 0) #9
  %473 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %473(%struct.rtl8169_private* nonnull %0, i32 13, i32 0) #9
  %474 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %474(%struct.rtl8169_private* nonnull %0, i32 31, i32 3) #9
  %475 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i113.i349 = call i32 %475(%struct.rtl8169_private* nonnull %0, i32 25) #9
  %and.i114.i350 = and i32 %call.i.i113.i349, -2
  %476 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %476(%struct.rtl8169_private* nonnull %0, i32 25, i32 %and.i114.i350) #9
  %477 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %403, align 8
  %call.i.i117.i = call i32 %477(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %and.i118.i = and i32 %call.i.i117.i, -1025
  %478 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %478(%struct.rtl8169_private* nonnull %0, i32 16, i32 %and.i118.i) #9
  %479 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %400, align 8
  call void %479(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb25:                                          ; preds = %entry
  %write.i.i351 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %480 = bitcast i8* %write.i.i351 to void (%struct.rtl8169_private*, i32, i32)**
  %481 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %480, align 8
  call void %481(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %482 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %480, align 8
  call void %482(%struct.rtl8169_private* %0, i32 24, i32 784) #9
  call void @msleep(i32 100) #9
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  %mmio_addr.i.i352 = bitcast i8* %add.ptr.i to i8**
  %483 = load i8*, i8** %mmio_addr.i.i352, align 8
  %add.ptr.i.i353 = getelementptr i8, i8* %483, i64 112
  %484 = bitcast i8* %add.ptr.i.i353 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %484) #10, !srcloc !8
  %add.ptr11.i.i354 = getelementptr i8, i8* %483, i64 116
  %485 = bitcast i8* %add.ptr11.i.i354 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147470928, i32* %485) #10, !srcloc !8
  br label %for.body.i.i.i.i361

for.cond.i.i.i.i357:                              ; preds = %for.body.i.i.i.i361
  %inc.i.i.i.i355 = add nuw nsw i32 %i.017.i.i.i.i358, 1
  %cmp.i.i.i.i356 = icmp ult i32 %i.017.i.i.i.i358, 99
  br i1 %cmp.i.i.i.i356, label %for.body.i.i.i.i361, label %do.body.i.i.i.i365

for.body.i.i.i.i361:                              ; preds = %for.cond.i.i.i.i357, %sw.bb25
  %i.017.i.i.i.i358 = phi i32 [ 0, %sw.bb25 ], [ %inc.i.i.i.i355, %for.cond.i.i.i.i357 ]
  call void @__udelay(i64 100) #9
  %486 = load i8*, i8** %mmio_addr.i.i352, align 8
  %add.ptr.i.i.i359 = getelementptr i8, i8* %486, i64 116
  %487 = bitcast i8* %add.ptr.i.i.i359 to i32*
  %488 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %487) #10, !srcloc !2
  %tobool.i.i.i360 = icmp slt i32 %488, 0
  br i1 %tobool.i.i.i360, label %for.cond.i.i.i.i357, label %rtl_eri_write.exit.i

do.body.i.i.i.i365:                               ; preds = %for.cond.i.i.i.i357
  %msg_enable.i.i.i.i362 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %489 = bitcast i8* %msg_enable.i.i.i.i362 to i32*
  %490 = load i32, i32* %489, align 8
  %and.i.i.i.i363 = and i32 %490, 1
  %tobool4.i.i.i.i364 = icmp eq i32 %and.i.i.i.i363, 0
  br i1 %tobool4.i.i.i.i364, label %rtl_eri_write.exit.i, label %if.then5.i.i.i.i367

if.then5.i.i.i.i367:                              ; preds = %do.body.i.i.i.i365
  %dev.i.i.i.i366 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %491 = bitcast i8* %dev.i.i.i.i366 to %struct.net_device**
  %492 = load %struct.net_device*, %struct.net_device** %491, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %492, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit.i

rtl_eri_write.exit.i:                             ; preds = %for.body.i.i.i.i361, %if.then5.i.i.i.i367, %do.body.i.i.i.i365
  %493 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %480, align 8
  call void %493(%struct.rtl8169_private* nonnull %0, i32 31, i32 4) #9
  %494 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %480, align 8
  call void %494(%struct.rtl8169_private* nonnull %0, i32 16, i32 49279) #9
  %495 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %480, align 8
  call void %495(%struct.rtl8169_private* nonnull %0, i32 25, i32 28720) #9
  %496 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %480, align 8
  call void %496(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %497 = load i8*, i8** %mmio_addr.i.i352, align 8
  %add.ptr.i8.i = getelementptr i8, i8* %497, i64 112
  %498 = bitcast i8* %add.ptr.i8.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %498) #10, !srcloc !8
  %add.ptr11.i9.i = getelementptr i8, i8* %497, i64 116
  %499 = bitcast i8* %add.ptr11.i9.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147470896, i32* %499) #10, !srcloc !8
  br label %for.body.i.i.i16.i

for.cond.i.i.i12.i:                               ; preds = %for.body.i.i.i16.i
  %inc.i.i.i10.i = add nuw nsw i32 %i.017.i.i.i13.i, 1
  %cmp.i.i.i11.i = icmp ult i32 %i.017.i.i.i13.i, 99
  br i1 %cmp.i.i.i11.i, label %for.body.i.i.i16.i, label %do.body.i.i.i20.i

for.body.i.i.i16.i:                               ; preds = %for.cond.i.i.i12.i, %rtl_eri_write.exit.i
  %i.017.i.i.i13.i = phi i32 [ 0, %rtl_eri_write.exit.i ], [ %inc.i.i.i10.i, %for.cond.i.i.i12.i ]
  call void @__udelay(i64 100) #9
  %500 = load i8*, i8** %mmio_addr.i.i352, align 8
  %add.ptr.i.i14.i = getelementptr i8, i8* %500, i64 116
  %501 = bitcast i8* %add.ptr.i.i14.i to i32*
  %502 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %501) #10, !srcloc !2
  %tobool.i.i15.i = icmp slt i32 %502, 0
  br i1 %tobool.i.i15.i, label %for.cond.i.i.i12.i, label %sw.epilog

do.body.i.i.i20.i:                                ; preds = %for.cond.i.i.i12.i
  %msg_enable.i.i.i17.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %503 = bitcast i8* %msg_enable.i.i.i17.i to i32*
  %504 = load i32, i32* %503, align 8
  %and.i.i.i18.i = and i32 %504, 1
  %tobool4.i.i.i19.i = icmp eq i32 %and.i.i.i18.i, 0
  br i1 %tobool4.i.i.i19.i, label %sw.epilog, label %if.then5.i.i.i22.i

if.then5.i.i.i22.i:                               ; preds = %do.body.i.i.i20.i
  %dev.i.i.i21.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %505 = bitcast i8* %dev.i.i.i21.i to %struct.net_device**
  %506 = load %struct.net_device*, %struct.net_device** %505, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %506, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %sw.epilog

sw.bb26:                                          ; preds = %entry
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  %write.i.i368 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %507 = bitcast i8* %write.i.i368 to void (%struct.rtl8169_private*, i32, i32)**
  %508 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %508(%struct.rtl8169_private* %0, i32 31, i32 2630) #9
  %read.i.i369 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %509 = bitcast i8* %read.i.i369 to i32 (%struct.rtl8169_private*, i32)**
  %510 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i370 = call i32 %510(%struct.rtl8169_private* %0, i32 16) #9
  %and.i371 = and i32 %call.i.i370, 256
  %tobool.i372 = icmp eq i32 %and.i371, 0
  %511 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %511(%struct.rtl8169_private* %0, i32 31, i32 3020) #9
  %512 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i52.i = call i32 %512(%struct.rtl8169_private* nonnull %0, i32 18) #9
  br i1 %tobool.i372, label %if.else.i376, label %if.then.i374

if.then.i374:                                     ; preds = %sw.bb26
  %and.i.i373 = and i32 %call.i.i52.i, -32769
  %513 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %513(%struct.rtl8169_private* nonnull %0, i32 18, i32 %and.i.i373) #9
  br label %if.end.i

if.else.i376:                                     ; preds = %sw.bb26
  %or.i.i375 = or i32 %call.i.i52.i, 32768
  %514 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %514(%struct.rtl8169_private* nonnull %0, i32 18, i32 %or.i.i375) #9
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i376, %if.then.i374
  %515 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %515(%struct.rtl8169_private* nonnull %0, i32 31, i32 2630) #9
  %516 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i56.i = call i32 %516(%struct.rtl8169_private* nonnull %0, i32 19) #9
  %and2.i = and i32 %call.i56.i, 256
  %tobool3.i = icmp eq i32 %and2.i, 0
  %517 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %517(%struct.rtl8169_private* nonnull %0, i32 31, i32 3137) #9
  %518 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i63.i = call i32 %518(%struct.rtl8169_private* nonnull %0, i32 21) #9
  br i1 %tobool3.i, label %if.else5.i, label %if.then4.i

if.then4.i:                                       ; preds = %if.end.i
  %or.i60.i = or i32 %call.i.i63.i, 2
  %519 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %519(%struct.rtl8169_private* nonnull %0, i32 21, i32 %or.i60.i) #9
  br label %if.end6.i

if.else5.i:                                       ; preds = %if.end.i
  %and.i64.i = and i32 %call.i.i63.i, -3
  %520 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %520(%struct.rtl8169_private* nonnull %0, i32 21, i32 %and.i64.i) #9
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.else5.i, %if.then4.i
  %521 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %521(%struct.rtl8169_private* nonnull %0, i32 31, i32 2628) #9
  %522 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i68.i377 = call i32 %522(%struct.rtl8169_private* nonnull %0, i32 17) #9
  %or.i69.i378 = or i32 %call.i.i68.i377, 12
  %523 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %523(%struct.rtl8169_private* nonnull %0, i32 17, i32 %or.i69.i378) #9
  %524 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %524(%struct.rtl8169_private* nonnull %0, i32 31, i32 3020) #9
  %525 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i73.i = call i32 %525(%struct.rtl8169_private* nonnull %0, i32 20) #9
  %or.i74.i = or i32 %call.i.i73.i, 256
  %526 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %526(%struct.rtl8169_private* nonnull %0, i32 20, i32 %or.i74.i) #9
  %527 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %527(%struct.rtl8169_private* nonnull %0, i32 31, i32 2628) #9
  %528 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i78.i = call i32 %528(%struct.rtl8169_private* nonnull %0, i32 17) #9
  %or.i79.i = or i32 %call.i.i78.i, 192
  %529 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %529(%struct.rtl8169_private* nonnull %0, i32 17, i32 %or.i79.i) #9
  %530 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %530(%struct.rtl8169_private* nonnull %0, i32 31, i32 2627) #9
  %531 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %531(%struct.rtl8169_private* nonnull %0, i32 19, i32 32900) #9
  %532 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i84.i379 = call i32 %532(%struct.rtl8169_private* nonnull %0, i32 20) #9
  %and.i85.i380 = and i32 %call.i.i84.i379, -24577
  %533 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %533(%struct.rtl8169_private* nonnull %0, i32 20, i32 %and.i85.i380) #9
  %534 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i88.i = call i32 %534(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %or.i89.i = or i32 %call.i.i88.i, 4099
  %535 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %535(%struct.rtl8169_private* nonnull %0, i32 16, i32 %or.i89.i) #9
  %536 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %536(%struct.rtl8169_private* nonnull %0, i32 31, i32 2635) #9
  %537 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i93.i381 = call i32 %537(%struct.rtl8169_private* nonnull %0, i32 17) #9
  %or.i94.i382 = or i32 %call.i.i93.i381, 4
  %538 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %538(%struct.rtl8169_private* nonnull %0, i32 17, i32 %or.i94.i382) #9
  %539 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %539(%struct.rtl8169_private* nonnull %0, i32 31, i32 2627) #9
  %540 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %540(%struct.rtl8169_private* nonnull %0, i32 19, i32 32786) #9
  %541 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i99.i383 = call i32 %541(%struct.rtl8169_private* nonnull %0, i32 20) #9
  %or.i100.i = or i32 %call.i.i99.i383, 32768
  %542 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %542(%struct.rtl8169_private* nonnull %0, i32 20, i32 %or.i100.i) #9
  %543 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %543(%struct.rtl8169_private* nonnull %0, i32 31, i32 3138) #9
  %544 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i104.i = call i32 %544(%struct.rtl8169_private* nonnull %0, i32 17) #9
  %and.i105.i = and i32 %call.i.i104.i, -24577
  %or.i106.i = or i32 %and.i105.i, 16384
  %545 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %545(%struct.rtl8169_private* nonnull %0, i32 17, i32 %or.i106.i) #9
  %546 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %546(%struct.rtl8169_private* nonnull %0, i32 31, i32 3021) #9
  %547 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %547(%struct.rtl8169_private* nonnull %0, i32 20, i32 20581) #9
  %548 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %548(%struct.rtl8169_private* nonnull %0, i32 20, i32 53349) #9
  %549 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %549(%struct.rtl8169_private* nonnull %0, i32 31, i32 3016) #9
  %550 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %550(%struct.rtl8169_private* nonnull %0, i32 17, i32 22101) #9
  %551 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %551(%struct.rtl8169_private* nonnull %0, i32 31, i32 3021) #9
  %552 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %552(%struct.rtl8169_private* nonnull %0, i32 20, i32 4197) #9
  %553 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %553(%struct.rtl8169_private* nonnull %0, i32 20, i32 36965) #9
  %554 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %554(%struct.rtl8169_private* nonnull %0, i32 20, i32 4197) #9
  %555 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %555(%struct.rtl8169_private* nonnull %0, i32 31, i32 2627) #9
  %556 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i119.i = call i32 %556(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %and8.i = and i32 %call.i119.i, 4
  %tobool9.i = icmp eq i32 %and8.i, 0
  br i1 %tobool9.i, label %rtl8168g_1_hw_phy_config.exit, label %if.then10.i

if.then10.i:                                      ; preds = %if.end6.i
  %557 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %509, align 8
  %call.i.i121.i = call i32 %557(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %and.i122.i = and i32 %call.i.i121.i, -5
  %558 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %558(%struct.rtl8169_private* nonnull %0, i32 16, i32 %and.i122.i) #9
  br label %rtl8168g_1_hw_phy_config.exit

rtl8168g_1_hw_phy_config.exit:                    ; preds = %if.end6.i, %if.then10.i
  %559 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %507, align 8
  call void %559(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb27:                                          ; preds = %entry, %entry, %entry
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  br label %sw.epilog

sw.bb28:                                          ; preds = %entry, %entry
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  %write.i.i384 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %560 = bitcast i8* %write.i.i384 to void (%struct.rtl8169_private*, i32, i32)**
  %561 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %561(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %562 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %562(%struct.rtl8169_private* %0, i32 19, i32 32923) #9
  %read.i.i.i385 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %563 = bitcast i8* %read.i.i.i385 to i32 (%struct.rtl8169_private*, i32)**
  %564 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i.i386 = call i32 %564(%struct.rtl8169_private* %0, i32 20) #9
  %and.i.i387 = and i32 %call.i.i.i386, -63489
  %or.i.i388 = or i32 %and.i.i387, 32768
  %565 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %565(%struct.rtl8169_private* %0, i32 20, i32 %or.i.i388) #9
  %566 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %566(%struct.rtl8169_private* %0, i32 19, i32 32930) #9
  %567 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i112.i = call i32 %567(%struct.rtl8169_private* %0, i32 20) #9
  %and.i113.i = and i32 %call.i.i112.i, -65281
  %or.i114.i = or i32 %and.i113.i, 32768
  %568 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %568(%struct.rtl8169_private* %0, i32 20, i32 %or.i114.i) #9
  %569 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %569(%struct.rtl8169_private* %0, i32 19, i32 32932) #9
  %570 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i118.i = call i32 %570(%struct.rtl8169_private* %0, i32 20) #9
  %and.i119.i = and i32 %call.i.i118.i, -65281
  %or.i120.i = or i32 %and.i119.i, 34048
  %571 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %571(%struct.rtl8169_private* %0, i32 20, i32 %or.i120.i) #9
  %572 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %572(%struct.rtl8169_private* %0, i32 19, i32 32924) #9
  %573 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i124.i = call i32 %573(%struct.rtl8169_private* %0, i32 20) #9
  %and.i125.i = and i32 %call.i.i124.i, -65281
  %or.i126.i = or i32 %and.i125.i, 48384
  %574 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %574(%struct.rtl8169_private* %0, i32 20, i32 %or.i126.i) #9
  %575 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %575(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %576 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %576(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %577 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %577(%struct.rtl8169_private* %0, i32 19, i32 32941) #9
  %578 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i132.i = call i32 %578(%struct.rtl8169_private* %0, i32 20) #9
  %and.i133.i = and i32 %call.i.i132.i, -63489
  %or.i134.i = or i32 %and.i133.i, 28672
  %579 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %579(%struct.rtl8169_private* %0, i32 20, i32 %or.i134.i) #9
  %580 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %580(%struct.rtl8169_private* %0, i32 19, i32 32948) #9
  %581 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i138.i = call i32 %581(%struct.rtl8169_private* %0, i32 20) #9
  %and.i139.i = and i32 %call.i.i138.i, -65281
  %or.i140.i = or i32 %and.i139.i, 20480
  %582 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %582(%struct.rtl8169_private* %0, i32 20, i32 %or.i140.i) #9
  %583 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %583(%struct.rtl8169_private* %0, i32 19, i32 32940) #9
  %584 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i144.i = call i32 %584(%struct.rtl8169_private* %0, i32 20) #9
  %and.i145.i = and i32 %call.i.i144.i, -65281
  %or.i146.i = or i32 %and.i145.i, 16384
  %585 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %585(%struct.rtl8169_private* %0, i32 20, i32 %or.i146.i) #9
  %586 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %586(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %587 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %587(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %588 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %588(%struct.rtl8169_private* %0, i32 19, i32 32910) #9
  %589 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i152.i = call i32 %589(%struct.rtl8169_private* %0, i32 20) #9
  %and.i153.i = and i32 %call.i.i152.i, -65281
  %or.i154.i = or i32 %and.i153.i, 4608
  %590 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %590(%struct.rtl8169_private* %0, i32 20, i32 %or.i154.i) #9
  %591 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %591(%struct.rtl8169_private* %0, i32 19, i32 32912) #9
  %592 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i158.i = call i32 %592(%struct.rtl8169_private* %0, i32 20) #9
  %and.i159.i = and i32 %call.i.i158.i, -65281
  %or.i160.i = or i32 %and.i159.i, 58624
  %593 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %593(%struct.rtl8169_private* %0, i32 20, i32 %or.i160.i) #9
  %594 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %594(%struct.rtl8169_private* %0, i32 19, i32 32914) #9
  %595 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i164.i = call i32 %595(%struct.rtl8169_private* %0, i32 20) #9
  %and.i165.i = and i32 %call.i.i164.i, -65281
  %or.i166.i = or i32 %and.i165.i, 40704
  %596 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %596(%struct.rtl8169_private* %0, i32 20, i32 %or.i166.i) #9
  %597 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %597(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %598 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %598(%struct.rtl8169_private* %0, i32 31, i32 2630) #9
  %599 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i389 = call i32 %599(%struct.rtl8169_private* %0, i32 19) #9
  %600 = shl i32 %call.i.i389, 2
  %conv1.i = and i32 %600, 12
  %601 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i171.i = call i32 %601(%struct.rtl8169_private* %0, i32 18) #9
  %and3.i = lshr i32 %call.i171.i, 14
  %shr.i = and i32 %and3.i, 3
  %or5.i = or i32 %shr.i, %conv1.i
  %602 = shl nuw nsw i32 %or5.i, 12
  %conv14.i = xor i32 %602, 28672
  %603 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %603(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %604 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %604(%struct.rtl8169_private* %0, i32 19, i32 33402) #9
  %605 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i175.i = call i32 %605(%struct.rtl8169_private* %0, i32 20) #9
  %and.i176.i = and i32 %call.i.i175.i, -61441
  %or.i177.i = or i32 %and.i176.i, %conv14.i
  %606 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %606(%struct.rtl8169_private* %0, i32 20, i32 %or.i177.i) #9
  %607 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %607(%struct.rtl8169_private* %0, i32 19, i32 33403) #9
  %608 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i181.i = call i32 %608(%struct.rtl8169_private* %0, i32 20) #9
  %and.i182.i = and i32 %call.i.i181.i, -61441
  %or.i183.i = or i32 %and.i182.i, %conv14.i
  %609 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %609(%struct.rtl8169_private* %0, i32 20, i32 %or.i183.i) #9
  %610 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %610(%struct.rtl8169_private* %0, i32 19, i32 33404) #9
  %611 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i187.i = call i32 %611(%struct.rtl8169_private* %0, i32 20) #9
  %and.i188.i = and i32 %call.i.i187.i, -61441
  %or.i189.i = or i32 %and.i188.i, %conv14.i
  %612 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %612(%struct.rtl8169_private* %0, i32 20, i32 %or.i189.i) #9
  %613 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %613(%struct.rtl8169_private* %0, i32 19, i32 33405) #9
  %614 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i193.i = call i32 %614(%struct.rtl8169_private* %0, i32 20) #9
  %and.i194.i = and i32 %call.i.i193.i, -61441
  %or.i195.i = or i32 %and.i194.i, %conv14.i
  %615 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %615(%struct.rtl8169_private* %0, i32 20, i32 %or.i195.i) #9
  %616 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %616(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %617 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %617(%struct.rtl8169_private* %0, i32 19, i32 2065) #9
  %618 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i200.i = call i32 %618(%struct.rtl8169_private* %0, i32 20) #9
  %or.i201.i = or i32 %call.i.i200.i, 2048
  %619 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %619(%struct.rtl8169_private* %0, i32 20, i32 %or.i201.i) #9
  %620 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %620(%struct.rtl8169_private* %0, i32 31, i32 2626) #9
  %621 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i205.i390 = call i32 %621(%struct.rtl8169_private* %0, i32 22) #9
  %or.i206.i = or i32 %call.i.i205.i390, 2
  %622 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %622(%struct.rtl8169_private* %0, i32 22, i32 %or.i206.i) #9
  %623 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %623(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %624 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %624(%struct.rtl8169_private* %0, i32 31, i32 2628) #9
  %625 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i211.i391 = call i32 %625(%struct.rtl8169_private* %0, i32 17) #9
  %or.i212.i = or i32 %call.i.i211.i391, 2048
  %626 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %626(%struct.rtl8169_private* %0, i32 17, i32 %or.i212.i) #9
  %627 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %627(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %628 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %628(%struct.rtl8169_private* %0, i32 31, i32 3018) #9
  %629 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i217.i392 = call i32 %629(%struct.rtl8169_private* %0, i32 23) #9
  %and.i218.i393 = and i32 %call.i.i217.i392, -28673
  %or.i219.i394 = or i32 %and.i218.i393, 16384
  %630 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %630(%struct.rtl8169_private* %0, i32 23, i32 %or.i219.i394) #9
  %631 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %631(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %632 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %632(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %633 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %633(%struct.rtl8169_private* %0, i32 19, i32 32831) #9
  %634 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i225.i = call i32 %634(%struct.rtl8169_private* %0, i32 20) #9
  %and.i226.i = and i32 %call.i.i225.i, -12289
  %635 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %635(%struct.rtl8169_private* %0, i32 20, i32 %and.i226.i) #9
  %636 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %636(%struct.rtl8169_private* %0, i32 19, i32 32839) #9
  %637 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i230.i = call i32 %637(%struct.rtl8169_private* %0, i32 20) #9
  %and.i231.i = and i32 %call.i.i230.i, -12289
  %638 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %638(%struct.rtl8169_private* %0, i32 20, i32 %and.i231.i) #9
  %639 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %639(%struct.rtl8169_private* %0, i32 19, i32 32847) #9
  %640 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i235.i = call i32 %640(%struct.rtl8169_private* %0, i32 20) #9
  %and.i236.i = and i32 %call.i.i235.i, -12289
  %641 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %641(%struct.rtl8169_private* %0, i32 20, i32 %and.i236.i) #9
  %642 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %642(%struct.rtl8169_private* %0, i32 19, i32 32855) #9
  %643 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i240.i = call i32 %643(%struct.rtl8169_private* %0, i32 20) #9
  %and.i241.i = and i32 %call.i.i240.i, -12289
  %644 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %644(%struct.rtl8169_private* %0, i32 20, i32 %and.i241.i) #9
  %645 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %645(%struct.rtl8169_private* %0, i32 19, i32 32863) #9
  %646 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i245.i395 = call i32 %646(%struct.rtl8169_private* %0, i32 20) #9
  %and.i246.i396 = and i32 %call.i.i245.i395, -12289
  %647 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %647(%struct.rtl8169_private* %0, i32 20, i32 %and.i246.i396) #9
  %648 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %648(%struct.rtl8169_private* %0, i32 19, i32 32871) #9
  %649 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i250.i = call i32 %649(%struct.rtl8169_private* %0, i32 20) #9
  %and.i251.i = and i32 %call.i.i250.i, -12289
  %650 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %650(%struct.rtl8169_private* %0, i32 20, i32 %and.i251.i) #9
  %651 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %651(%struct.rtl8169_private* %0, i32 19, i32 32879) #9
  %652 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i255.i = call i32 %652(%struct.rtl8169_private* %0, i32 20) #9
  %and.i256.i = and i32 %call.i.i255.i, -12289
  %653 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %653(%struct.rtl8169_private* %0, i32 20, i32 %and.i256.i) #9
  %654 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %654(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %655 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %655(%struct.rtl8169_private* %0, i32 31, i32 2628) #9
  %656 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i261.i = call i32 %656(%struct.rtl8169_private* %0, i32 20) #9
  %and.i262.i = and i32 %call.i.i261.i, -129
  %657 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %657(%struct.rtl8169_private* %0, i32 20, i32 %and.i262.i) #9
  %658 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %658(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %659 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %659(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %660 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i267.i = call i32 %660(%struct.rtl8169_private* %0, i32 16) #9
  %and20.i = and i32 %call.i267.i, 4
  %tobool.i397 = icmp eq i32 %and20.i, 0
  br i1 %tobool.i397, label %rtl8168h_1_hw_phy_config.exit, label %if.then.i398

if.then.i398:                                     ; preds = %sw.bb28
  %661 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %563, align 8
  %call.i.i269.i = call i32 %661(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %and.i270.i = and i32 %call.i.i269.i, -5
  %662 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %662(%struct.rtl8169_private* nonnull %0, i32 16, i32 %and.i270.i) #9
  br label %rtl8168h_1_hw_phy_config.exit

rtl8168h_1_hw_phy_config.exit:                    ; preds = %sw.bb28, %if.then.i398
  %663 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %560, align 8
  call void %663(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb29:                                          ; preds = %entry, %entry
  call fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %0) #9
  %write.i.i400 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %664 = bitcast i8* %write.i.i400 to void (%struct.rtl8169_private*, i32, i32)**
  %665 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %665(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %666 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %666(%struct.rtl8169_private* %0, i32 19, i32 32906) #9
  %read.i.i.i401 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %667 = bitcast i8* %read.i.i.i401 to i32 (%struct.rtl8169_private*, i32)**
  %668 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %667, align 8
  %call.i.i.i402 = call i32 %668(%struct.rtl8169_private* %0, i32 20) #9
  %and.i.i403 = and i32 %call.i.i.i402, -64
  %or.i.i404 = or i32 %and.i.i403, 10
  %669 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %669(%struct.rtl8169_private* %0, i32 20, i32 %or.i.i404) #9
  %670 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %670(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %671 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %671(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %672 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %672(%struct.rtl8169_private* %0, i32 19, i32 2065) #9
  %673 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %667, align 8
  %call.i.i138.i405 = call i32 %673(%struct.rtl8169_private* %0, i32 20) #9
  %or.i139.i406 = or i32 %call.i.i138.i405, 2048
  %674 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %674(%struct.rtl8169_private* %0, i32 20, i32 %or.i139.i406) #9
  %675 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %675(%struct.rtl8169_private* %0, i32 31, i32 2626) #9
  %676 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %667, align 8
  %call.i.i143.i407 = call i32 %676(%struct.rtl8169_private* %0, i32 22) #9
  %or.i144.i = or i32 %call.i.i143.i407, 2
  %677 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %677(%struct.rtl8169_private* %0, i32 22, i32 %or.i144.i) #9
  %678 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %678(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %679 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %679(%struct.rtl8169_private* %0, i32 31, i32 2628) #9
  %680 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %667, align 8
  %call.i.i149.i408 = call i32 %680(%struct.rtl8169_private* %0, i32 17) #9
  %or.i150.i = or i32 %call.i.i149.i408, 2048
  %681 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %681(%struct.rtl8169_private* %0, i32 17, i32 %or.i150.i) #9
  %682 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %682(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %mmio_addr.i.i409 = bitcast i8* %add.ptr.i to i8**
  %683 = load i8*, i8** %mmio_addr.i.i409, align 8
  %add.ptr.i.i410 = getelementptr i8, i8* %683, i64 176
  %684 = bitcast i8* %add.ptr.i.i410 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -293502851, i32* %684) #10, !srcloc !8
  %685 = load i8*, i8** %mmio_addr.i.i409, align 8
  %add.ptr.i154.i = getelementptr i8, i8* %685, i64 176
  %686 = bitcast i8* %add.ptr.i154.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1853947904, i32* %686) #10, !srcloc !8
  %687 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %686) #10, !srcloc !2
  %conv.i.i411 = trunc i32 %687 to i16
  %688 = lshr i16 %conv.i.i411, 4
  %689 = and i16 %688, 8
  %690 = load i8*, i8** %mmio_addr.i.i409, align 8
  %add.ptr.i156.i = getelementptr i8, i8* %690, i64 176
  %691 = bitcast i8* %add.ptr.i156.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1853882368, i32* %691) #10, !srcloc !8
  %692 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %691) #10, !srcloc !2
  %conv.i157.i = trunc i32 %692 to i16
  %shr7.i = lshr i16 %conv.i157.i, 13
  %or.i412 = or i16 %shr7.i, %689
  %and10.i = lshr i16 %conv.i157.i, 9
  %and13.i = lshr i16 %conv.i157.i, 5
  %693 = lshr i16 %conv.i157.i, 1
  %694 = and i16 %693, 8
  %and22.i = and i16 %conv.i157.i, 7
  %or24.i = or i16 %694, %and22.i
  %cmp.i413 = icmp ne i16 %or.i412, 15
  %695 = and i16 %and13.i, 15
  %696 = and i16 %695, %and10.i
  %697 = icmp ne i16 %696, 15
  %or.cond131.not.i = or i1 %cmp.i413, %697
  %cmp47.i = icmp eq i16 %or24.i, 15
  %or.cond132.i = or i1 %cmp47.i, %or.cond131.not.i
  br i1 %or.cond132.i, label %if.then.i414, label %if.end.i418

if.then.i414:                                     ; preds = %sw.bb29
  %698 = shl nuw i16 %or.i412, 12
  %shr11.i = shl nuw nsw i16 %and10.i, 8
  %699 = and i16 %shr11.i, 3840
  %or30128.i = or i16 %698, %699
  %shr14.i = shl nuw nsw i16 %and13.i, 4
  %700 = and i16 %shr14.i, 240
  %or33129.i = or i16 %or30128.i, %700
  %or35130.i = or i16 %or33129.i, %or24.i
  %or35.i = zext i16 %or35130.i to i32
  %701 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %701(%struct.rtl8169_private* nonnull %0, i32 31, i32 3023) #9
  %702 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %702(%struct.rtl8169_private* nonnull %0, i32 22, i32 %or35.i) #9
  %703 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %703(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %if.end.i418

if.end.i418:                                      ; preds = %if.then.i414, %sw.bb29
  %704 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %704(%struct.rtl8169_private* nonnull %0, i32 31, i32 3021) #9
  %705 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %667, align 8
  %call.i.i415 = call i32 %705(%struct.rtl8169_private* nonnull %0, i32 22) #9
  %and50.i = and i32 %call.i.i415, 15
  %cmp51.i = icmp ugt i32 %and50.i, 3
  %sub.i = add nuw nsw i32 %and50.i, 65533
  %phitmp.i416 = and i32 %sub.i, 65535
  %rlen.0.i = select i1 %cmp51.i, i32 %phitmp.i416, i32 0
  %shl58.i = shl nuw nsw i32 %rlen.0.i, 4
  %or59.i = or i32 %shl58.i, %rlen.0.i
  %shl61.i = shl nuw nsw i32 %rlen.0.i, 8
  %or62.i = or i32 %or59.i, %shl61.i
  %shl64.i = shl nuw nsw i32 %rlen.0.i, 12
  %or65.i = or i32 %or62.i, %shl64.i
  %706 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %706(%struct.rtl8169_private* nonnull %0, i32 23, i32 %or65.i) #9
  %707 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %707(%struct.rtl8169_private* nonnull %0, i32 31, i32 3021) #9
  %708 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %708(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %709 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %709(%struct.rtl8169_private* nonnull %0, i32 31, i32 2628) #9
  %710 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %667, align 8
  %call.i.i167.i = call i32 %710(%struct.rtl8169_private* nonnull %0, i32 20) #9
  %and.i168.i = and i32 %call.i.i167.i, -129
  %711 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %711(%struct.rtl8169_private* nonnull %0, i32 20, i32 %and.i168.i) #9
  %712 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %712(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  %713 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %713(%struct.rtl8169_private* nonnull %0, i32 31, i32 2627) #9
  %714 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %667, align 8
  %call.i173.i = call i32 %714(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %and67.i = and i32 %call.i173.i, 4
  %tobool.i417 = icmp eq i32 %and67.i, 0
  br i1 %tobool.i417, label %rtl8168h_2_hw_phy_config.exit, label %if.then68.i

if.then68.i:                                      ; preds = %if.end.i418
  %715 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %667, align 8
  %call.i.i175.i419 = call i32 %715(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %and.i176.i420 = and i32 %call.i.i175.i419, -5
  %716 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %716(%struct.rtl8169_private* nonnull %0, i32 16, i32 %and.i176.i420) #9
  br label %rtl8168h_2_hw_phy_config.exit

rtl8168h_2_hw_phy_config.exit:                    ; preds = %if.end.i418, %if.then68.i
  %717 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %664, align 8
  call void %717(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb30:                                          ; preds = %entry
  %write.i.i421 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %718 = bitcast i8* %write.i.i421 to void (%struct.rtl8169_private*, i32, i32)**
  %719 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %719(%struct.rtl8169_private* %0, i32 31, i32 2628) #9
  %read.i.i.i422 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %720 = bitcast i8* %read.i.i.i422 to i32 (%struct.rtl8169_private*, i32)**
  %721 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i.i423 = call i32 %721(%struct.rtl8169_private* %0, i32 17) #9
  %or.i.i424 = or i32 %call.i.i.i423, 12
  %722 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %722(%struct.rtl8169_private* %0, i32 17, i32 %or.i.i424) #9
  %723 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %723(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %724 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %724(%struct.rtl8169_private* %0, i32 31, i32 3020) #9
  %725 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i29.i = call i32 %725(%struct.rtl8169_private* %0, i32 20) #9
  %and.i.i425 = and i32 %call.i.i29.i, -257
  %726 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %726(%struct.rtl8169_private* %0, i32 20, i32 %and.i.i425) #9
  %727 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %727(%struct.rtl8169_private* %0, i32 31, i32 2628) #9
  %728 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i33.i = call i32 %728(%struct.rtl8169_private* %0, i32 17) #9
  %or.i34.i = or i32 %call.i.i33.i, 192
  %729 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %729(%struct.rtl8169_private* %0, i32 17, i32 %or.i34.i) #9
  %730 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %730(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %731 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %731(%struct.rtl8169_private* %0, i32 19, i32 32900) #9
  %732 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i39.i = call i32 %732(%struct.rtl8169_private* %0, i32 20) #9
  %and.i40.i = and i32 %call.i.i39.i, -24577
  %733 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %733(%struct.rtl8169_private* %0, i32 20, i32 %and.i40.i) #9
  %734 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i43.i = call i32 %734(%struct.rtl8169_private* %0, i32 16) #9
  %or.i44.i = or i32 %call.i.i43.i, 4099
  %735 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %735(%struct.rtl8169_private* %0, i32 16, i32 %or.i44.i) #9
  %736 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %736(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %737 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %737(%struct.rtl8169_private* %0, i32 31, i32 2635) #9
  %738 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i49.i426 = call i32 %738(%struct.rtl8169_private* %0, i32 17) #9
  %or.i50.i427 = or i32 %call.i.i49.i426, 4
  %739 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %739(%struct.rtl8169_private* %0, i32 17, i32 %or.i50.i427) #9
  %740 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %740(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %741 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %741(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %742 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %742(%struct.rtl8169_private* %0, i32 19, i32 32786) #9
  %743 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i56.i = call i32 %743(%struct.rtl8169_private* %0, i32 20) #9
  %or.i57.i = or i32 %call.i.i56.i, 32768
  %744 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %744(%struct.rtl8169_private* %0, i32 20, i32 %or.i57.i) #9
  %745 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %745(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %746 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %746(%struct.rtl8169_private* %0, i32 31, i32 3138) #9
  %747 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i62.i428 = call i32 %747(%struct.rtl8169_private* %0, i32 17) #9
  %and.i63.i429 = and i32 %call.i.i62.i428, -24577
  %or.i64.i = or i32 %and.i63.i429, 16384
  %748 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %748(%struct.rtl8169_private* %0, i32 17, i32 %or.i64.i) #9
  %749 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %749(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %750 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %750(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %751 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i430 = call i32 %751(%struct.rtl8169_private* %0, i32 16) #9
  %and.i431 = and i32 %call.i.i430, 4
  %tobool.i432 = icmp eq i32 %and.i431, 0
  br i1 %tobool.i432, label %rtl8168ep_1_hw_phy_config.exit, label %if.then.i433

if.then.i433:                                     ; preds = %sw.bb30
  %752 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %720, align 8
  %call.i.i69.i = call i32 %752(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %and.i70.i = and i32 %call.i.i69.i, -5
  %753 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %753(%struct.rtl8169_private* nonnull %0, i32 16, i32 %and.i70.i) #9
  br label %rtl8168ep_1_hw_phy_config.exit

rtl8168ep_1_hw_phy_config.exit:                   ; preds = %sw.bb30, %if.then.i433
  %754 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %718, align 8
  call void %754(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.bb31:                                          ; preds = %entry, %entry
  %write.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5584
  %755 = bitcast i8* %write.i.i to void (%struct.rtl8169_private*, i32, i32)**
  %756 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %756(%struct.rtl8169_private* %0, i32 31, i32 3020) #9
  %read.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5592
  %757 = bitcast i8* %read.i.i.i to i32 (%struct.rtl8169_private*, i32)**
  %758 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i.i = call i32 %758(%struct.rtl8169_private* %0, i32 20) #9
  %and.i.i = and i32 %call.i.i.i, -257
  %759 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %759(%struct.rtl8169_private* %0, i32 20, i32 %and.i.i) #9
  %760 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %760(%struct.rtl8169_private* %0, i32 31, i32 2628) #9
  %761 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i77.i = call i32 %761(%struct.rtl8169_private* %0, i32 17) #9
  %or.i.i = or i32 %call.i.i77.i, 192
  %762 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %762(%struct.rtl8169_private* %0, i32 17, i32 %or.i.i) #9
  %763 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %763(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %764 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %764(%struct.rtl8169_private* %0, i32 19, i32 32900) #9
  %765 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i82.i = call i32 %765(%struct.rtl8169_private* %0, i32 20) #9
  %and.i83.i = and i32 %call.i.i82.i, -24577
  %766 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %766(%struct.rtl8169_private* %0, i32 20, i32 %and.i83.i) #9
  %767 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i86.i = call i32 %767(%struct.rtl8169_private* %0, i32 16) #9
  %or.i87.i = or i32 %call.i.i86.i, 4099
  %768 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %768(%struct.rtl8169_private* %0, i32 16, i32 %or.i87.i) #9
  %769 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %769(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %770 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %770(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %771 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %771(%struct.rtl8169_private* %0, i32 19, i32 32786) #9
  %772 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i93.i = call i32 %772(%struct.rtl8169_private* %0, i32 20) #9
  %or.i94.i = or i32 %call.i.i93.i, 32768
  %773 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %773(%struct.rtl8169_private* %0, i32 20, i32 %or.i94.i) #9
  %774 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %774(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %775 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %775(%struct.rtl8169_private* %0, i32 31, i32 3138) #9
  %776 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i99.i = call i32 %776(%struct.rtl8169_private* %0, i32 17) #9
  %and.i100.i = and i32 %call.i.i99.i, -24577
  %or.i101.i = or i32 %and.i100.i, 16384
  %777 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %777(%struct.rtl8169_private* %0, i32 17, i32 %or.i101.i) #9
  %778 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %778(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %779 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %779(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %780 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %780(%struct.rtl8169_private* %0, i32 19, i32 33011) #9
  %781 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i107.i = call i32 %781(%struct.rtl8169_private* %0, i32 20) #9
  %and.i108.i = and i32 %call.i.i107.i, 255
  %or.i109.i = or i32 %and.i108.i, 35584
  %782 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %782(%struct.rtl8169_private* %0, i32 20, i32 %or.i109.i) #9
  %783 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %783(%struct.rtl8169_private* %0, i32 19, i32 33008) #9
  %784 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i113.i = call i32 %784(%struct.rtl8169_private* %0, i32 20) #9
  %and.i114.i = and i32 %call.i.i113.i, 255
  %or.i115.i = or i32 %and.i114.i, 14848
  %785 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %785(%struct.rtl8169_private* %0, i32 20, i32 %or.i115.i) #9
  %786 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %786(%struct.rtl8169_private* %0, i32 19, i32 33007) #9
  %787 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i119.i = call i32 %787(%struct.rtl8169_private* %0, i32 20) #9
  %and.i120.i = and i32 %call.i.i119.i, 255
  %or.i121.i = or i32 %and.i120.i, 1280
  %788 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %788(%struct.rtl8169_private* %0, i32 20, i32 %or.i121.i) #9
  %789 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %789(%struct.rtl8169_private* %0, i32 19, i32 33014) #9
  %790 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i125.i = call i32 %790(%struct.rtl8169_private* %0, i32 20) #9
  %and.i126.i = and i32 %call.i.i125.i, 255
  %or.i127.i = or i32 %and.i126.i, 28160
  %791 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %791(%struct.rtl8169_private* %0, i32 20, i32 %or.i127.i) #9
  %792 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %792(%struct.rtl8169_private* %0, i32 19, i32 33004) #9
  %793 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i131.i = call i32 %793(%struct.rtl8169_private* %0, i32 20) #9
  %and.i132.i = and i32 %call.i.i131.i, 255
  %or.i133.i = or i32 %and.i132.i, 26624
  %794 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %794(%struct.rtl8169_private* %0, i32 20, i32 %or.i133.i) #9
  %795 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %795(%struct.rtl8169_private* %0, i32 19, i32 33005) #9
  %796 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i137.i = call i32 %796(%struct.rtl8169_private* %0, i32 20) #9
  %and.i138.i = and i32 %call.i.i137.i, 255
  %or.i139.i = or i32 %and.i138.i, 31744
  %797 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %797(%struct.rtl8169_private* %0, i32 20, i32 %or.i139.i) #9
  %798 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %798(%struct.rtl8169_private* %0, i32 19, i32 33010) #9
  %799 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i143.i = call i32 %799(%struct.rtl8169_private* %0, i32 20) #9
  %and.i144.i = and i32 %call.i.i143.i, 255
  %or.i145.i = or i32 %and.i144.i, 62464
  %800 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %800(%struct.rtl8169_private* %0, i32 20, i32 %or.i145.i) #9
  %801 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %801(%struct.rtl8169_private* %0, i32 19, i32 33012) #9
  %802 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i149.i = call i32 %802(%struct.rtl8169_private* %0, i32 20) #9
  %and.i150.i = and i32 %call.i.i149.i, 255
  %or.i151.i = or i32 %and.i150.i, 34048
  %803 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %803(%struct.rtl8169_private* %0, i32 20, i32 %or.i151.i) #9
  %804 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %804(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %805 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %805(%struct.rtl8169_private* %0, i32 19, i32 33040) #9
  %806 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i156.i = call i32 %806(%struct.rtl8169_private* %0, i32 20) #9
  %and.i157.i = and i32 %call.i.i156.i, 255
  %or.i158.i = or i32 %and.i157.i, 43008
  %807 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %807(%struct.rtl8169_private* %0, i32 20, i32 %or.i158.i) #9
  %808 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %808(%struct.rtl8169_private* %0, i32 19, i32 33039) #9
  %809 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i162.i = call i32 %809(%struct.rtl8169_private* %0, i32 20) #9
  %and.i163.i = and i32 %call.i.i162.i, 255
  %or.i164.i = or i32 %and.i163.i, 7424
  %810 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %810(%struct.rtl8169_private* %0, i32 20, i32 %or.i164.i) #9
  %811 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %811(%struct.rtl8169_private* %0, i32 19, i32 33041) #9
  %812 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i168.i = call i32 %812(%struct.rtl8169_private* %0, i32 20) #9
  %and.i169.i = and i32 %call.i.i168.i, 255
  %or.i170.i = or i32 %and.i169.i, 62720
  %813 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %813(%struct.rtl8169_private* %0, i32 20, i32 %or.i170.i) #9
  %814 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %814(%struct.rtl8169_private* %0, i32 19, i32 33043) #9
  %815 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i174.i = call i32 %815(%struct.rtl8169_private* %0, i32 20) #9
  %and.i175.i = and i32 %call.i.i174.i, 255
  %or.i176.i = or i32 %and.i175.i, 24832
  %816 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %816(%struct.rtl8169_private* %0, i32 20, i32 %or.i176.i) #9
  %817 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %817(%struct.rtl8169_private* %0, i32 19, i32 33045) #9
  %818 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i180.i = call i32 %818(%struct.rtl8169_private* %0, i32 20) #9
  %and.i181.i = and i32 %call.i.i180.i, 255
  %or.i182.i = or i32 %and.i181.i, 37376
  %819 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %819(%struct.rtl8169_private* %0, i32 20, i32 %or.i182.i) #9
  %820 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %820(%struct.rtl8169_private* %0, i32 19, i32 33038) #9
  %821 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i186.i = call i32 %821(%struct.rtl8169_private* %0, i32 20) #9
  %and.i187.i = and i32 %call.i.i186.i, 255
  %or.i188.i = or i32 %and.i187.i, 1024
  %822 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %822(%struct.rtl8169_private* %0, i32 20, i32 %or.i188.i) #9
  %823 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %823(%struct.rtl8169_private* %0, i32 19, i32 33036) #9
  %824 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i192.i = call i32 %824(%struct.rtl8169_private* %0, i32 20) #9
  %and.i193.i = and i32 %call.i.i192.i, 255
  %or.i194.i = or i32 %and.i193.i, 31744
  %825 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %825(%struct.rtl8169_private* %0, i32 20, i32 %or.i194.i) #9
  %826 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %826(%struct.rtl8169_private* %0, i32 19, i32 33035) #9
  %827 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i198.i = call i32 %827(%struct.rtl8169_private* %0, i32 20) #9
  %and.i199.i = and i32 %call.i.i198.i, 255
  %or.i200.i = or i32 %and.i199.i, 23040
  %828 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %828(%struct.rtl8169_private* %0, i32 20, i32 %or.i200.i) #9
  %829 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %829(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %830 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %830(%struct.rtl8169_private* %0, i32 19, i32 32977) #9
  %831 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i205.i = call i32 %831(%struct.rtl8169_private* %0, i32 20) #9
  %and.i206.i = and i32 %call.i.i205.i, 255
  %or.i207.i = or i32 %and.i206.i, 65280
  %832 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %832(%struct.rtl8169_private* %0, i32 20, i32 %or.i207.i) #9
  %833 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %833(%struct.rtl8169_private* %0, i32 19, i32 32973) #9
  %834 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i211.i = call i32 %834(%struct.rtl8169_private* %0, i32 20) #9
  %and.i212.i = and i32 %call.i.i211.i, 255
  %or.i213.i = or i32 %and.i212.i, 40448
  %835 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %835(%struct.rtl8169_private* %0, i32 20, i32 %or.i213.i) #9
  %836 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %836(%struct.rtl8169_private* %0, i32 19, i32 32979) #9
  %837 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i217.i = call i32 %837(%struct.rtl8169_private* %0, i32 20) #9
  %and.i218.i = and i32 %call.i.i217.i, 255
  %or.i219.i = or i32 %and.i218.i, 3584
  %838 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %838(%struct.rtl8169_private* %0, i32 20, i32 %or.i219.i) #9
  %839 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %839(%struct.rtl8169_private* %0, i32 19, i32 32981) #9
  %840 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i223.i = call i32 %840(%struct.rtl8169_private* %0, i32 20) #9
  %and.i224.i = and i32 %call.i.i223.i, 255
  %or.i225.i = or i32 %and.i224.i, 51712
  %841 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %841(%struct.rtl8169_private* %0, i32 20, i32 %or.i225.i) #9
  %842 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %842(%struct.rtl8169_private* %0, i32 19, i32 32983) #9
  %843 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i229.i = call i32 %843(%struct.rtl8169_private* %0, i32 20) #9
  %and.i230.i = and i32 %call.i.i229.i, 255
  %or.i231.i = or i32 %and.i230.i, 33792
  %844 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %844(%struct.rtl8169_private* %0, i32 20, i32 %or.i231.i) #9
  %845 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %845(%struct.rtl8169_private* %0, i32 31, i32 3021) #9
  %846 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %846(%struct.rtl8169_private* %0, i32 20, i32 20581) #9
  %847 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %847(%struct.rtl8169_private* %0, i32 20, i32 53349) #9
  %848 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %848(%struct.rtl8169_private* %0, i32 31, i32 3016) #9
  %849 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %849(%struct.rtl8169_private* %0, i32 18, i32 237) #9
  %850 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %850(%struct.rtl8169_private* %0, i32 31, i32 3021) #9
  %851 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %851(%struct.rtl8169_private* %0, i32 20, i32 4197) #9
  %852 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %852(%struct.rtl8169_private* %0, i32 20, i32 36965) #9
  %853 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %853(%struct.rtl8169_private* %0, i32 20, i32 4197) #9
  %854 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %854(%struct.rtl8169_private* %0, i32 31, i32 0) #9
  %855 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %855(%struct.rtl8169_private* %0, i32 31, i32 2627) #9
  %856 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i = call i32 %856(%struct.rtl8169_private* %0, i32 16) #9
  %and.i = and i32 %call.i.i, 4
  %tobool.i = icmp eq i32 %and.i, 0
  br i1 %tobool.i, label %rtl8168ep_2_hw_phy_config.exit, label %if.then.i

if.then.i:                                        ; preds = %sw.bb31
  %857 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %757, align 8
  %call.i.i245.i = call i32 %857(%struct.rtl8169_private* nonnull %0, i32 16) #9
  %and.i246.i = and i32 %call.i.i245.i, -5
  %858 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %858(%struct.rtl8169_private* nonnull %0, i32 16, i32 %and.i246.i) #9
  br label %rtl8168ep_2_hw_phy_config.exit

rtl8168ep_2_hw_phy_config.exit:                   ; preds = %sw.bb31, %if.then.i
  %859 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %755, align 8
  call void %859(%struct.rtl8169_private* nonnull %0, i32 31, i32 0) #9
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body.i.i.i16.i, %while.body.i.i200, %while.body.i.i89, %while.body.i.i, %if.then5.i.i.i22.i, %do.body.i.i.i20.i, %if.end.i.i, %lor.lhs.false.i.i, %rtl_writephy_batch.exit.i, %entry, %rtl8168ep_2_hw_phy_config.exit, %rtl8168ep_1_hw_phy_config.exit, %rtl8168h_2_hw_phy_config.exit, %rtl8168h_1_hw_phy_config.exit, %sw.bb27, %rtl8168g_1_hw_phy_config.exit, %rtl8411_hw_phy_config.exit, %rtl8402_hw_phy_config.exit, %sw.bb22, %rtl8168f_1_hw_phy_config.exit, %rtl8168e_2_hw_phy_config.exit, %rtl8168e_1_hw_phy_config.exit, %sw.bb18, %sw.bb17, %rtl8168d_2_hw_phy_config.exit, %rtl8168d_1_hw_phy_config.exit, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb1
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl8168c_3_hw_phy_config(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %write.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %0 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %0(%struct.rtl8169_private* %tp, i32 31, i32 1) #9
  %1 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %1(%struct.rtl8169_private* %tp, i32 18, i32 8960) #9
  %2 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %2(%struct.rtl8169_private* %tp, i32 29, i32 15768) #9
  %3 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %3(%struct.rtl8169_private* %tp, i32 31, i32 2) #9
  %4 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %4(%struct.rtl8169_private* %tp, i32 12, i32 32440) #9
  %5 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %5(%struct.rtl8169_private* %tp, i32 6, i32 21601) #9
  %6 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %6(%struct.rtl8169_private* %tp, i32 31, i32 3) #9
  %7 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %7(%struct.rtl8169_private* %tp, i32 22, i32 3850) #9
  %8 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %8(%struct.rtl8169_private* %tp, i32 31, i32 0) #9
  %read.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 1
  %9 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i, align 8
  %call.i.i = call i32 %9(%struct.rtl8169_private* nonnull %tp, i32 22) #9
  %or.i = or i32 %call.i.i, 1
  %10 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %10(%struct.rtl8169_private* nonnull %tp, i32 22, i32 %or.i) #9
  %11 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i, align 8
  %call.i.i7 = call i32 %11(%struct.rtl8169_private* nonnull %tp, i32 20) #9
  %or.i8 = or i32 %call.i.i7, 32
  %12 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %12(%struct.rtl8169_private* nonnull %tp, i32 20, i32 %or.i8) #9
  %13 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i, align 8
  %call.i.i11 = call i32 %13(%struct.rtl8169_private* nonnull %tp, i32 13) #9
  %or.i12 = or i32 %call.i.i11, 32
  %14 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %14(%struct.rtl8169_private* nonnull %tp, i32 13, i32 %or.i12) #9
  %15 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %15(%struct.rtl8169_private* nonnull %tp, i32 31, i32 0) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_apply_firmware(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %rtl_fw1 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 41
  %0 = load %struct.rtl_fw*, %struct.rtl_fw** %rtl_fw1, align 8
  %tobool.i = icmp eq %struct.rtl_fw* %0, null
  %cmp.i = icmp ugt %struct.rtl_fw* %0, inttoptr (i64 -4096 to %struct.rtl_fw*)
  %.cmp.i = or i1 %tobool.i, %cmp.i
  br i1 %.cmp.i, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mdio_ops.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21
  %write.i = getelementptr inbounds %struct.mdio_ops, %struct.mdio_ops* %mdio_ops.i, i64 0, i32 0
  %1 = bitcast %struct.mdio_ops* %mdio_ops.i to i64*
  %2 = load i64, i64* %1, align 8
  %read.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 1
  %3 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i, align 8
  %size.i = getelementptr inbounds %struct.rtl_fw, %struct.rtl_fw* %0, i64 0, i32 2, i32 1
  %4 = load i64, i64* %size.i, align 8
  %cmp140.i = icmp eq i64 %4, 0
  br i1 %cmp140.i, label %rtl_phy_write_fw.exit, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %if.then
  %code.i = getelementptr inbounds %struct.rtl_fw, %struct.rtl_fw* %0, i64 0, i32 2, i32 0
  %write.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  br label %for.body.i

for.body.i:                                       ; preds = %cleanup.cont.i, %for.body.lr.ph.i
  %predata.0143.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %predata.2.ph.i, %cleanup.cont.i ]
  %count.0142.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %count.2.ph.i, %cleanup.cont.i ]
  %index.0141.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %index.4.ph.i, %cleanup.cont.i ]
  %5 = load i32*, i32** %code.i, align 8
  %arrayidx.i = getelementptr i32, i32* %5, i64 %index.0141.i
  %6 = load i32, i32* %arrayidx.i, align 4
  %and.i = and i32 %6, 65535
  %and3.i = lshr i32 %6, 16
  %shr.i = and i32 %and3.i, 4095
  %tobool.i5 = icmp eq i32 %6, 0
  br i1 %tobool.i5, label %rtl_phy_write_fw.exit, label %if.end.i

if.end.i:                                         ; preds = %for.body.i
  %7 = lshr i32 %6, 28
  %8 = xor i32 %7, 8
  %trunc.i = trunc i32 %8 to i4
  switch i4 %trunc.i, label %do.body.i [
    i4 -8, label %sw.bb.i
    i4 -7, label %sw.bb6.i
    i4 -6, label %sw.bb8.i
    i4 -5, label %sw.bb11.i
    i4 -4, label %sw.bb12.i
    i4 -1, label %sw.bb28.i
    i4 0, label %sw.bb30.i
    i4 1, label %sw.bb32.i
    i4 2, label %sw.bb36.i
    i4 3, label %sw.bb44.i
    i4 4, label %sw.bb52.i
    i4 5, label %sw.bb54.i
    i4 6, label %sw.bb58.i
  ]

sw.bb.i:                                          ; preds = %if.end.i
  %9 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i, align 8
  %call.i.i = call i32 %9(%struct.rtl8169_private* %tp, i32 %shr.i) #9
  %inc.i = add i32 %count.0142.i, 1
  %inc5.i = add i64 %index.0141.i, 1
  br label %cleanup.cont.i

sw.bb6.i:                                         ; preds = %if.end.i
  %or.i = or i32 %and.i, %predata.0143.i
  %inc7.i = add i64 %index.0141.i, 1
  br label %cleanup.cont.i

sw.bb8.i:                                         ; preds = %if.end.i
  %and9.i = and i32 %and.i, %predata.0143.i
  %inc10.i = add i64 %index.0141.i, 1
  br label %cleanup.cont.i

sw.bb11.i:                                        ; preds = %if.end.i
  %conv.i = zext i32 %shr.i to i64
  %sub.i = sub i64 %index.0141.i, %conv.i
  br label %cleanup.cont.i

sw.bb12.i:                                        ; preds = %if.end.i
  %trunc137.i = trunc i32 %6 to i16
  switch i16 %trunc137.i, label %if.end26.i [
    i16 0, label %if.then15.i
    i16 1, label %if.then22.i
  ]

if.then15.i:                                      ; preds = %sw.bb12.i
  store i64 %2, i64* %1, align 8
  br label %if.end26.sink.split.i

if.then22.i:                                      ; preds = %sw.bb12.i
  store void (%struct.rtl8169_private*, i32, i32)* @mac_mcu_write, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  br label %if.end26.sink.split.i

if.end26.sink.split.i:                            ; preds = %if.then22.i, %if.then15.i
  %mac_mcu_read.sink.i = phi i32 (%struct.rtl8169_private*, i32)* [ @mac_mcu_read, %if.then22.i ], [ %3, %if.then15.i ]
  store i32 (%struct.rtl8169_private*, i32)* %mac_mcu_read.sink.i, i32 (%struct.rtl8169_private*, i32)** %read.i, align 8
  br label %if.end26.i

if.end26.i:                                       ; preds = %if.end26.sink.split.i, %sw.bb12.i
  %inc27.i = add i64 %index.0141.i, 1
  br label %cleanup.cont.i

sw.bb28.i:                                        ; preds = %if.end.i
  %inc29.i = add i64 %index.0141.i, 1
  br label %cleanup.cont.i

sw.bb30.i:                                        ; preds = %if.end.i
  %10 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %10(%struct.rtl8169_private* %tp, i32 %shr.i, i32 %and.i) #9
  %inc31.i = add i64 %index.0141.i, 1
  br label %cleanup.cont.i

sw.bb32.i:                                        ; preds = %if.end.i
  %cmp33.i = icmp eq i32 %count.0142.i, %and.i
  %conv35.i = select i1 %cmp33.i, i64 2, i64 1
  %add.i = add i64 %conv35.i, %index.0141.i
  br label %cleanup.cont.i

sw.bb36.i:                                        ; preds = %if.end.i
  %cmp37.i = icmp eq i32 %predata.0143.i, %and.i
  %conv40.i = zext i32 %shr.i to i64
  %add41.i = select i1 %cmp37.i, i64 %conv40.i, i64 0
  %index.1.i = add i64 %index.0141.i, 1
  %inc43.i = add i64 %index.1.i, %add41.i
  br label %cleanup.cont.i

sw.bb44.i:                                        ; preds = %if.end.i
  %cmp45.i = icmp eq i32 %predata.0143.i, %and.i
  %conv48.i = zext i32 %shr.i to i64
  %add49.i = select i1 %cmp45.i, i64 0, i64 %conv48.i
  %index.2.i = add i64 %index.0141.i, 1
  %inc51.i = add i64 %index.2.i, %add49.i
  br label %cleanup.cont.i

sw.bb52.i:                                        ; preds = %if.end.i
  %11 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %11(%struct.rtl8169_private* %tp, i32 %shr.i, i32 %predata.0143.i) #9
  %inc53.i = add i64 %index.0141.i, 1
  br label %cleanup.cont.i

sw.bb54.i:                                        ; preds = %if.end.i
  %add55.i = add nuw nsw i32 %shr.i, 1
  %conv56.i = zext i32 %add55.i to i64
  %add57.i = add i64 %index.0141.i, %conv56.i
  br label %cleanup.cont.i

sw.bb58.i:                                        ; preds = %if.end.i
  %tobool60138.i = icmp eq i32 %and.i, 0
  br i1 %tobool60138.i, label %while.end.i, label %while.body.lr.ph.i

while.body.lr.ph.i:                               ; preds = %sw.bb58.i
  %conv59.i = zext i32 %and.i to i64
  br label %while.body.i

while.body.i:                                     ; preds = %while.body.i, %while.body.lr.ph.i
  %__ms.0139.i = phi i64 [ %conv59.i, %while.body.lr.ph.i ], [ %dec.i, %while.body.i ]
  %dec.i = add nsw i64 %__ms.0139.i, -1
  call void @__const_udelay(i64 4295000) #9
  %tobool60.i = icmp eq i64 %dec.i, 0
  br i1 %tobool60.i, label %while.end.i, label %while.body.i

while.end.i:                                      ; preds = %while.body.i, %sw.bb58.i
  %inc61.i = add i64 %index.0141.i, 1
  br label %cleanup.cont.i

do.body.i:                                        ; preds = %if.end.i
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 2724, i64 12) #10, !srcloc !44
  br label %do.body62.i

do.body62.i:                                      ; preds = %do.body62.i, %do.body.i
  br label %do.body62.i

cleanup.cont.i:                                   ; preds = %while.end.i, %sw.bb54.i, %sw.bb52.i, %sw.bb44.i, %sw.bb36.i, %sw.bb32.i, %sw.bb30.i, %sw.bb28.i, %if.end26.i, %sw.bb11.i, %sw.bb8.i, %sw.bb6.i, %sw.bb.i
  %index.4.ph.i = phi i64 [ %inc5.i, %sw.bb.i ], [ %inc7.i, %sw.bb6.i ], [ %inc10.i, %sw.bb8.i ], [ %sub.i, %sw.bb11.i ], [ %inc27.i, %if.end26.i ], [ %inc29.i, %sw.bb28.i ], [ %inc31.i, %sw.bb30.i ], [ %add.i, %sw.bb32.i ], [ %inc43.i, %sw.bb36.i ], [ %inc51.i, %sw.bb44.i ], [ %inc53.i, %sw.bb52.i ], [ %add57.i, %sw.bb54.i ], [ %inc61.i, %while.end.i ]
  %count.2.ph.i = phi i32 [ %inc.i, %sw.bb.i ], [ %count.0142.i, %sw.bb6.i ], [ %count.0142.i, %sw.bb8.i ], [ %count.0142.i, %sw.bb11.i ], [ %count.0142.i, %if.end26.i ], [ 0, %sw.bb28.i ], [ %count.0142.i, %sw.bb30.i ], [ %count.0142.i, %sw.bb32.i ], [ %count.0142.i, %sw.bb36.i ], [ %count.0142.i, %sw.bb44.i ], [ %count.0142.i, %sw.bb52.i ], [ %count.0142.i, %sw.bb54.i ], [ %count.0142.i, %while.end.i ]
  %predata.2.ph.i = phi i32 [ %call.i.i, %sw.bb.i ], [ %or.i, %sw.bb6.i ], [ %and9.i, %sw.bb8.i ], [ %predata.0143.i, %sw.bb11.i ], [ %predata.0143.i, %if.end26.i ], [ %predata.0143.i, %sw.bb28.i ], [ %predata.0143.i, %sw.bb30.i ], [ %predata.0143.i, %sw.bb32.i ], [ %predata.0143.i, %sw.bb36.i ], [ %predata.0143.i, %sw.bb44.i ], [ %predata.0143.i, %sw.bb52.i ], [ %predata.0143.i, %sw.bb54.i ], [ %predata.0143.i, %while.end.i ]
  %12 = load i64, i64* %size.i, align 8
  %cmp.i6 = icmp ult i64 %index.4.ph.i, %12
  br i1 %cmp.i6, label %for.body.i, label %rtl_phy_write_fw.exit

rtl_phy_write_fw.exit:                            ; preds = %for.body.i, %cleanup.cont.i, %if.then
  store i64 %2, i64* %1, align 8
  store i32 (%struct.rtl8169_private*, i32)* %3, i32 (%struct.rtl8169_private*, i32)** %read.i, align 8
  br label %if.end

if.end:                                           ; preds = %rtl_phy_write_fw.exit, %entry
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @mac_mcu_write(%struct.rtl8169_private* nocapture %tp, i32 %reg, i32 %value) #0 {
entry:
  %cmp = icmp eq i32 %reg, 31
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %shl = shl i32 %value, 4
  %ocp_base = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 42
  store i32 %shl, i32* %ocp_base, align 8
  br label %return

if.end:                                           ; preds = %entry
  %ocp_base1 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 42
  %0 = load i32, i32* %ocp_base1, align 8
  %add = add i32 %0, %reg
  %and.i.i = and i32 %add, -65535
  %tobool.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.i.i, label %if.end.i, label %do.body.i.i

do.body.i.i:                                      ; preds = %if.end
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %1 = load i32, i32* %msg_enable.i.i, align 8
  %and1.i.i = and i32 %1, 1
  %tobool2.i.i = icmp eq i32 %and1.i.i, 0
  br i1 %tobool2.i.i, label %return, label %if.then3.i.i

if.then3.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %2 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0), i32 %add) #9
  br label %return

if.end.i:                                         ; preds = %if.end
  %mmio_addr.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %3 = load i8*, i8** %mmio_addr.i, align 8
  %shl.i = shl i32 %add, 15
  %or.i = or i32 %shl.i, %value
  %or1.i = or i32 %or.i, -2147483648
  %add.ptr.i = getelementptr i8, i8* %3, i64 176
  %4 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i, i32* %4) #10, !srcloc !8
  br label %return

return:                                           ; preds = %if.end.i, %if.then3.i.i, %do.body.i.i, %if.then
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @mac_mcu_read(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg) #0 {
entry:
  %ocp_base = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 42
  %0 = load i32, i32* %ocp_base, align 8
  %add = add i32 %0, %reg
  %and.i.i = and i32 %add, -65535
  %tobool.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.i.i, label %if.end.i, label %do.body.i.i

do.body.i.i:                                      ; preds = %entry
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %1 = load i32, i32* %msg_enable.i.i, align 8
  %and1.i.i = and i32 %1, 1
  %tobool2.i.i = icmp eq i32 %and1.i.i, 0
  br i1 %tobool2.i.i, label %r8168_mac_ocp_read.exit, label %if.then3.i.i

if.then3.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %2 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0), i32 %add) #9
  br label %r8168_mac_ocp_read.exit

if.end.i:                                         ; preds = %entry
  %mmio_addr.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %3 = load i8*, i8** %mmio_addr.i, align 8
  %shl.i = shl i32 %add, 15
  %add.ptr.i = getelementptr i8, i8* %3, i64 176
  %4 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i, i32* %4) #10, !srcloc !8
  %5 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %4) #10, !srcloc !2
  %phitmp = and i32 %5, 65535
  br label %r8168_mac_ocp_read.exit

r8168_mac_ocp_read.exit:                          ; preds = %do.body.i.i, %if.then3.i.i, %if.end.i
  %retval.0.i = phi i32 [ %phitmp, %if.end.i ], [ 0, %do.body.i.i ], [ 0, %if.then3.i.i ]
  ret i32 %retval.0.i
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_rar_exgmac_set(%struct.rtl8169_private* nocapture readonly %tp, i8* nocapture readonly %addr) unnamed_addr #0 {
entry:
  %e = alloca [4 x %struct.exgmac_reg], align 16
  %0 = load i8, i8* %addr, align 1
  %conv = zext i8 %0 to i32
  %arrayidx1 = getelementptr i8, i8* %addr, i64 1
  %1 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %1 to i32
  %shl = shl nuw nsw i32 %conv2, 8
  %or = or i32 %shl, %conv
  %arrayidx4 = getelementptr i8, i8* %addr, i64 2
  %2 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %2 to i32
  %arrayidx6 = getelementptr i8, i8* %addr, i64 3
  %3 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %3 to i32
  %shl8 = shl nuw nsw i32 %conv7, 8
  %or9 = or i32 %shl8, %conv5
  %arrayidx12 = getelementptr i8, i8* %addr, i64 4
  %4 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %4 to i32
  %arrayidx14 = getelementptr i8, i8* %addr, i64 5
  %5 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %5 to i32
  %shl16 = shl nuw nsw i32 %conv15, 8
  %or17 = or i32 %shl16, %conv13
  %6 = bitcast [4 x %struct.exgmac_reg]* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10
  %addr20 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 0, i32 0
  store i16 224, i16* %addr20, align 16
  %mask = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 0, i32 1
  store i16 -4096, i16* %mask, align 2
  %val = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 0, i32 2
  %shl25 = shl nuw i32 %or9, 16
  %or26 = or i32 %shl25, %or
  store i32 %or26, i32* %val, align 4
  %addr28 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 1, i32 0
  store i16 228, i16* %addr28, align 8
  %mask29 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 1, i32 1
  store i16 -4096, i16* %mask29, align 2
  %val30 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 1, i32 2
  store i32 %or17, i32* %val30, align 4
  %addr34 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 2, i32 0
  store i16 240, i16* %addr34, align 16
  %mask35 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 2, i32 1
  store i16 -4096, i16* %mask35, align 2
  %val36 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 2, i32 2
  %shl39 = shl nuw i32 %or, 16
  store i32 %shl39, i32* %val36, align 4
  %addr41 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 3, i32 0
  store i16 244, i16* %addr41, align 8
  %mask42 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 3, i32 1
  store i16 -4096, i16* %mask42, align 2
  %val43 = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 3, i32 2
  %shl48 = shl nuw i32 %or17, 16
  %or49 = or i32 %shl48, %or9
  store i32 %or49, i32* %val43, align 4
  %arraydecay = getelementptr inbounds [4 x %struct.exgmac_reg], [4 x %struct.exgmac_reg]* %e, i64 0, i64 0
  %mmio_addr.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %dev.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  br label %while.body.i

while.body.i:                                     ; preds = %rtl_eri_write.exit.i, %entry
  %len.addr.03.i = phi i32 [ 4, %entry ], [ %dec.i, %rtl_eri_write.exit.i ]
  %r.addr.02.i = phi %struct.exgmac_reg* [ %arraydecay, %entry ], [ %incdec.ptr.i, %rtl_eri_write.exit.i ]
  %dec.i = add nsw i32 %len.addr.03.i, -1
  %addr.i = getelementptr inbounds %struct.exgmac_reg, %struct.exgmac_reg* %r.addr.02.i, i64 0, i32 0
  %7 = load i16, i16* %addr.i, align 4
  %mask.i = getelementptr inbounds %struct.exgmac_reg, %struct.exgmac_reg* %r.addr.02.i, i64 0, i32 1
  %8 = load i16, i16* %mask.i, align 2
  %9 = load i8*, i8** %mmio_addr.i.i, align 8
  %10 = and i16 %7, 3
  %tobool.i.i = icmp ne i16 %10, 0
  %cmp.i.i = icmp eq i16 %8, 0
  %11 = or i1 %cmp.i.i, %tobool.i.i
  br i1 %11, label %do.body3.i.i, label %do.end8.i.i, !prof !10

do.body3.i.i:                                     ; preds = %while.body.i
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 1263, i64 12) #10, !srcloc !45
  br label %do.body4.i.i

do.body4.i.i:                                     ; preds = %do.body4.i.i, %do.body3.i.i
  br label %do.body4.i.i

do.end8.i.i:                                      ; preds = %while.body.i
  %val.i = getelementptr inbounds %struct.exgmac_reg, %struct.exgmac_reg* %r.addr.02.i, i64 0, i32 2
  %12 = load i32, i32* %val.i, align 4
  %add.ptr.i.i = getelementptr i8, i8* %9, i64 112
  %13 = bitcast i8* %add.ptr.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %12, i32* %13) #10, !srcloc !8
  %or.i1.i = or i16 %8, %7
  %or.i.i = zext i16 %or.i1.i to i32
  %or10.i.i = or i32 %or.i.i, -2147483648
  %add.ptr11.i.i = getelementptr i8, i8* %9, i64 116
  %14 = bitcast i8* %add.ptr11.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or10.i.i, i32* %14) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %do.end8.i.i
  %i.017.i.i.i.i = phi i32 [ 0, %do.end8.i.i ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %15 = load i8*, i8** %mmio_addr.i.i, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %15, i64 116
  %16 = bitcast i8* %add.ptr.i.i.i to i32*
  %17 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %16) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %17, 0
  br i1 %tobool.i.i.i, label %for.cond.i.i.i.i, label %rtl_eri_write.exit.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %18 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %18, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_eri_write.exit.i, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %19 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %19, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit.i

rtl_eri_write.exit.i:                             ; preds = %for.body.i.i.i.i, %if.then5.i.i.i.i, %do.body.i.i.i.i
  %incdec.ptr.i = getelementptr %struct.exgmac_reg, %struct.exgmac_reg* %r.addr.02.i, i64 1
  %cmp.i = icmp eq i32 %dec.i, 0
  br i1 %cmp.i, label %rtl_write_exgmac_batch.exit, label %while.body.i

rtl_write_exgmac_batch.exit:                      ; preds = %rtl_eri_write.exit.i
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl8168f_hw_phy_config(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %write.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %0 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %0(%struct.rtl8169_private* %tp, i32 31, i32 5) #9
  %1 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %1(%struct.rtl8169_private* %tp, i32 5, i32 35712) #9
  %read.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 1
  %2 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i, align 8
  %call.i.i = call i32 %2(%struct.rtl8169_private* %tp, i32 6) #9
  %or.i = or i32 %call.i.i, 6
  %3 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %3(%struct.rtl8169_private* %tp, i32 6, i32 %or.i) #9
  %4 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %4(%struct.rtl8169_private* %tp, i32 31, i32 0) #9
  %5 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %5(%struct.rtl8169_private* %tp, i32 31, i32 7) #9
  %6 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %6(%struct.rtl8169_private* %tp, i32 30, i32 45) #9
  %7 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i, align 8
  %call.i.i18 = call i32 %7(%struct.rtl8169_private* %tp, i32 24) #9
  %or.i19 = or i32 %call.i.i18, 16
  %8 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %8(%struct.rtl8169_private* %tp, i32 24, i32 %or.i19) #9
  %9 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %9(%struct.rtl8169_private* %tp, i32 31, i32 0) #9
  %10 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i, align 8
  %call.i.i23 = call i32 %10(%struct.rtl8169_private* %tp, i32 20) #9
  %or.i24 = or i32 %call.i.i23, 32768
  %11 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %11(%struct.rtl8169_private* %tp, i32 20, i32 %or.i24) #9
  %12 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %12(%struct.rtl8169_private* %tp, i32 31, i32 5) #9
  %13 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %13(%struct.rtl8169_private* %tp, i32 5, i32 35718) #9
  %14 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i, align 8
  %call.i.i29 = call i32 %14(%struct.rtl8169_private* %tp, i32 6) #9
  %or.i30 = or i32 %call.i.i29, 1
  %15 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %15(%struct.rtl8169_private* %tp, i32 6, i32 %or.i30) #9
  %16 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i, align 8
  call void %16(%struct.rtl8169_private* %tp, i32 31, i32 0) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc zeroext i1 @rtl8169_update_counters(%struct.net_device* nocapture readonly %dev) unnamed_addr #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %mmio_addr = bitcast i8* %add.ptr.i to i8**
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 55
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %2 = and i8 %1, 8
  %cmp = icmp eq i8 %2, 0
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %mmio_addr, align 8
  %counters_phys_addr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5848
  %4 = bitcast i8* %counters_phys_addr.i to i64*
  %5 = load i64, i64* %4, align 8
  %shr.i = lshr i64 %5, 32
  %conv.i = trunc i64 %shr.i to i32
  %add.ptr.i8 = getelementptr i8, i8* %3, i64 20
  %6 = bitcast i8* %add.ptr.i8 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv.i, i32* %6) #10, !srcloc !8
  %conv1.i = trunc i64 %5 to i32
  %add.ptr2.i = getelementptr i8, i8* %3, i64 16
  %7 = bitcast i8* %add.ptr2.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %conv1.i, i32* %7) #10, !srcloc !8
  %or.i = or i32 %conv1.i, 8
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i, i32* %7) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 999
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %if.end
  %i.017.i.i.i = phi i32 [ 0, %if.end ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 10) #9
  %8 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i19.i = getelementptr i8, i8* %8, i64 16
  %9 = bitcast i8* %add.ptr.i19.i to i32*
  %10 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %9) #10, !srcloc !2
  %and.i.i = and i32 %10, 9
  %tobool.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.i.i, label %rtl8169_do_counters.exit, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %11 = bitcast i8* %msg_enable.i.i.i to i32*
  %12 = load i32, i32* %11, align 8
  %and.i.i.i = and i32 %12, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %rtl8169_do_counters.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %13 = bitcast i8* %dev.i.i.i to %struct.net_device**
  %14 = load %struct.net_device*, %struct.net_device** %13, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %14, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.45, i64 0, i64 0), i32 1, i32 1000, i32 10) #9
  br label %rtl8169_do_counters.exit

rtl8169_do_counters.exit:                         ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  %retval.0.i.i.i = phi i1 [ false, %do.body.i.i.i ], [ false, %if.then5.i.i.i ], [ true, %for.body.i.i.i ]
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %7) #10, !srcloc !8
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %6) #10, !srcloc !8
  br label %cleanup

cleanup:                                          ; preds = %entry, %rtl8169_do_counters.exit
  %retval.0 = phi i1 [ %retval.0.i.i.i, %rtl8169_do_counters.exit ], [ true, %entry ]
  ret i1 %retval.0
}

; Function Attrs: noredzone
declare void @mutex_unlock(%struct.mutex*) local_unnamed_addr #1

; Function Attrs: noredzone
declare zeroext i1 @cancel_work_sync(%struct.work_struct*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @free_irq(i32, i8*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @del_timer_sync(%struct.timer_list*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @__pm_runtime_idle(%struct.device*, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @skb_checksum_help(%struct.sk_buff*) local_unnamed_addr #1

; Function Attrs: noredzone
declare %struct.sk_buff* @__skb_gso_segment(%struct.sk_buff*, i64, i1 zeroext) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @skb_tstamp_tx(%struct.sk_buff*, %struct.skb_shared_hwtstamps*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @netdev_update_features(%struct.net_device*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @dma_supported(%struct.device*, i64) local_unnamed_addr #1

; Function Attrs: noredzone
declare i8* @ioremap_nocache(i64, i64) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_hw_init_8168g(%struct.rtl8169_private* nocapture %tp) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %ocp_base = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 42
  store i32 41984, i32* %ocp_base, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 240
  %1 = bitcast i8* %add.ptr to i32*
  %2 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %or = or i32 %2, 524288
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or, i32* %1) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 41
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 100) #9
  %3 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %3, i64 64
  %4 = bitcast i8* %add.ptr.i to i32*
  %5 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %4) #10, !srcloc !2
  %and.i = and i32 %5, 2048
  %tobool.i = icmp eq i32 %and.i, 0
  br i1 %tobool.i, label %for.cond.i.i, label %for.body.i.i52.preheader

for.body.i.i52.preheader:                         ; preds = %for.body.i.i
  br label %for.body.i.i52

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %6 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %6, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %cleanup, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %7 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %7, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.30, i64 0, i64 0), i32 0, i32 42, i32 100) #9
  br label %cleanup

for.cond.i.i49:                                   ; preds = %for.body.i.i52
  %inc.i.i51 = add nuw nsw i32 %i.017.i.i50, 1
  %cmp.i.i48 = icmp ult i32 %i.017.i.i50, 41
  br i1 %cmp.i.i48, label %for.body.i.i52, label %do.body.i.i56

for.body.i.i52:                                   ; preds = %for.body.i.i52.preheader, %for.cond.i.i49
  %i.017.i.i50 = phi i32 [ %inc.i.i51, %for.cond.i.i49 ], [ 0, %for.body.i.i52.preheader ]
  call void @__udelay(i64 100) #9
  %8 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i62 = getelementptr i8, i8* %8, i64 211
  %9 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i62) #10, !srcloc !6
  %10 = and i8 %9, 48
  %cmp.i = icmp eq i8 %10, 48
  br i1 %cmp.i, label %if.end5, label %for.cond.i.i49

do.body.i.i56:                                    ; preds = %for.cond.i.i49
  %msg_enable.i.i53 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %11 = load i32, i32* %msg_enable.i.i53, align 8
  %and.i.i54 = and i32 %11, 1
  %tobool4.i.i55 = icmp eq i32 %and.i.i54, 0
  br i1 %tobool4.i.i55, label %cleanup, label %if.then5.i.i58

if.then5.i.i58:                                   ; preds = %do.body.i.i56
  %dev.i.i57 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %12 = load %struct.net_device*, %struct.net_device** %dev.i.i57, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %12, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.50, i64 0, i64 0), i32 0, i32 42, i32 100) #9
  br label %cleanup

if.end5:                                          ; preds = %for.body.i.i52
  %add.ptr6 = getelementptr i8, i8* %0, i64 55
  %13 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr6) #10, !srcloc !6
  %14 = and i8 %13, -13
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %14, i8* %add.ptr6) #10, !srcloc !5
  call void @msleep(i32 1) #9
  %add.ptr10 = getelementptr i8, i8* %0, i64 211
  %15 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr10) #10, !srcloc !6
  %16 = and i8 %15, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %16, i8* %add.ptr10) #10, !srcloc !5
  %17 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i64 = getelementptr i8, i8* %17, i64 176
  %18 = bitcast i8* %add.ptr.i64 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1953431552, i32* %18) #10, !srcloc !8
  %19 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %18) #10, !srcloc !2
  %20 = and i32 %19, 49151
  %21 = load i8*, i8** %mmio_addr, align 8
  %or1.i = or i32 %20, -194052096
  %add.ptr.i66 = getelementptr i8, i8* %21, i64 176
  %22 = bitcast i8* %add.ptr.i66 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i, i32* %22) #10, !srcloc !8
  br label %for.body.i.i71

for.cond.i.i68:                                   ; preds = %for.body.i.i71
  %inc.i.i70 = add nuw nsw i32 %i.017.i.i69, 1
  %cmp.i.i67 = icmp ult i32 %i.017.i.i69, 41
  br i1 %cmp.i.i67, label %for.body.i.i71, label %do.body.i.i75

for.body.i.i71:                                   ; preds = %for.cond.i.i68, %if.end5
  %i.017.i.i69 = phi i32 [ 0, %if.end5 ], [ %inc.i.i70, %for.cond.i.i68 ]
  call void @__udelay(i64 100) #9
  %23 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i81 = getelementptr i8, i8* %23, i64 211
  %24 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i81) #10, !srcloc !6
  %25 = and i8 %24, 2
  %tobool.i82 = icmp eq i8 %25, 0
  br i1 %tobool.i82, label %for.cond.i.i68, label %if.end21

do.body.i.i75:                                    ; preds = %for.cond.i.i68
  %msg_enable.i.i72 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %26 = load i32, i32* %msg_enable.i.i72, align 8
  %and.i.i73 = and i32 %26, 1
  %tobool4.i.i74 = icmp eq i32 %and.i.i73, 0
  br i1 %tobool4.i.i74, label %cleanup, label %if.then5.i.i77

if.then5.i.i77:                                   ; preds = %do.body.i.i75
  %dev.i.i76 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %27 = load %struct.net_device*, %struct.net_device** %dev.i.i76, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %27, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.51, i64 0, i64 0), i32 0, i32 42, i32 100) #9
  br label %cleanup

if.end21:                                         ; preds = %for.body.i.i71
  %28 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i84 = getelementptr i8, i8* %28, i64 176
  %29 = bitcast i8* %add.ptr.i84 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 1953431552, i32* %29) #10, !srcloc !8
  %30 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %29) #10, !srcloc !2
  %31 = and i32 %30, 32767
  %32 = load i8*, i8** %mmio_addr, align 8
  %or1.i88 = or i32 %31, -194019328
  %add.ptr.i89 = getelementptr i8, i8* %32, i64 176
  %33 = bitcast i8* %add.ptr.i89 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i88, i32* %33) #10, !srcloc !8
  br label %for.body.i.i94

for.cond.i.i91:                                   ; preds = %for.body.i.i94
  %inc.i.i93 = add nuw nsw i32 %i.017.i.i92, 1
  %cmp.i.i90 = icmp ult i32 %i.017.i.i92, 41
  br i1 %cmp.i.i90, label %for.body.i.i94, label %do.body.i.i98

for.body.i.i94:                                   ; preds = %for.cond.i.i91, %if.end21
  %i.017.i.i92 = phi i32 [ 0, %if.end21 ], [ %inc.i.i93, %for.cond.i.i91 ]
  call void @__udelay(i64 100) #9
  %34 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i104 = getelementptr i8, i8* %34, i64 211
  %35 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i104) #10, !srcloc !6
  %36 = and i8 %35, 2
  %tobool.i105 = icmp eq i8 %36, 0
  br i1 %tobool.i105, label %for.cond.i.i91, label %cleanup

do.body.i.i98:                                    ; preds = %for.cond.i.i91
  %msg_enable.i.i95 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %37 = load i32, i32* %msg_enable.i.i95, align 8
  %and.i.i96 = and i32 %37, 1
  %tobool4.i.i97 = icmp eq i32 %and.i.i96, 0
  br i1 %tobool4.i.i97, label %cleanup, label %if.then5.i.i100

if.then5.i.i100:                                  ; preds = %do.body.i.i98
  %dev.i.i99 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %38 = load %struct.net_device*, %struct.net_device** %dev.i.i99, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %38, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.51, i64 0, i64 0), i32 0, i32 42, i32 100) #9
  br label %cleanup

cleanup:                                          ; preds = %for.body.i.i94, %if.then5.i.i77, %do.body.i.i75, %if.then5.i.i58, %do.body.i.i56, %if.then5.i.i, %do.body.i.i, %if.then5.i.i100, %do.body.i.i98
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168dp_1_mdio_write(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg, i32 %value) #0 {
entry:
  %and = and i32 %value, 65535
  %mmio_addr.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr.i, align 8
  %and.i = shl i32 %reg, 16
  %shl.i = and i32 %and.i, 8323072
  %or = or i32 %and, %shl.i
  %or.i = or i32 %or, -2147483648
  %add.ptr.i = getelementptr i8, i8* %0, i64 176
  %1 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i, i32* %1) #10, !srcloc !8
  %add.ptr1.i = getelementptr i8, i8* %0, i64 180
  %2 = bitcast i8* %add.ptr1.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147422112, i32* %2) #10, !srcloc !8
  %add.ptr2.i = getelementptr i8, i8* %0, i64 124
  %3 = bitcast i8* %add.ptr2.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %3) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %entry
  %i.017.i.i.i = phi i32 [ 0, %entry ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 1000) #9
  %4 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i = getelementptr i8, i8* %4, i64 180
  %5 = bitcast i8* %add.ptr.i.i to i32*
  %6 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %5) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %6, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %r8168dp_1_mdio_access.exit

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %7 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %7, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %r8168dp_1_mdio_access.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %8 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0), i32 1, i32 100, i32 1000) #9
  br label %r8168dp_1_mdio_access.exit

r8168dp_1_mdio_access.exit:                       ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @r8168dp_1_mdio_read(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %and.i = shl i32 %reg, 16
  %shl.i = and i32 %and.i, 8323072
  %add.ptr.i = getelementptr i8, i8* %0, i64 176
  %1 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i, i32* %1) #10, !srcloc !8
  %add.ptr1.i = getelementptr i8, i8* %0, i64 180
  %2 = bitcast i8* %add.ptr1.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147422112, i32* %2) #10, !srcloc !8
  %add.ptr2.i = getelementptr i8, i8* %0, i64 124
  %3 = bitcast i8* %add.ptr2.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %3) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %entry
  %i.017.i.i.i = phi i32 [ 0, %entry ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 1000) #9
  %4 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %4, i64 180
  %5 = bitcast i8* %add.ptr.i.i to i32*
  %6 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %5) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %6, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %r8168dp_1_mdio_access.exit

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %7 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %7, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %r8168dp_1_mdio_access.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %8 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0), i32 1, i32 100, i32 1000) #9
  br label %r8168dp_1_mdio_access.exit

r8168dp_1_mdio_access.exit:                       ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  call void @__const_udelay(i64 4295000) #9
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61536, i32* %2) #10, !srcloc !8
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %3) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 99
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %r8168dp_1_mdio_access.exit
  %i.017.i.i = phi i32 [ 0, %r8168dp_1_mdio_access.exit ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 1000) #9
  %9 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i10 = getelementptr i8, i8* %9, i64 180
  %10 = bitcast i8* %add.ptr.i10 to i32*
  %11 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %10) #10, !srcloc !2
  %tobool.i = icmp slt i32 %11, 0
  br i1 %tobool.i, label %cond.true, label %for.cond.i.i

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %12 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %12, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %cond.end, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %13 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %13, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0), i32 0, i32 100, i32 1000) #9
  br label %cond.end

cond.true:                                        ; preds = %for.body.i.i
  %14 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %and = and i32 %14, 65535
  br label %cond.end

cond.end:                                         ; preds = %if.then5.i.i, %do.body.i.i, %cond.true
  %cond = phi i32 [ %and, %cond.true ], [ -1, %do.body.i.i ], [ -1, %if.then5.i.i ]
  ret i32 %cond
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168dp_2_mdio_write(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg, i32 %value) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %0, i64 208
  %1 = bitcast i8* %add.ptr.i to i32*
  %2 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %and.i = and i32 %2, -131073
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i, i32* %1) #10, !srcloc !8
  %3 = load i8*, i8** %mmio_addr, align 8
  %and.i4 = shl i32 %reg, 16
  %shl.i = and i32 %and.i4, 2031616
  %and1.i = and i32 %value, 65535
  %or.i = or i32 %shl.i, %and1.i
  %or2.i = or i32 %or.i, -2147483648
  %add.ptr.i5 = getelementptr i8, i8* %3, i64 96
  %4 = bitcast i8* %add.ptr.i5 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i, i32* %4) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 19
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %entry
  %i.017.i.i.i = phi i32 [ 0, %entry ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 25) #9
  %5 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %5, i64 96
  %6 = bitcast i8* %add.ptr.i.i to i32*
  %7 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %6) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %7, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %r8169_mdio_write.exit

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %8 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %8, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %r8169_mdio_write.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %9 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %9, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.55, i64 0, i64 0), i32 1, i32 20, i32 25) #9
  br label %r8169_mdio_write.exit

r8169_mdio_write.exit:                            ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  call void @__const_udelay(i64 85900) #9
  %10 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %or.i7 = or i32 %10, 131072
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i7, i32* %1) #10, !srcloc !8
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @r8168dp_2_mdio_read(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %0, i64 208
  %1 = bitcast i8* %add.ptr.i to i32*
  %2 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %and.i = and i32 %2, -131073
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %and.i, i32* %1) #10, !srcloc !8
  %3 = load i8*, i8** %mmio_addr, align 8
  %and.i5 = shl i32 %reg, 16
  %shl.i = and i32 %and.i5, 2031616
  %add.ptr.i6 = getelementptr i8, i8* %3, i64 96
  %4 = bitcast i8* %add.ptr.i6 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i, i32* %4) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 19
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %entry
  %i.017.i.i.i = phi i32 [ 0, %entry ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 25) #9
  %5 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %5, i64 96
  %6 = bitcast i8* %add.ptr.i.i to i32*
  %7 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %6) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %7, 0
  br i1 %tobool.i.i, label %cond.true.i, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %8 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %8, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %r8169_mdio_read.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %9 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %9, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.55, i64 0, i64 0), i32 0, i32 20, i32 25) #9
  br label %r8169_mdio_read.exit

cond.true.i:                                      ; preds = %for.body.i.i.i
  %10 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %4) #10, !srcloc !2
  %and3.i = and i32 %10, 65535
  br label %r8169_mdio_read.exit

r8169_mdio_read.exit:                             ; preds = %do.body.i.i.i, %if.then5.i.i.i, %cond.true.i
  %cond.i = phi i32 [ %and3.i, %cond.true.i ], [ -1, %do.body.i.i.i ], [ -1, %if.then5.i.i.i ]
  call void @__const_udelay(i64 85900) #9
  %11 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %or.i = or i32 %11, 131072
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i, i32* %1) #10, !srcloc !8
  ret i32 %cond.i
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168g_mdio_write(%struct.rtl8169_private* nocapture %tp, i32 %reg, i32 %value) #0 {
entry:
  %cmp = icmp eq i32 %reg, 31
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %tobool = icmp eq i32 %value, 0
  %shl = shl i32 %value, 4
  %cond = select i1 %tobool, i32 41984, i32 %shl
  %ocp_base = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 42
  store i32 %cond, i32* %ocp_base, align 8
  br label %return

if.end:                                           ; preds = %entry
  %ocp_base1 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 42
  %0 = load i32, i32* %ocp_base1, align 8
  %cmp2 = icmp eq i32 %0, 41984
  %sub = add i32 %reg, 2147483632
  %reg.sub = select i1 %cmp2, i32 %reg, i32 %sub
  %mul = shl i32 %reg.sub, 1
  %add = add i32 %mul, %0
  %mmio_addr.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %and.i.i = and i32 %add, -65535
  %tobool.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.i.i, label %if.end.i, label %do.body.i.i

do.body.i.i:                                      ; preds = %if.end
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %1 = load i32, i32* %msg_enable.i.i, align 8
  %and1.i.i = and i32 %1, 1
  %tobool2.i.i = icmp eq i32 %and1.i.i, 0
  br i1 %tobool2.i.i, label %return, label %if.then3.i.i

if.then3.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %2 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0), i32 %add) #9
  br label %return

if.end.i:                                         ; preds = %if.end
  %3 = load i8*, i8** %mmio_addr.i, align 8
  %shl.i = shl i32 %add, 15
  %or.i = or i32 %shl.i, %value
  %or1.i = or i32 %or.i, -2147483648
  %add.ptr.i = getelementptr i8, i8* %3, i64 184
  %4 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1.i, i32* %4) #10, !srcloc !8
  call void @__udelay(i64 25) #9
  %5 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i = getelementptr i8, i8* %5, i64 184
  %6 = bitcast i8* %add.ptr.i.i to i32*
  %7 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %6) #10, !srcloc !2
  %tobool.i7.i = icmp slt i32 %7, 0
  br i1 %tobool.i7.i, label %for.cond.i.i.i, label %return

for.cond.i.i.i:                                   ; preds = %if.end.i
  call void @__udelay(i64 25) #9
  %8 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.1.i = getelementptr i8, i8* %8, i64 184
  %9 = bitcast i8* %add.ptr.i.1.i to i32*
  %10 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %9) #10, !srcloc !2
  %tobool.i7.1.i = icmp slt i32 %10, 0
  br i1 %tobool.i7.1.i, label %for.cond.i.i.1.i, label %return

if.then5.i.i.i:                                   ; preds = %for.cond.i.i.9.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %11 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %11, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i64 0, i64 0), i32 1, i32 10, i32 25) #9
  br label %return

for.cond.i.i.1.i:                                 ; preds = %for.cond.i.i.i
  call void @__udelay(i64 25) #9
  %12 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.2.i = getelementptr i8, i8* %12, i64 184
  %13 = bitcast i8* %add.ptr.i.2.i to i32*
  %14 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %13) #10, !srcloc !2
  %tobool.i7.2.i = icmp slt i32 %14, 0
  br i1 %tobool.i7.2.i, label %for.cond.i.i.2.i, label %return

for.cond.i.i.2.i:                                 ; preds = %for.cond.i.i.1.i
  call void @__udelay(i64 25) #9
  %15 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.3.i = getelementptr i8, i8* %15, i64 184
  %16 = bitcast i8* %add.ptr.i.3.i to i32*
  %17 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %16) #10, !srcloc !2
  %tobool.i7.3.i = icmp slt i32 %17, 0
  br i1 %tobool.i7.3.i, label %for.cond.i.i.3.i, label %return

for.cond.i.i.3.i:                                 ; preds = %for.cond.i.i.2.i
  call void @__udelay(i64 25) #9
  %18 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.4.i = getelementptr i8, i8* %18, i64 184
  %19 = bitcast i8* %add.ptr.i.4.i to i32*
  %20 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %19) #10, !srcloc !2
  %tobool.i7.4.i = icmp slt i32 %20, 0
  br i1 %tobool.i7.4.i, label %for.cond.i.i.4.i, label %return

for.cond.i.i.4.i:                                 ; preds = %for.cond.i.i.3.i
  call void @__udelay(i64 25) #9
  %21 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.5.i = getelementptr i8, i8* %21, i64 184
  %22 = bitcast i8* %add.ptr.i.5.i to i32*
  %23 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %22) #10, !srcloc !2
  %tobool.i7.5.i = icmp slt i32 %23, 0
  br i1 %tobool.i7.5.i, label %for.cond.i.i.5.i, label %return

for.cond.i.i.5.i:                                 ; preds = %for.cond.i.i.4.i
  call void @__udelay(i64 25) #9
  %24 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.6.i = getelementptr i8, i8* %24, i64 184
  %25 = bitcast i8* %add.ptr.i.6.i to i32*
  %26 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %25) #10, !srcloc !2
  %tobool.i7.6.i = icmp slt i32 %26, 0
  br i1 %tobool.i7.6.i, label %for.cond.i.i.6.i, label %return

for.cond.i.i.6.i:                                 ; preds = %for.cond.i.i.5.i
  call void @__udelay(i64 25) #9
  %27 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.7.i = getelementptr i8, i8* %27, i64 184
  %28 = bitcast i8* %add.ptr.i.7.i to i32*
  %29 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %28) #10, !srcloc !2
  %tobool.i7.7.i = icmp slt i32 %29, 0
  br i1 %tobool.i7.7.i, label %for.cond.i.i.7.i, label %return

for.cond.i.i.7.i:                                 ; preds = %for.cond.i.i.6.i
  call void @__udelay(i64 25) #9
  %30 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.8.i = getelementptr i8, i8* %30, i64 184
  %31 = bitcast i8* %add.ptr.i.8.i to i32*
  %32 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %31) #10, !srcloc !2
  %tobool.i7.8.i = icmp slt i32 %32, 0
  br i1 %tobool.i7.8.i, label %for.cond.i.i.8.i, label %return

for.cond.i.i.8.i:                                 ; preds = %for.cond.i.i.7.i
  call void @__udelay(i64 25) #9
  %33 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.9.i = getelementptr i8, i8* %33, i64 184
  %34 = bitcast i8* %add.ptr.i.9.i to i32*
  %35 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %34) #10, !srcloc !2
  %tobool.i7.9.i = icmp slt i32 %35, 0
  br i1 %tobool.i7.9.i, label %for.cond.i.i.9.i, label %return

for.cond.i.i.9.i:                                 ; preds = %for.cond.i.i.8.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %36 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %36, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %return, label %if.then5.i.i.i

return:                                           ; preds = %for.cond.i.i.9.i, %for.cond.i.i.8.i, %for.cond.i.i.7.i, %for.cond.i.i.6.i, %for.cond.i.i.5.i, %for.cond.i.i.4.i, %for.cond.i.i.3.i, %for.cond.i.i.2.i, %for.cond.i.i.1.i, %if.then5.i.i.i, %for.cond.i.i.i, %if.end.i, %if.then3.i.i, %do.body.i.i, %if.then
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @r8168g_mdio_read(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg) #0 {
entry:
  %ocp_base = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 42
  %0 = load i32, i32* %ocp_base, align 8
  %cmp = icmp eq i32 %0, 41984
  %sub = add i32 %reg, 2147483632
  %reg.sub = select i1 %cmp, i32 %reg, i32 %sub
  %mul = shl i32 %reg.sub, 1
  %add = add i32 %mul, %0
  %mmio_addr.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %and.i.i = and i32 %add, -65535
  %tobool.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.i.i, label %if.end.i, label %do.body.i.i

do.body.i.i:                                      ; preds = %entry
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %1 = load i32, i32* %msg_enable.i.i, align 8
  %and1.i.i = and i32 %1, 1
  %tobool2.i.i = icmp eq i32 %and1.i.i, 0
  br i1 %tobool2.i.i, label %r8168_phy_ocp_read.exit, label %if.then3.i.i

if.then3.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %2 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0), i32 %add) #9
  br label %r8168_phy_ocp_read.exit

if.end.i:                                         ; preds = %entry
  %3 = load i8*, i8** %mmio_addr.i, align 8
  %shl.i = shl i32 %add, 15
  %add.ptr.i = getelementptr i8, i8* %3, i64 184
  %4 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl.i, i32* %4) #10, !srcloc !8
  call void @__udelay(i64 25) #9
  %5 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i = getelementptr i8, i8* %5, i64 184
  %6 = bitcast i8* %add.ptr.i.i to i32*
  %7 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %6) #10, !srcloc !2
  %tobool.i9.i = icmp slt i32 %7, 0
  br i1 %tobool.i9.i, label %cond.true.i, label %for.cond.i.i.i

for.cond.i.i.i:                                   ; preds = %if.end.i
  call void @__udelay(i64 25) #9
  %8 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.1.i = getelementptr i8, i8* %8, i64 184
  %9 = bitcast i8* %add.ptr.i.1.i to i32*
  %10 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %9) #10, !srcloc !2
  %tobool.i9.1.i = icmp slt i32 %10, 0
  br i1 %tobool.i9.1.i, label %cond.true.i, label %for.cond.i.i.1.i

if.then5.i.i.i:                                   ; preds = %for.cond.i.i.9.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %11 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %11, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i64 0, i64 0), i32 0, i32 10, i32 25) #9
  br label %r8168_phy_ocp_read.exit

cond.true.i:                                      ; preds = %for.cond.i.i.8.i, %for.cond.i.i.7.i, %for.cond.i.i.6.i, %for.cond.i.i.5.i, %for.cond.i.i.4.i, %for.cond.i.i.3.i, %for.cond.i.i.2.i, %for.cond.i.i.1.i, %for.cond.i.i.i, %if.end.i
  %12 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %4) #10, !srcloc !2
  %phitmp = and i32 %12, 65535
  br label %r8168_phy_ocp_read.exit

for.cond.i.i.1.i:                                 ; preds = %for.cond.i.i.i
  call void @__udelay(i64 25) #9
  %13 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.2.i = getelementptr i8, i8* %13, i64 184
  %14 = bitcast i8* %add.ptr.i.2.i to i32*
  %15 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %14) #10, !srcloc !2
  %tobool.i9.2.i = icmp slt i32 %15, 0
  br i1 %tobool.i9.2.i, label %cond.true.i, label %for.cond.i.i.2.i

for.cond.i.i.2.i:                                 ; preds = %for.cond.i.i.1.i
  call void @__udelay(i64 25) #9
  %16 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.3.i = getelementptr i8, i8* %16, i64 184
  %17 = bitcast i8* %add.ptr.i.3.i to i32*
  %18 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %17) #10, !srcloc !2
  %tobool.i9.3.i = icmp slt i32 %18, 0
  br i1 %tobool.i9.3.i, label %cond.true.i, label %for.cond.i.i.3.i

for.cond.i.i.3.i:                                 ; preds = %for.cond.i.i.2.i
  call void @__udelay(i64 25) #9
  %19 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.4.i = getelementptr i8, i8* %19, i64 184
  %20 = bitcast i8* %add.ptr.i.4.i to i32*
  %21 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %20) #10, !srcloc !2
  %tobool.i9.4.i = icmp slt i32 %21, 0
  br i1 %tobool.i9.4.i, label %cond.true.i, label %for.cond.i.i.4.i

for.cond.i.i.4.i:                                 ; preds = %for.cond.i.i.3.i
  call void @__udelay(i64 25) #9
  %22 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.5.i = getelementptr i8, i8* %22, i64 184
  %23 = bitcast i8* %add.ptr.i.5.i to i32*
  %24 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %23) #10, !srcloc !2
  %tobool.i9.5.i = icmp slt i32 %24, 0
  br i1 %tobool.i9.5.i, label %cond.true.i, label %for.cond.i.i.5.i

for.cond.i.i.5.i:                                 ; preds = %for.cond.i.i.4.i
  call void @__udelay(i64 25) #9
  %25 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.6.i = getelementptr i8, i8* %25, i64 184
  %26 = bitcast i8* %add.ptr.i.6.i to i32*
  %27 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %26) #10, !srcloc !2
  %tobool.i9.6.i = icmp slt i32 %27, 0
  br i1 %tobool.i9.6.i, label %cond.true.i, label %for.cond.i.i.6.i

for.cond.i.i.6.i:                                 ; preds = %for.cond.i.i.5.i
  call void @__udelay(i64 25) #9
  %28 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.7.i = getelementptr i8, i8* %28, i64 184
  %29 = bitcast i8* %add.ptr.i.7.i to i32*
  %30 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %29) #10, !srcloc !2
  %tobool.i9.7.i = icmp slt i32 %30, 0
  br i1 %tobool.i9.7.i, label %cond.true.i, label %for.cond.i.i.7.i

for.cond.i.i.7.i:                                 ; preds = %for.cond.i.i.6.i
  call void @__udelay(i64 25) #9
  %31 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.8.i = getelementptr i8, i8* %31, i64 184
  %32 = bitcast i8* %add.ptr.i.8.i to i32*
  %33 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %32) #10, !srcloc !2
  %tobool.i9.8.i = icmp slt i32 %33, 0
  br i1 %tobool.i9.8.i, label %cond.true.i, label %for.cond.i.i.8.i

for.cond.i.i.8.i:                                 ; preds = %for.cond.i.i.7.i
  call void @__udelay(i64 25) #9
  %34 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.9.i = getelementptr i8, i8* %34, i64 184
  %35 = bitcast i8* %add.ptr.i.9.i to i32*
  %36 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %35) #10, !srcloc !2
  %tobool.i9.9.i = icmp slt i32 %36, 0
  br i1 %tobool.i9.9.i, label %cond.true.i, label %for.cond.i.i.9.i

for.cond.i.i.9.i:                                 ; preds = %for.cond.i.i.8.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %37 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %37, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %r8168_phy_ocp_read.exit, label %if.then5.i.i.i

r8168_phy_ocp_read.exit:                          ; preds = %do.body.i.i, %if.then3.i.i, %if.then5.i.i.i, %cond.true.i, %for.cond.i.i.9.i
  %retval.0.i = phi i32 [ %phitmp, %cond.true.i ], [ 0, %do.body.i.i ], [ 0, %if.then3.i.i ], [ 65535, %for.cond.i.i.9.i ], [ 65535, %if.then5.i.i.i ]
  ret i32 %retval.0.i
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8169_mdio_write(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg, i32 %value) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %and = shl i32 %reg, 16
  %shl = and i32 %and, 2031616
  %and1 = and i32 %value, 65535
  %or = or i32 %and1, %shl
  %or2 = or i32 %or, -2147483648
  %add.ptr = getelementptr i8, i8* %0, i64 96
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2, i32* %1) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 19
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 25) #9
  %2 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %2, i64 96
  %3 = bitcast i8* %add.ptr.i to i32*
  %4 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %3) #10, !srcloc !2
  %tobool.i = icmp slt i32 %4, 0
  br i1 %tobool.i, label %for.cond.i.i, label %rtl_udelay_loop_wait_low.exit

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %5 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %5, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %rtl_udelay_loop_wait_low.exit, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %6 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.55, i64 0, i64 0), i32 1, i32 20, i32 25) #9
  br label %rtl_udelay_loop_wait_low.exit

rtl_udelay_loop_wait_low.exit:                    ; preds = %for.body.i.i, %do.body.i.i, %if.then5.i.i
  call void @__const_udelay(i64 85900) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @r8169_mdio_read(%struct.rtl8169_private* nocapture readonly %tp, i32 %reg) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %and = shl i32 %reg, 16
  %shl = and i32 %and, 2031616
  %add.ptr = getelementptr i8, i8* %0, i64 96
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %shl, i32* %1) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 19
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 25) #9
  %2 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %2, i64 96
  %3 = bitcast i8* %add.ptr.i to i32*
  %4 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %3) #10, !srcloc !2
  %tobool.i = icmp slt i32 %4, 0
  br i1 %tobool.i, label %cond.true, label %for.cond.i.i

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %5 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %5, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %cond.end, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %6 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.55, i64 0, i64 0), i32 0, i32 20, i32 25) #9
  br label %cond.end

cond.true:                                        ; preds = %for.body.i.i
  %7 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1) #10, !srcloc !2
  %and3 = and i32 %7, 65535
  br label %cond.end

cond.end:                                         ; preds = %if.then5.i.i, %do.body.i.i, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ -1, %do.body.i.i ], [ -1, %if.then5.i.i ]
  call void @__const_udelay(i64 85900) #9
  ret i32 %cond
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r810x_pll_power_down(%struct.rtl8169_private* %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %call = call fastcc zeroext i1 @rtl_wol_pll_power_down(%struct.rtl8169_private* %tp) #11
  br i1 %call, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %write.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %1 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %1(%struct.rtl8169_private* nonnull %tp, i32 31, i32 0) #9
  %2 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %2(%struct.rtl8169_private* nonnull %tp, i32 0, i32 2048) #9
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %3 = load i16, i16* %mac_version, align 2
  switch i16 %3, label %sw.default [
    i16 6, label %cleanup
    i16 7, label %cleanup
    i16 8, label %cleanup
    i16 9, label %cleanup
    i16 12, label %cleanup
    i16 15, label %cleanup
  ]

sw.default:                                       ; preds = %if.end
  %add.ptr = getelementptr i8, i8* %0, i64 111
  %4 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %5 = and i8 %4, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %5, i8* %add.ptr) #10, !srcloc !5
  br label %cleanup

cleanup:                                          ; preds = %sw.default, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %entry
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r810x_pll_power_up(%struct.rtl8169_private* %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %write.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %1 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %1(%struct.rtl8169_private* %tp, i32 31, i32 0) #9
  %2 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %2(%struct.rtl8169_private* %tp, i32 0, i32 4096) #9
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %3 = load i16, i16* %mac_version, align 2
  switch i16 %3, label %sw.default [
    i16 6, label %sw.epilog
    i16 7, label %sw.epilog
    i16 8, label %sw.epilog
    i16 9, label %sw.epilog
    i16 12, label %sw.epilog
    i16 15, label %sw.epilog
    i16 46, label %sw.bb1
    i16 47, label %sw.bb1
  ]

sw.bb1:                                           ; preds = %entry, %entry
  %add.ptr = getelementptr i8, i8* %0, i64 111
  %4 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %5 = or i8 %4, -64
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %5, i8* %add.ptr) #10, !srcloc !5
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %add.ptr5 = getelementptr i8, i8* %0, i64 111
  %6 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr5) #10, !srcloc !6
  %7 = or i8 %6, -128
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %7, i8* %add.ptr5) #10, !srcloc !5
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %sw.default, %sw.bb1
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168_pll_power_down(%struct.rtl8169_private* %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %1 = load i16, i16* %mac_version, align 2
  switch i16 %1, label %if.end [
    i16 26, label %sw.bb.i
    i16 27, label %sw.bb.i
    i16 30, label %sw.bb.i
    i16 48, label %sw.bb1.i
    i16 49, label %sw.bb1.i
    i16 50, label %sw.bb1.i
  ]

sw.bb.i:                                          ; preds = %entry, %entry, %entry
  %cmp.i.i.i = icmp eq i16 %1, 30
  %conv2.i.i.i = select i1 %cmp.i.i.i, i16 184, i16 16
  %call1.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %tp, i8 zeroext 15, i16 zeroext %conv2.i.i.i) #9
  %.lobit.i.i = lshr i32 %call1.i.i, 15
  br label %r8168_check_dash.exit

sw.bb1.i:                                         ; preds = %entry, %entry, %entry
  %call.i.i = call fastcc i32 @ocp_read(%struct.rtl8169_private* nonnull %tp, i8 zeroext 15, i16 zeroext 296) #9
  br label %r8168_check_dash.exit

r8168_check_dash.exit:                            ; preds = %sw.bb.i, %sw.bb1.i
  %.lobit.i.i.sink = phi i32 [ %.lobit.i.i, %sw.bb.i ], [ %call.i.i, %sw.bb1.i ]
  %2 = and i32 %.lobit.i.i.sink, 1
  %tobool = icmp eq i32 %2, 0
  br i1 %tobool, label %r8168_check_dash.exit.if.end_crit_edge, label %cleanup

r8168_check_dash.exit.if.end_crit_edge:           ; preds = %r8168_check_dash.exit
  %.pre = load i16, i16* %mac_version, align 2
  br label %if.end

if.end:                                           ; preds = %r8168_check_dash.exit.if.end_crit_edge, %entry
  %3 = phi i16 [ %.pre, %r8168_check_dash.exit.if.end_crit_edge ], [ %1, %entry ]
  %4 = and i16 %3, -2
  %switch = icmp eq i16 %4, 22
  br i1 %switch, label %land.lhs.true35, label %if.end40

land.lhs.true35:                                  ; preds = %if.end
  %add.ptr = getelementptr i8, i8* %0, i64 224
  %5 = bitcast i8* %add.ptr to i16*
  %6 = call i16 asm sideeffect "movw $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %5) #10, !srcloc !21
  %7 = and i16 %6, 256
  %tobool38 = icmp eq i16 %7, 0
  br i1 %tobool38, label %land.lhs.true35.if.end40_crit_edge, label %cleanup

land.lhs.true35.if.end40_crit_edge:               ; preds = %land.lhs.true35
  %.pre114 = load i16, i16* %mac_version, align 2
  br label %if.end40

if.end40:                                         ; preds = %land.lhs.true35.if.end40_crit_edge, %if.end
  %8 = phi i16 [ %.pre114, %land.lhs.true35.if.end40_crit_edge ], [ %3, %if.end ]
  %.off91 = add i16 %8, -31
  %switch92 = icmp ult i16 %.off91, 2
  br i1 %switch92, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.end40
  %9 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %9, i64 128
  %10 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2145779868, i32* %10) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i93 = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i93, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %if.then50
  %i.017.i.i.i = phi i32 [ 0, %if.then50 ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 10) #9
  %11 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %11, i64 128
  %12 = bitcast i8* %add.ptr.i.i to i32*
  %13 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %12) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %13, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %rtl_ephy_write.exit

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %14 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %14, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %rtl_ephy_write.exit, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %15 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %15, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_ephy_write.exit

rtl_ephy_write.exit:                              ; preds = %for.body.i.i.i, %do.body.i.i.i, %if.then5.i.i.i
  call void @__const_udelay(i64 42950) #9
  br label %if.end51

if.end51:                                         ; preds = %if.end40, %rtl_ephy_write.exit
  %call52 = call fastcc zeroext i1 @rtl_wol_pll_power_down(%struct.rtl8169_private* nonnull %tp) #11
  br i1 %call52, label %cleanup, label %if.end54

if.end54:                                         ; preds = %if.end51
  %write.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %16 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %16(%struct.rtl8169_private* nonnull %tp, i32 31, i32 0) #9
  %17 = load i16, i16* %mac_version, align 2
  switch i16 %17, label %sw.default.i [
    i16 31, label %sw.bb.i95
    i16 32, label %sw.bb.i95
    i16 39, label %sw.bb.i95
    i16 40, label %sw.bb.i95
    i16 10, label %sw.bb1.i96
    i16 11, label %sw.bb1.i96
    i16 16, label %sw.bb1.i96
    i16 17, label %sw.bb1.i96
    i16 18, label %sw.bb1.i96
    i16 19, label %sw.bb1.i96
    i16 20, label %sw.bb1.i96
    i16 21, label %sw.bb1.i96
    i16 22, label %sw.bb1.i96
    i16 23, label %sw.bb1.i96
    i16 24, label %sw.bb1.i96
    i16 25, label %sw.bb1.i96
    i16 26, label %sw.bb1.i96
    i16 27, label %sw.bb1.i96
    i16 30, label %sw.bb1.i96
  ]

sw.bb.i95:                                        ; preds = %if.end54, %if.end54, %if.end54, %if.end54
  %18 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %18(%struct.rtl8169_private* nonnull %tp, i32 0, i32 6144) #9
  br label %r8168_phy_power_down.exit

sw.bb1.i96:                                       ; preds = %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54, %if.end54
  %19 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %19(%struct.rtl8169_private* nonnull %tp, i32 14, i32 512) #9
  br label %sw.default.i

sw.default.i:                                     ; preds = %sw.bb1.i96, %if.end54
  %20 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %20(%struct.rtl8169_private* nonnull %tp, i32 0, i32 2048) #9
  br label %r8168_phy_power_down.exit

r8168_phy_power_down.exit:                        ; preds = %sw.bb.i95, %sw.default.i
  %21 = load i16, i16* %mac_version, align 2
  switch i16 %21, label %cleanup [
    i16 24, label %sw.bb
    i16 25, label %sw.bb
    i16 26, label %sw.bb
    i16 27, label %sw.bb
    i16 30, label %sw.bb
    i16 31, label %sw.bb
    i16 32, label %sw.bb
    i16 43, label %sw.bb
    i16 44, label %sw.bb
    i16 45, label %sw.bb
    i16 49, label %sw.bb
    i16 50, label %sw.bb
    i16 39, label %sw.bb63
    i16 40, label %sw.bb63
    i16 48, label %sw.bb63
  ]

sw.bb:                                            ; preds = %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit
  %add.ptr57 = getelementptr i8, i8* %0, i64 111
  %22 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr57) #10, !srcloc !6
  %23 = and i8 %22, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %23, i8* %add.ptr57) #10, !srcloc !5
  br label %cleanup

sw.bb63:                                          ; preds = %r8168_phy_power_down.exit, %r8168_phy_power_down.exit, %r8168_phy_power_down.exit
  %24 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i97 = getelementptr i8, i8* %24, i64 116
  %25 = bitcast i8* %add.ptr.i.i97 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61864, i32* %25) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %sw.bb63
  %i.017.i.i.i.i = phi i32 [ 0, %sw.bb63 ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %26 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %26, i64 116
  %27 = bitcast i8* %add.ptr.i.i.i to i32*
  %28 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %27) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %28, 0
  br i1 %tobool.i.i.i, label %cond.true.i.i, label %for.cond.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %29 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %29, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_w0w1_eri.exit, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %dev.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %30 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %30, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit

cond.true.i.i:                                    ; preds = %for.body.i.i.i.i
  %add.ptr3.i.i = getelementptr i8, i8* %24, i64 112
  %31 = bitcast i8* %add.ptr3.i.i to i32*
  %32 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %31) #10, !srcloc !2
  %phitmp = and i32 %32, 67108863
  br label %rtl_w0w1_eri.exit

rtl_w0w1_eri.exit:                                ; preds = %do.body.i.i.i.i, %if.then5.i.i.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %phitmp, %cond.true.i.i ], [ 67108863, %do.body.i.i.i.i ], [ 67108863, %if.then5.i.i.i.i ]
  %33 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i99 = getelementptr i8, i8* %33, i64 112
  %34 = bitcast i8* %add.ptr.i99 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i, i32* %34) #10, !srcloc !8
  %add.ptr11.i = getelementptr i8, i8* %33, i64 116
  %35 = bitcast i8* %add.ptr11.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421784, i32* %35) #10, !srcloc !8
  br label %for.body.i.i.i106

for.cond.i.i.i102:                                ; preds = %for.body.i.i.i106
  %inc.i.i.i100 = add nuw nsw i32 %i.017.i.i.i103, 1
  %cmp.i.i.i101 = icmp ult i32 %i.017.i.i.i103, 99
  br i1 %cmp.i.i.i101, label %for.body.i.i.i106, label %do.body.i.i.i110

for.body.i.i.i106:                                ; preds = %for.cond.i.i.i102, %rtl_w0w1_eri.exit
  %i.017.i.i.i103 = phi i32 [ 0, %rtl_w0w1_eri.exit ], [ %inc.i.i.i100, %for.cond.i.i.i102 ]
  call void @__udelay(i64 100) #9
  %36 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i104 = getelementptr i8, i8* %36, i64 116
  %37 = bitcast i8* %add.ptr.i.i104 to i32*
  %38 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %37) #10, !srcloc !2
  %tobool.i.i105 = icmp slt i32 %38, 0
  br i1 %tobool.i.i105, label %for.cond.i.i.i102, label %rtl_eri_write.exit

do.body.i.i.i110:                                 ; preds = %for.cond.i.i.i102
  %msg_enable.i.i.i107 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %39 = load i32, i32* %msg_enable.i.i.i107, align 8
  %and.i.i.i108 = and i32 %39, 1
  %tobool4.i.i.i109 = icmp eq i32 %and.i.i.i108, 0
  br i1 %tobool4.i.i.i109, label %rtl_eri_write.exit, label %if.then5.i.i.i112

if.then5.i.i.i112:                                ; preds = %do.body.i.i.i110
  %dev.i.i.i111 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %40 = load %struct.net_device*, %struct.net_device** %dev.i.i.i111, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %40, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %rtl_eri_write.exit

rtl_eri_write.exit:                               ; preds = %for.body.i.i.i106, %do.body.i.i.i110, %if.then5.i.i.i112
  %add.ptr64 = getelementptr i8, i8* %0, i64 111
  %41 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr64) #10, !srcloc !6
  %42 = and i8 %41, 127
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %42, i8* %add.ptr64) #10, !srcloc !5
  br label %cleanup

cleanup:                                          ; preds = %sw.bb, %rtl_eri_write.exit, %r8168_phy_power_down.exit, %if.end51, %land.lhs.true35, %r8168_check_dash.exit
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168_pll_power_up(%struct.rtl8169_private* %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %1 = load i16, i16* %mac_version, align 2
  switch i16 %1, label %sw.epilog [
    i16 24, label %sw.bb
    i16 25, label %sw.bb
    i16 26, label %sw.bb
    i16 27, label %sw.bb
    i16 30, label %sw.bb
    i16 31, label %sw.bb
    i16 32, label %sw.bb
    i16 43, label %sw.bb4
    i16 44, label %sw.bb4
    i16 45, label %sw.bb4
    i16 49, label %sw.bb4
    i16 50, label %sw.bb4
    i16 39, label %sw.bb11
    i16 40, label %sw.bb11
    i16 48, label %sw.bb11
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %add.ptr = getelementptr i8, i8* %0, i64 111
  %2 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %3 = or i8 %2, -128
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %3, i8* %add.ptr) #10, !srcloc !5
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry, %entry, %entry, %entry, %entry
  %add.ptr5 = getelementptr i8, i8* %0, i64 111
  %4 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr5) #10, !srcloc !6
  %5 = or i8 %4, -64
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %5, i8* %add.ptr5) #10, !srcloc !5
  br label %sw.epilog

sw.bb11:                                          ; preds = %entry, %entry, %entry
  %add.ptr12 = getelementptr i8, i8* %0, i64 111
  %6 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr12) #10, !srcloc !6
  %7 = or i8 %6, -64
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %7, i8* %add.ptr12) #10, !srcloc !5
  %8 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i = getelementptr i8, i8* %8, i64 116
  %9 = bitcast i8* %add.ptr.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61864, i32* %9) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %sw.bb11
  %i.017.i.i.i.i = phi i32 [ 0, %sw.bb11 ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %10 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %10, i64 116
  %11 = bitcast i8* %add.ptr.i.i.i to i32*
  %12 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %11) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %12, 0
  br i1 %tobool.i.i.i, label %cond.true.i.i, label %for.cond.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %13 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %13, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_w0w1_eri.exit, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %dev.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %14 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %14, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit

cond.true.i.i:                                    ; preds = %for.body.i.i.i.i
  %add.ptr3.i.i = getelementptr i8, i8* %8, i64 112
  %15 = bitcast i8* %add.ptr3.i.i to i32*
  %16 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %15) #10, !srcloc !2
  %phitmp = or i32 %16, -67108864
  br label %rtl_w0w1_eri.exit

rtl_w0w1_eri.exit:                                ; preds = %do.body.i.i.i.i, %if.then5.i.i.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %phitmp, %cond.true.i.i ], [ -1, %do.body.i.i.i.i ], [ -1, %if.then5.i.i.i.i ]
  %17 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %17, i64 112
  %18 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i, i32* %18) #10, !srcloc !8
  %add.ptr11.i = getelementptr i8, i8* %17, i64 116
  %19 = bitcast i8* %add.ptr11.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147421784, i32* %19) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %rtl_w0w1_eri.exit
  %i.017.i.i.i = phi i32 [ 0, %rtl_w0w1_eri.exit ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %20 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i27 = getelementptr i8, i8* %20, i64 116
  %21 = bitcast i8* %add.ptr.i.i27 to i32*
  %22 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %21) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %22, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %sw.epilog

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %23 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %23, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %sw.epilog, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %24 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %24, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body.i.i.i, %if.then5.i.i.i, %do.body.i.i.i, %entry, %sw.bb4, %sw.bb
  %write.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %25 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %25(%struct.rtl8169_private* nonnull %tp, i32 31, i32 0) #9
  %26 = load i16, i16* %mac_version, align 2
  switch i16 %26, label %r8168_phy_power_up.exit [
    i16 10, label %sw.bb.i
    i16 11, label %sw.bb.i
    i16 16, label %sw.bb.i
    i16 17, label %sw.bb.i
    i16 18, label %sw.bb.i
    i16 19, label %sw.bb.i
    i16 20, label %sw.bb.i
    i16 21, label %sw.bb.i
    i16 22, label %sw.bb.i
    i16 23, label %sw.bb.i
    i16 24, label %sw.bb.i
    i16 25, label %sw.bb.i
    i16 26, label %sw.bb.i
    i16 27, label %sw.bb.i
    i16 30, label %sw.bb.i
  ]

sw.bb.i:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog
  %27 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %27(%struct.rtl8169_private* nonnull %tp, i32 14, i32 0) #9
  br label %r8168_phy_power_up.exit

r8168_phy_power_up.exit:                          ; preds = %sw.epilog, %sw.bb.i
  %28 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %28(%struct.rtl8169_private* nonnull %tp, i32 0, i32 4096) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc zeroext i1 @rtl_wol_pll_power_down(%struct.rtl8169_private* %tp) unnamed_addr #0 {
entry:
  %mmio_addr.i3 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr.i3, align 8
  %add.ptr.i4 = getelementptr i8, i8* %0, i64 82
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i4) #10, !srcloc !6
  %2 = and i8 %1, 1
  %tobool.i5 = icmp eq i8 %2, 0
  br i1 %tobool.i5, label %return, label %if.end.i

if.end.i:                                         ; preds = %entry
  %add.ptr1.i = getelementptr i8, i8* %0, i64 84
  %3 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1.i) #10, !srcloc !6
  %conv3.i = zext i8 %3 to i32
  %and4.i = lshr i32 %conv3.i, 4
  %and4.lobit.i = and i32 %and4.i, 1
  %mac_version.i6 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %4 = load i16, i16* %mac_version.i6, align 2
  switch i16 %4, label %sw.default.i [
    i16 33, label %sw.bb.i7
    i16 34, label %sw.bb.i7
    i16 35, label %sw.bb.i7
    i16 36, label %sw.bb.i7
    i16 37, label %sw.bb.i7
    i16 39, label %sw.bb.i7
    i16 40, label %sw.bb.i7
    i16 41, label %sw.bb.i7
    i16 42, label %sw.bb.i7
    i16 43, label %sw.bb.i7
    i16 44, label %sw.bb.i7
    i16 45, label %sw.bb.i7
    i16 46, label %sw.bb.i7
    i16 47, label %sw.bb.i7
    i16 48, label %sw.bb.i7
    i16 49, label %sw.bb.i7
    i16 50, label %sw.bb.i7
  ]

sw.bb.i7:                                         ; preds = %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i
  %5 = load i8*, i8** %mmio_addr.i3, align 8
  %add.ptr.i9 = getelementptr i8, i8* %5, i64 116
  %6 = bitcast i8* %add.ptr.i9 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %6) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %sw.bb.i7
  %i.017.i.i.i = phi i32 [ 0, %sw.bb.i7 ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %7 = load i8*, i8** %mmio_addr.i3, align 8
  %add.ptr.i.i = getelementptr i8, i8* %7, i64 116
  %8 = bitcast i8* %add.ptr.i.i to i32*
  %9 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %8) #10, !srcloc !2
  %tobool.i.i10 = icmp slt i32 %9, 0
  br i1 %tobool.i.i10, label %cond.true.i, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %10 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %10, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %__rtl8169_get_wol.exit.thread, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %11 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %11, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %__rtl8169_get_wol.exit.thread

cond.true.i:                                      ; preds = %for.body.i.i.i
  %add.ptr3.i = getelementptr i8, i8* %5, i64 112
  %12 = bitcast i8* %add.ptr3.i to i32*
  %13 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %12) #10, !srcloc !2
  %phitmp = and i32 %13, 65536
  br label %__rtl8169_get_wol.exit

sw.default.i:                                     ; preds = %if.end.i
  %and16.i = and i32 %conv3.i, 32
  br label %__rtl8169_get_wol.exit

__rtl8169_get_wol.exit.thread:                    ; preds = %do.body.i.i.i, %if.then5.i.i.i
  %or19.i14 = or i32 %and4.lobit.i, 32
  br label %14

__rtl8169_get_wol.exit:                           ; preds = %cond.true.i, %sw.default.i
  %and16.sink.i = phi i32 [ %and16.i, %sw.default.i ], [ %phitmp, %cond.true.i ]
  %tobool17.i = icmp eq i32 %and16.sink.i, 0
  %or19.i = or i32 %and4.lobit.i, 32
  %and4.lobit.i.or19.i = select i1 %tobool17.i, i32 %and4.lobit.i, i32 %or19.i
  br label %14

; <label>:14:                                     ; preds = %__rtl8169_get_wol.exit, %__rtl8169_get_wol.exit.thread
  %15 = phi i32 [ %or19.i14, %__rtl8169_get_wol.exit.thread ], [ %and4.lobit.i.or19.i, %__rtl8169_get_wol.exit ]
  %add.ptr21.i = getelementptr i8, i8* %0, i64 86
  %16 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr21.i) #10, !srcloc !6
  %conv23.i = zext i8 %16 to i32
  %and24.i = lshr i32 %conv23.i, 3
  %17 = and i32 %and24.i, 2
  %18 = or i32 %17, %15
  %19 = and i32 %and24.i, 8
  %20 = or i32 %18, %19
  %21 = and i32 %and24.i, 4
  %and = or i32 %20, %21
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %14
  %write.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 0
  %22 = load void (%struct.rtl8169_private*, i32, i32)*, void (%struct.rtl8169_private*, i32, i32)** %write.i.i, align 8
  call void %22(%struct.rtl8169_private* nonnull %tp, i32 31, i32 0) #9
  %read.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 21, i32 1
  %23 = load i32 (%struct.rtl8169_private*, i32)*, i32 (%struct.rtl8169_private*, i32)** %read.i.i, align 8
  %call.i.i = call i32 %23(%struct.rtl8169_private* nonnull %tp, i32 5) #9
  %and.i = and i32 %call.i.i, 96
  %tobool.i = icmp eq i32 %and.i, 0
  br i1 %tobool.i, label %if.else.i, label %if.end6.i

if.else.i:                                        ; preds = %if.end
  %and1.i = and i32 %call.i.i, 384
  %tobool2.i = icmp eq i32 %and1.i, 0
  br i1 %tobool2.i, label %if.else4.i, label %if.end6.i

if.else4.i:                                       ; preds = %if.else.i
  %supports_gmii.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 35, i32 4
  %bf.load.i = load i8, i8* %supports_gmii.i, align 8
  %bf.clear.i = and i8 %bf.load.i, 4
  %tobool5.i = icmp eq i8 %bf.clear.i, 0
  %conv.i = select i1 %tobool5.i, i32 15, i32 63
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.else4.i, %if.else.i, %if.end
  %adv.0.i = phi i32 [ %conv.i, %if.else4.i ], [ 3, %if.end ], [ 15, %if.else.i ]
  %dev.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %24 = load %struct.net_device*, %struct.net_device** %dev.i, align 8
  %set_speed.i.i = getelementptr %struct.net_device, %struct.net_device* %24, i64 0, i32 0, i64 5648
  %25 = bitcast i8* %set_speed.i.i to i32 (%struct.net_device*, i8, i16, i8, i32)**
  %26 = load i32 (%struct.net_device*, i8, i16, i8, i32)*, i32 (%struct.net_device*, i8, i16, i8, i32)** %25, align 8
  %call1.i.i = call i32 %26(%struct.net_device* %24, i8 zeroext 1, i16 zeroext 1000, i8 zeroext 1, i32 %adv.0.i) #9
  %cmp.i.i = icmp slt i32 %call1.i.i, 0
  br i1 %cmp.i.i, label %rtl_speed_down.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.end6.i
  %state.i.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %24, i64 0, i32 8
  %27 = load volatile i64, i64* %state.i.i.i, align 8
  %and1.i.i.i.i = and i64 %27, 1
  %cmp.i.i.i.i = icmp eq i64 %and1.i.i.i.i, 0
  %28 = and i32 %adv.0.i, 32
  %tobool.i.i = icmp eq i32 %28, 0
  %or.cond18.i.i = or i1 %tobool.i.i, %cmp.i.i.i.i
  br i1 %or.cond18.i.i, label %rtl_speed_down.exit, label %if.then7.i.i

if.then7.i.i:                                     ; preds = %if.end.i.i
  %timer.i.i = getelementptr %struct.net_device, %struct.net_device* %24, i64 0, i32 0, i64 5496
  %29 = bitcast i8* %timer.i.i to %struct.timer_list*
  %30 = load volatile i64, i64* @jiffies, align 8
  %add.i.i = add i64 %30, 2500
  %call8.i.i = call i32 @mod_timer(%struct.timer_list* %29, i64 %add.i.i) #9
  br label %rtl_speed_down.exit

rtl_speed_down.exit:                              ; preds = %if.end6.i, %if.end.i.i, %if.then7.i.i
  %31 = load i16, i16* %mac_version.i6, align 2
  switch i16 %31, label %return [
    i16 24, label %sw.bb.i
    i16 25, label %sw.bb.i
    i16 28, label %sw.bb.i
    i16 29, label %sw.bb.i
    i16 31, label %sw.bb.i
    i16 32, label %sw.bb.i
    i16 33, label %sw.bb.i
    i16 36, label %sw.bb.i
    i16 37, label %sw.bb.i
    i16 38, label %sw.bb.i
    i16 39, label %sw.bb.i
    i16 40, label %sw.bb.i
    i16 41, label %sw.bb.i
    i16 42, label %sw.bb.i
    i16 43, label %sw.bb.i
    i16 44, label %sw.bb.i
    i16 45, label %sw.bb.i
    i16 46, label %sw.bb.i
    i16 47, label %sw.bb.i
    i16 48, label %sw.bb.i
    i16 49, label %sw.bb.i
    i16 50, label %sw.bb.i
  ]

sw.bb.i:                                          ; preds = %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit, %rtl_speed_down.exit
  %32 = load i8*, i8** %mmio_addr.i3, align 8
  %add.ptr.i = getelementptr i8, i8* %32, i64 68
  %33 = bitcast i8* %add.ptr.i to i32*
  %34 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %33) #10, !srcloc !2
  %or2.i = or i32 %34, 14
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i, i32* %33) #10, !srcloc !8
  br label %return

return:                                           ; preds = %entry, %sw.bb.i, %rtl_speed_down.exit, %14
  %retval.0 = phi i1 [ false, %14 ], [ true, %rtl_speed_down.exit ], [ true, %sw.bb.i ], [ false, %entry ]
  ret i1 %retval.0
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168b_0_hw_jumbo_disable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %0 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %0, i32 8, i16 zeroext 28672, i16 zeroext 22528) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168b_0_hw_jumbo_enable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %0 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %0, i32 8, i16 zeroext 28672, i16 zeroext 10240) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168b_1_hw_jumbo_disable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %1 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev.i, align 8
  %call.i.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %1, i32 8, i16 zeroext 28672, i16 zeroext 22528) #9
  %add.ptr = getelementptr i8, i8* %0, i64 85
  %2 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %3 = and i8 %2, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %3, i8* %add.ptr) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168b_1_hw_jumbo_enable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %pci_dev.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %1 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev.i, align 8
  %call.i.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %1, i32 8, i16 zeroext 28672, i16 zeroext 10240) #9
  %add.ptr = getelementptr i8, i8* %0, i64 85
  %2 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %3 = or i8 %2, 1
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %3, i8* %add.ptr) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168c_hw_jumbo_disable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 84
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %2 = and i8 %1, -5
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %2, i8* %add.ptr) #10, !srcloc !5
  %add.ptr3 = getelementptr i8, i8* %0, i64 85
  %3 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3) #10, !srcloc !6
  %4 = and i8 %3, -3
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %4, i8* %add.ptr3) #10, !srcloc !5
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %5 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %5, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168c_hw_jumbo_enable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 84
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %2 = or i8 %1, 4
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %2, i8* %add.ptr) #10, !srcloc !5
  %add.ptr3 = getelementptr i8, i8* %0, i64 85
  %3 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3) #10, !srcloc !6
  %4 = or i8 %3, 2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %4, i8* %add.ptr3) #10, !srcloc !5
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %5 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %5, i32 8, i16 zeroext 28672, i16 zeroext 8192) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168dp_hw_jumbo_disable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 84
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %2 = and i8 %1, -5
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %2, i8* %add.ptr) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168dp_hw_jumbo_enable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 84
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr) #10, !srcloc !6
  %2 = or i8 %1, 4
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %2, i8* %add.ptr) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168e_hw_jumbo_disable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 12, i8* %add.ptr) #10, !srcloc !5
  %add.ptr1 = getelementptr i8, i8* %0, i64 84
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1) #10, !srcloc !6
  %2 = and i8 %1, -5
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %2, i8* %add.ptr1) #10, !srcloc !5
  %add.ptr4 = getelementptr i8, i8* %0, i64 85
  %3 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr4) #10, !srcloc !6
  %4 = and i8 %3, -2
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %4, i8* %add.ptr4) #10, !srcloc !5
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %5 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %5, i32 8, i16 zeroext 28672, i16 zeroext 20480) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8168e_hw_jumbo_enable(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 236
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 63, i8* %add.ptr) #10, !srcloc !5
  %add.ptr1 = getelementptr i8, i8* %0, i64 84
  %1 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1) #10, !srcloc !6
  %2 = or i8 %1, 4
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %2, i8* %add.ptr1) #10, !srcloc !5
  %add.ptr4 = getelementptr i8, i8* %0, i64 85
  %3 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr4) #10, !srcloc !6
  %4 = or i8 %3, 1
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %4, i8* %add.ptr4) #10, !srcloc !5
  %pci_dev = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 1
  %5 = load %struct.pci_dev*, %struct.pci_dev** %pci_dev, align 8
  %call.i = call i32 @pcie_capability_clear_and_set_word(%struct.pci_dev* %5, i32 8, i16 zeroext 28672, i16 zeroext 8192) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8402_csi_write(%struct.rtl8169_private* nocapture readonly %tp, i32 %addr, i32 %value) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 100
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %value, i32* %1) #10, !srcloc !8
  %and = and i32 %addr, 4095
  %or2 = or i32 %and, -2147291136
  %add.ptr3 = getelementptr i8, i8* %0, i64 104
  %2 = bitcast i8* %add.ptr3 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2, i32* %2) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 99
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 10) #9
  %3 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %3, i64 104
  %4 = bitcast i8* %add.ptr.i to i32*
  %5 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %4) #10, !srcloc !2
  %tobool.i = icmp slt i32 %5, 0
  br i1 %tobool.i, label %for.cond.i.i, label %rtl_udelay_loop_wait_low.exit

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %6 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %6, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %rtl_udelay_loop_wait_low.exit, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %7 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %7, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_udelay_loop_wait_low.exit

rtl_udelay_loop_wait_low.exit:                    ; preds = %for.body.i.i, %do.body.i.i, %if.then5.i.i
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @r8402_csi_read(%struct.rtl8169_private* nocapture readonly %tp, i32 %addr) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %and = and i32 %addr, 4095
  %or1 = or i32 %and, 192512
  %add.ptr = getelementptr i8, i8* %0, i64 104
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1, i32* %1) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 99
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 10) #9
  %2 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %2, i64 104
  %3 = bitcast i8* %add.ptr.i to i32*
  %4 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %3) #10, !srcloc !2
  %tobool.i = icmp slt i32 %4, 0
  br i1 %tobool.i, label %cond.true, label %for.cond.i.i

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %5 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %5, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %cond.end, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %6 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %cond.end

cond.true:                                        ; preds = %for.body.i.i
  %add.ptr2 = getelementptr i8, i8* %0, i64 100
  %7 = bitcast i8* %add.ptr2 to i32*
  %8 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %7) #10, !srcloc !2
  br label %cond.end

cond.end:                                         ; preds = %if.then5.i.i, %do.body.i.i, %cond.true
  %cond = phi i32 [ %8, %cond.true ], [ -1, %do.body.i.i ], [ -1, %if.then5.i.i ]
  ret i32 %cond
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8411_csi_write(%struct.rtl8169_private* nocapture readonly %tp, i32 %addr, i32 %value) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 100
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %value, i32* %1) #10, !srcloc !8
  %and = and i32 %addr, 4095
  %or2 = or i32 %and, -2147356672
  %add.ptr3 = getelementptr i8, i8* %0, i64 104
  %2 = bitcast i8* %add.ptr3 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2, i32* %2) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 99
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 10) #9
  %3 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %3, i64 104
  %4 = bitcast i8* %add.ptr.i to i32*
  %5 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %4) #10, !srcloc !2
  %tobool.i = icmp slt i32 %5, 0
  br i1 %tobool.i, label %for.cond.i.i, label %rtl_udelay_loop_wait_low.exit

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %6 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %6, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %rtl_udelay_loop_wait_low.exit, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %7 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %7, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_udelay_loop_wait_low.exit

rtl_udelay_loop_wait_low.exit:                    ; preds = %for.body.i.i, %do.body.i.i, %if.then5.i.i
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @r8411_csi_read(%struct.rtl8169_private* nocapture readonly %tp, i32 %addr) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %and = and i32 %addr, 4095
  %or1 = or i32 %and, 126976
  %add.ptr = getelementptr i8, i8* %0, i64 104
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1, i32* %1) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 99
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 10) #9
  %2 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %2, i64 104
  %3 = bitcast i8* %add.ptr.i to i32*
  %4 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %3) #10, !srcloc !2
  %tobool.i = icmp slt i32 %4, 0
  br i1 %tobool.i, label %cond.true, label %for.cond.i.i

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %5 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %5, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %cond.end, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %6 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %cond.end

cond.true:                                        ; preds = %for.body.i.i
  %add.ptr2 = getelementptr i8, i8* %0, i64 100
  %7 = bitcast i8* %add.ptr2 to i32*
  %8 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %7) #10, !srcloc !2
  br label %cond.end

cond.end:                                         ; preds = %if.then5.i.i, %do.body.i.i, %cond.true
  %cond = phi i32 [ %8, %cond.true ], [ -1, %do.body.i.i ], [ -1, %if.then5.i.i ]
  ret i32 %cond
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @r8169_csi_write(%struct.rtl8169_private* nocapture readonly %tp, i32 %addr, i32 %value) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 100
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %value, i32* %1) #10, !srcloc !8
  %and = and i32 %addr, 4095
  %or1 = or i32 %and, -2147422208
  %add.ptr2 = getelementptr i8, i8* %0, i64 104
  %2 = bitcast i8* %add.ptr2 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or1, i32* %2) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 99
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 10) #9
  %3 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %3, i64 104
  %4 = bitcast i8* %add.ptr.i to i32*
  %5 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %4) #10, !srcloc !2
  %tobool.i = icmp slt i32 %5, 0
  br i1 %tobool.i, label %for.cond.i.i, label %rtl_udelay_loop_wait_low.exit

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %6 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %6, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %rtl_udelay_loop_wait_low.exit, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %7 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %7, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0), i32 1, i32 100, i32 10) #9
  br label %rtl_udelay_loop_wait_low.exit

rtl_udelay_loop_wait_low.exit:                    ; preds = %for.body.i.i, %do.body.i.i, %if.then5.i.i
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @r8169_csi_read(%struct.rtl8169_private* nocapture readonly %tp, i32 %addr) #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %and = and i32 %addr, 4095
  %or = or i32 %and, 61440
  %add.ptr = getelementptr i8, i8* %0, i64 104
  %1 = bitcast i8* %add.ptr to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or, i32* %1) #10, !srcloc !8
  br label %for.body.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %inc.i.i = add nuw nsw i32 %i.017.i.i, 1
  %cmp.i.i = icmp ult i32 %i.017.i.i, 99
  br i1 %cmp.i.i, label %for.body.i.i, label %do.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i, %entry
  %i.017.i.i = phi i32 [ 0, %entry ], [ %inc.i.i, %for.cond.i.i ]
  call void @__udelay(i64 10) #9
  %2 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %2, i64 104
  %3 = bitcast i8* %add.ptr.i to i32*
  %4 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %3) #10, !srcloc !2
  %tobool.i = icmp slt i32 %4, 0
  br i1 %tobool.i, label %cond.true, label %for.cond.i.i

do.body.i.i:                                      ; preds = %for.cond.i.i
  %msg_enable.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %5 = load i32, i32* %msg_enable.i.i, align 8
  %and.i.i = and i32 %5, 1
  %tobool4.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.i.i, label %cond.end, label %if.then5.i.i

if.then5.i.i:                                     ; preds = %do.body.i.i
  %dev.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %6 = load %struct.net_device*, %struct.net_device** %dev.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0), i32 0, i32 100, i32 10) #9
  br label %cond.end

cond.true:                                        ; preds = %for.body.i.i
  %add.ptr1 = getelementptr i8, i8* %0, i64 100
  %7 = bitcast i8* %add.ptr1 to i32*
  %8 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %7) #10, !srcloc !2
  br label %cond.end

cond.end:                                         ; preds = %if.then5.i.i, %do.body.i.i, %cond.true
  %cond = phi i32 [ %8, %cond.true ], [ -1, %do.body.i.i ], [ -1, %if.then5.i.i ]
  ret i32 %cond
}

; Function Attrs: noredzone
declare i32 @pci_enable_msi_range(%struct.pci_dev*, i32, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @mii_ethtool_gset(%struct.mii_if_info*, %struct.ethtool_cmd*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_get_settings(%struct.net_device* %dev, %struct.ethtool_cmd* %cmd) #0 {
entry:
  %mutex.i7 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5720
  %0 = bitcast i8* %mutex.i7 to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %0) #9
  %get_settings = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5656
  %1 = bitcast i8* %get_settings to i32 (%struct.net_device*, %struct.ethtool_cmd*)**
  %2 = load i32 (%struct.net_device*, %struct.ethtool_cmd*)*, i32 (%struct.net_device*, %struct.ethtool_cmd*)** %1, align 8
  %call1 = call i32 %2(%struct.net_device* %dev, %struct.ethtool_cmd* %cmd) #9
  call void @mutex_unlock(%struct.mutex* %0) #9
  ret i32 %call1
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_set_settings(%struct.net_device* %dev, %struct.ethtool_cmd* nocapture readonly %cmd) #0 {
entry:
  %timer = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5496
  %0 = bitcast i8* %timer to %struct.timer_list*
  %call1 = call i32 @del_timer_sync(%struct.timer_list* %0) #9
  %mutex.i12 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5720
  %1 = bitcast i8* %mutex.i12 to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %1) #9
  %autoneg = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 8
  %2 = load i8, i8* %autoneg, align 2
  %speed.i = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 3
  %3 = load i16, i16* %speed.i, align 4
  %duplex = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 4
  %4 = load i8, i8* %duplex, align 2
  %advertising = getelementptr inbounds %struct.ethtool_cmd, %struct.ethtool_cmd* %cmd, i64 0, i32 2
  %5 = load i32, i32* %advertising, align 4
  %set_speed.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5648
  %6 = bitcast i8* %set_speed.i to i32 (%struct.net_device*, i8, i16, i8, i32)**
  %7 = load i32 (%struct.net_device*, i8, i16, i8, i32)*, i32 (%struct.net_device*, i8, i16, i8, i32)** %6, align 8
  %call1.i = call i32 %7(%struct.net_device* %dev, i8 zeroext %2, i16 zeroext %3, i8 zeroext %4, i32 %5) #9
  %cmp.i = icmp slt i32 %call1.i, 0
  br i1 %cmp.i, label %rtl8169_set_speed.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %state.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i64 0, i32 8
  %8 = load volatile i64, i64* %state.i.i, align 8
  %and1.i.i.i = and i64 %8, 1
  %cmp.i.i.i = icmp eq i64 %and1.i.i.i, 0
  %cmp3.i = icmp ne i8 %2, 1
  %or.cond.not.i = or i1 %cmp3.i, %cmp.i.i.i
  %9 = and i32 %5, 32
  %tobool.i = icmp eq i32 %9, 0
  %or.cond18.i = or i1 %tobool.i, %or.cond.not.i
  br i1 %or.cond18.i, label %rtl8169_set_speed.exit, label %if.then7.i

if.then7.i:                                       ; preds = %if.end.i
  %10 = load volatile i64, i64* @jiffies, align 8
  %add.i = add i64 %10, 2500
  %call8.i = call i32 @mod_timer(%struct.timer_list* nonnull %0, i64 %add.i) #9
  br label %rtl8169_set_speed.exit

rtl8169_set_speed.exit:                           ; preds = %entry, %if.end.i, %if.then7.i
  call void @mutex_unlock(%struct.mutex* %1) #9
  ret i32 %call1.i
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_get_drvinfo(%struct.net_device* nocapture readonly %dev, %struct.ethtool_drvinfo* %info) #0 {
entry:
  %rtl_fw1 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5896
  %0 = bitcast i8* %rtl_fw1 to %struct.rtl_fw**
  %1 = load %struct.rtl_fw*, %struct.rtl_fw** %0, align 8
  %arraydecay = getelementptr inbounds %struct.ethtool_drvinfo, %struct.ethtool_drvinfo* %info, i64 0, i32 1, i64 0
  %call2 = call i64 @strlcpy(i8* %arraydecay, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 32) #9
  %arraydecay3 = getelementptr inbounds %struct.ethtool_drvinfo, %struct.ethtool_drvinfo* %info, i64 0, i32 2, i64 0
  %call4 = call i64 @strlcpy(i8* %arraydecay3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i64 32) #9
  %arraydecay5 = getelementptr inbounds %struct.ethtool_drvinfo, %struct.ethtool_drvinfo* %info, i64 0, i32 4, i64 0
  %pci_dev = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %2 = bitcast i8* %pci_dev to %struct.pci_dev**
  %3 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %init_name.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i64 0, i32 35, i32 3
  %4 = load i8*, i8** %init_name.i.i, align 8
  %tobool.i.i = icmp eq i8* %4, null
  br i1 %tobool.i.i, label %if.end.i.i, label %pci_name.exit

if.end.i.i:                                       ; preds = %entry
  %name.i.i.i = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i64 0, i32 35, i32 2, i32 0
  %5 = load i8*, i8** %name.i.i.i, align 8
  br label %pci_name.exit

pci_name.exit:                                    ; preds = %entry, %if.end.i.i
  %retval.0.i.i = phi i8* [ %5, %if.end.i.i ], [ %4, %entry ]
  %call7 = call i64 @strlcpy(i8* %arraydecay5, i8* %retval.0.i.i, i64 32) #9
  %tobool.i = icmp eq %struct.rtl_fw* %1, null
  %cmp.i = icmp ugt %struct.rtl_fw* %1, inttoptr (i64 -4096 to %struct.rtl_fw*)
  %.cmp.i = or i1 %tobool.i, %cmp.i
  br i1 %.cmp.i, label %if.end18, label %if.then13

if.then13:                                        ; preds = %pci_name.exit
  %arraydecay14 = getelementptr inbounds %struct.ethtool_drvinfo, %struct.ethtool_drvinfo* %info, i64 0, i32 3, i64 0
  %arraydecay16 = getelementptr inbounds %struct.rtl_fw, %struct.rtl_fw* %1, i64 0, i32 1, i64 0
  %call17 = call i64 @strlcpy(i8* %arraydecay14, i8* %arraydecay16, i64 32) #9
  br label %if.end18

if.end18:                                         ; preds = %if.then13, %pci_name.exit
  ret void
}

; Function Attrs: norecurse noredzone nounwind readnone sspstrong
define internal i32 @rtl8169_get_regs_len(%struct.net_device* nocapture readnone %dev) #3 {
entry:
  ret i32 256
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_get_regs(%struct.net_device* %dev, %struct.ethtool_regs* nocapture readnone %regs, i8* nocapture %p) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to i32**
  %1 = load i32*, i32** %0, align 8
  %2 = bitcast i8* %p to i32*
  %mutex.i9 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5720
  %3 = bitcast i8* %mutex.i9 to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %3) #9
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.012 = phi i32 [ 0, %entry ], [ %add.7, %for.body ]
  %dw.011 = phi i32* [ %2, %entry ], [ %incdec.ptr.7, %for.body ]
  %data.010 = phi i32* [ %1, %entry ], [ %incdec.ptr1.7, %for.body ]
  %incdec.ptr = getelementptr i32, i32* %dw.011, i64 1
  %incdec.ptr1 = getelementptr i32, i32* %data.010, i64 1
  %4 = load i32, i32* %data.010, align 1
  store i32 %4, i32* %dw.011, align 1
  %incdec.ptr.1 = getelementptr i32, i32* %dw.011, i64 2
  %incdec.ptr1.1 = getelementptr i32, i32* %data.010, i64 2
  %5 = load i32, i32* %incdec.ptr1, align 1
  store i32 %5, i32* %incdec.ptr, align 1
  %incdec.ptr.2 = getelementptr i32, i32* %dw.011, i64 3
  %incdec.ptr1.2 = getelementptr i32, i32* %data.010, i64 3
  %6 = load i32, i32* %incdec.ptr1.1, align 1
  store i32 %6, i32* %incdec.ptr.1, align 1
  %incdec.ptr.3 = getelementptr i32, i32* %dw.011, i64 4
  %incdec.ptr1.3 = getelementptr i32, i32* %data.010, i64 4
  %7 = load i32, i32* %incdec.ptr1.2, align 1
  store i32 %7, i32* %incdec.ptr.2, align 1
  %incdec.ptr.4 = getelementptr i32, i32* %dw.011, i64 5
  %incdec.ptr1.4 = getelementptr i32, i32* %data.010, i64 5
  %8 = load i32, i32* %incdec.ptr1.3, align 1
  store i32 %8, i32* %incdec.ptr.3, align 1
  %incdec.ptr.5 = getelementptr i32, i32* %dw.011, i64 6
  %incdec.ptr1.5 = getelementptr i32, i32* %data.010, i64 6
  %9 = load i32, i32* %incdec.ptr1.4, align 1
  store i32 %9, i32* %incdec.ptr.4, align 1
  %incdec.ptr.6 = getelementptr i32, i32* %dw.011, i64 7
  %incdec.ptr1.6 = getelementptr i32, i32* %data.010, i64 7
  %10 = load i32, i32* %incdec.ptr1.5, align 1
  store i32 %10, i32* %incdec.ptr.5, align 1
  %incdec.ptr.7 = getelementptr i32, i32* %dw.011, i64 8
  %incdec.ptr1.7 = getelementptr i32, i32* %data.010, i64 8
  %11 = load i32, i32* %incdec.ptr1.6, align 1
  store i32 %11, i32* %incdec.ptr.6, align 1
  %add.7 = add nsw i32 %i.012, 32
  %cmp.7 = icmp ult i32 %add.7, 256
  br i1 %cmp.7, label %for.body, label %for.end

for.end:                                          ; preds = %for.body
  call void @mutex_unlock(%struct.mutex* %3) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_get_wol(%struct.net_device* %dev, %struct.ethtool_wolinfo* nocapture %wol) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %mutex.i6 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5720
  %0 = bitcast i8* %mutex.i6 to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %0) #9
  %supported = getelementptr inbounds %struct.ethtool_wolinfo, %struct.ethtool_wolinfo* %wol, i64 0, i32 1
  store i32 47, i32* %supported, align 4
  %mmio_addr.i = bitcast i8* %add.ptr.i to i8**
  %1 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i7 = getelementptr i8, i8* %1, i64 82
  %2 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i7) #10, !srcloc !6
  %3 = and i8 %2, 1
  %tobool.i = icmp eq i8 %3, 0
  br i1 %tobool.i, label %__rtl8169_get_wol.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %add.ptr1.i = getelementptr i8, i8* %1, i64 84
  %4 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1.i) #10, !srcloc !6
  %conv3.i = zext i8 %4 to i32
  %and4.i = lshr i32 %conv3.i, 4
  %and4.lobit.i = and i32 %and4.i, 1
  %mac_version.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2342
  %5 = bitcast i8* %mac_version.i to i16*
  %6 = load i16, i16* %5, align 2
  switch i16 %6, label %sw.default.i [
    i16 33, label %sw.bb.i
    i16 34, label %sw.bb.i
    i16 35, label %sw.bb.i
    i16 36, label %sw.bb.i
    i16 37, label %sw.bb.i
    i16 39, label %sw.bb.i
    i16 40, label %sw.bb.i
    i16 41, label %sw.bb.i
    i16 42, label %sw.bb.i
    i16 43, label %sw.bb.i
    i16 44, label %sw.bb.i
    i16 45, label %sw.bb.i
    i16 46, label %sw.bb.i
    i16 47, label %sw.bb.i
    i16 48, label %sw.bb.i
    i16 49, label %sw.bb.i
    i16 50, label %sw.bb.i
  ]

sw.bb.i:                                          ; preds = %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i
  %7 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i9 = getelementptr i8, i8* %7, i64 116
  %8 = bitcast i8* %add.ptr.i9 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %8) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %sw.bb.i
  %i.017.i.i.i = phi i32 [ 0, %sw.bb.i ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %9 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i = getelementptr i8, i8* %9, i64 116
  %10 = bitcast i8* %add.ptr.i.i to i32*
  %11 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %10) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %11, 0
  br i1 %tobool.i.i, label %cond.true.i, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %12 = bitcast i8* %msg_enable.i.i.i to i32*
  %13 = load i32, i32* %12, align 8
  %and.i.i.i = and i32 %13, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %sw.epilog.i.thread, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2128
  %14 = bitcast i8* %dev.i.i.i to %struct.net_device**
  %15 = load %struct.net_device*, %struct.net_device** %14, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %15, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %sw.epilog.i.thread

cond.true.i:                                      ; preds = %for.body.i.i.i
  %add.ptr3.i = getelementptr i8, i8* %7, i64 112
  %16 = bitcast i8* %add.ptr3.i to i32*
  %17 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %16) #10, !srcloc !2
  %phitmp = and i32 %17, 65536
  br label %sw.epilog.i

sw.default.i:                                     ; preds = %if.end.i
  %and16.i = and i32 %conv3.i, 32
  br label %sw.epilog.i

sw.epilog.i.thread:                               ; preds = %do.body.i.i.i, %if.then5.i.i.i
  %or19.i11 = or i32 %and4.lobit.i, 32
  br label %18

sw.epilog.i:                                      ; preds = %cond.true.i, %sw.default.i
  %and16.sink.i = phi i32 [ %and16.i, %sw.default.i ], [ %phitmp, %cond.true.i ]
  %tobool17.i = icmp eq i32 %and16.sink.i, 0
  %or19.i = or i32 %and4.lobit.i, 32
  %and4.lobit.i.or19.i = select i1 %tobool17.i, i32 %and4.lobit.i, i32 %or19.i
  br label %18

; <label>:18:                                     ; preds = %sw.epilog.i, %sw.epilog.i.thread
  %19 = phi i32 [ %or19.i11, %sw.epilog.i.thread ], [ %and4.lobit.i.or19.i, %sw.epilog.i ]
  %add.ptr21.i = getelementptr i8, i8* %1, i64 86
  %20 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr21.i) #10, !srcloc !6
  %conv23.i = zext i8 %20 to i32
  %and24.i = lshr i32 %conv23.i, 3
  %21 = and i32 %and24.i, 2
  %22 = or i32 %21, %19
  %23 = and i32 %and24.i, 8
  %24 = or i32 %22, %23
  %25 = and i32 %and24.i, 4
  %26 = or i32 %24, %25
  br label %__rtl8169_get_wol.exit

__rtl8169_get_wol.exit:                           ; preds = %entry, %18
  %retval.0.i = phi i32 [ %26, %18 ], [ 0, %entry ]
  %wolopts = getelementptr inbounds %struct.ethtool_wolinfo, %struct.ethtool_wolinfo* %wol, i64 0, i32 2
  store i32 %retval.0.i, i32* %wolopts, align 4
  call void @mutex_unlock(%struct.mutex* %0) #9
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_set_wol(%struct.net_device* %dev, %struct.ethtool_wolinfo* nocapture readonly %wol) #0 {
entry:
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %0 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %mutex.i14 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5720
  %1 = bitcast i8* %mutex.i14 to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %1) #9
  %wolopts = getelementptr inbounds %struct.ethtool_wolinfo, %struct.ethtool_wolinfo* %wol, i64 0, i32 2
  %2 = load i32, i32* %wolopts, align 4
  %tobool = icmp eq i32 %2, 0
  %features = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5792
  %3 = bitcast i8* %features to i32*
  %4 = load i32, i32* %3, align 8
  %and = and i32 %4, -2
  %or = or i32 %4, 1
  %and.sink = select i1 %tobool, i32 %and, i32 %or
  store i32 %and.sink, i32* %3, align 8
  %5 = load i32, i32* %wolopts, align 4
  call fastcc void @__rtl8169_set_wol(%struct.rtl8169_private* %0, i32 %5) #11
  call void @mutex_unlock(%struct.mutex* %1) #9
  %pci_dev = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2120
  %6 = bitcast i8* %pci_dev to %struct.pci_dev**
  %7 = load %struct.pci_dev*, %struct.pci_dev** %6, align 8
  %dev3 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %7, i64 0, i32 35
  %8 = load i32, i32* %wolopts, align 4
  %tobool5 = icmp ne i32 %8, 0
  %call6 = call i32 @device_set_wakeup_enable(%struct.device* %dev3, i1 zeroext %tobool5) #9
  ret i32 0
}

; Function Attrs: norecurse noredzone nounwind readonly sspstrong
define internal i32 @rtl8169_get_msglevel(%struct.net_device* nocapture readonly %dev) #5 {
entry:
  %msg_enable = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %0 = bitcast i8* %msg_enable to i32*
  %1 = load i32, i32* %0, align 8
  ret i32 %1
}

; Function Attrs: norecurse noredzone nounwind sspstrong
define internal void @rtl8169_set_msglevel(%struct.net_device* nocapture %dev, i32 %value) #6 {
entry:
  %msg_enable = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2336
  %0 = bitcast i8* %msg_enable to i32*
  store i32 %value, i32* %0, align 8
  ret void
}

; Function Attrs: noredzone
declare i32 @ethtool_op_get_link(%struct.net_device*) #1

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_get_strings(%struct.net_device* nocapture readnone %dev, i32 %stringset, i8* %data) #0 {
entry:
  %cond = icmp eq i32 %stringset, 1
  br i1 %cond, label %if.then, label %sw.epilog

if.then:                                          ; preds = %entry
  %call = call i8* @__memcpy(i8* %data, i8* getelementptr inbounds ([13 x [32 x i8]], [13 x [32 x i8]]* @rtl8169_gstrings, i64 0, i64 0, i64 0), i64 416) #9
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %if.then
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal void @rtl8169_get_ethtool_stats(%struct.net_device* nocapture readonly %dev, %struct.ethtool_stats* nocapture readnone %stats, i64* nocapture %data) #0 {
entry:
  %counters1 = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5856
  %0 = bitcast i8* %counters1 to %struct.rtl8169_counters**
  %1 = load %struct.rtl8169_counters*, %struct.rtl8169_counters** %0, align 8
  %call2 = call i32 @rtnl_is_locked() #9
  %tobool = icmp eq i32 %call2, 0
  br i1 %tobool, label %if.then, label %do.end, !prof !10

if.then:                                          ; preds = %entry
  %call6 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.103, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 2297) #9
  call void @dump_stack() #9
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %call7 = call fastcc zeroext i1 @rtl8169_update_counters(%struct.net_device* nonnull %dev) #11
  %tx_packets = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 0
  %2 = load i64, i64* %tx_packets, align 8
  store i64 %2, i64* %data, align 8
  %rx_packets = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 1
  %3 = load i64, i64* %rx_packets, align 8
  %arrayidx8 = getelementptr i64, i64* %data, i64 1
  store i64 %3, i64* %arrayidx8, align 8
  %tx_errors = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 2
  %4 = load i64, i64* %tx_errors, align 8
  %arrayidx9 = getelementptr i64, i64* %data, i64 2
  store i64 %4, i64* %arrayidx9, align 8
  %rx_errors = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 3
  %5 = load i32, i32* %rx_errors, align 8
  %conv10 = zext i32 %5 to i64
  %arrayidx11 = getelementptr i64, i64* %data, i64 3
  store i64 %conv10, i64* %arrayidx11, align 8
  %rx_missed = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 4
  %6 = load i16, i16* %rx_missed, align 4
  %conv12 = zext i16 %6 to i64
  %arrayidx13 = getelementptr i64, i64* %data, i64 4
  store i64 %conv12, i64* %arrayidx13, align 8
  %align_errors = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 5
  %7 = load i16, i16* %align_errors, align 2
  %conv14 = zext i16 %7 to i64
  %arrayidx15 = getelementptr i64, i64* %data, i64 5
  store i64 %conv14, i64* %arrayidx15, align 8
  %tx_one_collision = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 6
  %8 = load i32, i32* %tx_one_collision, align 8
  %conv16 = zext i32 %8 to i64
  %arrayidx17 = getelementptr i64, i64* %data, i64 6
  store i64 %conv16, i64* %arrayidx17, align 8
  %tx_multi_collision = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 7
  %9 = load i32, i32* %tx_multi_collision, align 4
  %conv18 = zext i32 %9 to i64
  %arrayidx19 = getelementptr i64, i64* %data, i64 7
  store i64 %conv18, i64* %arrayidx19, align 8
  %rx_unicast = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 8
  %10 = load i64, i64* %rx_unicast, align 8
  %arrayidx20 = getelementptr i64, i64* %data, i64 8
  store i64 %10, i64* %arrayidx20, align 8
  %rx_broadcast = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 9
  %11 = load i64, i64* %rx_broadcast, align 8
  %arrayidx21 = getelementptr i64, i64* %data, i64 9
  store i64 %11, i64* %arrayidx21, align 8
  %rx_multicast = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 10
  %12 = load i32, i32* %rx_multicast, align 8
  %conv22 = zext i32 %12 to i64
  %arrayidx23 = getelementptr i64, i64* %data, i64 10
  store i64 %conv22, i64* %arrayidx23, align 8
  %tx_aborted = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 11
  %13 = load i16, i16* %tx_aborted, align 4
  %conv24 = zext i16 %13 to i64
  %arrayidx25 = getelementptr i64, i64* %data, i64 11
  store i64 %conv24, i64* %arrayidx25, align 8
  %tx_underun = getelementptr inbounds %struct.rtl8169_counters, %struct.rtl8169_counters* %1, i64 0, i32 12
  %14 = load i16, i16* %tx_underun, align 2
  %conv26 = zext i16 %14 to i64
  %arrayidx27 = getelementptr i64, i64* %data, i64 12
  store i64 %conv26, i64* %arrayidx27, align 8
  ret void
}

; Function Attrs: norecurse noredzone nounwind readnone sspstrong
define internal i32 @rtl8169_get_sset_count(%struct.net_device* nocapture readnone %dev, i32 %sset) #3 {
entry:
  %cond = icmp eq i32 %sset, 1
  %. = select i1 %cond, i32 13, i32 -95
  ret i32 %.
}

; Function Attrs: noredzone
declare i32 @ethtool_op_get_ts_info(%struct.net_device*, %struct.ethtool_ts_info*) #1

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @__rtl8169_set_wol(%struct.rtl8169_private* nocapture readonly %tp, i32 %wolopts) unnamed_addr #0 {
entry:
  %mmio_addr = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %0 = load i8*, i8** %mmio_addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 80
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 -64, i8* %add.ptr) #10, !srcloc !5
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %1 = load i16, i16* %mac_version, align 2
  switch i16 %1, label %sw.epilog [
    i16 33, label %sw.bb
    i16 34, label %sw.bb
    i16 35, label %sw.bb
    i16 36, label %sw.bb
    i16 37, label %sw.bb
    i16 39, label %sw.bb
    i16 40, label %sw.bb
    i16 41, label %sw.bb
    i16 42, label %sw.bb
    i16 43, label %sw.bb
    i16 44, label %sw.bb
    i16 45, label %sw.bb
    i16 46, label %sw.bb
    i16 47, label %sw.bb
    i16 48, label %sw.bb
    i16 49, label %sw.bb
    i16 50, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %and = and i32 %wolopts, 32
  %tobool = icmp eq i32 %and, 0
  %2 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i87 = getelementptr i8, i8* %2, i64 116
  %3 = bitcast i8* %add.ptr.i.i87 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %3) #10
  br i1 %tobool, label %for.body.i.i.i.i94.preheader, label %for.body.i.i.i.i.preheader

for.body.i.i.i.i.preheader:                       ; preds = %sw.bb
  br label %for.body.i.i.i.i

for.body.i.i.i.i94.preheader:                     ; preds = %sw.bb
  br label %for.body.i.i.i.i94

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.body.i.i.i.i.preheader, %for.cond.i.i.i.i
  %i.017.i.i.i.i = phi i32 [ %inc.i.i.i.i, %for.cond.i.i.i.i ], [ 0, %for.body.i.i.i.i.preheader ]
  call void @__udelay(i64 100) #9
  %4 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %4, i64 116
  %5 = bitcast i8* %add.ptr.i.i.i to i32*
  %6 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %5) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %6, 0
  br i1 %tobool.i.i.i, label %cond.true.i.i, label %for.cond.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %7 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %7, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %rtl_w0w1_eri.exit, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %dev.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %8 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit

cond.true.i.i:                                    ; preds = %for.body.i.i.i.i
  %add.ptr3.i.i = getelementptr i8, i8* %2, i64 112
  %9 = bitcast i8* %add.ptr3.i.i to i32*
  %10 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %9) #10, !srcloc !2
  %phitmp = or i32 %10, 65536
  br label %rtl_w0w1_eri.exit

rtl_w0w1_eri.exit:                                ; preds = %do.body.i.i.i.i, %if.then5.i.i.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %phitmp, %cond.true.i.i ], [ -1, %do.body.i.i.i.i ], [ -1, %if.then5.i.i.i.i ]
  %11 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i = getelementptr i8, i8* %11, i64 112
  %12 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i, i32* %12) #10, !srcloc !8
  %add.ptr11.i = getelementptr i8, i8* %11, i64 116
  %13 = bitcast i8* %add.ptr11.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147467044, i32* %13) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %rtl_w0w1_eri.exit
  %i.017.i.i.i = phi i32 [ 0, %rtl_w0w1_eri.exit ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %14 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i105 = getelementptr i8, i8* %14, i64 116
  %15 = bitcast i8* %add.ptr.i.i105 to i32*
  %16 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %15) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %16, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %sw.epilog

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %17 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %17, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %sw.epilog, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %18 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %18, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %sw.epilog

for.cond.i.i.i.i90:                               ; preds = %for.body.i.i.i.i94
  %inc.i.i.i.i88 = add nuw nsw i32 %i.017.i.i.i.i91, 1
  %cmp.i.i.i.i89 = icmp ult i32 %i.017.i.i.i.i91, 99
  br i1 %cmp.i.i.i.i89, label %for.body.i.i.i.i94, label %do.body.i.i.i.i98

for.body.i.i.i.i94:                               ; preds = %for.body.i.i.i.i94.preheader, %for.cond.i.i.i.i90
  %i.017.i.i.i.i91 = phi i32 [ %inc.i.i.i.i88, %for.cond.i.i.i.i90 ], [ 0, %for.body.i.i.i.i94.preheader ]
  call void @__udelay(i64 100) #9
  %19 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i.i92 = getelementptr i8, i8* %19, i64 116
  %20 = bitcast i8* %add.ptr.i.i.i92 to i32*
  %21 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %20) #10, !srcloc !2
  %tobool.i.i.i93 = icmp slt i32 %21, 0
  br i1 %tobool.i.i.i93, label %cond.true.i.i102, label %for.cond.i.i.i.i90

do.body.i.i.i.i98:                                ; preds = %for.cond.i.i.i.i90
  %msg_enable.i.i.i.i95 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %22 = load i32, i32* %msg_enable.i.i.i.i95, align 8
  %and.i.i.i.i96 = and i32 %22, 1
  %tobool4.i.i.i.i97 = icmp eq i32 %and.i.i.i.i96, 0
  br i1 %tobool4.i.i.i.i97, label %rtl_w0w1_eri.exit104, label %if.then5.i.i.i.i100

if.then5.i.i.i.i100:                              ; preds = %do.body.i.i.i.i98
  %dev.i.i.i.i99 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %23 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i99, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %23, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %rtl_w0w1_eri.exit104

cond.true.i.i102:                                 ; preds = %for.body.i.i.i.i94
  %add.ptr3.i.i101 = getelementptr i8, i8* %2, i64 112
  %24 = bitcast i8* %add.ptr3.i.i101 to i32*
  %25 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %24) #10, !srcloc !2
  %phitmp123 = and i32 %25, -65537
  br label %rtl_w0w1_eri.exit104

rtl_w0w1_eri.exit104:                             ; preds = %do.body.i.i.i.i98, %if.then5.i.i.i.i100, %cond.true.i.i102
  %cond.i.i103 = phi i32 [ %phitmp123, %cond.true.i.i102 ], [ -65537, %do.body.i.i.i.i98 ], [ -65537, %if.then5.i.i.i.i100 ]
  %26 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i107 = getelementptr i8, i8* %26, i64 112
  %27 = bitcast i8* %add.ptr.i107 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %cond.i.i103, i32* %27) #10, !srcloc !8
  %add.ptr11.i108 = getelementptr i8, i8* %26, i64 116
  %28 = bitcast i8* %add.ptr11.i108 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 -2147467044, i32* %28) #10, !srcloc !8
  br label %for.body.i.i.i115

for.cond.i.i.i111:                                ; preds = %for.body.i.i.i115
  %inc.i.i.i109 = add nuw nsw i32 %i.017.i.i.i112, 1
  %cmp.i.i.i110 = icmp ult i32 %i.017.i.i.i112, 99
  br i1 %cmp.i.i.i110, label %for.body.i.i.i115, label %do.body.i.i.i119

for.body.i.i.i115:                                ; preds = %for.cond.i.i.i111, %rtl_w0w1_eri.exit104
  %i.017.i.i.i112 = phi i32 [ 0, %rtl_w0w1_eri.exit104 ], [ %inc.i.i.i109, %for.cond.i.i.i111 ]
  call void @__udelay(i64 100) #9
  %29 = load i8*, i8** %mmio_addr, align 8
  %add.ptr.i.i113 = getelementptr i8, i8* %29, i64 116
  %30 = bitcast i8* %add.ptr.i.i113 to i32*
  %31 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %30) #10, !srcloc !2
  %tobool.i.i114 = icmp slt i32 %31, 0
  br i1 %tobool.i.i114, label %for.cond.i.i.i111, label %sw.epilog

do.body.i.i.i119:                                 ; preds = %for.cond.i.i.i111
  %msg_enable.i.i.i116 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %32 = load i32, i32* %msg_enable.i.i.i116, align 8
  %and.i.i.i117 = and i32 %32, 1
  %tobool4.i.i.i118 = icmp eq i32 %and.i.i.i117, 0
  br i1 %tobool4.i.i.i118, label %sw.epilog, label %if.then5.i.i.i121

if.then5.i.i.i121:                                ; preds = %do.body.i.i.i119
  %dev.i.i.i120 = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %33 = load %struct.net_device*, %struct.net_device** %dev.i.i.i120, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %33, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body.i.i.i, %for.body.i.i.i115, %if.then5.i.i.i121, %do.body.i.i.i119, %if.then5.i.i.i, %do.body.i.i.i, %entry
  %tmp.0 = phi i64 [ 6, %entry ], [ 5, %do.body.i.i.i ], [ 5, %if.then5.i.i.i ], [ 5, %do.body.i.i.i119 ], [ 5, %if.then5.i.i.i121 ], [ 5, %for.body.i.i.i115 ], [ 5, %for.body.i.i.i ]
  br label %for.body

for.body:                                         ; preds = %for.body, %sw.epilog
  %indvars.iv = phi i64 [ 0, %sw.epilog ], [ %indvars.iv.next, %for.body ]
  %reg = getelementptr [6 x %struct.anon.116], [6 x %struct.anon.116]* @__rtl8169_set_wol.cfg, i64 0, i64 %indvars.iv, i32 1
  %34 = load i16, i16* %reg, align 4
  %idx.ext = zext i16 %34 to i64
  %add.ptr3 = getelementptr i8, i8* %0, i64 %idx.ext
  %35 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr3) #10, !srcloc !6
  %mask = getelementptr [6 x %struct.anon.116], [6 x %struct.anon.116]* @__rtl8169_set_wol.cfg, i64 0, i64 %indvars.iv, i32 2
  %36 = load i8, i8* %mask, align 2
  %neg = xor i8 %36, -1
  %and8 = and i8 %35, %neg
  %opt = getelementptr [6 x %struct.anon.116], [6 x %struct.anon.116]* @__rtl8169_set_wol.cfg, i64 0, i64 %indvars.iv, i32 0
  %37 = load i32, i32* %opt, align 8
  %and12 = and i32 %37, %wolopts
  %tobool13 = icmp eq i32 %and12, 0
  %or84 = or i8 %36, %35
  %and8.or84 = select i1 %tobool13, i8 %and8, i8 %or84
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %and8.or84, i8* %add.ptr3) #10, !srcloc !5
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %tmp.0
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %38 = load i16, i16* %mac_version, align 2
  %switch = icmp ult i16 %38, 17
  br i1 %switch, label %sw.bb30, label %sw.default43

sw.bb30:                                          ; preds = %for.end
  %add.ptr31 = getelementptr i8, i8* %0, i64 82
  %39 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr31) #10, !srcloc !6
  %40 = and i8 %39, -2
  %tobool36 = icmp eq i32 %wolopts, 0
  %41 = or i8 %39, 1
  %. = select i1 %tobool36, i8 %40, i8 %41
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %., i8* %add.ptr31) #10, !srcloc !5
  br label %sw.epilog56

sw.default43:                                     ; preds = %for.end
  %add.ptr44 = getelementptr i8, i8* %0, i64 83
  %42 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr44) #10, !srcloc !6
  %43 = and i8 %42, -33
  %tobool49 = icmp eq i32 %wolopts, 0
  %44 = or i8 %42, 32
  %.85 = select i1 %tobool49, i8 %43, i8 %44
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 %.85, i8* %add.ptr44) #10, !srcloc !5
  br label %sw.epilog56

sw.epilog56:                                      ; preds = %sw.default43, %sw.bb30
  call void asm sideeffect "movb $0,$1", "q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8 0, i8* %add.ptr) #10, !srcloc !5
  ret void
}

; Function Attrs: noredzone
declare i32 @rtnl_is_locked() local_unnamed_addr #1

; Function Attrs: noredzone
declare void @dump_stack() local_unnamed_addr #1

; Function Attrs: noredzone
declare i8* @skb_put(%struct.sk_buff*, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare zeroext i16 @eth_type_trans(%struct.sk_buff*, %struct.net_device*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @napi_gro_receive(%struct.napi_struct*, %struct.sk_buff*) local_unnamed_addr #1

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32, i32, i32) #7

; Function Attrs: noredzone
declare %struct.sk_buff* @__napi_alloc_skb(%struct.napi_struct*, i32, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @napi_complete_done(%struct.napi_struct*, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @pskb_expand_head(%struct.sk_buff*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare zeroext i16 @csum_ipv6_magic(%struct.in6_addr*, %struct.in6_addr*, i32, i16 zeroext, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @skb_pad(%struct.sk_buff*, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare zeroext i1 @arch_dma_alloc_attrs(%struct.device**, i32*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc i32 @ocp_read(%struct.rtl8169_private* nocapture readonly %tp, i8 zeroext %mask, i16 zeroext %reg) unnamed_addr #0 {
entry:
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %0 = load i16, i16* %mac_version, align 2
  switch i16 %0, label %do.body [
    i16 26, label %sw.bb
    i16 27, label %sw.bb
    i16 30, label %sw.bb
    i16 48, label %sw.bb1
    i16 49, label %sw.bb1
    i16 50, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  %mmio_addr.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %1 = load i8*, i8** %mmio_addr.i, align 8
  %2 = and i8 %mask, 15
  %and.i = zext i8 %2 to i32
  %shl.i = shl nuw nsw i32 %and.i, 12
  %3 = and i16 %reg, 4095
  %and2.i = zext i16 %3 to i32
  %or.i = or i32 %shl.i, %and2.i
  %add.ptr.i = getelementptr i8, i8* %1, i64 180
  %4 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or.i, i32* %4) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 19
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %sw.bb
  %i.017.i.i.i = phi i32 [ 0, %sw.bb ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %5 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i = getelementptr i8, i8* %5, i64 180
  %6 = bitcast i8* %add.ptr.i.i to i32*
  %7 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %6) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %7, 0
  br i1 %tobool.i.i, label %cond.true.i, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %8 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %8, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %return, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %9 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %9, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0), i32 0, i32 20, i32 100) #9
  br label %return

cond.true.i:                                      ; preds = %for.body.i.i.i
  %add.ptr4.i = getelementptr i8, i8* %1, i64 176
  %10 = bitcast i8* %add.ptr4.i to i32*
  %11 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %10) #10, !srcloc !2
  br label %return

sw.bb1:                                           ; preds = %entry, %entry, %entry
  %conv.i = zext i16 %reg to i32
  %mmio_addr.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %12 = load i8*, i8** %mmio_addr.i.i, align 8
  %or2.i.i = or i32 %conv.i, 192512
  %add.ptr.i.i10 = getelementptr i8, i8* %12, i64 116
  %13 = bitcast i8* %add.ptr.i.i10 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or2.i.i, i32* %13) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %sw.bb1
  %i.017.i.i.i.i = phi i32 [ 0, %sw.bb1 ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %14 = load i8*, i8** %mmio_addr.i.i, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %14, i64 116
  %15 = bitcast i8* %add.ptr.i.i.i to i32*
  %16 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %15) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %16, 0
  br i1 %tobool.i.i.i, label %cond.true.i.i, label %for.cond.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %17 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %17, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %return, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %dev.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %18 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %18, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %return

cond.true.i.i:                                    ; preds = %for.body.i.i.i.i
  %add.ptr3.i.i = getelementptr i8, i8* %12, i64 112
  %19 = bitcast i8* %add.ptr3.i.i to i32*
  %20 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %19) #10, !srcloc !2
  br label %return

do.body:                                          ; preds = %entry
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 1315, i64 12) #10, !srcloc !46
  br label %do.body3

do.body3:                                         ; preds = %do.body3, %do.body
  br label %do.body3

return:                                           ; preds = %cond.true.i.i, %if.then5.i.i.i.i, %do.body.i.i.i.i, %cond.true.i, %if.then5.i.i.i, %do.body.i.i.i
  %retval.0 = phi i32 [ %11, %cond.true.i ], [ -1, %do.body.i.i.i ], [ -1, %if.then5.i.i.i ], [ %20, %cond.true.i.i ], [ -1, %do.body.i.i.i.i ], [ -1, %if.then5.i.i.i.i ]
  ret i32 %retval.0
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @rtl_msleep_loop_wait_high(%struct.rtl8169_private* %tp, %struct.rtl_cond* nocapture readonly %c) unnamed_addr #0 {
entry:
  %check.i = getelementptr inbounds %struct.rtl_cond, %struct.rtl_cond* %c, i64 0, i32 0
  call void @msleep(i32 10) #9
  %0 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i = call zeroext i1 %0(%struct.rtl8169_private* %tp) #9
  br i1 %call.i, label %rtl_loop_wait.exit, label %for.cond.i

for.cond.i:                                       ; preds = %entry
  call void @msleep(i32 10) #9
  %1 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i.1 = call zeroext i1 %1(%struct.rtl8169_private* %tp) #9
  br i1 %call.i.1, label %rtl_loop_wait.exit, label %for.cond.i.1

if.then5.i:                                       ; preds = %for.cond.i.9
  %dev.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %2 = load %struct.net_device*, %struct.net_device** %dev.i, align 8
  %msg.i = getelementptr inbounds %struct.rtl_cond, %struct.rtl_cond* %c, i64 0, i32 1
  %3 = load i8*, i8** %msg.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* %3, i32 0, i32 10, i32 10) #9
  br label %rtl_loop_wait.exit

rtl_loop_wait.exit:                               ; preds = %entry, %for.cond.i, %for.cond.i.1, %for.cond.i.2, %for.cond.i.3, %for.cond.i.4, %for.cond.i.5, %for.cond.i.6, %for.cond.i.7, %for.cond.i.8, %for.cond.i.9, %if.then5.i
  ret void

for.cond.i.1:                                     ; preds = %for.cond.i
  call void @msleep(i32 10) #9
  %4 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i.2 = call zeroext i1 %4(%struct.rtl8169_private* %tp) #9
  br i1 %call.i.2, label %rtl_loop_wait.exit, label %for.cond.i.2

for.cond.i.2:                                     ; preds = %for.cond.i.1
  call void @msleep(i32 10) #9
  %5 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i.3 = call zeroext i1 %5(%struct.rtl8169_private* %tp) #9
  br i1 %call.i.3, label %rtl_loop_wait.exit, label %for.cond.i.3

for.cond.i.3:                                     ; preds = %for.cond.i.2
  call void @msleep(i32 10) #9
  %6 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i.4 = call zeroext i1 %6(%struct.rtl8169_private* %tp) #9
  br i1 %call.i.4, label %rtl_loop_wait.exit, label %for.cond.i.4

for.cond.i.4:                                     ; preds = %for.cond.i.3
  call void @msleep(i32 10) #9
  %7 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i.5 = call zeroext i1 %7(%struct.rtl8169_private* %tp) #9
  br i1 %call.i.5, label %rtl_loop_wait.exit, label %for.cond.i.5

for.cond.i.5:                                     ; preds = %for.cond.i.4
  call void @msleep(i32 10) #9
  %8 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i.6 = call zeroext i1 %8(%struct.rtl8169_private* %tp) #9
  br i1 %call.i.6, label %rtl_loop_wait.exit, label %for.cond.i.6

for.cond.i.6:                                     ; preds = %for.cond.i.5
  call void @msleep(i32 10) #9
  %9 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i.7 = call zeroext i1 %9(%struct.rtl8169_private* %tp) #9
  br i1 %call.i.7, label %rtl_loop_wait.exit, label %for.cond.i.7

for.cond.i.7:                                     ; preds = %for.cond.i.6
  call void @msleep(i32 10) #9
  %10 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i.8 = call zeroext i1 %10(%struct.rtl8169_private* %tp) #9
  br i1 %call.i.8, label %rtl_loop_wait.exit, label %for.cond.i.8

for.cond.i.8:                                     ; preds = %for.cond.i.7
  call void @msleep(i32 10) #9
  %11 = load i1 (%struct.rtl8169_private*)*, i1 (%struct.rtl8169_private*)** %check.i, align 8
  %call.i.9 = call zeroext i1 %11(%struct.rtl8169_private* %tp) #9
  br i1 %call.i.9, label %rtl_loop_wait.exit, label %for.cond.i.9

for.cond.i.9:                                     ; preds = %for.cond.i.8
  %msg_enable.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %12 = load i32, i32* %msg_enable.i, align 8
  %and.i = and i32 %12, 1
  %tobool4.i = icmp eq i32 %and.i, 0
  br i1 %tobool4.i, label %rtl_loop_wait.exit, label %if.then5.i
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @ocp_write(%struct.rtl8169_private* nocapture readonly %tp, i16 zeroext %reg, i32 %data) unnamed_addr #0 {
entry:
  %mac_version = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %0 = load i16, i16* %mac_version, align 2
  switch i16 %0, label %do.body [
    i16 26, label %sw.bb
    i16 27, label %sw.bb
    i16 30, label %sw.bb
    i16 48, label %sw.bb1
    i16 49, label %sw.bb1
    i16 50, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  %mmio_addr.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %1 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i = getelementptr i8, i8* %1, i64 176
  %2 = bitcast i8* %add.ptr.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %data, i32* %2) #10, !srcloc !8
  %3 = and i16 %reg, 4095
  %and2.i = zext i16 %3 to i32
  %or3.i = or i32 %and2.i, -2147479552
  %add.ptr4.i = getelementptr i8, i8* %1, i64 180
  %4 = bitcast i8* %add.ptr4.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or3.i, i32* %4) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i = icmp ult i32 %i.017.i.i.i, 19
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %sw.bb
  %i.017.i.i.i = phi i32 [ 0, %sw.bb ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %5 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i = getelementptr i8, i8* %5, i64 180
  %6 = bitcast i8* %add.ptr.i.i to i32*
  %7 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %6) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %7, 0
  br i1 %tobool.i.i, label %for.cond.i.i.i, label %sw.epilog

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %8 = load i32, i32* %msg_enable.i.i.i, align 8
  %and.i.i.i = and i32 %8, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %sw.epilog, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %9 = load %struct.net_device*, %struct.net_device** %dev.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %9, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0), i32 1, i32 20, i32 100) #9
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry, %entry, %entry
  %conv.i = zext i16 %reg to i32
  %mmio_addr.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 0
  %10 = load i8*, i8** %mmio_addr.i.i, align 8
  %and.i.i = and i32 %conv.i, 3
  %tobool.i.i1 = icmp eq i32 %and.i.i, 0
  br i1 %tobool.i.i1, label %do.end8.i.i, label %do.body3.i.i, !prof !9

do.body3.i.i:                                     ; preds = %sw.bb1
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 1263, i64 12) #10, !srcloc !45
  br label %do.body4.i.i

do.body4.i.i:                                     ; preds = %do.body4.i.i, %do.body3.i.i
  br label %do.body4.i.i

do.end8.i.i:                                      ; preds = %sw.bb1
  %add.ptr.i.i2 = getelementptr i8, i8* %10, i64 112
  %11 = bitcast i8* %add.ptr.i.i2 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %data, i32* %11) #10, !srcloc !8
  %or10.i.i = or i32 %conv.i, -2147348480
  %add.ptr11.i.i = getelementptr i8, i8* %10, i64 116
  %12 = bitcast i8* %add.ptr11.i.i to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 %or10.i.i, i32* %12) #10, !srcloc !8
  br label %for.body.i.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %inc.i.i.i.i = add nuw nsw i32 %i.017.i.i.i.i, 1
  %cmp.i.i.i.i = icmp ult i32 %i.017.i.i.i.i, 99
  br i1 %cmp.i.i.i.i, label %for.body.i.i.i.i, label %do.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.cond.i.i.i.i, %do.end8.i.i
  %i.017.i.i.i.i = phi i32 [ 0, %do.end8.i.i ], [ %inc.i.i.i.i, %for.cond.i.i.i.i ]
  call void @__udelay(i64 100) #9
  %13 = load i8*, i8** %mmio_addr.i.i, align 8
  %add.ptr.i.i.i = getelementptr i8, i8* %13, i64 116
  %14 = bitcast i8* %add.ptr.i.i.i to i32*
  %15 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %14) #10, !srcloc !2
  %tobool.i.i.i = icmp slt i32 %15, 0
  br i1 %tobool.i.i.i, label %for.cond.i.i.i.i, label %sw.epilog

do.body.i.i.i.i:                                  ; preds = %for.cond.i.i.i.i
  %msg_enable.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 4
  %16 = load i32, i32* %msg_enable.i.i.i.i, align 8
  %and.i.i.i.i = and i32 %16, 1
  %tobool4.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool4.i.i.i.i, label %sw.epilog, label %if.then5.i.i.i.i

if.then5.i.i.i.i:                                 ; preds = %do.body.i.i.i.i
  %dev.i.i.i.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 2
  %17 = load %struct.net_device*, %struct.net_device** %dev.i.i.i.i, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %17, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 1, i32 100, i32 100) #9
  br label %sw.epilog

do.body:                                          ; preds = %entry
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0), i32 1351, i64 12) #10, !srcloc !47
  br label %do.body2

do.body2:                                         ; preds = %do.body2, %do.body
  br label %do.body2

sw.epilog:                                        ; preds = %for.body.i.i.i.i, %for.body.i.i.i, %if.then5.i.i.i.i, %do.body.i.i.i.i, %if.then5.i.i.i, %do.body.i.i.i
  ret void
}

; Function Attrs: noredzone nounwind sspstrong
define internal zeroext i1 @rtl_ocp_read_cond_check(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %mac_version.i = getelementptr inbounds %struct.rtl8169_private, %struct.rtl8169_private* %tp, i64 0, i32 6
  %0 = load i16, i16* %mac_version.i, align 2
  %cmp.i = icmp eq i16 %0, 30
  %conv2.i = select i1 %cmp.i, i16 184, i16 16
  %call1 = call fastcc i32 @ocp_read(%struct.rtl8169_private* %tp, i8 zeroext 15, i16 zeroext %conv2.i) #11
  %and = and i32 %call1, 2048
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

; Function Attrs: noredzone nounwind sspstrong
define internal zeroext i1 @rtl_ep_ocp_read_cond_check(%struct.rtl8169_private* nocapture readonly %tp) #0 {
entry:
  %call = call fastcc i32 @ocp_read(%struct.rtl8169_private* %tp, i8 zeroext 15, i16 zeroext 292) #11
  %and = and i32 %call, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

; Function Attrs: noredzone
declare void @pci_disable_msi(%struct.pci_dev*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @unregister_netdev(%struct.net_device*) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @pci_wake_from_d3(%struct.pci_dev*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: noredzone
declare i32 @pci_set_power_state(%struct.pci_dev*, i32) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @netif_device_detach(%struct.net_device*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @pci_clear_master(%struct.pci_dev*) local_unnamed_addr #1

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_suspend(%struct.device* nocapture readonly %device) #0 {
entry:
  %add.ptr = getelementptr %struct.device, %struct.device* %device, i64 -1, i32 20, i32 1
  %driver_data.i.i = getelementptr inbounds %struct.list_head*, %struct.list_head** %add.ptr, i64 39
  %0 = bitcast %struct.list_head** %driver_data.i.i to %struct.net_device**
  %1 = load %struct.net_device*, %struct.net_device** %0, align 8
  %add.ptr.i.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2112
  %2 = bitcast i8* %add.ptr.i.i to %struct.rtl8169_private*
  %state.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %1, i64 0, i32 8
  %3 = load volatile i64, i64* %state.i.i, align 8
  %and1.i.i.i = and i64 %3, 1
  %cmp.i.i.i = icmp eq i64 %and1.i.i.i, 0
  br i1 %cmp.i.i.i, label %rtl8169_net_suspend.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  call void @netif_device_detach(%struct.net_device* nonnull %1) #9
  %_tx.i.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %1, i64 0, i32 88
  %4 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i.i, align 64
  %state.i.i.i = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %4, i64 0, i32 10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %state.i.i.i, i64 0, i64* %state.i.i.i) #10, !srcloc !19
  %mutex.i10.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 5720
  %5 = bitcast i8* %mutex.i10.i to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %5) #9
  %napi.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2136
  %6 = bitcast i8* %napi.i to %struct.napi_struct*
  call void @napi_disable(%struct.napi_struct* %6) #9
  %wk.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 5712
  %arraydecay.i = bitcast i8* %wk.i to i64*
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay.i, i64 0, i64* %arraydecay.i) #10, !srcloc !20
  call void @mutex_unlock(%struct.mutex* %5) #9
  %down.i.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 5600
  %7 = bitcast i8* %down.i.i to void (%struct.rtl8169_private*)**
  %8 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %7, align 8
  %tobool.i.i.i = icmp eq void (%struct.rtl8169_private*)* %8, null
  br i1 %tobool.i.i.i, label %rtl8169_net_suspend.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.end.i
  call void %8(%struct.rtl8169_private* nonnull %2) #9
  br label %rtl8169_net_suspend.exit

rtl8169_net_suspend.exit:                         ; preds = %entry, %if.end.i, %if.then.i.i.i
  ret i32 0
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_resume(%struct.device* nocapture readonly %device) #0 {
entry:
  %add.ptr = getelementptr %struct.device, %struct.device* %device, i64 -1, i32 20, i32 1
  %driver_data.i.i = getelementptr inbounds %struct.list_head*, %struct.list_head** %add.ptr, i64 39
  %0 = bitcast %struct.list_head** %driver_data.i.i to %struct.net_device**
  %1 = load %struct.net_device*, %struct.net_device** %0, align 8
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2112
  %2 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  call fastcc void @rtl8169_init_phy(%struct.net_device* %1, %struct.rtl8169_private* %2) #11
  %state.i = getelementptr inbounds %struct.net_device, %struct.net_device* %1, i64 0, i32 8
  %3 = load volatile i64, i64* %state.i, align 8
  %and1.i.i = and i64 %3, 1
  %cmp.i.i = icmp eq i64 %and1.i.i, 0
  br i1 %cmp.i.i, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call fastcc void @__rtl8169_resume(%struct.net_device* %1) #11
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret i32 0
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_runtime_suspend(%struct.device* nocapture readonly %device) #0 {
entry:
  %add.ptr = getelementptr %struct.device, %struct.device* %device, i64 -1, i32 20, i32 1
  %driver_data.i.i = getelementptr inbounds %struct.list_head*, %struct.list_head** %add.ptr, i64 39
  %0 = bitcast %struct.list_head** %driver_data.i.i to %struct.net_device**
  %1 = load %struct.net_device*, %struct.net_device** %0, align 8
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2112
  %2 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %TxDescArray = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2392
  %3 = bitcast i8* %TxDescArray to %struct.TxDesc**
  %4 = load %struct.TxDesc*, %struct.TxDesc** %3, align 8
  %tobool = icmp eq %struct.TxDesc* %4, null
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %mutex.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 5720
  %5 = bitcast i8* %mutex.i to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %5) #9
  %mmio_addr.i = bitcast i8* %add.ptr.i to i8**
  %6 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i15 = getelementptr i8, i8* %6, i64 82
  %7 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr.i15) #10, !srcloc !6
  %8 = and i8 %7, 1
  %tobool.i = icmp eq i8 %8, 0
  br i1 %tobool.i, label %__rtl8169_get_wol.exit, label %if.end.i16

if.end.i16:                                       ; preds = %if.end
  %add.ptr1.i = getelementptr i8, i8* %6, i64 84
  %9 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr1.i) #10, !srcloc !6
  %conv3.i = zext i8 %9 to i32
  %and4.i = lshr i32 %conv3.i, 4
  %and4.lobit.i = and i32 %and4.i, 1
  %mac_version.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2342
  %10 = bitcast i8* %mac_version.i to i16*
  %11 = load i16, i16* %10, align 2
  switch i16 %11, label %sw.default.i [
    i16 33, label %sw.bb.i
    i16 34, label %sw.bb.i
    i16 35, label %sw.bb.i
    i16 36, label %sw.bb.i
    i16 37, label %sw.bb.i
    i16 39, label %sw.bb.i
    i16 40, label %sw.bb.i
    i16 41, label %sw.bb.i
    i16 42, label %sw.bb.i
    i16 43, label %sw.bb.i
    i16 44, label %sw.bb.i
    i16 45, label %sw.bb.i
    i16 46, label %sw.bb.i
    i16 47, label %sw.bb.i
    i16 48, label %sw.bb.i
    i16 49, label %sw.bb.i
    i16 50, label %sw.bb.i
  ]

sw.bb.i:                                          ; preds = %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16, %if.end.i16
  %12 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i19 = getelementptr i8, i8* %12, i64 116
  %13 = bitcast i8* %add.ptr.i19 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 61660, i32* %13) #10, !srcloc !8
  br label %for.body.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %inc.i.i.i = add nuw nsw i32 %i.017.i.i.i, 1
  %cmp.i.i.i20 = icmp ult i32 %i.017.i.i.i, 99
  br i1 %cmp.i.i.i20, label %for.body.i.i.i, label %do.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i, %sw.bb.i
  %i.017.i.i.i = phi i32 [ 0, %sw.bb.i ], [ %inc.i.i.i, %for.cond.i.i.i ]
  call void @__udelay(i64 100) #9
  %14 = load i8*, i8** %mmio_addr.i, align 8
  %add.ptr.i.i21 = getelementptr i8, i8* %14, i64 116
  %15 = bitcast i8* %add.ptr.i.i21 to i32*
  %16 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %15) #10, !srcloc !2
  %tobool.i.i = icmp slt i32 %16, 0
  br i1 %tobool.i.i, label %cond.true.i, label %for.cond.i.i.i

do.body.i.i.i:                                    ; preds = %for.cond.i.i.i
  %msg_enable.i.i.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2336
  %17 = bitcast i8* %msg_enable.i.i.i to i32*
  %18 = load i32, i32* %17, align 8
  %and.i.i.i = and i32 %18, 1
  %tobool4.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool4.i.i.i, label %sw.epilog.i.thread, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %dev.i.i.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2128
  %19 = bitcast i8* %dev.i.i.i to %struct.net_device**
  %20 = load %struct.net_device*, %struct.net_device** %19, align 8
  call void (%struct.net_device*, i8*, ...) @netdev_err(%struct.net_device* %20, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), i32 0, i32 100, i32 100) #9
  br label %sw.epilog.i.thread

cond.true.i:                                      ; preds = %for.body.i.i.i
  %add.ptr3.i = getelementptr i8, i8* %12, i64 112
  %21 = bitcast i8* %add.ptr3.i to i32*
  %22 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %21) #10, !srcloc !2
  %phitmp = and i32 %22, 65536
  br label %sw.epilog.i

sw.default.i:                                     ; preds = %if.end.i16
  %and16.i = and i32 %conv3.i, 32
  br label %sw.epilog.i

sw.epilog.i.thread:                               ; preds = %do.body.i.i.i, %if.then5.i.i.i
  %or19.i23 = or i32 %and4.lobit.i, 32
  br label %23

sw.epilog.i:                                      ; preds = %cond.true.i, %sw.default.i
  %and16.sink.i = phi i32 [ %and16.i, %sw.default.i ], [ %phitmp, %cond.true.i ]
  %tobool17.i = icmp eq i32 %and16.sink.i, 0
  %or19.i = or i32 %and4.lobit.i, 32
  %and4.lobit.i.or19.i = select i1 %tobool17.i, i32 %and4.lobit.i, i32 %or19.i
  br label %23

; <label>:23:                                     ; preds = %sw.epilog.i, %sw.epilog.i.thread
  %24 = phi i32 [ %or19.i23, %sw.epilog.i.thread ], [ %and4.lobit.i.or19.i, %sw.epilog.i ]
  %add.ptr21.i = getelementptr i8, i8* %6, i64 86
  %25 = call i8 asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr21.i) #10, !srcloc !6
  %conv23.i = zext i8 %25 to i32
  %and24.i = lshr i32 %conv23.i, 3
  %26 = and i32 %and24.i, 2
  %27 = or i32 %26, %24
  %28 = and i32 %and24.i, 8
  %29 = or i32 %27, %28
  %30 = and i32 %and24.i, 4
  %31 = or i32 %29, %30
  br label %__rtl8169_get_wol.exit

__rtl8169_get_wol.exit:                           ; preds = %if.end, %23
  %retval.0.i = phi i32 [ %31, %23 ], [ 0, %if.end ]
  %saved_wolopts = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 5888
  %32 = bitcast i8* %saved_wolopts to i32*
  store i32 %retval.0.i, i32* %32, align 8
  call fastcc void @__rtl8169_set_wol(%struct.rtl8169_private* nonnull %2, i32 47) #11
  call void @mutex_unlock(%struct.mutex* %5) #9
  %state.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %1, i64 0, i32 8
  %33 = load volatile i64, i64* %state.i.i, align 8
  %and1.i.i.i = and i64 %33, 1
  %cmp.i.i.i = icmp eq i64 %and1.i.i.i, 0
  br i1 %cmp.i.i.i, label %cleanup, label %if.end.i

if.end.i:                                         ; preds = %__rtl8169_get_wol.exit
  call void @netif_device_detach(%struct.net_device* nonnull %1) #9
  %_tx.i.i.i = getelementptr inbounds %struct.net_device, %struct.net_device* %1, i64 0, i32 88
  %34 = load %struct.netdev_queue*, %struct.netdev_queue** %_tx.i.i.i, align 64
  %state.i.i.i = getelementptr inbounds %struct.netdev_queue, %struct.netdev_queue* %34, i64 0, i32 10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %state.i.i.i, i64 0, i64* %state.i.i.i) #10, !srcloc !19
  call void @mutex_lock(%struct.mutex* nonnull %5) #9
  %napi.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2136
  %35 = bitcast i8* %napi.i to %struct.napi_struct*
  call void @napi_disable(%struct.napi_struct* %35) #9
  %wk.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 5712
  %arraydecay.i = bitcast i8* %wk.i to i64*
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay.i, i64 0, i64* %arraydecay.i) #10, !srcloc !20
  call void @mutex_unlock(%struct.mutex* nonnull %5) #9
  %down.i.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 5600
  %36 = bitcast i8* %down.i.i to void (%struct.rtl8169_private*)**
  %37 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %36, align 8
  %tobool.i.i.i = icmp eq void (%struct.rtl8169_private*)* %37, null
  br i1 %tobool.i.i.i, label %cleanup, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.end.i
  call void %37(%struct.rtl8169_private* nonnull %2) #9
  br label %cleanup

cleanup:                                          ; preds = %if.then.i.i.i, %if.end.i, %__rtl8169_get_wol.exit, %entry
  ret i32 0
}

; Function Attrs: noredzone nounwind sspstrong
define internal i32 @rtl8169_runtime_resume(%struct.device* nocapture readonly %device) #0 {
entry:
  %add.ptr = getelementptr %struct.device, %struct.device* %device, i64 -1, i32 20, i32 1
  %driver_data.i.i = getelementptr inbounds %struct.list_head*, %struct.list_head** %add.ptr, i64 39
  %0 = bitcast %struct.list_head** %driver_data.i.i to %struct.net_device**
  %1 = load %struct.net_device*, %struct.net_device** %0, align 8
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2112
  %2 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  %TxDescArray = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2392
  %3 = bitcast i8* %TxDescArray to %struct.TxDesc**
  %4 = load %struct.TxDesc*, %struct.TxDesc** %3, align 8
  %tobool = icmp eq %struct.TxDesc* %4, null
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %mutex.i = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 5720
  %5 = bitcast i8* %mutex.i to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %5) #9
  %saved_wolopts = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 5888
  %6 = bitcast i8* %saved_wolopts to i32*
  %7 = load i32, i32* %6, align 8
  call fastcc void @__rtl8169_set_wol(%struct.rtl8169_private* %2, i32 %7) #11
  store i32 0, i32* %6, align 8
  call void @mutex_unlock(%struct.mutex* %5) #9
  call fastcc void @rtl8169_init_phy(%struct.net_device* %1, %struct.rtl8169_private* %2) #11
  call fastcc void @__rtl8169_resume(%struct.net_device* %1) #11
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end
  ret i32 0
}

; Function Attrs: norecurse noredzone nounwind readonly sspstrong
define internal i32 @rtl8169_runtime_idle(%struct.device* nocapture readonly %device) #5 {
entry:
  %add.ptr = getelementptr %struct.device, %struct.device* %device, i64 -1, i32 20, i32 1
  %driver_data.i.i = getelementptr inbounds %struct.list_head*, %struct.list_head** %add.ptr, i64 39
  %0 = bitcast %struct.list_head** %driver_data.i.i to %struct.net_device**
  %1 = load %struct.net_device*, %struct.net_device** %0, align 8
  %TxDescArray = getelementptr %struct.net_device, %struct.net_device* %1, i64 0, i32 0, i64 2392
  %2 = bitcast i8* %TxDescArray to %struct.TxDesc**
  %3 = load %struct.TxDesc*, %struct.TxDesc** %2, align 8
  %tobool = icmp eq %struct.TxDesc* %3, null
  %cond = select i1 %tobool, i32 0, i32 -16
  ret i32 %cond
}

; Function Attrs: noredzone nounwind sspstrong
define internal fastcc void @__rtl8169_resume(%struct.net_device* %dev) unnamed_addr #0 {
entry:
  %c.i.i = alloca i8, align 1
  call void @netif_device_attach(%struct.net_device* %dev) #9
  %up.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5608
  %0 = bitcast i8* %up.i to void (%struct.rtl8169_private*)**
  %1 = load void (%struct.rtl8169_private*)*, void (%struct.rtl8169_private*)** %0, align 8
  %tobool.i.i = icmp eq void (%struct.rtl8169_private*)* %1, null
  br i1 %tobool.i.i, label %rtl_pll_power_up.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %entry
  %add.ptr.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2112
  %2 = bitcast i8* %add.ptr.i to %struct.rtl8169_private*
  call void %1(%struct.rtl8169_private* nonnull %2) #9
  br label %rtl_pll_power_up.exit

rtl_pll_power_up.exit:                            ; preds = %entry, %if.then.i.i
  %mutex.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5720
  %3 = bitcast i8* %mutex.i to %struct.mutex*
  call void @mutex_lock(%struct.mutex* %3) #9
  %state.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 2152
  %4 = bitcast i8* %state.i to i64*
  %5 = load volatile i64, i64* %4, align 8
  %6 = and i64 %5, 1
  %tobool.i = icmp eq i64 %6, 0
  br i1 %tobool.i, label %do.body4.i, label %napi_enable.exit, !prof !10

do.body4.i:                                       ; preds = %rtl_pll_power_up.exit
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.38, i64 0, i64 0), i32 511, i64 12) #10, !srcloc !35
  br label %do.body5.i

do.body5.i:                                       ; preds = %do.body5.i, %do.body4.i
  br label %do.body5.i

napi_enable.exit:                                 ; preds = %rtl_pll_power_up.exit
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !36
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %4, i64 0, i64* %4) #10, !srcloc !20
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %4, i64 2, i64* %4) #10, !srcloc !20
  %wk = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5712
  %arraydecay = bitcast i8* %wk to i64*
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay, i64 0, i64* %arraydecay) #10, !srcloc !19
  call void @mutex_unlock(%struct.mutex* %3) #9
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %c.i.i) #10
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $2, $0; setc $1", "=*m,=*qm,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay, i8* nonnull %c.i.i, i64 2, i64* %arraydecay) #10, !srcloc !23
  %7 = load i8, i8* %c.i.i, align 1
  %cmp.i.i = icmp eq i8 %7, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %c.i.i) #10
  br i1 %cmp.i.i, label %if.then.i, label %rtl_schedule_task.exit

if.then.i:                                        ; preds = %napi_enable.exit
  %work.i = getelementptr %struct.net_device, %struct.net_device* %dev, i64 0, i32 0, i64 5760
  %8 = bitcast i8* %work.i to %struct.work_struct*
  %9 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %call.i.i.i = call zeroext i1 @queue_work_on(i32 512, %struct.workqueue_struct* %9, %struct.work_struct* %8) #9
  br label %rtl_schedule_task.exit

rtl_schedule_task.exit:                           ; preds = %napi_enable.exit, %if.then.i
  ret void
}

; Function Attrs: noredzone
declare void @netif_device_attach(%struct.net_device*) local_unnamed_addr #1

; Function Attrs: noredzone
declare void @pci_unregister_driver(%struct.pci_driver*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #8

attributes #0 = { noredzone nounwind sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "fentry-call"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-avx512vpopcntdq,-f16c,-fma,-fma4,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noredzone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-avx512vpopcntdq,-f16c,-fma,-fma4,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse noredzone nounwind readnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "fentry-call"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-avx512vpopcntdq,-f16c,-fma,-fma4,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noredzone nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-avx512vpopcntdq,-f16c,-fma,-fma4,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse noredzone nounwind readonly sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "fentry-call"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-avx512vpopcntdq,-f16c,-fma,-fma4,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse noredzone nounwind sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "fentry-call"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-avx512vpopcntdq,-f16c,-fma,-fma4,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inaccessiblemem_or_argmemonly nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { noredzone nounwind }
attributes #10 = { nounwind }
attributes #11 = { noredzone }
attributes #12 = { noredzone nounwind readonly }
attributes #13 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.0 (tags/RELEASE_500/final)"}
!2 = !{i32 -2145179967}
!3 = !{i32 -2145178505}
!4 = !{i32 -2140891277}
!5 = !{i32 -2145178780}
!6 = !{i32 -2145180580}
!7 = !{i32 -2140891369}
!8 = !{i32 -2145178228}
!9 = !{!"branch_weights", i32 2000, i32 1}
!10 = !{!"branch_weights", i32 1, i32 2000}
!11 = !{i32 -2143568236, i32 -2143568211, i32 -2143567941, i32 -2143568144, i32 -2143568113, i32 -2143568083}
!12 = !{i32 -2140892905, i32 -2140892880, i32 -2140892610, i32 -2140892813, i32 -2140892782, i32 -2140892752}
!13 = !{i32 -2145938980, i32 -2145938941, i32 -2145938920, i32 -2145938883, i32 -2145938860, i32 -2145938851}
!14 = !{!"branch_weights", i32 4002001, i32 2000}
!15 = !{i32 -2143567625, i32 -2143567600, i32 -2143567330, i32 -2143567533, i32 -2143567502, i32 -2143567472}
!16 = !{i32 -2146044440, i32 -2146043074, i32 -2146043052, i32 -2146043039, i32 -2146042716, i32 -2146042649, i32 -2146042947, i32 -2146042920, i32 -2146042892, i32 -2146042862}
!17 = !{i32 -2140892461, i32 -2140892436, i32 -2140892166, i32 -2140892369, i32 -2140892338, i32 -2140892308}
!18 = !{i32 -2145950136, i32 -2145950097, i32 -2145950076, i32 -2145950039, i32 -2145950016, i32 -2145950146}
!19 = !{i32 -2146750700, i32 -2146750661, i32 -2146750640, i32 -2146750603, i32 -2146750580, i32 -2146750710}
!20 = !{i32 -2146749992, i32 -2146749953, i32 -2146749932, i32 -2146749895, i32 -2146749872, i32 -2146750002}
!21 = !{i32 -2145180275}
!22 = !{i32 -2140804538}
!23 = !{i32 -2146748254, i32 -2146748215, i32 -2146748194, i32 -2146748157, i32 -2146748134, i32 -2146748125}
!24 = !{i32 -2140816886}
!25 = !{i32 -2140805708}
!26 = !{i32 -2140805585}
!27 = !{i32 -2140805527}
!28 = !{i32 -2140802178}
!29 = !{i32 -2142514420, i32 -2142514395, i32 -2142514125, i32 -2142514328, i32 -2142514297, i32 -2142514267}
!30 = !{!"branch_weights", i32 1, i32 4004000}
!31 = !{i32 781259}
!32 = !{i32 -2140801053}
!33 = distinct !{!33, !34}
!34 = !{!"llvm.loop.unroll.disable"}
!35 = !{i32 -2141930919, i32 -2141930894, i32 -2141930624, i32 -2141930827, i32 -2141930796, i32 -2141930766}
!36 = !{i32 -2141930487}
!37 = !{i8 0, i8 2}
!38 = !{i32 -2140807397}
!39 = !{i32 -2140807314}
!40 = !{i32 -2140807217}
!41 = !{i32 -2140806951}
!42 = !{i32 -2140806905}
!43 = !{i32 -2146747261, i32 -2146747222, i32 -2146747201, i32 -2146747164, i32 -2146747141, i32 -2146747132}
!44 = !{i32 -2140874254, i32 -2140874229, i32 -2140873959, i32 -2140874162, i32 -2140874131, i32 -2140874101}
!45 = !{i32 -2140896411, i32 -2140896386, i32 -2140896116, i32 -2140896319, i32 -2140896288, i32 -2140896258}
!46 = !{i32 -2140895564, i32 -2140895539, i32 -2140895269, i32 -2140895472, i32 -2140895441, i32 -2140895411}
!47 = !{i32 -2140894948, i32 -2140894923, i32 -2140894653, i32 -2140894856, i32 -2140894825, i32 -2140894795}
